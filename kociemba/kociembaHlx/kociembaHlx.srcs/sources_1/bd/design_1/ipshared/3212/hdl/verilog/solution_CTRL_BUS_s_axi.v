// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1ns/1ps
module solution_CTRL_BUS_s_axi
#(parameter
    C_S_AXI_ADDR_WIDTH = 8,
    C_S_AXI_DATA_WIDTH = 32
)(
    // axi4 lite slave signals
    input  wire                          ACLK,
    input  wire                          ARESET,
    input  wire                          ACLK_EN,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] AWADDR,
    input  wire                          AWVALID,
    output wire                          AWREADY,
    input  wire [C_S_AXI_DATA_WIDTH-1:0] WDATA,
    input  wire [C_S_AXI_DATA_WIDTH/8-1:0] WSTRB,
    input  wire                          WVALID,
    output wire                          WREADY,
    output wire [1:0]                    BRESP,
    output wire                          BVALID,
    input  wire                          BREADY,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] ARADDR,
    input  wire                          ARVALID,
    output wire                          ARREADY,
    output wire [C_S_AXI_DATA_WIDTH-1:0] RDATA,
    output wire [1:0]                    RRESP,
    output wire                          RVALID,
    input  wire                          RREADY,
    output wire                          interrupt,
    // user signals
    output wire                          ap_start,
    input  wire                          ap_done,
    input  wire                          ap_ready,
    input  wire                          ap_idle,
    input  wire [5:0]                    facelets_address0,
    input  wire                          facelets_ce0,
    output wire [7:0]                    facelets_q0,
    output wire [7:0]                    maxDepth,
    input  wire [0:0]                    unsolvable,
    input  wire                          unsolvable_ap_vld,
    input  wire [7:0]                    encode_length,
    input  wire                          encode_length_ap_vld,
    input  wire [4:0]                    encode_array_address0,
    input  wire                          encode_array_ce0,
    input  wire                          encode_array_we0,
    input  wire [7:0]                    encode_array_d0,
    output wire [31:0]                   twistMove2,
    output wire [31:0]                   flipMove2,
    output wire [31:0]                   FRtoBR_Move2,
    output wire [31:0]                   URFtoDLF_Move2,
    output wire [31:0]                   URtoDF_Move2,
    output wire [31:0]                   URtoUL_Move2,
    output wire [31:0]                   UBtoDF_Move2,
    output wire [31:0]                   MergeURtoULandUBtoDF2,
    output wire [31:0]                   Slice_URFtoDLF_Parity_Prun2,
    output wire [31:0]                   Slice_URtoDF_Parity_Prun2,
    output wire [31:0]                   Slice_Twist_Prun2,
    output wire [31:0]                   Slice_Flip_Prun2
);
//------------------------Address Info-------------------
// 0x00 : Control signals
//        bit 0  - ap_start (Read/Write/COH)
//        bit 1  - ap_done (Read/COR)
//        bit 2  - ap_idle (Read)
//        bit 3  - ap_ready (Read)
//        bit 7  - auto_restart (Read/Write)
//        others - reserved
// 0x04 : Global Interrupt Enable Register
//        bit 0  - Global Interrupt Enable (Read/Write)
//        others - reserved
// 0x08 : IP Interrupt Enable Register (Read/Write)
//        bit 0  - Channel 0 (ap_done)
//        bit 1  - Channel 1 (ap_ready)
//        others - reserved
// 0x0c : IP Interrupt Status Register (Read/TOW)
//        bit 0  - Channel 0 (ap_done)
//        bit 1  - Channel 1 (ap_ready)
//        others - reserved
// 0x80 : Data signal of maxDepth
//        bit 7~0 - maxDepth[7:0] (Read/Write)
//        others  - reserved
// 0x84 : reserved
// 0x88 : Data signal of unsolvable
//        bit 0  - unsolvable[0] (Read)
//        others - reserved
// 0x8c : Control signal of unsolvable
//        bit 0  - unsolvable_ap_vld (Read/COR)
//        others - reserved
// 0x90 : Data signal of encode_length
//        bit 7~0 - encode_length[7:0] (Read)
//        others  - reserved
// 0x94 : Control signal of encode_length
//        bit 0  - encode_length_ap_vld (Read/COR)
//        others - reserved
// 0x10 : Data signal of twistMove2
//        bit 31~0 - twistMove2[31:0] (Read/Write)
// 0x14 : reserved
// 0x18 : Data signal of flipMove2
//        bit 31~0 - flipMove2[31:0] (Read/Write)
// 0x1c : reserved
// 0x20 : Data signal of FRtoBR_Move2
//        bit 31~0 - FRtoBR_Move2[31:0] (Read/Write)
// 0x24 : reserved
// 0x28 : Data signal of URFtoDLF_Move2
//        bit 31~0 - URFtoDLF_Move2[31:0] (Read/Write)
// 0x2c : reserved
// 0x30 : Data signal of URtoDF_Move2
//        bit 31~0 - URtoDF_Move2[31:0] (Read/Write)
// 0x34 : reserved
// 0x38 : Data signal of URtoUL_Move2
//        bit 31~0 - URtoUL_Move2[31:0] (Read/Write)
// 0x3c : reserved
// 0x98 : Data signal of UBtoDF_Move2
//        bit 31~0 - UBtoDF_Move2[31:0] (Read/Write)
// 0x9c : reserved
// 0xc0 : Data signal of MergeURtoULandUBtoDF2
//        bit 31~0 - MergeURtoULandUBtoDF2[31:0] (Read/Write)
// 0xc4 : reserved
// 0xc8 : Data signal of Slice_URFtoDLF_Parity_Prun2
//        bit 31~0 - Slice_URFtoDLF_Parity_Prun2[31:0] (Read/Write)
// 0xcc : reserved
// 0xd0 : Data signal of Slice_URtoDF_Parity_Prun2
//        bit 31~0 - Slice_URtoDF_Parity_Prun2[31:0] (Read/Write)
// 0xd4 : reserved
// 0xd8 : Data signal of Slice_Twist_Prun2
//        bit 31~0 - Slice_Twist_Prun2[31:0] (Read/Write)
// 0xdc : reserved
// 0xe0 : Data signal of Slice_Flip_Prun2
//        bit 31~0 - Slice_Flip_Prun2[31:0] (Read/Write)
// 0xe4 : reserved
// 0x40 ~
// 0x7f : Memory 'facelets' (54 * 8b)
//        Word n : bit [ 7: 0] - facelets[4n]
//                 bit [15: 8] - facelets[4n+1]
//                 bit [23:16] - facelets[4n+2]
//                 bit [31:24] - facelets[4n+3]
// 0xa0 ~
// 0xbf : Memory 'encode_array' (30 * 8b)
//        Word n : bit [ 7: 0] - encode_array[4n]
//                 bit [15: 8] - encode_array[4n+1]
//                 bit [23:16] - encode_array[4n+2]
//                 bit [31:24] - encode_array[4n+3]
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

//------------------------Parameter----------------------
localparam
    ADDR_AP_CTRL                            = 8'h00,
    ADDR_GIE                                = 8'h04,
    ADDR_IER                                = 8'h08,
    ADDR_ISR                                = 8'h0c,
    ADDR_MAXDEPTH_DATA_0                    = 8'h80,
    ADDR_MAXDEPTH_CTRL                      = 8'h84,
    ADDR_UNSOLVABLE_DATA_0                  = 8'h88,
    ADDR_UNSOLVABLE_CTRL                    = 8'h8c,
    ADDR_ENCODE_LENGTH_DATA_0               = 8'h90,
    ADDR_ENCODE_LENGTH_CTRL                 = 8'h94,
    ADDR_TWISTMOVE2_DATA_0                  = 8'h10,
    ADDR_TWISTMOVE2_CTRL                    = 8'h14,
    ADDR_FLIPMOVE2_DATA_0                   = 8'h18,
    ADDR_FLIPMOVE2_CTRL                     = 8'h1c,
    ADDR_FRTOBR_MOVE2_DATA_0                = 8'h20,
    ADDR_FRTOBR_MOVE2_CTRL                  = 8'h24,
    ADDR_URFTODLF_MOVE2_DATA_0              = 8'h28,
    ADDR_URFTODLF_MOVE2_CTRL                = 8'h2c,
    ADDR_URTODF_MOVE2_DATA_0                = 8'h30,
    ADDR_URTODF_MOVE2_CTRL                  = 8'h34,
    ADDR_URTOUL_MOVE2_DATA_0                = 8'h38,
    ADDR_URTOUL_MOVE2_CTRL                  = 8'h3c,
    ADDR_UBTODF_MOVE2_DATA_0                = 8'h98,
    ADDR_UBTODF_MOVE2_CTRL                  = 8'h9c,
    ADDR_MERGEURTOULANDUBTODF2_DATA_0       = 8'hc0,
    ADDR_MERGEURTOULANDUBTODF2_CTRL         = 8'hc4,
    ADDR_SLICE_URFTODLF_PARITY_PRUN2_DATA_0 = 8'hc8,
    ADDR_SLICE_URFTODLF_PARITY_PRUN2_CTRL   = 8'hcc,
    ADDR_SLICE_URTODF_PARITY_PRUN2_DATA_0   = 8'hd0,
    ADDR_SLICE_URTODF_PARITY_PRUN2_CTRL     = 8'hd4,
    ADDR_SLICE_TWIST_PRUN2_DATA_0           = 8'hd8,
    ADDR_SLICE_TWIST_PRUN2_CTRL             = 8'hdc,
    ADDR_SLICE_FLIP_PRUN2_DATA_0            = 8'he0,
    ADDR_SLICE_FLIP_PRUN2_CTRL              = 8'he4,
    ADDR_FACELETS_BASE                      = 8'h40,
    ADDR_FACELETS_HIGH                      = 8'h7f,
    ADDR_ENCODE_ARRAY_BASE                  = 8'ha0,
    ADDR_ENCODE_ARRAY_HIGH                  = 8'hbf,
    WRIDLE                                  = 2'd0,
    WRDATA                                  = 2'd1,
    WRRESP                                  = 2'd2,
    WRRESET                                 = 2'd3,
    RDIDLE                                  = 2'd0,
    RDDATA                                  = 2'd1,
    RDRESET                                 = 2'd2,
    ADDR_BITS         = 8;

//------------------------Local signal-------------------
    reg  [1:0]                    wstate = WRRESET;
    reg  [1:0]                    wnext;
    reg  [ADDR_BITS-1:0]          waddr;
    wire [31:0]                   wmask;
    wire                          aw_hs;
    wire                          w_hs;
    reg  [1:0]                    rstate = RDRESET;
    reg  [1:0]                    rnext;
    reg  [31:0]                   rdata;
    wire                          ar_hs;
    wire [ADDR_BITS-1:0]          raddr;
    // internal registers
    reg                           int_ap_idle;
    reg                           int_ap_ready;
    reg                           int_ap_done = 1'b0;
    reg                           int_ap_start = 1'b0;
    reg                           int_auto_restart = 1'b0;
    reg                           int_gie = 1'b0;
    reg  [1:0]                    int_ier = 2'b0;
    reg  [1:0]                    int_isr = 2'b0;
    reg  [7:0]                    int_maxDepth = 'b0;
    reg  [0:0]                    int_unsolvable = 'b0;
    reg                           int_unsolvable_ap_vld;
    reg  [7:0]                    int_encode_length = 'b0;
    reg                           int_encode_length_ap_vld;
    reg  [31:0]                   int_twistMove2 = 'b0;
    reg  [31:0]                   int_flipMove2 = 'b0;
    reg  [31:0]                   int_FRtoBR_Move2 = 'b0;
    reg  [31:0]                   int_URFtoDLF_Move2 = 'b0;
    reg  [31:0]                   int_URtoDF_Move2 = 'b0;
    reg  [31:0]                   int_URtoUL_Move2 = 'b0;
    reg  [31:0]                   int_UBtoDF_Move2 = 'b0;
    reg  [31:0]                   int_MergeURtoULandUBtoDF2 = 'b0;
    reg  [31:0]                   int_Slice_URFtoDLF_Parity_Prun2 = 'b0;
    reg  [31:0]                   int_Slice_URtoDF_Parity_Prun2 = 'b0;
    reg  [31:0]                   int_Slice_Twist_Prun2 = 'b0;
    reg  [31:0]                   int_Slice_Flip_Prun2 = 'b0;
    // memory signals
    wire [3:0]                    int_facelets_address0;
    wire                          int_facelets_ce0;
    wire                          int_facelets_we0;
    wire [3:0]                    int_facelets_be0;
    wire [31:0]                   int_facelets_d0;
    wire [31:0]                   int_facelets_q0;
    wire [3:0]                    int_facelets_address1;
    wire                          int_facelets_ce1;
    wire                          int_facelets_we1;
    wire [3:0]                    int_facelets_be1;
    wire [31:0]                   int_facelets_d1;
    wire [31:0]                   int_facelets_q1;
    reg                           int_facelets_read;
    reg                           int_facelets_write;
    reg  [1:0]                    int_facelets_shift;
    wire [2:0]                    int_encode_array_address0;
    wire                          int_encode_array_ce0;
    wire                          int_encode_array_we0;
    wire [3:0]                    int_encode_array_be0;
    wire [31:0]                   int_encode_array_d0;
    wire [31:0]                   int_encode_array_q0;
    wire [2:0]                    int_encode_array_address1;
    wire                          int_encode_array_ce1;
    wire                          int_encode_array_we1;
    wire [3:0]                    int_encode_array_be1;
    wire [31:0]                   int_encode_array_d1;
    wire [31:0]                   int_encode_array_q1;
    reg                           int_encode_array_read;
    reg                           int_encode_array_write;
    reg  [1:0]                    int_encode_array_shift;

//------------------------Instantiation------------------
// int_facelets
solution_CTRL_BUS_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 14 )
) int_facelets (
    .clk0     ( ACLK ),
    .address0 ( int_facelets_address0 ),
    .ce0      ( int_facelets_ce0 ),
    .we0      ( int_facelets_we0 ),
    .be0      ( int_facelets_be0 ),
    .d0       ( int_facelets_d0 ),
    .q0       ( int_facelets_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_facelets_address1 ),
    .ce1      ( int_facelets_ce1 ),
    .we1      ( int_facelets_we1 ),
    .be1      ( int_facelets_be1 ),
    .d1       ( int_facelets_d1 ),
    .q1       ( int_facelets_q1 )
);
// int_encode_array
solution_CTRL_BUS_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 8 )
) int_encode_array (
    .clk0     ( ACLK ),
    .address0 ( int_encode_array_address0 ),
    .ce0      ( int_encode_array_ce0 ),
    .we0      ( int_encode_array_we0 ),
    .be0      ( int_encode_array_be0 ),
    .d0       ( int_encode_array_d0 ),
    .q0       ( int_encode_array_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_encode_array_address1 ),
    .ce1      ( int_encode_array_ce1 ),
    .we1      ( int_encode_array_we1 ),
    .be1      ( int_encode_array_be1 ),
    .d1       ( int_encode_array_d1 ),
    .q1       ( int_encode_array_q1 )
);

//------------------------AXI write fsm------------------
assign AWREADY = (wstate == WRIDLE);
assign WREADY  = (wstate == WRDATA);
assign BRESP   = 2'b00;  // OKAY
assign BVALID  = (wstate == WRRESP);
assign wmask   = { {8{WSTRB[3]}}, {8{WSTRB[2]}}, {8{WSTRB[1]}}, {8{WSTRB[0]}} };
assign aw_hs   = AWVALID & AWREADY;
assign w_hs    = WVALID & WREADY;

// wstate
always @(posedge ACLK) begin
    if (ARESET)
        wstate <= WRRESET;
    else if (ACLK_EN)
        wstate <= wnext;
end

// wnext
always @(*) begin
    case (wstate)
        WRIDLE:
            if (AWVALID)
                wnext = WRDATA;
            else
                wnext = WRIDLE;
        WRDATA:
            if (WVALID)
                wnext = WRRESP;
            else
                wnext = WRDATA;
        WRRESP:
            if (BREADY)
                wnext = WRIDLE;
            else
                wnext = WRRESP;
        default:
            wnext = WRIDLE;
    endcase
end

// waddr
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (aw_hs)
            waddr <= AWADDR[ADDR_BITS-1:0];
    end
end

//------------------------AXI read fsm-------------------
assign ARREADY = (rstate == RDIDLE);
assign RDATA   = rdata;
assign RRESP   = 2'b00;  // OKAY
assign RVALID  = (rstate == RDDATA) & !int_facelets_read & !int_encode_array_read;
assign ar_hs   = ARVALID & ARREADY;
assign raddr   = ARADDR[ADDR_BITS-1:0];

// rstate
always @(posedge ACLK) begin
    if (ARESET)
        rstate <= RDRESET;
    else if (ACLK_EN)
        rstate <= rnext;
end

// rnext
always @(*) begin
    case (rstate)
        RDIDLE:
            if (ARVALID)
                rnext = RDDATA;
            else
                rnext = RDIDLE;
        RDDATA:
            if (RREADY & RVALID)
                rnext = RDIDLE;
            else
                rnext = RDDATA;
        default:
            rnext = RDIDLE;
    endcase
end

// rdata
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs) begin
            rdata <= 1'b0;
            case (raddr)
                ADDR_AP_CTRL: begin
                    rdata[0] <= int_ap_start;
                    rdata[1] <= int_ap_done;
                    rdata[2] <= int_ap_idle;
                    rdata[3] <= int_ap_ready;
                    rdata[7] <= int_auto_restart;
                end
                ADDR_GIE: begin
                    rdata <= int_gie;
                end
                ADDR_IER: begin
                    rdata <= int_ier;
                end
                ADDR_ISR: begin
                    rdata <= int_isr;
                end
                ADDR_MAXDEPTH_DATA_0: begin
                    rdata <= int_maxDepth[7:0];
                end
                ADDR_UNSOLVABLE_DATA_0: begin
                    rdata <= int_unsolvable[0:0];
                end
                ADDR_UNSOLVABLE_CTRL: begin
                    rdata[0] <= int_unsolvable_ap_vld;
                end
                ADDR_ENCODE_LENGTH_DATA_0: begin
                    rdata <= int_encode_length[7:0];
                end
                ADDR_ENCODE_LENGTH_CTRL: begin
                    rdata[0] <= int_encode_length_ap_vld;
                end
                ADDR_TWISTMOVE2_DATA_0: begin
                    rdata <= int_twistMove2[31:0];
                end
                ADDR_FLIPMOVE2_DATA_0: begin
                    rdata <= int_flipMove2[31:0];
                end
                ADDR_FRTOBR_MOVE2_DATA_0: begin
                    rdata <= int_FRtoBR_Move2[31:0];
                end
                ADDR_URFTODLF_MOVE2_DATA_0: begin
                    rdata <= int_URFtoDLF_Move2[31:0];
                end
                ADDR_URTODF_MOVE2_DATA_0: begin
                    rdata <= int_URtoDF_Move2[31:0];
                end
                ADDR_URTOUL_MOVE2_DATA_0: begin
                    rdata <= int_URtoUL_Move2[31:0];
                end
                ADDR_UBTODF_MOVE2_DATA_0: begin
                    rdata <= int_UBtoDF_Move2[31:0];
                end
                ADDR_MERGEURTOULANDUBTODF2_DATA_0: begin
                    rdata <= int_MergeURtoULandUBtoDF2[31:0];
                end
                ADDR_SLICE_URFTODLF_PARITY_PRUN2_DATA_0: begin
                    rdata <= int_Slice_URFtoDLF_Parity_Prun2[31:0];
                end
                ADDR_SLICE_URTODF_PARITY_PRUN2_DATA_0: begin
                    rdata <= int_Slice_URtoDF_Parity_Prun2[31:0];
                end
                ADDR_SLICE_TWIST_PRUN2_DATA_0: begin
                    rdata <= int_Slice_Twist_Prun2[31:0];
                end
                ADDR_SLICE_FLIP_PRUN2_DATA_0: begin
                    rdata <= int_Slice_Flip_Prun2[31:0];
                end
            endcase
        end
        else if (int_facelets_read) begin
            rdata <= int_facelets_q1;
        end
        else if (int_encode_array_read) begin
            rdata <= int_encode_array_q1;
        end
    end
end


//------------------------Register logic-----------------
assign interrupt                   = int_gie & (|int_isr);
assign ap_start                    = int_ap_start;
assign maxDepth                    = int_maxDepth;
assign twistMove2                  = int_twistMove2;
assign flipMove2                   = int_flipMove2;
assign FRtoBR_Move2                = int_FRtoBR_Move2;
assign URFtoDLF_Move2              = int_URFtoDLF_Move2;
assign URtoDF_Move2                = int_URtoDF_Move2;
assign URtoUL_Move2                = int_URtoUL_Move2;
assign UBtoDF_Move2                = int_UBtoDF_Move2;
assign MergeURtoULandUBtoDF2       = int_MergeURtoULandUBtoDF2;
assign Slice_URFtoDLF_Parity_Prun2 = int_Slice_URFtoDLF_Parity_Prun2;
assign Slice_URtoDF_Parity_Prun2   = int_Slice_URtoDF_Parity_Prun2;
assign Slice_Twist_Prun2           = int_Slice_Twist_Prun2;
assign Slice_Flip_Prun2            = int_Slice_Flip_Prun2;
// int_ap_start
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_start <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0] && WDATA[0])
            int_ap_start <= 1'b1;
        else if (ap_ready)
            int_ap_start <= int_auto_restart; // clear on handshake/auto restart
    end
end

// int_ap_done
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_done <= 1'b0;
    else if (ACLK_EN) begin
        if (ap_done)
            int_ap_done <= 1'b1;
        else if (ar_hs && raddr == ADDR_AP_CTRL)
            int_ap_done <= 1'b0; // clear on read
    end
end

// int_ap_idle
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_idle <= 1'b0;
    else if (ACLK_EN) begin
            int_ap_idle <= ap_idle;
    end
end

// int_ap_ready
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_ready <= 1'b0;
    else if (ACLK_EN) begin
            int_ap_ready <= ap_ready;
    end
end

// int_auto_restart
always @(posedge ACLK) begin
    if (ARESET)
        int_auto_restart <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0])
            int_auto_restart <=  WDATA[7];
    end
end

// int_gie
always @(posedge ACLK) begin
    if (ARESET)
        int_gie <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_GIE && WSTRB[0])
            int_gie <= WDATA[0];
    end
end

// int_ier
always @(posedge ACLK) begin
    if (ARESET)
        int_ier <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_IER && WSTRB[0])
            int_ier <= WDATA[1:0];
    end
end

// int_isr[0]
always @(posedge ACLK) begin
    if (ARESET)
        int_isr[0] <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier[0] & ap_done)
            int_isr[0] <= 1'b1;
        else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
            int_isr[0] <= int_isr[0] ^ WDATA[0]; // toggle on write
    end
end

// int_isr[1]
always @(posedge ACLK) begin
    if (ARESET)
        int_isr[1] <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier[1] & ap_ready)
            int_isr[1] <= 1'b1;
        else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
            int_isr[1] <= int_isr[1] ^ WDATA[1]; // toggle on write
    end
end

// int_maxDepth[7:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_maxDepth[7:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_MAXDEPTH_DATA_0)
            int_maxDepth[7:0] <= (WDATA[31:0] & wmask) | (int_maxDepth[7:0] & ~wmask);
    end
end

// int_unsolvable
always @(posedge ACLK) begin
    if (ARESET)
        int_unsolvable <= 0;
    else if (ACLK_EN) begin
        if (unsolvable_ap_vld)
            int_unsolvable <= unsolvable;
    end
end

// int_unsolvable_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_unsolvable_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (unsolvable_ap_vld)
            int_unsolvable_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_UNSOLVABLE_CTRL)
            int_unsolvable_ap_vld <= 1'b0; // clear on read
    end
end

// int_encode_length
always @(posedge ACLK) begin
    if (ARESET)
        int_encode_length <= 0;
    else if (ACLK_EN) begin
        if (encode_length_ap_vld)
            int_encode_length <= encode_length;
    end
end

// int_encode_length_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_encode_length_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (encode_length_ap_vld)
            int_encode_length_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_ENCODE_LENGTH_CTRL)
            int_encode_length_ap_vld <= 1'b0; // clear on read
    end
end

// int_twistMove2[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_twistMove2[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_TWISTMOVE2_DATA_0)
            int_twistMove2[31:0] <= (WDATA[31:0] & wmask) | (int_twistMove2[31:0] & ~wmask);
    end
end

// int_flipMove2[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_flipMove2[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_FLIPMOVE2_DATA_0)
            int_flipMove2[31:0] <= (WDATA[31:0] & wmask) | (int_flipMove2[31:0] & ~wmask);
    end
end

// int_FRtoBR_Move2[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_FRtoBR_Move2[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_FRTOBR_MOVE2_DATA_0)
            int_FRtoBR_Move2[31:0] <= (WDATA[31:0] & wmask) | (int_FRtoBR_Move2[31:0] & ~wmask);
    end
end

// int_URFtoDLF_Move2[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_URFtoDLF_Move2[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_URFTODLF_MOVE2_DATA_0)
            int_URFtoDLF_Move2[31:0] <= (WDATA[31:0] & wmask) | (int_URFtoDLF_Move2[31:0] & ~wmask);
    end
end

// int_URtoDF_Move2[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_URtoDF_Move2[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_URTODF_MOVE2_DATA_0)
            int_URtoDF_Move2[31:0] <= (WDATA[31:0] & wmask) | (int_URtoDF_Move2[31:0] & ~wmask);
    end
end

// int_URtoUL_Move2[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_URtoUL_Move2[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_URTOUL_MOVE2_DATA_0)
            int_URtoUL_Move2[31:0] <= (WDATA[31:0] & wmask) | (int_URtoUL_Move2[31:0] & ~wmask);
    end
end

// int_UBtoDF_Move2[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_UBtoDF_Move2[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_UBTODF_MOVE2_DATA_0)
            int_UBtoDF_Move2[31:0] <= (WDATA[31:0] & wmask) | (int_UBtoDF_Move2[31:0] & ~wmask);
    end
end

// int_MergeURtoULandUBtoDF2[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_MergeURtoULandUBtoDF2[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_MERGEURTOULANDUBTODF2_DATA_0)
            int_MergeURtoULandUBtoDF2[31:0] <= (WDATA[31:0] & wmask) | (int_MergeURtoULandUBtoDF2[31:0] & ~wmask);
    end
end

// int_Slice_URFtoDLF_Parity_Prun2[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_Slice_URFtoDLF_Parity_Prun2[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_SLICE_URFTODLF_PARITY_PRUN2_DATA_0)
            int_Slice_URFtoDLF_Parity_Prun2[31:0] <= (WDATA[31:0] & wmask) | (int_Slice_URFtoDLF_Parity_Prun2[31:0] & ~wmask);
    end
end

// int_Slice_URtoDF_Parity_Prun2[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_Slice_URtoDF_Parity_Prun2[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_SLICE_URTODF_PARITY_PRUN2_DATA_0)
            int_Slice_URtoDF_Parity_Prun2[31:0] <= (WDATA[31:0] & wmask) | (int_Slice_URtoDF_Parity_Prun2[31:0] & ~wmask);
    end
end

// int_Slice_Twist_Prun2[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_Slice_Twist_Prun2[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_SLICE_TWIST_PRUN2_DATA_0)
            int_Slice_Twist_Prun2[31:0] <= (WDATA[31:0] & wmask) | (int_Slice_Twist_Prun2[31:0] & ~wmask);
    end
end

// int_Slice_Flip_Prun2[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_Slice_Flip_Prun2[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_SLICE_FLIP_PRUN2_DATA_0)
            int_Slice_Flip_Prun2[31:0] <= (WDATA[31:0] & wmask) | (int_Slice_Flip_Prun2[31:0] & ~wmask);
    end
end


//------------------------Memory logic-------------------
// facelets
assign int_facelets_address0     = facelets_address0 >> 2;
assign int_facelets_ce0          = facelets_ce0;
assign int_facelets_we0          = 1'b0;
assign int_facelets_be0          = 1'b0;
assign int_facelets_d0           = 1'b0;
assign facelets_q0               = int_facelets_q0 >> (int_facelets_shift * 8);
assign int_facelets_address1     = ar_hs? raddr[5:2] : waddr[5:2];
assign int_facelets_ce1          = ar_hs | (int_facelets_write & WVALID);
assign int_facelets_we1          = int_facelets_write & WVALID;
assign int_facelets_be1          = WSTRB;
assign int_facelets_d1           = WDATA;
// encode_array
assign int_encode_array_address0 = encode_array_address0 >> 2;
assign int_encode_array_ce0      = encode_array_ce0;
assign int_encode_array_we0      = encode_array_we0;
assign int_encode_array_be0      = 1 << encode_array_address0[1:0];
assign int_encode_array_d0       = {4{encode_array_d0}};
assign int_encode_array_address1 = ar_hs? raddr[4:2] : waddr[4:2];
assign int_encode_array_ce1      = ar_hs | (int_encode_array_write & WVALID);
assign int_encode_array_we1      = int_encode_array_write & WVALID;
assign int_encode_array_be1      = WSTRB;
assign int_encode_array_d1       = WDATA;
// int_facelets_read
always @(posedge ACLK) begin
    if (ARESET)
        int_facelets_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_FACELETS_BASE && raddr <= ADDR_FACELETS_HIGH)
            int_facelets_read <= 1'b1;
        else
            int_facelets_read <= 1'b0;
    end
end

// int_facelets_write
always @(posedge ACLK) begin
    if (ARESET)
        int_facelets_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_FACELETS_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_FACELETS_HIGH)
            int_facelets_write <= 1'b1;
        else if (WVALID)
            int_facelets_write <= 1'b0;
    end
end

// int_facelets_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (facelets_ce0)
            int_facelets_shift <= facelets_address0[1:0];
    end
end

// int_encode_array_read
always @(posedge ACLK) begin
    if (ARESET)
        int_encode_array_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_ENCODE_ARRAY_BASE && raddr <= ADDR_ENCODE_ARRAY_HIGH)
            int_encode_array_read <= 1'b1;
        else
            int_encode_array_read <= 1'b0;
    end
end

// int_encode_array_write
always @(posedge ACLK) begin
    if (ARESET)
        int_encode_array_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_ENCODE_ARRAY_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_ENCODE_ARRAY_HIGH)
            int_encode_array_write <= 1'b1;
        else if (WVALID)
            int_encode_array_write <= 1'b0;
    end
end

// int_encode_array_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (encode_array_ce0)
            int_encode_array_shift <= encode_array_address0[1:0];
    end
end


endmodule


`timescale 1ns/1ps

module solution_CTRL_BUS_s_axi_ram
#(parameter
    BYTES  = 4,
    DEPTH  = 256,
    AWIDTH = log2(DEPTH)
) (
    input  wire               clk0,
    input  wire [AWIDTH-1:0]  address0,
    input  wire               ce0,
    input  wire               we0,
    input  wire [BYTES-1:0]   be0,
    input  wire [BYTES*8-1:0] d0,
    output reg  [BYTES*8-1:0] q0,
    input  wire               clk1,
    input  wire [AWIDTH-1:0]  address1,
    input  wire               ce1,
    input  wire               we1,
    input  wire [BYTES-1:0]   be1,
    input  wire [BYTES*8-1:0] d1,
    output reg  [BYTES*8-1:0] q1
);
//------------------------Local signal-------------------
reg  [BYTES*8-1:0] mem[0:DEPTH-1];
//------------------------Task and function--------------
function integer log2;
    input integer x;
    integer n, m;
begin
    n = 1;
    m = 2;
    while (m < x) begin
        n = n + 1;
        m = m * 2;
    end
    log2 = n;
end
endfunction
//------------------------Body---------------------------
// read port 0
always @(posedge clk0) begin
    if (ce0) q0 <= mem[address0];
end

// read port 1
always @(posedge clk1) begin
    if (ce1) q1 <= mem[address1];
end

genvar i;
generate
    for (i = 0; i < BYTES; i = i + 1) begin : gen_write
        // write port 0
        always @(posedge clk0) begin
            if (ce0 & we0 & be0[i]) begin
                mem[address0][8*i+7:8*i] <= d0[8*i+7:8*i];
            end
        end
        // write port 1
        always @(posedge clk1) begin
            if (ce1 & we1 & be1[i]) begin
                mem[address1][8*i+7:8*i] <= d1[8*i+7:8*i];
            end
        end
    end
endgenerate

endmodule

