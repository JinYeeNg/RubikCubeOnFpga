-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity getFRtoBR is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cubiecube_0_ep_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    cubiecube_0_ep_ce0 : OUT STD_LOGIC;
    cubiecube_0_ep_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of getFRtoBR is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (47 downto 0) := "000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (47 downto 0) := "000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (47 downto 0) := "000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (47 downto 0) := "000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (47 downto 0) := "000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (47 downto 0) := "000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (47 downto 0) := "000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (47 downto 0) := "000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (47 downto 0) := "000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (47 downto 0) := "001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (47 downto 0) := "010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (47 downto 0) := "100000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_sum_fu_347_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_fu_462_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal edge4_0_2_reg_1136 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_173_fu_627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_173_reg_1144 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_assign_cast_fu_639_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_5_fu_643_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_5_reg_1153 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_380_i_fu_689_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_380_i_reg_1161 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_fu_649_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_fu_700_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_reg_1169 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond_i_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_30_fu_706_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_30_reg_1174 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_14_fu_717_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_14_reg_1179 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_712_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal j_15_fu_756_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal tmp_201_fu_768_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_201_reg_1200 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal tmp_198_fu_762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_i_fu_776_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_i_reg_1205 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_i_fu_782_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_i_reg_1211 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal k_4_fu_842_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_4_reg_1226 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_203_fu_852_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_203_reg_1231 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_202_fu_837_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal edge4_2_5_load_1_reg_1236 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal edge4_3_5_load_1_reg_1244 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_31_fu_864_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_31_reg_1255 : STD_LOGIC_VECTOR (1 downto 0);
    signal write_flag_1_i_fu_870_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag_1_i_reg_1260 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_858_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal arr_1_i_fu_950_p6 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal arr12_1_i_fu_964_p6 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_204_fu_1013_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_204_reg_1275 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal j_12_fu_1019_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_12_reg_1280 : STD_LOGIC_VECTOR (1 downto 0);
    signal b_4_fu_1025_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal p_rec_reg_157 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_168 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_i_reg_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i_reg_192 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_i_reg_201 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0_i_reg_213 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv_reg_225 : STD_LOGIC_VECTOR (1 downto 0);
    signal b_reg_237 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_249 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_flag_i_reg_261 : STD_LOGIC_VECTOR (0 downto 0);
    signal arr4_i_reg_272 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr_i_reg_282 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_i_i1_phi_fu_298_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_i1_reg_294 : STD_LOGIC_VECTOR (1 downto 0);
    signal arr_load_phi_i_reg_306 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_197_fu_470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal edge4_1_fu_92 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge4_1_1_fu_353_p6 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge4_2_fu_96 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge4_2_1_fu_367_p6 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge4_3_fu_100 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge4_3_1_fu_381_p6 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge4_3_1_40_fu_104 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_315_t_fu_734_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal edge4_3_2_fu_108 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge4_3_3_fu_112 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge4_3_4_fu_116 : STD_LOGIC_VECTOR (3 downto 0);
    signal a_1_fu_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_4_fu_723_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_fu_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_fu_128 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge4_0_fu_922_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge4_1_5_fu_132 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge4_1_43_fu_915_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge4_2_5_fu_136 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge4_2_41_fu_894_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr2_1_i_fu_989_p6 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge4_3_5_fu_140 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge4_3_42_fu_908_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_1_i_fu_978_p6 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_cast_fu_458_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_152_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_151_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_154_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_153_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_156_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_155_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_158_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_157_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_160_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_159_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_162_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_161_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_164_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_163_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_166_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_165_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_168_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_167_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_170_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_169_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_172_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_171_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_633_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_lshr_f_i_cast_fu_655_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_i_cast_fu_665_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_379_i_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_assign_4_fu_675_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_k_i_fu_681_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_178_fu_730_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_174_fu_788_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_175_fu_794_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_199_fu_800_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_177_fu_810_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_176_fu_806_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal edge4_load_phi_fu_823_p6 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_cast1_fu_848_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal newSel3_fu_887_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal newSel9_fu_901_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_204_fu_1013_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_712_ap_start : STD_LOGIC;
    signal grp_fu_712_ap_done : STD_LOGIC;
    signal tmp_200_fu_814_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_204_fu_1013_p00 : STD_LOGIC_VECTOR (31 downto 0);

    component solution_mux_42_4jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        din3 : IN STD_LOGIC_VECTOR (3 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component solution_sdiv_32nkbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component solution_mux_42_1lbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    solution_mux_42_4jbC_U24 : component solution_mux_42_4jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        din3_WIDTH => 4,
        din4_WIDTH => 2,
        dout_WIDTH => 4)
    port map (
        din0 => edge4_1_fu_92,
        din1 => ap_const_lv4_0,
        din2 => edge4_1_fu_92,
        din3 => edge4_1_fu_92,
        din4 => p_sum_fu_347_p2,
        dout => edge4_1_1_fu_353_p6);

    solution_mux_42_4jbC_U25 : component solution_mux_42_4jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        din3_WIDTH => 4,
        din4_WIDTH => 2,
        dout_WIDTH => 4)
    port map (
        din0 => edge4_2_fu_96,
        din1 => edge4_2_fu_96,
        din2 => ap_const_lv4_0,
        din3 => edge4_2_fu_96,
        din4 => p_sum_fu_347_p2,
        dout => edge4_2_1_fu_367_p6);

    solution_mux_42_4jbC_U26 : component solution_mux_42_4jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        din3_WIDTH => 4,
        din4_WIDTH => 2,
        dout_WIDTH => 4)
    port map (
        din0 => ap_const_lv4_0,
        din1 => edge4_3_fu_100,
        din2 => edge4_3_fu_100,
        din3 => ap_const_lv4_0,
        din4 => p_sum_fu_347_p2,
        dout => edge4_3_1_fu_381_p6);

    solution_sdiv_32nkbM_U27 : component solution_sdiv_32nkbM
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_712_ap_start,
        done => grp_fu_712_ap_done,
        din0 => s_reg_1169,
        din1 => j_i_reg_180,
        ce => ap_const_logic_1,
        dout => grp_fu_712_p2);

    solution_mux_42_4jbC_U28 : component solution_mux_42_4jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        din3_WIDTH => 4,
        din4_WIDTH => 2,
        dout_WIDTH => 4)
    port map (
        din0 => edge4_3_5_fu_140,
        din1 => edge4_1_5_fu_132,
        din2 => edge4_2_5_fu_136,
        din3 => edge4_3_5_fu_140,
        din4 => indvars_iv_reg_225,
        dout => edge4_load_phi_fu_823_p6);

    solution_mux_42_1lbW_U29 : component solution_mux_42_1lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_1,
        din1 => write_flag_i_reg_261,
        din2 => write_flag_i_reg_261,
        din3 => write_flag_i_reg_261,
        din4 => i_i1_reg_294,
        dout => write_flag_1_i_fu_870_p6);

    solution_mux_42_4jbC_U30 : component solution_mux_42_4jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        din3_WIDTH => 4,
        din4_WIDTH => 2,
        dout_WIDTH => 4)
    port map (
        din0 => arr_load_phi_i_reg_306,
        din1 => arr_i_reg_282,
        din2 => arr_i_reg_282,
        din3 => arr_i_reg_282,
        din4 => i_i1_reg_294,
        dout => arr_1_i_fu_950_p6);

    solution_mux_42_4jbC_U31 : component solution_mux_42_4jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        din3_WIDTH => 4,
        din4_WIDTH => 2,
        dout_WIDTH => 4)
    port map (
        din0 => arr4_i_reg_272,
        din1 => arr_load_phi_i_reg_306,
        din2 => arr4_i_reg_272,
        din3 => arr4_i_reg_272,
        din4 => i_i1_reg_294,
        dout => arr12_1_i_fu_964_p6);

    solution_mux_42_4jbC_U32 : component solution_mux_42_4jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        din3_WIDTH => 4,
        din4_WIDTH => 2,
        dout_WIDTH => 4)
    port map (
        din0 => edge4_3_5_load_1_reg_1244,
        din1 => edge4_3_5_load_1_reg_1244,
        din2 => edge4_3_5_load_1_reg_1244,
        din3 => arr_load_phi_i_reg_306,
        din4 => i_i1_reg_294,
        dout => arr3_1_i_fu_978_p6);

    solution_mux_42_4jbC_U33 : component solution_mux_42_4jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        din3_WIDTH => 4,
        din4_WIDTH => 2,
        dout_WIDTH => 4)
    port map (
        din0 => edge4_2_5_load_1_reg_1236,
        din1 => edge4_2_5_load_1_reg_1236,
        din2 => arr_load_phi_i_reg_306,
        din3 => edge4_2_5_load_1_reg_1236,
        din4 => i_i1_reg_294,
        dout => arr2_1_i_fu_989_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv16_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state43) and (tmp_198_fu_762_p2 = ap_const_lv1_1))) then 
                    ap_return_preg <= tmp_200_fu_814_p2;
                end if; 
            end if;
        end if;
    end process;


    a_1_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((tmp_173_reg_1144 = ap_const_lv1_0) and (tmp_315_t_fu_734_p2 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((tmp_173_reg_1144 = ap_const_lv1_0) and (tmp_315_t_fu_734_p2 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((tmp_173_reg_1144 = ap_const_lv1_0) and (tmp_315_t_fu_734_p2 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((tmp_173_reg_1144 = ap_const_lv1_0) and (tmp_315_t_fu_734_p2 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state42)))) then 
                a_1_fu_120 <= a_4_fu_723_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_395_p2 = ap_const_lv1_1))) then 
                a_1_fu_120 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    arr4_i_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                arr4_i_reg_272 <= arr12_1_i_fu_964_p6;
            elsif (((tmp_202_fu_837_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                arr4_i_reg_272 <= edge4_1_5_fu_132;
            end if; 
        end if;
    end process;

    arr_load_phi_i_reg_306_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_858_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                if ((ap_phi_mux_i_i1_phi_fu_298_p4 = ap_const_lv2_0)) then 
                    arr_load_phi_i_reg_306 <= arr4_i_reg_272;
                elsif ((not((ap_phi_mux_i_i1_phi_fu_298_p4 = ap_const_lv2_0)) and not((ap_phi_mux_i_i1_phi_fu_298_p4 = ap_const_lv2_1)))) then 
                    arr_load_phi_i_reg_306 <= edge4_3_5_fu_140;
                elsif ((ap_phi_mux_i_i1_phi_fu_298_p4 = ap_const_lv2_1)) then 
                    arr_load_phi_i_reg_306 <= edge4_2_5_fu_136;
                end if;
            end if; 
        end if;
    end process;

    b_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_462_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                b_reg_237 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                b_reg_237 <= b_4_fu_1025_p2;
            end if; 
        end if;
    end process;

    edge4_1_5_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state45) and (exitcond_fu_858_p2 = ap_const_lv1_1))) then 
                edge4_1_5_fu_132 <= edge4_1_43_fu_915_p3;
            elsif (((tmp_fu_462_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                edge4_1_5_fu_132 <= edge4_3_2_fu_108;
            end if; 
        end if;
    end process;

    edge4_2_5_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                edge4_2_5_fu_136 <= arr2_1_i_fu_989_p6;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state45) and (exitcond_fu_858_p2 = ap_const_lv1_1))) then 
                edge4_2_5_fu_136 <= edge4_2_41_fu_894_p3;
            elsif (((tmp_fu_462_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                edge4_2_5_fu_136 <= edge4_3_3_fu_112;
            end if; 
        end if;
    end process;

    edge4_3_1_40_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_173_reg_1144 = ap_const_lv1_0) and (tmp_315_t_fu_734_p2 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                edge4_3_1_40_fu_104 <= edge4_0_2_reg_1136;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_395_p2 = ap_const_lv1_1))) then 
                edge4_3_1_40_fu_104 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    edge4_3_2_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_173_reg_1144 = ap_const_lv1_0) and (tmp_315_t_fu_734_p2 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                edge4_3_2_fu_108 <= edge4_0_2_reg_1136;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_395_p2 = ap_const_lv1_1))) then 
                edge4_3_2_fu_108 <= edge4_1_1_fu_353_p6;
            end if; 
        end if;
    end process;

    edge4_3_3_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_173_reg_1144 = ap_const_lv1_0) and (tmp_315_t_fu_734_p2 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                edge4_3_3_fu_112 <= edge4_0_2_reg_1136;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_395_p2 = ap_const_lv1_1))) then 
                edge4_3_3_fu_112 <= edge4_2_1_fu_367_p6;
            end if; 
        end if;
    end process;

    edge4_3_4_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_173_reg_1144 = ap_const_lv1_0) and (tmp_315_t_fu_734_p2 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                edge4_3_4_fu_116 <= edge4_0_2_reg_1136;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_395_p2 = ap_const_lv1_1))) then 
                edge4_3_4_fu_116 <= edge4_3_1_fu_381_p6;
            end if; 
        end if;
    end process;

    edge4_3_5_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                edge4_3_5_fu_140 <= arr3_1_i_fu_978_p6;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state45) and (exitcond_fu_858_p2 = ap_const_lv1_1))) then 
                edge4_3_5_fu_140 <= edge4_3_42_fu_908_p3;
            elsif (((tmp_fu_462_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                edge4_3_5_fu_140 <= edge4_3_4_fu_116;
            end if; 
        end if;
    end process;

    i_i1_reg_294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                i_i1_reg_294 <= i_31_reg_1255;
            elsif (((tmp_202_fu_837_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                i_i1_reg_294 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i_i_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                i_i_reg_192 <= i_30_reg_1174;
            elsif (((tmp_173_fu_627_p2 = ap_const_lv1_0) and (tmp_i_fu_649_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_i_reg_192 <= n_assign_cast_fu_639_p1;
            end if; 
        end if;
    end process;

    indvars_iv_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_462_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                indvars_iv_reg_225 <= ap_const_lv2_3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                indvars_iv_reg_225 <= j_12_reg_1280;
            end if; 
        end if;
    end process;

    j_i_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                j_i_reg_180 <= j_14_reg_1179;
            elsif (((tmp_173_fu_627_p2 = ap_const_lv1_0) and (tmp_i_fu_649_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_i_reg_180 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    j_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_395_p2 = ap_const_lv1_1))) then 
                j_reg_168 <= ap_const_lv5_B;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                j_reg_168 <= j_15_fu_756_p2;
            end if; 
        end if;
    end process;

    k_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state45) and (exitcond_fu_858_p2 = ap_const_lv1_1))) then 
                k_reg_249 <= k_4_reg_1226;
            elsif (((tmp_198_fu_762_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                k_reg_249 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_0_i_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_i_fu_695_p2 = ap_const_lv1_1))) then 
                p_0_i_reg_213 <= s_i_reg_201;
            elsif (((tmp_173_fu_627_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_i_fu_649_p2 = ap_const_lv1_1))) then 
                p_0_i_reg_213 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_rec_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_395_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_rec_reg_157 <= p_sum_fu_347_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_rec_reg_157 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    s_i_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                s_i_reg_201 <= grp_fu_712_p2;
            elsif (((tmp_173_fu_627_p2 = ap_const_lv1_0) and (tmp_i_fu_649_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                s_i_reg_201 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    temp_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state45) and (exitcond_fu_858_p2 = ap_const_lv1_1))) then 
                temp_fu_128 <= edge4_0_fu_922_p3;
            elsif (((tmp_fu_462_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                temp_fu_128 <= edge4_3_1_40_fu_104;
            end if; 
        end if;
    end process;

    write_flag_i_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                write_flag_i_reg_261 <= write_flag_1_i_reg_1260;
            elsif (((tmp_202_fu_837_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                write_flag_i_reg_261 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    x_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((tmp_173_reg_1144 = ap_const_lv1_0) and (tmp_315_t_fu_734_p2 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((tmp_173_reg_1144 = ap_const_lv1_0) and (tmp_315_t_fu_734_p2 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((tmp_173_reg_1144 = ap_const_lv1_0) and (tmp_315_t_fu_734_p2 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((tmp_173_reg_1144 = ap_const_lv1_0) and (tmp_315_t_fu_734_p2 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state42)))) then 
                x_fu_124 <= x_5_reg_1153;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_395_p2 = ap_const_lv1_1))) then 
                x_fu_124 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                arr_i_reg_282 <= arr_1_i_fu_950_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                edge4_0_2_reg_1136 <= cubiecube_0_ep_q0;
                tmp_173_reg_1144 <= tmp_173_fu_627_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                edge4_1_fu_92 <= edge4_1_1_fu_353_p6;
                edge4_2_fu_96 <= edge4_2_1_fu_367_p6;
                edge4_3_fu_100 <= edge4_3_1_fu_381_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                edge4_2_5_load_1_reg_1236 <= edge4_2_5_fu_136;
                edge4_3_5_load_1_reg_1244 <= edge4_3_5_fu_140;
                i_31_reg_1255 <= i_31_fu_864_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_695_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                i_30_reg_1174 <= i_30_fu_706_p2;
                s_reg_1169 <= s_fu_700_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                j_12_reg_1280 <= j_12_fu_1019_p2;
                tmp_204_reg_1275 <= tmp_204_fu_1013_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                j_14_reg_1179 <= j_14_fu_717_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                k_4_reg_1226 <= k_4_fu_842_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_198_fu_762_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                sel_tmp2_i_reg_1211 <= sel_tmp2_i_fu_782_p2;
                sel_tmp_i_reg_1205 <= sel_tmp_i_fu_776_p2;
                    tmp_201_reg_1200(1 downto 0) <= tmp_201_fu_768_p3(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) and (tmp_202_fu_837_p2 = ap_const_lv1_1))) then
                tmp_203_reg_1231 <= tmp_203_fu_852_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_173_fu_627_p2 = ap_const_lv1_0) and (tmp_i_fu_649_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_380_i_reg_1161 <= tmp_380_i_fu_689_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_858_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                write_flag_1_i_reg_1260 <= write_flag_1_i_fu_870_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_173_fu_627_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                x_5_reg_1153 <= x_5_fu_643_p2;
            end if;
        end if;
    end process;
    tmp_201_reg_1200(3 downto 2) <= "10";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_fu_462_p3, ap_CS_fsm_state4, tmp_173_fu_627_p2, tmp_i_fu_649_p2, ap_CS_fsm_state5, exitcond_i_fu_695_p2, ap_CS_fsm_state43, tmp_198_fu_762_p2, ap_CS_fsm_state44, tmp_202_fu_837_p2, ap_CS_fsm_state45, exitcond_fu_858_p2, tmp_s_fu_395_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_395_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_fu_462_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((tmp_173_fu_627_p2 = ap_const_lv1_0) and (tmp_i_fu_649_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_i_fu_695_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state43 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state43) and (tmp_198_fu_762_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state44 => 
                if (((tmp_202_fu_837_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state45 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state45) and (exitcond_fu_858_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_4_fu_723_p2 <= std_logic_vector(unsigned(p_0_i_reg_213) + unsigned(a_1_fu_120));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state43, tmp_198_fu_762_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state43) and (tmp_198_fu_762_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_i_i1_phi_fu_298_p4 <= i_i1_reg_294;

    ap_ready_assign_proc : process(ap_CS_fsm_state43, tmp_198_fu_762_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) and (tmp_198_fu_762_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state43, tmp_198_fu_762_p2, tmp_200_fu_814_p2, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) and (tmp_198_fu_762_p2 = ap_const_lv1_1))) then 
            ap_return <= tmp_200_fu_814_p2;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    b_4_fu_1025_p2 <= std_logic_vector(unsigned(k_reg_249) + unsigned(tmp_204_reg_1275));
    cubiecube_0_ep_address0 <= tmp_197_fu_470_p1(4 - 1 downto 0);

    cubiecube_0_ep_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cubiecube_0_ep_ce0 <= ap_const_logic_1;
        else 
            cubiecube_0_ep_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    edge4_0_fu_922_p3 <= 
        arr_i_reg_282 when (write_flag_i_reg_261(0) = '1') else 
        temp_fu_128;
    edge4_1_43_fu_915_p3 <= 
        temp_fu_128 when (sel_tmp2_i_reg_1211(0) = '1') else 
        arr4_i_reg_272;
    edge4_2_41_fu_894_p3 <= 
        edge4_2_5_fu_136 when (sel_tmp2_i_reg_1211(0) = '1') else 
        newSel3_fu_887_p3;
    edge4_3_42_fu_908_p3 <= 
        edge4_3_5_fu_140 when (sel_tmp2_i_reg_1211(0) = '1') else 
        newSel9_fu_901_p3;
    exitcond_fu_858_p2 <= "1" when (i_i1_reg_294 = indvars_iv_reg_225) else "0";
    exitcond_i_fu_695_p2 <= "1" when (j_i_reg_180 = tmp_380_i_reg_1161) else "0";

    grp_fu_712_ap_start_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_712_ap_start <= ap_const_logic_1;
        else 
            grp_fu_712_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    i_30_fu_706_p2 <= std_logic_vector(signed(i_i_reg_192) + signed(ap_const_lv32_FFFFFFFF));
    i_31_fu_864_p2 <= std_logic_vector(unsigned(i_i1_reg_294) + unsigned(ap_const_lv2_1));
    i_fu_633_p2 <= std_logic_vector(unsigned(ap_const_lv5_B) - unsigned(j_reg_168));
    j_12_fu_1019_p2 <= std_logic_vector(unsigned(indvars_iv_reg_225) + unsigned(ap_const_lv2_3));
    j_14_fu_717_p2 <= std_logic_vector(unsigned(j_i_reg_180) + unsigned(ap_const_lv32_1));
    j_15_fu_756_p2 <= std_logic_vector(signed(j_reg_168) + signed(ap_const_lv5_1F));
    j_1_cast1_fu_848_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_reg_225),3));
        j_cast_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j_reg_168),32));

    k_4_fu_842_p2 <= std_logic_vector(unsigned(k_reg_249) + unsigned(ap_const_lv32_1));
    k_assign_4_fu_675_p2 <= std_logic_vector(unsigned(n_assign_cast_fu_639_p1) - unsigned(x_5_fu_643_p2));
    n_assign_cast_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_633_p2),32));
    newSel3_fu_887_p3 <= 
        temp_fu_128 when (sel_tmp_i_reg_1205(0) = '1') else 
        edge4_2_5_fu_136;
    newSel9_fu_901_p3 <= 
        edge4_3_5_fu_140 when (sel_tmp_i_reg_1205(0) = '1') else 
        temp_fu_128;
    p_k_i_fu_681_p3 <= 
        k_assign_4_fu_675_p2 when (tmp_379_i_fu_669_p2(0) = '1') else 
        x_5_fu_643_p2;
    p_lshr_f_i_cast_fu_655_p4 <= i_fu_633_p2(3 downto 1);
    p_sum_fu_347_p2 <= std_logic_vector(unsigned(p_rec_reg_157) + unsigned(ap_const_lv2_1));
    s_fu_700_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(s_i_reg_201) * signed(i_i_reg_192))), 32));
    sel_tmp2_i_fu_782_p2 <= "1" when (indvars_iv_reg_225 = ap_const_lv2_1) else "0";
    sel_tmp_i_fu_776_p2 <= "1" when (indvars_iv_reg_225 = ap_const_lv2_2) else "0";
    tmp_151_fu_495_p2 <= "1" when (cubiecube_0_ep_q0 = ap_const_lv4_F) else "0";
    tmp_152_fu_501_p2 <= "1" when (cubiecube_0_ep_q0 = ap_const_lv4_E) else "0";
    tmp_153_fu_507_p2 <= (tmp_152_fu_501_p2 or tmp_151_fu_495_p2);
    tmp_154_fu_513_p2 <= "1" when (cubiecube_0_ep_q0 = ap_const_lv4_D) else "0";
    tmp_155_fu_519_p2 <= (tmp_154_fu_513_p2 or tmp_153_fu_507_p2);
    tmp_156_fu_525_p2 <= "1" when (cubiecube_0_ep_q0 = ap_const_lv4_C) else "0";
    tmp_157_fu_531_p2 <= (tmp_156_fu_525_p2 or tmp_155_fu_519_p2);
    tmp_158_fu_537_p2 <= "1" when (cubiecube_0_ep_q0 = ap_const_lv4_7) else "0";
    tmp_159_fu_543_p2 <= (tmp_158_fu_537_p2 or tmp_157_fu_531_p2);
    tmp_160_fu_549_p2 <= "1" when (cubiecube_0_ep_q0 = ap_const_lv4_6) else "0";
    tmp_161_fu_555_p2 <= (tmp_160_fu_549_p2 or tmp_159_fu_543_p2);
    tmp_162_fu_561_p2 <= "1" when (cubiecube_0_ep_q0 = ap_const_lv4_5) else "0";
    tmp_163_fu_567_p2 <= (tmp_162_fu_561_p2 or tmp_161_fu_555_p2);
    tmp_164_fu_573_p2 <= "1" when (cubiecube_0_ep_q0 = ap_const_lv4_4) else "0";
    tmp_165_fu_579_p2 <= (tmp_164_fu_573_p2 or tmp_163_fu_567_p2);
    tmp_166_fu_585_p2 <= "1" when (cubiecube_0_ep_q0 = ap_const_lv4_3) else "0";
    tmp_167_fu_591_p2 <= (tmp_166_fu_585_p2 or tmp_165_fu_579_p2);
    tmp_168_fu_597_p2 <= "1" when (cubiecube_0_ep_q0 = ap_const_lv4_2) else "0";
    tmp_169_fu_603_p2 <= (tmp_168_fu_597_p2 or tmp_167_fu_591_p2);
    tmp_170_fu_609_p2 <= "1" when (cubiecube_0_ep_q0 = ap_const_lv4_1) else "0";
    tmp_171_fu_615_p2 <= (tmp_170_fu_609_p2 or tmp_169_fu_603_p2);
    tmp_172_fu_621_p2 <= "1" when (cubiecube_0_ep_q0 = ap_const_lv4_0) else "0";
    tmp_173_fu_627_p2 <= (tmp_172_fu_621_p2 or tmp_171_fu_615_p2);
    tmp_174_fu_788_p2 <= std_logic_vector(shift_left(unsigned(a_1_fu_120),to_integer(unsigned('0' & ap_const_lv32_5(31-1 downto 0)))));
    tmp_175_fu_794_p2 <= std_logic_vector(shift_left(unsigned(a_1_fu_120),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    tmp_176_fu_806_p1 <= b_reg_237(16 - 1 downto 0);
    tmp_177_fu_810_p1 <= tmp_199_fu_800_p2(16 - 1 downto 0);
    tmp_178_fu_730_p1 <= x_fu_124(2 - 1 downto 0);
    tmp_197_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_cast_fu_458_p1),64));
    tmp_198_fu_762_p2 <= "1" when (indvars_iv_reg_225 = ap_const_lv2_0) else "0";
    tmp_199_fu_800_p2 <= std_logic_vector(unsigned(tmp_174_fu_788_p2) - unsigned(tmp_175_fu_794_p2));
    tmp_200_fu_814_p2 <= std_logic_vector(unsigned(tmp_177_fu_810_p1) + unsigned(tmp_176_fu_806_p1));
    tmp_201_fu_768_p3 <= (ap_const_lv2_2 & indvars_iv_reg_225);
    tmp_202_fu_837_p2 <= "1" when (edge4_load_phi_fu_823_p6 = tmp_201_reg_1200) else "0";
    tmp_203_fu_852_p2 <= std_logic_vector(unsigned(j_1_cast1_fu_848_p1) + unsigned(ap_const_lv3_1));
    tmp_204_fu_1013_p0 <= tmp_204_fu_1013_p00(3 - 1 downto 0);
    tmp_204_fu_1013_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_203_reg_1231),32));
    tmp_204_fu_1013_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &tmp_204_fu_1013_p0) * signed(b_reg_237))), 32));
    tmp_315_t_fu_734_p2 <= (tmp_178_fu_730_p1 xor ap_const_lv2_3);
    tmp_379_i_fu_669_p2 <= "1" when (signed(tmp_i_cast_fu_665_p1) < signed(x_5_fu_643_p2)) else "0";
    tmp_380_i_fu_689_p2 <= std_logic_vector(unsigned(p_k_i_fu_681_p3) + unsigned(ap_const_lv32_1));
    tmp_fu_462_p3 <= j_reg_168(4 downto 4);
    tmp_i_cast_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lshr_f_i_cast_fu_655_p4),32));
    tmp_i_fu_649_p2 <= "1" when (signed(n_assign_cast_fu_639_p1) < signed(x_5_fu_643_p2)) else "0";
    tmp_s_fu_395_p2 <= "1" when (p_rec_reg_157 = ap_const_lv2_2) else "0";
    x_5_fu_643_p2 <= std_logic_vector(unsigned(x_fu_124) + unsigned(ap_const_lv32_1));
end behav;
