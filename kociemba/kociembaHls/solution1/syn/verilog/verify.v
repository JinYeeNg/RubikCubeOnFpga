// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module verify (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        cubiecube_0_cp_address0,
        cubiecube_0_cp_ce0,
        cubiecube_0_cp_q0,
        cubiecube_0_co_address0,
        cubiecube_0_co_ce0,
        cubiecube_0_co_q0,
        cubiecube_0_ep_address0,
        cubiecube_0_ep_ce0,
        cubiecube_0_ep_q0,
        cubiecube_0_eo_address0,
        cubiecube_0_eo_ce0,
        cubiecube_0_eo_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 34'd1;
parameter    ap_ST_fsm_state2 = 34'd2;
parameter    ap_ST_fsm_state3 = 34'd4;
parameter    ap_ST_fsm_state4 = 34'd8;
parameter    ap_ST_fsm_state5 = 34'd16;
parameter    ap_ST_fsm_state6 = 34'd32;
parameter    ap_ST_fsm_state7 = 34'd64;
parameter    ap_ST_fsm_state8 = 34'd128;
parameter    ap_ST_fsm_state9 = 34'd256;
parameter    ap_ST_fsm_state10 = 34'd512;
parameter    ap_ST_fsm_state11 = 34'd1024;
parameter    ap_ST_fsm_state12 = 34'd2048;
parameter    ap_ST_fsm_state13 = 34'd4096;
parameter    ap_ST_fsm_state14 = 34'd8192;
parameter    ap_ST_fsm_state15 = 34'd16384;
parameter    ap_ST_fsm_state16 = 34'd32768;
parameter    ap_ST_fsm_state17 = 34'd65536;
parameter    ap_ST_fsm_state18 = 34'd131072;
parameter    ap_ST_fsm_state19 = 34'd262144;
parameter    ap_ST_fsm_state20 = 34'd524288;
parameter    ap_ST_fsm_state21 = 34'd1048576;
parameter    ap_ST_fsm_state22 = 34'd2097152;
parameter    ap_ST_fsm_state23 = 34'd4194304;
parameter    ap_ST_fsm_state24 = 34'd8388608;
parameter    ap_ST_fsm_state25 = 34'd16777216;
parameter    ap_ST_fsm_state26 = 34'd33554432;
parameter    ap_ST_fsm_state27 = 34'd67108864;
parameter    ap_ST_fsm_state28 = 34'd134217728;
parameter    ap_ST_fsm_state29 = 34'd268435456;
parameter    ap_ST_fsm_state30 = 34'd536870912;
parameter    ap_ST_fsm_state31 = 34'd1073741824;
parameter    ap_ST_fsm_state32 = 34'd2147483648;
parameter    ap_ST_fsm_state33 = 34'd4294967296;
parameter    ap_ST_fsm_state34 = 34'd8589934592;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] cubiecube_0_cp_address0;
output   cubiecube_0_cp_ce0;
input  [2:0] cubiecube_0_cp_q0;
output  [2:0] cubiecube_0_co_address0;
output   cubiecube_0_co_ce0;
input  [1:0] cubiecube_0_co_q0;
output  [3:0] cubiecube_0_ep_address0;
output   cubiecube_0_ep_ce0;
input  [3:0] cubiecube_0_ep_q0;
output  [3:0] cubiecube_0_eo_address0;
output   cubiecube_0_eo_ce0;
input  [0:0] cubiecube_0_eo_q0;
output  [3:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] cubiecube_0_cp_address0;
reg cubiecube_0_cp_ce0;
reg cubiecube_0_co_ce0;
reg[3:0] cubiecube_0_ep_address0;
reg cubiecube_0_ep_ce0;
reg cubiecube_0_eo_ce0;
reg[3:0] ap_return;

(* fsm_encoding = "none" *) reg   [33:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] indvarinc_fu_417_p2;
wire    ap_CS_fsm_state2;
wire   [2:0] indvarinc1_fu_434_p2;
wire    ap_CS_fsm_state3;
wire   [3:0] e_1_fu_457_p2;
reg   [3:0] e_1_reg_897;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond3_fu_451_p2;
reg   [3:0] edgeCount_addr_1_reg_907;
wire    ap_CS_fsm_state5;
wire   [3:0] i_4_fu_486_p2;
reg   [3:0] i_4_reg_915;
wire    ap_CS_fsm_state7;
wire   [0:0] tmp_8_fu_480_p2;
wire   [3:0] i_5_fu_509_p2;
reg   [3:0] i_5_reg_931;
wire    ap_CS_fsm_state9;
wire   [0:0] exitcond2_fu_503_p2;
wire   [3:0] sum_2_fu_528_p2;
wire    ap_CS_fsm_state10;
wire   [3:0] c_1_fu_540_p2;
reg   [3:0] c_1_reg_952;
wire    ap_CS_fsm_state11;
wire   [0:0] exitcond1_fu_534_p2;
reg   [2:0] cornerCount_addr_1_reg_962;
wire    ap_CS_fsm_state12;
wire   [3:0] i_6_fu_571_p2;
reg   [3:0] i_6_reg_970;
wire    ap_CS_fsm_state14;
wire   [0:0] tmp_20_fu_563_p3;
wire   [3:0] i_7_fu_594_p2;
reg   [3:0] i_7_reg_986;
wire    ap_CS_fsm_state16;
wire   [0:0] exitcond_fu_588_p2;
wire   [4:0] sum_3_fu_615_p2;
wire    ap_CS_fsm_state17;
wire   [4:0] i_i_cast_fu_636_p1;
reg   [4:0] i_i_cast_reg_1011;
wire    ap_CS_fsm_state26;
wire   [0:0] tmp_i_fu_640_p2;
wire   [1:0] tmp_24_fu_689_p3;
reg   [1:0] tmp_24_reg_1031;
reg   [3:0] cubiecube_0_ep_load_1_reg_1036;
wire    ap_CS_fsm_state27;
wire  signed [4:0] j_fu_702_p2;
reg  signed [4:0] j_reg_1041;
wire    ap_CS_fsm_state28;
wire   [0:0] tmp_280_i_fu_712_p2;
wire   [3:0] i_8_fu_723_p2;
wire   [3:0] i_i7_cast_fu_753_p1;
reg   [3:0] i_i7_cast_reg_1059;
wire    ap_CS_fsm_state30;
wire   [0:0] tmp_i9_fu_757_p2;
wire   [3:0] p_s_fu_819_p3;
reg   [2:0] cubiecube_0_cp_load_1_reg_1077;
wire    ap_CS_fsm_state31;
wire  signed [3:0] j_1_fu_827_p2;
reg  signed [3:0] j_1_reg_1082;
wire    ap_CS_fsm_state32;
wire   [0:0] tmp_285_i_fu_837_p2;
wire   [2:0] i_9_fu_848_p2;
reg   [3:0] edgeCount_address0;
reg    edgeCount_ce0;
reg    edgeCount_we0;
reg   [31:0] edgeCount_d0;
wire   [31:0] edgeCount_q0;
reg   [2:0] cornerCount_address0;
reg    cornerCount_ce0;
reg    cornerCount_we0;
reg   [31:0] cornerCount_d0;
wire   [31:0] cornerCount_q0;
reg   [3:0] invdar_reg_234;
wire   [0:0] tmp_1_fu_428_p2;
reg   [2:0] invdar1_reg_245;
wire   [0:0] tmp_3_fu_445_p2;
reg   [3:0] e_reg_256;
wire    ap_CS_fsm_state6;
reg   [3:0] i_reg_267;
wire    ap_CS_fsm_state8;
wire   [0:0] tmp_s_fu_497_p2;
reg   [3:0] i_1_reg_278;
reg   [3:0] sum_reg_289;
reg   [3:0] c_reg_301;
wire    ap_CS_fsm_state13;
wire   [0:0] tmp_13_fu_520_p1;
reg   [3:0] i_2_reg_312;
wire    ap_CS_fsm_state15;
wire   [0:0] tmp_15_fu_582_p2;
reg   [3:0] i_3_reg_323;
reg   [4:0] sum_1_reg_334;
reg   [3:0] i_i_reg_346;
wire    ap_CS_fsm_state25;
wire   [0:0] tmp_17_fu_625_p2;
reg   [4:0] j_0_in_i_reg_358;
wire    ap_CS_fsm_state29;
reg   [2:0] i_i7_reg_367;
reg   [3:0] j_0_in_i1_reg_379;
wire    ap_CS_fsm_state33;
reg   [3:0] UnifiedRetVal_reg_388;
wire   [63:0] tmp_fu_423_p1;
wire   [63:0] tmp_2_fu_440_p1;
wire   [63:0] tmp_4_fu_463_p1;
wire   [63:0] tmp_5_fu_468_p1;
wire   [63:0] tmp_9_fu_492_p1;
wire   [63:0] tmp_7_fu_515_p1;
wire   [63:0] tmp_10_fu_546_p1;
wire   [63:0] tmp_11_fu_551_p1;
wire   [63:0] tmp_14_fu_577_p1;
wire   [63:0] tmp_18_fu_600_p1;
wire   [63:0] tmp_i_28_fu_646_p1;
wire   [63:0] tmp_281_i_fu_718_p1;
wire   [63:0] tmp_i1_fu_763_p1;
wire   [63:0] tmp_286_i_fu_843_p1;
reg   [31:0] s_i_fu_88;
wire   [31:0] p_s_1_i_fu_740_p3;
reg   [31:0] s_i8_fu_92;
wire   [31:0] p_s_1_i1_fu_865_p3;
wire   [31:0] tmp_6_fu_473_p2;
wire   [31:0] tmp_12_fu_556_p2;
wire   [3:0] tmp_12_cast_cast_fu_524_p1;
wire   [2:0] grp_fu_605_p1;
wire   [4:0] tmp_22_cast_cast_cas_fu_611_p1;
wire   [2:0] grp_fu_605_p2;
wire   [2:0] tmp_21_fu_621_p1;
wire   [0:0] tmp_26_fu_663_p1;
wire   [1:0] tmp_27_fu_667_p3;
wire   [0:0] tmp_25_fu_659_p1;
wire   [0:0] tmp_22_fu_651_p3;
wire   [1:0] tmp_30_fu_675_p2;
wire   [1:0] tmp_23_fu_681_p3;
wire  signed [31:0] j_cast_fu_708_p1;
wire   [0:0] tmp_282_i_fu_729_p2;
wire   [31:0] s_fu_734_p2;
wire   [0:0] tmp_33_fu_780_p1;
wire   [1:0] tmp_34_fu_784_p3;
wire   [0:0] tmp_32_fu_776_p1;
wire   [0:0] tmp_31_fu_768_p3;
wire   [1:0] tmp_35_fu_792_p2;
wire   [1:0] tmp_28_fu_798_p3;
wire   [1:0] tmp_29_fu_806_p3;
wire   [0:0] tmp_19_fu_814_p2;
wire  signed [31:0] j_1_cast_fu_833_p1;
wire   [0:0] tmp_287_i_fu_854_p2;
wire   [31:0] s_1_fu_859_p2;
reg    grp_fu_605_ap_start;
wire    grp_fu_605_ap_done;
reg   [3:0] ap_return_preg;
wire    ap_CS_fsm_state34;
reg   [33:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 34'd1;
#0 ap_return_preg = 4'd0;
end

verify_edgeCount #(
    .DataWidth( 32 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
edgeCount_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(edgeCount_address0),
    .ce0(edgeCount_ce0),
    .we0(edgeCount_we0),
    .d0(edgeCount_d0),
    .q0(edgeCount_q0)
);

verify_cornerCount #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
cornerCount_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cornerCount_address0),
    .ce0(cornerCount_ce0),
    .we0(cornerCount_we0),
    .d0(cornerCount_d0),
    .q0(cornerCount_q0)
);

solution_urem_5nsibs #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 3 ))
solution_urem_5nsibs_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_605_ap_start),
    .done(grp_fu_605_ap_done),
    .din0(sum_1_reg_334),
    .din1(grp_fu_605_p1),
    .ce(1'b1),
    .dout(grp_fu_605_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 4'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state34)) begin
            ap_return_preg <= UnifiedRetVal_reg_388;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_s_fu_497_p2 == 1'd0))) begin
        UnifiedRetVal_reg_388 <= 4'd14;
    end else if (((1'b1 == ap_CS_fsm_state15) & (tmp_15_fu_582_p2 == 1'd0))) begin
        UnifiedRetVal_reg_388 <= 4'd12;
    end else if (((1'b1 == ap_CS_fsm_state25) & (tmp_17_fu_625_p2 == 1'd0))) begin
        UnifiedRetVal_reg_388 <= 4'd11;
    end else if (((1'b1 == ap_CS_fsm_state9) & (tmp_13_fu_520_p1 == 1'd1) & (exitcond2_fu_503_p2 == 1'd1))) begin
        UnifiedRetVal_reg_388 <= 4'd13;
    end else if (((1'b1 == ap_CS_fsm_state30) & (tmp_i9_fu_757_p2 == 1'd1))) begin
        UnifiedRetVal_reg_388 <= p_s_fu_819_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (exitcond2_fu_503_p2 == 1'd1) & (tmp_13_fu_520_p1 == 1'd0))) begin
        c_reg_301 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        c_reg_301 <= c_1_reg_952;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_3_fu_445_p2 == 1'd1))) begin
        e_reg_256 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        e_reg_256 <= e_1_reg_897;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (tmp_8_fu_480_p2 == 1'd0))) begin
        i_1_reg_278 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        i_1_reg_278 <= i_5_reg_931;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (exitcond1_fu_534_p2 == 1'd1))) begin
        i_2_reg_312 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state15) & (tmp_15_fu_582_p2 == 1'd1))) begin
        i_2_reg_312 <= i_6_reg_970;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (tmp_20_fu_563_p3 == 1'd1))) begin
        i_3_reg_323 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        i_3_reg_323 <= i_7_reg_986;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state32) & (tmp_285_i_fu_837_p2 == 1'd0))) begin
        i_i7_reg_367 <= i_9_fu_848_p2;
    end else if (((1'b1 == ap_CS_fsm_state26) & (tmp_i_fu_640_p2 == 1'd1))) begin
        i_i7_reg_367 <= 3'd7;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) & (tmp_17_fu_625_p2 == 1'd1))) begin
        i_i_reg_346 <= 4'd11;
    end else if (((1'b1 == ap_CS_fsm_state28) & (tmp_280_i_fu_712_p2 == 1'd0))) begin
        i_i_reg_346 <= i_8_fu_723_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond3_fu_451_p2 == 1'd1))) begin
        i_reg_267 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (tmp_s_fu_497_p2 == 1'd1))) begin
        i_reg_267 <= i_4_reg_915;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_428_p2 == 1'd1))) begin
        invdar1_reg_245 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (tmp_3_fu_445_p2 == 1'd0))) begin
        invdar1_reg_245 <= indvarinc1_fu_434_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_428_p2 == 1'd0))) begin
        invdar_reg_234 <= indvarinc_fu_417_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        invdar_reg_234 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        j_0_in_i1_reg_379 <= i_i7_cast_reg_1059;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        j_0_in_i1_reg_379 <= j_1_reg_1082;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        j_0_in_i_reg_358 <= i_i_cast_reg_1011;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        j_0_in_i_reg_358 <= j_reg_1041;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        s_i8_fu_92 <= p_s_1_i1_fu_865_p3;
    end else if (((1'b1 == ap_CS_fsm_state26) & (tmp_i_fu_640_p2 == 1'd1))) begin
        s_i8_fu_92 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        s_i_fu_88 <= p_s_1_i_fu_740_p3;
    end else if (((1'b1 == ap_CS_fsm_state25) & (tmp_17_fu_625_p2 == 1'd1))) begin
        s_i_fu_88 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (tmp_20_fu_563_p3 == 1'd1))) begin
        sum_1_reg_334 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        sum_1_reg_334 <= sum_3_fu_615_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (tmp_8_fu_480_p2 == 1'd0))) begin
        sum_reg_289 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        sum_reg_289 <= sum_2_fu_528_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        c_1_reg_952 <= c_1_fu_540_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        cornerCount_addr_1_reg_962 <= tmp_11_fu_551_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        cubiecube_0_cp_load_1_reg_1077 <= cubiecube_0_cp_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        cubiecube_0_ep_load_1_reg_1036 <= cubiecube_0_ep_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        e_1_reg_897 <= e_1_fu_457_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        edgeCount_addr_1_reg_907 <= tmp_5_fu_468_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_4_reg_915 <= i_4_fu_486_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_5_reg_931 <= i_5_fu_509_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i_6_reg_970 <= i_6_fu_571_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        i_7_reg_986 <= i_7_fu_594_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        i_i7_cast_reg_1059[2 : 0] <= i_i7_cast_fu_753_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        i_i_cast_reg_1011[3 : 0] <= i_i_cast_fu_636_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        j_1_reg_1082 <= j_1_fu_827_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        j_reg_1041 <= j_fu_702_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) & (tmp_i_fu_640_p2 == 1'd1))) begin
        tmp_24_reg_1031 <= tmp_24_fu_689_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        ap_return = UnifiedRetVal_reg_388;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        cornerCount_address0 = tmp_14_fu_577_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        cornerCount_address0 = cornerCount_addr_1_reg_962;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        cornerCount_address0 = tmp_11_fu_551_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cornerCount_address0 = tmp_2_fu_440_p1;
    end else begin
        cornerCount_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12))) begin
        cornerCount_ce0 = 1'b1;
    end else begin
        cornerCount_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        cornerCount_d0 = tmp_12_fu_556_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cornerCount_d0 = 32'd0;
    end else begin
        cornerCount_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state13))) begin
        cornerCount_we0 = 1'b1;
    end else begin
        cornerCount_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        cubiecube_0_co_ce0 = 1'b1;
    end else begin
        cubiecube_0_co_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        cubiecube_0_cp_address0 = tmp_286_i_fu_843_p1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        cubiecube_0_cp_address0 = tmp_i1_fu_763_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cubiecube_0_cp_address0 = tmp_10_fu_546_p1;
    end else begin
        cubiecube_0_cp_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state11))) begin
        cubiecube_0_cp_ce0 = 1'b1;
    end else begin
        cubiecube_0_cp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        cubiecube_0_eo_ce0 = 1'b1;
    end else begin
        cubiecube_0_eo_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        cubiecube_0_ep_address0 = tmp_281_i_fu_718_p1;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        cubiecube_0_ep_address0 = tmp_i_28_fu_646_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        cubiecube_0_ep_address0 = tmp_4_fu_463_p1;
    end else begin
        cubiecube_0_ep_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26))) begin
        cubiecube_0_ep_ce0 = 1'b1;
    end else begin
        cubiecube_0_ep_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        edgeCount_address0 = tmp_9_fu_492_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        edgeCount_address0 = edgeCount_addr_1_reg_907;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        edgeCount_address0 = tmp_5_fu_468_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        edgeCount_address0 = tmp_fu_423_p1;
    end else begin
        edgeCount_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        edgeCount_ce0 = 1'b1;
    end else begin
        edgeCount_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        edgeCount_d0 = tmp_6_fu_473_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        edgeCount_d0 = 32'd0;
    end else begin
        edgeCount_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6))) begin
        edgeCount_we0 = 1'b1;
    end else begin
        edgeCount_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) & (exitcond_fu_588_p2 == 1'd1))) begin
        grp_fu_605_ap_start = 1'b1;
    end else begin
        grp_fu_605_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_428_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (tmp_3_fu_445_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond3_fu_451_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (tmp_8_fu_480_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (tmp_s_fu_497_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (exitcond2_fu_503_p2 == 1'd1) & (tmp_13_fu_520_p1 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else if (((1'b1 == ap_CS_fsm_state9) & (tmp_13_fu_520_p1 == 1'd1) & (exitcond2_fu_503_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (exitcond1_fu_534_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (tmp_20_fu_563_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (tmp_15_fu_582_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (exitcond_fu_588_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == ap_CS_fsm_state25) & (tmp_17_fu_625_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == ap_CS_fsm_state26) & (tmp_i_fu_640_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (tmp_280_i_fu_712_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == ap_CS_fsm_state30) & (tmp_i9_fu_757_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            if (((1'b1 == ap_CS_fsm_state32) & (tmp_285_i_fu_837_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign c_1_fu_540_p2 = (c_reg_301 + 4'd1);

assign cubiecube_0_co_address0 = tmp_18_fu_600_p1;

assign cubiecube_0_eo_address0 = tmp_7_fu_515_p1;

assign e_1_fu_457_p2 = (e_reg_256 + 4'd1);

assign exitcond1_fu_534_p2 = ((c_reg_301 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond2_fu_503_p2 = ((i_1_reg_278 == 4'd12) ? 1'b1 : 1'b0);

assign exitcond3_fu_451_p2 = ((e_reg_256 == 4'd12) ? 1'b1 : 1'b0);

assign exitcond_fu_588_p2 = ((i_3_reg_323 == 4'd8) ? 1'b1 : 1'b0);

assign grp_fu_605_p1 = 5'd3;

assign i_4_fu_486_p2 = (i_reg_267 + 4'd1);

assign i_5_fu_509_p2 = (i_1_reg_278 + 4'd1);

assign i_6_fu_571_p2 = (i_2_reg_312 + 4'd1);

assign i_7_fu_594_p2 = (i_3_reg_323 + 4'd1);

assign i_8_fu_723_p2 = ($signed(i_i_reg_346) + $signed(4'd15));

assign i_9_fu_848_p2 = ($signed(i_i7_reg_367) + $signed(3'd7));

assign i_i7_cast_fu_753_p1 = i_i7_reg_367;

assign i_i_cast_fu_636_p1 = i_i_reg_346;

assign indvarinc1_fu_434_p2 = (invdar1_reg_245 + 3'd1);

assign indvarinc_fu_417_p2 = (invdar_reg_234 + 4'd1);

assign j_1_cast_fu_833_p1 = j_1_fu_827_p2;

assign j_1_fu_827_p2 = ($signed(j_0_in_i1_reg_379) + $signed(4'd15));

assign j_cast_fu_708_p1 = j_fu_702_p2;

assign j_fu_702_p2 = ($signed(j_0_in_i_reg_358) + $signed(5'd31));

assign p_s_1_i1_fu_865_p3 = ((tmp_287_i_fu_854_p2[0:0] === 1'b1) ? s_1_fu_859_p2 : s_i8_fu_92);

assign p_s_1_i_fu_740_p3 = ((tmp_282_i_fu_729_p2[0:0] === 1'b1) ? s_fu_734_p2 : s_i_fu_88);

assign p_s_fu_819_p3 = ((tmp_19_fu_814_p2[0:0] === 1'b1) ? 4'd0 : 4'd10);

assign s_1_fu_859_p2 = (s_i8_fu_92 + 32'd1);

assign s_fu_734_p2 = (s_i_fu_88 + 32'd1);

assign sum_2_fu_528_p2 = (tmp_12_cast_cast_fu_524_p1 + sum_reg_289);

assign sum_3_fu_615_p2 = (sum_1_reg_334 + tmp_22_cast_cast_cas_fu_611_p1);

assign tmp_10_fu_546_p1 = c_reg_301;

assign tmp_11_fu_551_p1 = cubiecube_0_cp_q0;

assign tmp_12_cast_cast_fu_524_p1 = cubiecube_0_eo_q0;

assign tmp_12_fu_556_p2 = (cornerCount_q0 + 32'd1);

assign tmp_13_fu_520_p1 = sum_reg_289[0:0];

assign tmp_14_fu_577_p1 = i_2_reg_312;

assign tmp_15_fu_582_p2 = ((cornerCount_q0 == 32'd1) ? 1'b1 : 1'b0);

assign tmp_17_fu_625_p2 = ((tmp_21_fu_621_p1 == 3'd0) ? 1'b1 : 1'b0);

assign tmp_18_fu_600_p1 = i_3_reg_323;

assign tmp_19_fu_814_p2 = ((tmp_24_reg_1031 == tmp_29_fu_806_p3) ? 1'b1 : 1'b0);

assign tmp_1_fu_428_p2 = ((invdar_reg_234 == 4'd11) ? 1'b1 : 1'b0);

assign tmp_20_fu_563_p3 = i_2_reg_312[32'd3];

assign tmp_21_fu_621_p1 = grp_fu_605_p2[2:0];

assign tmp_22_cast_cast_cas_fu_611_p1 = cubiecube_0_co_q0;

assign tmp_22_fu_651_p3 = s_i_fu_88[32'd31];

assign tmp_23_fu_681_p3 = {{1'd0}, {tmp_25_fu_659_p1}};

assign tmp_24_fu_689_p3 = ((tmp_22_fu_651_p3[0:0] === 1'b1) ? tmp_30_fu_675_p2 : tmp_23_fu_681_p3);

assign tmp_25_fu_659_p1 = s_i_fu_88[0:0];

assign tmp_26_fu_663_p1 = s_i_fu_88[0:0];

assign tmp_27_fu_667_p3 = {{1'd0}, {tmp_26_fu_663_p1}};

assign tmp_280_i_fu_712_p2 = (($signed(j_0_in_i_reg_358) > $signed(5'd0)) ? 1'b1 : 1'b0);

assign tmp_281_i_fu_718_p1 = $unsigned(j_cast_fu_708_p1);

assign tmp_282_i_fu_729_p2 = ((cubiecube_0_ep_q0 > cubiecube_0_ep_load_1_reg_1036) ? 1'b1 : 1'b0);

assign tmp_285_i_fu_837_p2 = (($signed(j_0_in_i1_reg_379) > $signed(4'd0)) ? 1'b1 : 1'b0);

assign tmp_286_i_fu_843_p1 = $unsigned(j_1_cast_fu_833_p1);

assign tmp_287_i_fu_854_p2 = ((cubiecube_0_cp_q0 > cubiecube_0_cp_load_1_reg_1077) ? 1'b1 : 1'b0);

assign tmp_28_fu_798_p3 = {{1'd0}, {tmp_32_fu_776_p1}};

assign tmp_29_fu_806_p3 = ((tmp_31_fu_768_p3[0:0] === 1'b1) ? tmp_35_fu_792_p2 : tmp_28_fu_798_p3);

assign tmp_2_fu_440_p1 = invdar1_reg_245;

assign tmp_30_fu_675_p2 = (2'd0 - tmp_27_fu_667_p3);

assign tmp_31_fu_768_p3 = s_i8_fu_92[32'd31];

assign tmp_32_fu_776_p1 = s_i8_fu_92[0:0];

assign tmp_33_fu_780_p1 = s_i8_fu_92[0:0];

assign tmp_34_fu_784_p3 = {{1'd0}, {tmp_33_fu_780_p1}};

assign tmp_35_fu_792_p2 = (2'd0 - tmp_34_fu_784_p3);

assign tmp_3_fu_445_p2 = ((invdar1_reg_245 == 3'd7) ? 1'b1 : 1'b0);

assign tmp_4_fu_463_p1 = e_reg_256;

assign tmp_5_fu_468_p1 = cubiecube_0_ep_q0;

assign tmp_6_fu_473_p2 = (edgeCount_q0 + 32'd1);

assign tmp_7_fu_515_p1 = i_1_reg_278;

assign tmp_8_fu_480_p2 = ((i_reg_267 < 4'd12) ? 1'b1 : 1'b0);

assign tmp_9_fu_492_p1 = i_reg_267;

assign tmp_fu_423_p1 = invdar_reg_234;

assign tmp_i1_fu_763_p1 = i_i7_reg_367;

assign tmp_i9_fu_757_p2 = ((i_i7_reg_367 == 3'd0) ? 1'b1 : 1'b0);

assign tmp_i_28_fu_646_p1 = i_i_reg_346;

assign tmp_i_fu_640_p2 = ((i_i_reg_346 == 4'd0) ? 1'b1 : 1'b0);

assign tmp_s_fu_497_p2 = ((edgeCount_q0 == 32'd1) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    i_i_cast_reg_1011[4] <= 1'b0;
    i_i7_cast_reg_1059[3] <= 1'b0;
end

endmodule //verify
