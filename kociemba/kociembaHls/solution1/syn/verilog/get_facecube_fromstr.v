// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module get_facecube_fromstr (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        cubeString_address0,
        cubeString_ce0,
        cubeString_q0,
        res_f_0_address0,
        res_f_0_ce0,
        res_f_0_we0,
        res_f_0_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] cubeString_address0;
output   cubeString_ce0;
input  [7:0] cubeString_q0;
output  [5:0] res_f_0_address0;
output   res_f_0_ce0;
output   res_f_0_we0;
output  [2:0] res_f_0_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg cubeString_ce0;
reg[5:0] res_f_0_address0;
reg res_f_0_ce0;
reg res_f_0_we0;
reg[2:0] res_f_0_d0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] i_21_fu_137_p2;
reg   [5:0] i_21_reg_151;
wire    ap_CS_fsm_state2;
wire   [63:0] tmp_fu_143_p1;
reg   [63:0] tmp_reg_156;
wire   [0:0] exitcond_fu_131_p2;
reg   [5:0] i_reg_120;
wire    ap_CS_fsm_state3;
wire   [5:0] res_f_0_addr_4_gep_fu_75_p3;
wire   [5:0] res_f_0_addr_3_gep_fu_84_p3;
wire   [5:0] res_f_0_addr_2_gep_fu_93_p3;
wire   [5:0] res_f_0_addr_1_gep_fu_102_p3;
wire   [5:0] res_f_0_addr_gep_fu_111_p3;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_120 <= i_21_reg_151;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_120 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_21_reg_151 <= i_21_fu_137_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_131_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_reg_156[5 : 0] <= tmp_fu_143_p1[5 : 0];
    end
end

always @ (*) begin
    if ((((exitcond_fu_131_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_131_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cubeString_ce0 = 1'b1;
    end else begin
        cubeString_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if ((cubeString_q0 == 8'd85)) begin
            res_f_0_address0 = res_f_0_addr_gep_fu_111_p3;
        end else if ((cubeString_q0 == 8'd82)) begin
            res_f_0_address0 = res_f_0_addr_1_gep_fu_102_p3;
        end else if ((cubeString_q0 == 8'd70)) begin
            res_f_0_address0 = res_f_0_addr_2_gep_fu_93_p3;
        end else if ((cubeString_q0 == 8'd68)) begin
            res_f_0_address0 = res_f_0_addr_3_gep_fu_84_p3;
        end else if ((cubeString_q0 == 8'd76)) begin
            res_f_0_address0 = res_f_0_addr_4_gep_fu_75_p3;
        end else if ((cubeString_q0 == 8'd66)) begin
            res_f_0_address0 = tmp_reg_156;
        end else begin
            res_f_0_address0 = 'bx;
        end
    end else begin
        res_f_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((cubeString_q0 == 8'd85) & (1'b1 == ap_CS_fsm_state3)) | ((cubeString_q0 == 8'd82) & (1'b1 == ap_CS_fsm_state3)) | ((cubeString_q0 == 8'd70) & (1'b1 == ap_CS_fsm_state3)) | ((cubeString_q0 == 8'd68) & (1'b1 == ap_CS_fsm_state3)) | ((cubeString_q0 == 8'd76) & (1'b1 == ap_CS_fsm_state3)) | ((cubeString_q0 == 8'd66) & (1'b1 == ap_CS_fsm_state3)))) begin
        res_f_0_ce0 = 1'b1;
    end else begin
        res_f_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if ((cubeString_q0 == 8'd85)) begin
            res_f_0_d0 = 3'd0;
        end else if ((cubeString_q0 == 8'd82)) begin
            res_f_0_d0 = 3'd1;
        end else if ((cubeString_q0 == 8'd70)) begin
            res_f_0_d0 = 3'd2;
        end else if ((cubeString_q0 == 8'd68)) begin
            res_f_0_d0 = 3'd3;
        end else if ((cubeString_q0 == 8'd76)) begin
            res_f_0_d0 = 3'd4;
        end else if ((cubeString_q0 == 8'd66)) begin
            res_f_0_d0 = 3'd5;
        end else begin
            res_f_0_d0 = 'bx;
        end
    end else begin
        res_f_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((cubeString_q0 == 8'd85) & (1'b1 == ap_CS_fsm_state3)) | ((cubeString_q0 == 8'd82) & (1'b1 == ap_CS_fsm_state3)) | ((cubeString_q0 == 8'd70) & (1'b1 == ap_CS_fsm_state3)) | ((cubeString_q0 == 8'd68) & (1'b1 == ap_CS_fsm_state3)) | ((cubeString_q0 == 8'd76) & (1'b1 == ap_CS_fsm_state3)) | ((cubeString_q0 == 8'd66) & (1'b1 == ap_CS_fsm_state3)))) begin
        res_f_0_we0 = 1'b1;
    end else begin
        res_f_0_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_fu_131_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign cubeString_address0 = tmp_fu_143_p1;

assign exitcond_fu_131_p2 = ((i_reg_120 == 6'd54) ? 1'b1 : 1'b0);

assign i_21_fu_137_p2 = (i_reg_120 + 6'd1);

assign res_f_0_addr_1_gep_fu_102_p3 = tmp_reg_156;

assign res_f_0_addr_2_gep_fu_93_p3 = tmp_reg_156;

assign res_f_0_addr_3_gep_fu_84_p3 = tmp_reg_156;

assign res_f_0_addr_4_gep_fu_75_p3 = tmp_reg_156;

assign res_f_0_addr_gep_fu_111_p3 = tmp_reg_156;

assign tmp_fu_143_p1 = i_reg_120;

always @ (posedge ap_clk) begin
    tmp_reg_156[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //get_facecube_fromstr
