// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module getPruning (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_table_r_AWVALID,
        m_axi_table_r_AWREADY,
        m_axi_table_r_AWADDR,
        m_axi_table_r_AWID,
        m_axi_table_r_AWLEN,
        m_axi_table_r_AWSIZE,
        m_axi_table_r_AWBURST,
        m_axi_table_r_AWLOCK,
        m_axi_table_r_AWCACHE,
        m_axi_table_r_AWPROT,
        m_axi_table_r_AWQOS,
        m_axi_table_r_AWREGION,
        m_axi_table_r_AWUSER,
        m_axi_table_r_WVALID,
        m_axi_table_r_WREADY,
        m_axi_table_r_WDATA,
        m_axi_table_r_WSTRB,
        m_axi_table_r_WLAST,
        m_axi_table_r_WID,
        m_axi_table_r_WUSER,
        m_axi_table_r_ARVALID,
        m_axi_table_r_ARREADY,
        m_axi_table_r_ARADDR,
        m_axi_table_r_ARID,
        m_axi_table_r_ARLEN,
        m_axi_table_r_ARSIZE,
        m_axi_table_r_ARBURST,
        m_axi_table_r_ARLOCK,
        m_axi_table_r_ARCACHE,
        m_axi_table_r_ARPROT,
        m_axi_table_r_ARQOS,
        m_axi_table_r_ARREGION,
        m_axi_table_r_ARUSER,
        m_axi_table_r_RVALID,
        m_axi_table_r_RREADY,
        m_axi_table_r_RDATA,
        m_axi_table_r_RLAST,
        m_axi_table_r_RID,
        m_axi_table_r_RUSER,
        m_axi_table_r_RRESP,
        m_axi_table_r_BVALID,
        m_axi_table_r_BREADY,
        m_axi_table_r_BRESP,
        m_axi_table_r_BID,
        m_axi_table_r_BUSER,
        table_offset,
        index,
        ap_return
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_table_r_AWVALID;
input   m_axi_table_r_AWREADY;
output  [31:0] m_axi_table_r_AWADDR;
output  [0:0] m_axi_table_r_AWID;
output  [31:0] m_axi_table_r_AWLEN;
output  [2:0] m_axi_table_r_AWSIZE;
output  [1:0] m_axi_table_r_AWBURST;
output  [1:0] m_axi_table_r_AWLOCK;
output  [3:0] m_axi_table_r_AWCACHE;
output  [2:0] m_axi_table_r_AWPROT;
output  [3:0] m_axi_table_r_AWQOS;
output  [3:0] m_axi_table_r_AWREGION;
output  [0:0] m_axi_table_r_AWUSER;
output   m_axi_table_r_WVALID;
input   m_axi_table_r_WREADY;
output  [15:0] m_axi_table_r_WDATA;
output  [1:0] m_axi_table_r_WSTRB;
output   m_axi_table_r_WLAST;
output  [0:0] m_axi_table_r_WID;
output  [0:0] m_axi_table_r_WUSER;
output   m_axi_table_r_ARVALID;
input   m_axi_table_r_ARREADY;
output  [31:0] m_axi_table_r_ARADDR;
output  [0:0] m_axi_table_r_ARID;
output  [31:0] m_axi_table_r_ARLEN;
output  [2:0] m_axi_table_r_ARSIZE;
output  [1:0] m_axi_table_r_ARBURST;
output  [1:0] m_axi_table_r_ARLOCK;
output  [3:0] m_axi_table_r_ARCACHE;
output  [2:0] m_axi_table_r_ARPROT;
output  [3:0] m_axi_table_r_ARQOS;
output  [3:0] m_axi_table_r_ARREGION;
output  [0:0] m_axi_table_r_ARUSER;
input   m_axi_table_r_RVALID;
output   m_axi_table_r_RREADY;
input  [15:0] m_axi_table_r_RDATA;
input   m_axi_table_r_RLAST;
input  [0:0] m_axi_table_r_RID;
input  [0:0] m_axi_table_r_RUSER;
input  [1:0] m_axi_table_r_RRESP;
input   m_axi_table_r_BVALID;
output   m_axi_table_r_BREADY;
input  [1:0] m_axi_table_r_BRESP;
input  [0:0] m_axi_table_r_BID;
input  [0:0] m_axi_table_r_BUSER;
input  [30:0] table_offset;
input  [24:0] index;
output  [3:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_table_r_ARVALID;
reg m_axi_table_r_RREADY;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    table_r_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    table_r_blk_n_R;
wire    ap_CS_fsm_state10;
wire   [0:0] tmp_146_fu_78_p1;
reg   [0:0] tmp_146_reg_220;
reg   [30:0] tmp_reg_225;
wire   [0:0] tmp_148_fu_156_p1;
reg   [0:0] tmp_148_reg_230;
reg   [31:0] table_addr_reg_235;
wire    ap_CS_fsm_state2;
reg   [15:0] table_addr_read_reg_241;
wire   [63:0] sum_fu_171_p2;
reg    ap_reg_ioackin_m_axi_table_r_ARREADY;
reg    ap_sig_ioackin_m_axi_table_r_ARREADY;
wire   [24:0] p_neg_fu_90_p2;
wire   [23:0] tmp_50_fu_96_p4;
wire  signed [30:0] tmp_51_fu_106_p1;
wire   [31:0] p_lshr_fu_110_p1;
wire   [23:0] tmp_53_fu_120_p4;
wire  signed [30:0] tmp_54_fu_130_p1;
wire   [0:0] tmp_147_fu_82_p3;
wire   [31:0] p_neg_t_fu_114_p2;
wire   [31:0] p_lshr_f_fu_134_p1;
wire   [31:0] tmp_s_fu_138_p3;
wire  signed [62:0] tmp_204_fu_160_p1;
wire   [63:0] tmp_205_fu_163_p1;
wire   [63:0] sext_fu_167_p1;
wire    ap_CS_fsm_state11;
wire   [3:0] tmp_149_fu_183_p3;
wire   [15:0] tmp_206_fu_190_p1;
wire   [15:0] table_load5_fu_194_p2;
wire   [3:0] tmp_207_fu_199_p4;
wire   [3:0] tmp_150_fu_209_p1;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 ap_reg_ioackin_m_axi_table_r_ARREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_table_r_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            if ((ap_sig_ioackin_m_axi_table_r_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_table_r_ARREADY <= 1'b0;
            end else if ((m_axi_table_r_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_table_r_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_table_r_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        table_addr_read_reg_241 <= m_axi_table_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        table_addr_reg_235 <= sum_fu_171_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_146_reg_220 <= tmp_146_fu_78_p1;
        tmp_148_reg_230 <= tmp_148_fu_156_p1;
        tmp_reg_225 <= {{tmp_s_fu_138_p3[31:1]}};
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_table_r_ARREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_table_r_ARREADY = m_axi_table_r_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_table_r_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_table_r_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_table_r_ARVALID = 1'b1;
    end else begin
        m_axi_table_r_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_table_r_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        m_axi_table_r_RREADY = 1'b1;
    end else begin
        m_axi_table_r_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        table_r_blk_n_AR = m_axi_table_r_ARREADY;
    end else begin
        table_r_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        table_r_blk_n_R = m_axi_table_r_RVALID;
    end else begin
        table_r_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (ap_sig_ioackin_m_axi_table_r_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((m_axi_table_r_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_return = ((tmp_146_reg_220[0:0] === 1'b1) ? tmp_207_fu_199_p4 : tmp_150_fu_209_p1);

assign m_axi_table_r_ARADDR = table_addr_reg_235;

assign m_axi_table_r_ARBURST = 2'd0;

assign m_axi_table_r_ARCACHE = 4'd0;

assign m_axi_table_r_ARID = 1'd0;

assign m_axi_table_r_ARLEN = 32'd1;

assign m_axi_table_r_ARLOCK = 2'd0;

assign m_axi_table_r_ARPROT = 3'd0;

assign m_axi_table_r_ARQOS = 4'd0;

assign m_axi_table_r_ARREGION = 4'd0;

assign m_axi_table_r_ARSIZE = 3'd0;

assign m_axi_table_r_ARUSER = 1'd0;

assign m_axi_table_r_AWADDR = 32'd0;

assign m_axi_table_r_AWBURST = 2'd0;

assign m_axi_table_r_AWCACHE = 4'd0;

assign m_axi_table_r_AWID = 1'd0;

assign m_axi_table_r_AWLEN = 32'd0;

assign m_axi_table_r_AWLOCK = 2'd0;

assign m_axi_table_r_AWPROT = 3'd0;

assign m_axi_table_r_AWQOS = 4'd0;

assign m_axi_table_r_AWREGION = 4'd0;

assign m_axi_table_r_AWSIZE = 3'd0;

assign m_axi_table_r_AWUSER = 1'd0;

assign m_axi_table_r_AWVALID = 1'b0;

assign m_axi_table_r_BREADY = 1'b0;

assign m_axi_table_r_WDATA = 16'd0;

assign m_axi_table_r_WID = 1'd0;

assign m_axi_table_r_WLAST = 1'b0;

assign m_axi_table_r_WSTRB = 2'd0;

assign m_axi_table_r_WUSER = 1'd0;

assign m_axi_table_r_WVALID = 1'b0;

assign p_lshr_f_fu_134_p1 = $unsigned(tmp_54_fu_130_p1);

assign p_lshr_fu_110_p1 = $unsigned(tmp_51_fu_106_p1);

assign p_neg_fu_90_p2 = (25'd0 - index);

assign p_neg_t_fu_114_p2 = (32'd0 - p_lshr_fu_110_p1);

assign sext_fu_167_p1 = table_offset;

assign sum_fu_171_p2 = (tmp_205_fu_163_p1 + sext_fu_167_p1);

assign table_load5_fu_194_p2 = table_addr_read_reg_241 >> tmp_206_fu_190_p1;

assign tmp_146_fu_78_p1 = index[0:0];

assign tmp_147_fu_82_p3 = index[32'd24];

assign tmp_148_fu_156_p1 = tmp_s_fu_138_p3[0:0];

assign tmp_149_fu_183_p3 = {{tmp_148_reg_230}, {3'd0}};

assign tmp_150_fu_209_p1 = table_load5_fu_194_p2[3:0];

assign tmp_204_fu_160_p1 = $signed(tmp_reg_225);

assign tmp_205_fu_163_p1 = $unsigned(tmp_204_fu_160_p1);

assign tmp_206_fu_190_p1 = tmp_149_fu_183_p3;

assign tmp_207_fu_199_p4 = {{table_load5_fu_194_p2[7:4]}};

assign tmp_50_fu_96_p4 = {{p_neg_fu_90_p2[24:1]}};

assign tmp_51_fu_106_p1 = $signed(tmp_50_fu_96_p4);

assign tmp_53_fu_120_p4 = {{index[24:1]}};

assign tmp_54_fu_130_p1 = $signed(tmp_53_fu_120_p4);

assign tmp_s_fu_138_p3 = ((tmp_147_fu_82_p3[0:0] === 1'b1) ? p_neg_t_fu_114_p2 : p_lshr_f_fu_134_p1);

endmodule //getPruning
