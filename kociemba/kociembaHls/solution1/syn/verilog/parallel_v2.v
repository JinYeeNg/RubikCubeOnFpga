// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module parallel_v2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        P1Buffer_0_flip_address0,
        P1Buffer_0_flip_ce0,
        P1Buffer_0_flip_we0,
        P1Buffer_0_flip_d0,
        P1Buffer_0_flip_q0,
        P1Buffer_0_twist_address0,
        P1Buffer_0_twist_ce0,
        P1Buffer_0_twist_we0,
        P1Buffer_0_twist_d0,
        P1Buffer_0_twist_q0,
        P1Buffer_0_slice_address0,
        P1Buffer_0_slice_ce0,
        P1Buffer_0_slice_we0,
        P1Buffer_0_slice_d0,
        P1Buffer_0_slice_q0,
        P1Buffer_0_depthPha_address0,
        P1Buffer_0_depthPha_ce0,
        P1Buffer_0_depthPha_we0,
        P1Buffer_0_depthPha_d0,
        P1Buffer_0_depthPha_q0,
        P1Buffer_0_n_address0,
        P1Buffer_0_n_ce0,
        P1Buffer_0_n_we0,
        P1Buffer_0_n_d0,
        P1Buffer_0_n_q0,
        P1Buffer_0_i_address0,
        P1Buffer_0_i_ce0,
        P1Buffer_0_i_we0,
        P1Buffer_0_i_d0,
        P1Buffer_0_i_q0,
        P1Start_read,
        P1End_read,
        first_read,
        depthPhase1,
        m_axi_twistMove2_AWVALID,
        m_axi_twistMove2_AWREADY,
        m_axi_twistMove2_AWADDR,
        m_axi_twistMove2_AWID,
        m_axi_twistMove2_AWLEN,
        m_axi_twistMove2_AWSIZE,
        m_axi_twistMove2_AWBURST,
        m_axi_twistMove2_AWLOCK,
        m_axi_twistMove2_AWCACHE,
        m_axi_twistMove2_AWPROT,
        m_axi_twistMove2_AWQOS,
        m_axi_twistMove2_AWREGION,
        m_axi_twistMove2_AWUSER,
        m_axi_twistMove2_WVALID,
        m_axi_twistMove2_WREADY,
        m_axi_twistMove2_WDATA,
        m_axi_twistMove2_WSTRB,
        m_axi_twistMove2_WLAST,
        m_axi_twistMove2_WID,
        m_axi_twistMove2_WUSER,
        m_axi_twistMove2_ARVALID,
        m_axi_twistMove2_ARREADY,
        m_axi_twistMove2_ARADDR,
        m_axi_twistMove2_ARID,
        m_axi_twistMove2_ARLEN,
        m_axi_twistMove2_ARSIZE,
        m_axi_twistMove2_ARBURST,
        m_axi_twistMove2_ARLOCK,
        m_axi_twistMove2_ARCACHE,
        m_axi_twistMove2_ARPROT,
        m_axi_twistMove2_ARQOS,
        m_axi_twistMove2_ARREGION,
        m_axi_twistMove2_ARUSER,
        m_axi_twistMove2_RVALID,
        m_axi_twistMove2_RREADY,
        m_axi_twistMove2_RDATA,
        m_axi_twistMove2_RLAST,
        m_axi_twistMove2_RID,
        m_axi_twistMove2_RUSER,
        m_axi_twistMove2_RRESP,
        m_axi_twistMove2_BVALID,
        m_axi_twistMove2_BREADY,
        m_axi_twistMove2_BRESP,
        m_axi_twistMove2_BID,
        m_axi_twistMove2_BUSER,
        twistMove2_offset,
        m_axi_flipMove2_AWVALID,
        m_axi_flipMove2_AWREADY,
        m_axi_flipMove2_AWADDR,
        m_axi_flipMove2_AWID,
        m_axi_flipMove2_AWLEN,
        m_axi_flipMove2_AWSIZE,
        m_axi_flipMove2_AWBURST,
        m_axi_flipMove2_AWLOCK,
        m_axi_flipMove2_AWCACHE,
        m_axi_flipMove2_AWPROT,
        m_axi_flipMove2_AWQOS,
        m_axi_flipMove2_AWREGION,
        m_axi_flipMove2_AWUSER,
        m_axi_flipMove2_WVALID,
        m_axi_flipMove2_WREADY,
        m_axi_flipMove2_WDATA,
        m_axi_flipMove2_WSTRB,
        m_axi_flipMove2_WLAST,
        m_axi_flipMove2_WID,
        m_axi_flipMove2_WUSER,
        m_axi_flipMove2_ARVALID,
        m_axi_flipMove2_ARREADY,
        m_axi_flipMove2_ARADDR,
        m_axi_flipMove2_ARID,
        m_axi_flipMove2_ARLEN,
        m_axi_flipMove2_ARSIZE,
        m_axi_flipMove2_ARBURST,
        m_axi_flipMove2_ARLOCK,
        m_axi_flipMove2_ARCACHE,
        m_axi_flipMove2_ARPROT,
        m_axi_flipMove2_ARQOS,
        m_axi_flipMove2_ARREGION,
        m_axi_flipMove2_ARUSER,
        m_axi_flipMove2_RVALID,
        m_axi_flipMove2_RREADY,
        m_axi_flipMove2_RDATA,
        m_axi_flipMove2_RLAST,
        m_axi_flipMove2_RID,
        m_axi_flipMove2_RUSER,
        m_axi_flipMove2_RRESP,
        m_axi_flipMove2_BVALID,
        m_axi_flipMove2_BREADY,
        m_axi_flipMove2_BRESP,
        m_axi_flipMove2_BID,
        m_axi_flipMove2_BUSER,
        flipMove2_offset,
        m_axi_FRtoBR_Move2_AWVALID,
        m_axi_FRtoBR_Move2_AWREADY,
        m_axi_FRtoBR_Move2_AWADDR,
        m_axi_FRtoBR_Move2_AWID,
        m_axi_FRtoBR_Move2_AWLEN,
        m_axi_FRtoBR_Move2_AWSIZE,
        m_axi_FRtoBR_Move2_AWBURST,
        m_axi_FRtoBR_Move2_AWLOCK,
        m_axi_FRtoBR_Move2_AWCACHE,
        m_axi_FRtoBR_Move2_AWPROT,
        m_axi_FRtoBR_Move2_AWQOS,
        m_axi_FRtoBR_Move2_AWREGION,
        m_axi_FRtoBR_Move2_AWUSER,
        m_axi_FRtoBR_Move2_WVALID,
        m_axi_FRtoBR_Move2_WREADY,
        m_axi_FRtoBR_Move2_WDATA,
        m_axi_FRtoBR_Move2_WSTRB,
        m_axi_FRtoBR_Move2_WLAST,
        m_axi_FRtoBR_Move2_WID,
        m_axi_FRtoBR_Move2_WUSER,
        m_axi_FRtoBR_Move2_ARVALID,
        m_axi_FRtoBR_Move2_ARREADY,
        m_axi_FRtoBR_Move2_ARADDR,
        m_axi_FRtoBR_Move2_ARID,
        m_axi_FRtoBR_Move2_ARLEN,
        m_axi_FRtoBR_Move2_ARSIZE,
        m_axi_FRtoBR_Move2_ARBURST,
        m_axi_FRtoBR_Move2_ARLOCK,
        m_axi_FRtoBR_Move2_ARCACHE,
        m_axi_FRtoBR_Move2_ARPROT,
        m_axi_FRtoBR_Move2_ARQOS,
        m_axi_FRtoBR_Move2_ARREGION,
        m_axi_FRtoBR_Move2_ARUSER,
        m_axi_FRtoBR_Move2_RVALID,
        m_axi_FRtoBR_Move2_RREADY,
        m_axi_FRtoBR_Move2_RDATA,
        m_axi_FRtoBR_Move2_RLAST,
        m_axi_FRtoBR_Move2_RID,
        m_axi_FRtoBR_Move2_RUSER,
        m_axi_FRtoBR_Move2_RRESP,
        m_axi_FRtoBR_Move2_BVALID,
        m_axi_FRtoBR_Move2_BREADY,
        m_axi_FRtoBR_Move2_BRESP,
        m_axi_FRtoBR_Move2_BID,
        m_axi_FRtoBR_Move2_BUSER,
        FRtoBR_Move2_offset,
        Slice_Twist_Prun2_offset,
        Slice_Flip_Prun2_offset,
        P2Buffer_V_flip_din,
        P2Buffer_V_flip_full_n,
        P2Buffer_V_flip_write,
        P2Buffer_V_twist_din,
        P2Buffer_V_twist_full_n,
        P2Buffer_V_twist_write,
        P2Buffer_V_slice_din,
        P2Buffer_V_slice_full_n,
        P2Buffer_V_slice_write,
        P2Buffer_V_parity_din,
        P2Buffer_V_parity_full_n,
        P2Buffer_V_parity_write,
        P2Buffer_V_URFtoDLF_din,
        P2Buffer_V_URFtoDLF_full_n,
        P2Buffer_V_URFtoDLF_write,
        P2Buffer_V_FRtoBR_din,
        P2Buffer_V_FRtoBR_full_n,
        P2Buffer_V_FRtoBR_write,
        P2Buffer_V_URtoDF_din,
        P2Buffer_V_URtoDF_full_n,
        P2Buffer_V_URtoDF_write,
        P2Buffer_V_depthPhas_din,
        P2Buffer_V_depthPhas_full_n,
        P2Buffer_V_depthPhas_write,
        P2Buffer_V_n_din,
        P2Buffer_V_n_full_n,
        P2Buffer_V_n_write,
        P2Buffer_V_i_0_din,
        P2Buffer_V_i_0_full_n,
        P2Buffer_V_i_0_write,
        P2Buffer_V_i_1_din,
        P2Buffer_V_i_1_full_n,
        P2Buffer_V_i_1_write,
        P2Buffer_V_i_2_din,
        P2Buffer_V_i_2_full_n,
        P2Buffer_V_i_2_write,
        P2Buffer_V_i_3_din,
        P2Buffer_V_i_3_full_n,
        P2Buffer_V_i_3_write,
        P2Buffer_V_i_4_din,
        P2Buffer_V_i_4_full_n,
        P2Buffer_V_i_4_write,
        P2Buffer_V_i_5_din,
        P2Buffer_V_i_5_full_n,
        P2Buffer_V_i_5_write,
        P2Buffer_V_i_6_din,
        P2Buffer_V_i_6_full_n,
        P2Buffer_V_i_6_write,
        P2Buffer_V_i_7_din,
        P2Buffer_V_i_7_full_n,
        P2Buffer_V_i_7_write,
        P2Buffer_V_i_8_din,
        P2Buffer_V_i_8_full_n,
        P2Buffer_V_i_8_write,
        P2Buffer_V_i_9_din,
        P2Buffer_V_i_9_full_n,
        P2Buffer_V_i_9_write,
        P2Buffer_V_i_10_din,
        P2Buffer_V_i_10_full_n,
        P2Buffer_V_i_10_write,
        P2Buffer_V_i_11_din,
        P2Buffer_V_i_11_full_n,
        P2Buffer_V_i_11_write,
        P2Buffer_V_i_12_din,
        P2Buffer_V_i_12_full_n,
        P2Buffer_V_i_12_write,
        P2Buffer_V_i_13_din,
        P2Buffer_V_i_13_full_n,
        P2Buffer_V_i_13_write,
        P2Buffer_V_i_14_din,
        P2Buffer_V_i_14_full_n,
        P2Buffer_V_i_14_write,
        P2Buffer_V_i_15_din,
        P2Buffer_V_i_15_full_n,
        P2Buffer_V_i_15_write,
        P2Buffer_V_i_16_din,
        P2Buffer_V_i_16_full_n,
        P2Buffer_V_i_16_write,
        P2Buffer_V_i_17_din,
        P2Buffer_V_i_17_full_n,
        P2Buffer_V_i_17_write,
        P2Buffer_V_i_18_din,
        P2Buffer_V_i_18_full_n,
        P2Buffer_V_i_18_write,
        P2Buffer_V_i_19_din,
        P2Buffer_V_i_19_full_n,
        P2Buffer_V_i_19_write,
        P2Buffer_V_i_20_din,
        P2Buffer_V_i_20_full_n,
        P2Buffer_V_i_20_write,
        P2Buffer_V_i_21_din,
        P2Buffer_V_i_21_full_n,
        P2Buffer_V_i_21_write,
        P2Buffer_V_i_22_din,
        P2Buffer_V_i_22_full_n,
        P2Buffer_V_i_22_write,
        P2Buffer_V_i_23_din,
        P2Buffer_V_i_23_full_n,
        P2Buffer_V_i_23_write,
        P2Buffer_V_i_24_din,
        P2Buffer_V_i_24_full_n,
        P2Buffer_V_i_24_write,
        P2Buffer_V_i_25_din,
        P2Buffer_V_i_25_full_n,
        P2Buffer_V_i_25_write,
        P2Buffer_V_i_26_din,
        P2Buffer_V_i_26_full_n,
        P2Buffer_V_i_26_write,
        P2Buffer_V_i_27_din,
        P2Buffer_V_i_27_full_n,
        P2Buffer_V_i_27_write,
        P2Buffer_V_i_28_din,
        P2Buffer_V_i_28_full_n,
        P2Buffer_V_i_28_write,
        P2Buffer_V_i_29_din,
        P2Buffer_V_i_29_full_n,
        P2Buffer_V_i_29_write,
        P2Buffer_V_i_30_din,
        P2Buffer_V_i_30_full_n,
        P2Buffer_V_i_30_write,
        ap_return
);

parameter    ap_ST_fsm_state1 = 42'd1;
parameter    ap_ST_fsm_state2 = 42'd2;
parameter    ap_ST_fsm_state3 = 42'd4;
parameter    ap_ST_fsm_state4 = 42'd8;
parameter    ap_ST_fsm_state5 = 42'd16;
parameter    ap_ST_fsm_state6 = 42'd32;
parameter    ap_ST_fsm_state7 = 42'd64;
parameter    ap_ST_fsm_state8 = 42'd128;
parameter    ap_ST_fsm_state9 = 42'd256;
parameter    ap_ST_fsm_state10 = 42'd512;
parameter    ap_ST_fsm_state11 = 42'd1024;
parameter    ap_ST_fsm_state12 = 42'd2048;
parameter    ap_ST_fsm_state13 = 42'd4096;
parameter    ap_ST_fsm_pp0_stage0 = 42'd8192;
parameter    ap_ST_fsm_state17 = 42'd16384;
parameter    ap_ST_fsm_state18 = 42'd32768;
parameter    ap_ST_fsm_state19 = 42'd65536;
parameter    ap_ST_fsm_state20 = 42'd131072;
parameter    ap_ST_fsm_state21 = 42'd262144;
parameter    ap_ST_fsm_state22 = 42'd524288;
parameter    ap_ST_fsm_state23 = 42'd1048576;
parameter    ap_ST_fsm_state24 = 42'd2097152;
parameter    ap_ST_fsm_state25 = 42'd4194304;
parameter    ap_ST_fsm_state26 = 42'd8388608;
parameter    ap_ST_fsm_state27 = 42'd16777216;
parameter    ap_ST_fsm_state28 = 42'd33554432;
parameter    ap_ST_fsm_state29 = 42'd67108864;
parameter    ap_ST_fsm_state30 = 42'd134217728;
parameter    ap_ST_fsm_state31 = 42'd268435456;
parameter    ap_ST_fsm_state32 = 42'd536870912;
parameter    ap_ST_fsm_state33 = 42'd1073741824;
parameter    ap_ST_fsm_state34 = 42'd2147483648;
parameter    ap_ST_fsm_state35 = 42'd4294967296;
parameter    ap_ST_fsm_state36 = 42'd8589934592;
parameter    ap_ST_fsm_state37 = 42'd17179869184;
parameter    ap_ST_fsm_state38 = 42'd34359738368;
parameter    ap_ST_fsm_state39 = 42'd68719476736;
parameter    ap_ST_fsm_state40 = 42'd137438953472;
parameter    ap_ST_fsm_state41 = 42'd274877906944;
parameter    ap_ST_fsm_state42 = 42'd549755813888;
parameter    ap_ST_fsm_state43 = 42'd1099511627776;
parameter    ap_ST_fsm_state44 = 42'd2199023255552;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] P1Buffer_0_flip_address0;
output   P1Buffer_0_flip_ce0;
output   P1Buffer_0_flip_we0;
output  [15:0] P1Buffer_0_flip_d0;
input  [15:0] P1Buffer_0_flip_q0;
output  [12:0] P1Buffer_0_twist_address0;
output   P1Buffer_0_twist_ce0;
output   P1Buffer_0_twist_we0;
output  [15:0] P1Buffer_0_twist_d0;
input  [15:0] P1Buffer_0_twist_q0;
output  [12:0] P1Buffer_0_slice_address0;
output   P1Buffer_0_slice_ce0;
output   P1Buffer_0_slice_we0;
output  [15:0] P1Buffer_0_slice_d0;
input  [15:0] P1Buffer_0_slice_q0;
output  [12:0] P1Buffer_0_depthPha_address0;
output   P1Buffer_0_depthPha_ce0;
output   P1Buffer_0_depthPha_we0;
output  [7:0] P1Buffer_0_depthPha_d0;
input  [7:0] P1Buffer_0_depthPha_q0;
output  [12:0] P1Buffer_0_n_address0;
output   P1Buffer_0_n_ce0;
output   P1Buffer_0_n_we0;
output  [7:0] P1Buffer_0_n_d0;
input  [7:0] P1Buffer_0_n_q0;
output  [17:0] P1Buffer_0_i_address0;
output   P1Buffer_0_i_ce0;
output   P1Buffer_0_i_we0;
output  [7:0] P1Buffer_0_i_d0;
input  [7:0] P1Buffer_0_i_q0;
input  [31:0] P1Start_read;
input  [31:0] P1End_read;
input   first_read;
input  [4:0] depthPhase1;
output   m_axi_twistMove2_AWVALID;
input   m_axi_twistMove2_AWREADY;
output  [31:0] m_axi_twistMove2_AWADDR;
output  [0:0] m_axi_twistMove2_AWID;
output  [31:0] m_axi_twistMove2_AWLEN;
output  [2:0] m_axi_twistMove2_AWSIZE;
output  [1:0] m_axi_twistMove2_AWBURST;
output  [1:0] m_axi_twistMove2_AWLOCK;
output  [3:0] m_axi_twistMove2_AWCACHE;
output  [2:0] m_axi_twistMove2_AWPROT;
output  [3:0] m_axi_twistMove2_AWQOS;
output  [3:0] m_axi_twistMove2_AWREGION;
output  [0:0] m_axi_twistMove2_AWUSER;
output   m_axi_twistMove2_WVALID;
input   m_axi_twistMove2_WREADY;
output  [15:0] m_axi_twistMove2_WDATA;
output  [1:0] m_axi_twistMove2_WSTRB;
output   m_axi_twistMove2_WLAST;
output  [0:0] m_axi_twistMove2_WID;
output  [0:0] m_axi_twistMove2_WUSER;
output   m_axi_twistMove2_ARVALID;
input   m_axi_twistMove2_ARREADY;
output  [31:0] m_axi_twistMove2_ARADDR;
output  [0:0] m_axi_twistMove2_ARID;
output  [31:0] m_axi_twistMove2_ARLEN;
output  [2:0] m_axi_twistMove2_ARSIZE;
output  [1:0] m_axi_twistMove2_ARBURST;
output  [1:0] m_axi_twistMove2_ARLOCK;
output  [3:0] m_axi_twistMove2_ARCACHE;
output  [2:0] m_axi_twistMove2_ARPROT;
output  [3:0] m_axi_twistMove2_ARQOS;
output  [3:0] m_axi_twistMove2_ARREGION;
output  [0:0] m_axi_twistMove2_ARUSER;
input   m_axi_twistMove2_RVALID;
output   m_axi_twistMove2_RREADY;
input  [15:0] m_axi_twistMove2_RDATA;
input   m_axi_twistMove2_RLAST;
input  [0:0] m_axi_twistMove2_RID;
input  [0:0] m_axi_twistMove2_RUSER;
input  [1:0] m_axi_twistMove2_RRESP;
input   m_axi_twistMove2_BVALID;
output   m_axi_twistMove2_BREADY;
input  [1:0] m_axi_twistMove2_BRESP;
input  [0:0] m_axi_twistMove2_BID;
input  [0:0] m_axi_twistMove2_BUSER;
input  [30:0] twistMove2_offset;
output   m_axi_flipMove2_AWVALID;
input   m_axi_flipMove2_AWREADY;
output  [31:0] m_axi_flipMove2_AWADDR;
output  [0:0] m_axi_flipMove2_AWID;
output  [31:0] m_axi_flipMove2_AWLEN;
output  [2:0] m_axi_flipMove2_AWSIZE;
output  [1:0] m_axi_flipMove2_AWBURST;
output  [1:0] m_axi_flipMove2_AWLOCK;
output  [3:0] m_axi_flipMove2_AWCACHE;
output  [2:0] m_axi_flipMove2_AWPROT;
output  [3:0] m_axi_flipMove2_AWQOS;
output  [3:0] m_axi_flipMove2_AWREGION;
output  [0:0] m_axi_flipMove2_AWUSER;
output   m_axi_flipMove2_WVALID;
input   m_axi_flipMove2_WREADY;
output  [15:0] m_axi_flipMove2_WDATA;
output  [1:0] m_axi_flipMove2_WSTRB;
output   m_axi_flipMove2_WLAST;
output  [0:0] m_axi_flipMove2_WID;
output  [0:0] m_axi_flipMove2_WUSER;
output   m_axi_flipMove2_ARVALID;
input   m_axi_flipMove2_ARREADY;
output  [31:0] m_axi_flipMove2_ARADDR;
output  [0:0] m_axi_flipMove2_ARID;
output  [31:0] m_axi_flipMove2_ARLEN;
output  [2:0] m_axi_flipMove2_ARSIZE;
output  [1:0] m_axi_flipMove2_ARBURST;
output  [1:0] m_axi_flipMove2_ARLOCK;
output  [3:0] m_axi_flipMove2_ARCACHE;
output  [2:0] m_axi_flipMove2_ARPROT;
output  [3:0] m_axi_flipMove2_ARQOS;
output  [3:0] m_axi_flipMove2_ARREGION;
output  [0:0] m_axi_flipMove2_ARUSER;
input   m_axi_flipMove2_RVALID;
output   m_axi_flipMove2_RREADY;
input  [15:0] m_axi_flipMove2_RDATA;
input   m_axi_flipMove2_RLAST;
input  [0:0] m_axi_flipMove2_RID;
input  [0:0] m_axi_flipMove2_RUSER;
input  [1:0] m_axi_flipMove2_RRESP;
input   m_axi_flipMove2_BVALID;
output   m_axi_flipMove2_BREADY;
input  [1:0] m_axi_flipMove2_BRESP;
input  [0:0] m_axi_flipMove2_BID;
input  [0:0] m_axi_flipMove2_BUSER;
input  [30:0] flipMove2_offset;
output   m_axi_FRtoBR_Move2_AWVALID;
input   m_axi_FRtoBR_Move2_AWREADY;
output  [31:0] m_axi_FRtoBR_Move2_AWADDR;
output  [0:0] m_axi_FRtoBR_Move2_AWID;
output  [31:0] m_axi_FRtoBR_Move2_AWLEN;
output  [2:0] m_axi_FRtoBR_Move2_AWSIZE;
output  [1:0] m_axi_FRtoBR_Move2_AWBURST;
output  [1:0] m_axi_FRtoBR_Move2_AWLOCK;
output  [3:0] m_axi_FRtoBR_Move2_AWCACHE;
output  [2:0] m_axi_FRtoBR_Move2_AWPROT;
output  [3:0] m_axi_FRtoBR_Move2_AWQOS;
output  [3:0] m_axi_FRtoBR_Move2_AWREGION;
output  [0:0] m_axi_FRtoBR_Move2_AWUSER;
output   m_axi_FRtoBR_Move2_WVALID;
input   m_axi_FRtoBR_Move2_WREADY;
output  [15:0] m_axi_FRtoBR_Move2_WDATA;
output  [1:0] m_axi_FRtoBR_Move2_WSTRB;
output   m_axi_FRtoBR_Move2_WLAST;
output  [0:0] m_axi_FRtoBR_Move2_WID;
output  [0:0] m_axi_FRtoBR_Move2_WUSER;
output   m_axi_FRtoBR_Move2_ARVALID;
input   m_axi_FRtoBR_Move2_ARREADY;
output  [31:0] m_axi_FRtoBR_Move2_ARADDR;
output  [0:0] m_axi_FRtoBR_Move2_ARID;
output  [31:0] m_axi_FRtoBR_Move2_ARLEN;
output  [2:0] m_axi_FRtoBR_Move2_ARSIZE;
output  [1:0] m_axi_FRtoBR_Move2_ARBURST;
output  [1:0] m_axi_FRtoBR_Move2_ARLOCK;
output  [3:0] m_axi_FRtoBR_Move2_ARCACHE;
output  [2:0] m_axi_FRtoBR_Move2_ARPROT;
output  [3:0] m_axi_FRtoBR_Move2_ARQOS;
output  [3:0] m_axi_FRtoBR_Move2_ARREGION;
output  [0:0] m_axi_FRtoBR_Move2_ARUSER;
input   m_axi_FRtoBR_Move2_RVALID;
output   m_axi_FRtoBR_Move2_RREADY;
input  [15:0] m_axi_FRtoBR_Move2_RDATA;
input   m_axi_FRtoBR_Move2_RLAST;
input  [0:0] m_axi_FRtoBR_Move2_RID;
input  [0:0] m_axi_FRtoBR_Move2_RUSER;
input  [1:0] m_axi_FRtoBR_Move2_RRESP;
input   m_axi_FRtoBR_Move2_BVALID;
output   m_axi_FRtoBR_Move2_BREADY;
input  [1:0] m_axi_FRtoBR_Move2_BRESP;
input  [0:0] m_axi_FRtoBR_Move2_BID;
input  [0:0] m_axi_FRtoBR_Move2_BUSER;
input  [30:0] FRtoBR_Move2_offset;
input  [30:0] Slice_Twist_Prun2_offset;
input  [30:0] Slice_Flip_Prun2_offset;
output  [15:0] P2Buffer_V_flip_din;
input   P2Buffer_V_flip_full_n;
output   P2Buffer_V_flip_write;
output  [15:0] P2Buffer_V_twist_din;
input   P2Buffer_V_twist_full_n;
output   P2Buffer_V_twist_write;
output  [15:0] P2Buffer_V_slice_din;
input   P2Buffer_V_slice_full_n;
output   P2Buffer_V_slice_write;
output  [0:0] P2Buffer_V_parity_din;
input   P2Buffer_V_parity_full_n;
output   P2Buffer_V_parity_write;
output  [15:0] P2Buffer_V_URFtoDLF_din;
input   P2Buffer_V_URFtoDLF_full_n;
output   P2Buffer_V_URFtoDLF_write;
output  [15:0] P2Buffer_V_FRtoBR_din;
input   P2Buffer_V_FRtoBR_full_n;
output   P2Buffer_V_FRtoBR_write;
output  [15:0] P2Buffer_V_URtoDF_din;
input   P2Buffer_V_URtoDF_full_n;
output   P2Buffer_V_URtoDF_write;
output  [7:0] P2Buffer_V_depthPhas_din;
input   P2Buffer_V_depthPhas_full_n;
output   P2Buffer_V_depthPhas_write;
output  [7:0] P2Buffer_V_n_din;
input   P2Buffer_V_n_full_n;
output   P2Buffer_V_n_write;
output  [7:0] P2Buffer_V_i_0_din;
input   P2Buffer_V_i_0_full_n;
output   P2Buffer_V_i_0_write;
output  [7:0] P2Buffer_V_i_1_din;
input   P2Buffer_V_i_1_full_n;
output   P2Buffer_V_i_1_write;
output  [7:0] P2Buffer_V_i_2_din;
input   P2Buffer_V_i_2_full_n;
output   P2Buffer_V_i_2_write;
output  [7:0] P2Buffer_V_i_3_din;
input   P2Buffer_V_i_3_full_n;
output   P2Buffer_V_i_3_write;
output  [7:0] P2Buffer_V_i_4_din;
input   P2Buffer_V_i_4_full_n;
output   P2Buffer_V_i_4_write;
output  [7:0] P2Buffer_V_i_5_din;
input   P2Buffer_V_i_5_full_n;
output   P2Buffer_V_i_5_write;
output  [7:0] P2Buffer_V_i_6_din;
input   P2Buffer_V_i_6_full_n;
output   P2Buffer_V_i_6_write;
output  [7:0] P2Buffer_V_i_7_din;
input   P2Buffer_V_i_7_full_n;
output   P2Buffer_V_i_7_write;
output  [7:0] P2Buffer_V_i_8_din;
input   P2Buffer_V_i_8_full_n;
output   P2Buffer_V_i_8_write;
output  [7:0] P2Buffer_V_i_9_din;
input   P2Buffer_V_i_9_full_n;
output   P2Buffer_V_i_9_write;
output  [7:0] P2Buffer_V_i_10_din;
input   P2Buffer_V_i_10_full_n;
output   P2Buffer_V_i_10_write;
output  [7:0] P2Buffer_V_i_11_din;
input   P2Buffer_V_i_11_full_n;
output   P2Buffer_V_i_11_write;
output  [7:0] P2Buffer_V_i_12_din;
input   P2Buffer_V_i_12_full_n;
output   P2Buffer_V_i_12_write;
output  [7:0] P2Buffer_V_i_13_din;
input   P2Buffer_V_i_13_full_n;
output   P2Buffer_V_i_13_write;
output  [7:0] P2Buffer_V_i_14_din;
input   P2Buffer_V_i_14_full_n;
output   P2Buffer_V_i_14_write;
output  [7:0] P2Buffer_V_i_15_din;
input   P2Buffer_V_i_15_full_n;
output   P2Buffer_V_i_15_write;
output  [7:0] P2Buffer_V_i_16_din;
input   P2Buffer_V_i_16_full_n;
output   P2Buffer_V_i_16_write;
output  [7:0] P2Buffer_V_i_17_din;
input   P2Buffer_V_i_17_full_n;
output   P2Buffer_V_i_17_write;
output  [7:0] P2Buffer_V_i_18_din;
input   P2Buffer_V_i_18_full_n;
output   P2Buffer_V_i_18_write;
output  [7:0] P2Buffer_V_i_19_din;
input   P2Buffer_V_i_19_full_n;
output   P2Buffer_V_i_19_write;
output  [7:0] P2Buffer_V_i_20_din;
input   P2Buffer_V_i_20_full_n;
output   P2Buffer_V_i_20_write;
output  [7:0] P2Buffer_V_i_21_din;
input   P2Buffer_V_i_21_full_n;
output   P2Buffer_V_i_21_write;
output  [7:0] P2Buffer_V_i_22_din;
input   P2Buffer_V_i_22_full_n;
output   P2Buffer_V_i_22_write;
output  [7:0] P2Buffer_V_i_23_din;
input   P2Buffer_V_i_23_full_n;
output   P2Buffer_V_i_23_write;
output  [7:0] P2Buffer_V_i_24_din;
input   P2Buffer_V_i_24_full_n;
output   P2Buffer_V_i_24_write;
output  [7:0] P2Buffer_V_i_25_din;
input   P2Buffer_V_i_25_full_n;
output   P2Buffer_V_i_25_write;
output  [7:0] P2Buffer_V_i_26_din;
input   P2Buffer_V_i_26_full_n;
output   P2Buffer_V_i_26_write;
output  [7:0] P2Buffer_V_i_27_din;
input   P2Buffer_V_i_27_full_n;
output   P2Buffer_V_i_27_write;
output  [7:0] P2Buffer_V_i_28_din;
input   P2Buffer_V_i_28_full_n;
output   P2Buffer_V_i_28_write;
output  [7:0] P2Buffer_V_i_29_din;
input   P2Buffer_V_i_29_full_n;
output   P2Buffer_V_i_29_write;
output  [7:0] P2Buffer_V_i_30_din;
input   P2Buffer_V_i_30_full_n;
output   P2Buffer_V_i_30_write;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[12:0] P1Buffer_0_flip_address0;
reg P1Buffer_0_flip_ce0;
reg P1Buffer_0_flip_we0;
reg[12:0] P1Buffer_0_twist_address0;
reg P1Buffer_0_twist_ce0;
reg P1Buffer_0_twist_we0;
reg[12:0] P1Buffer_0_slice_address0;
reg P1Buffer_0_slice_ce0;
reg P1Buffer_0_slice_we0;
reg[12:0] P1Buffer_0_depthPha_address0;
reg P1Buffer_0_depthPha_ce0;
reg P1Buffer_0_depthPha_we0;
reg[12:0] P1Buffer_0_n_address0;
reg P1Buffer_0_n_ce0;
reg P1Buffer_0_n_we0;
reg[17:0] P1Buffer_0_i_address0;
reg P1Buffer_0_i_ce0;
reg P1Buffer_0_i_we0;
reg m_axi_twistMove2_ARVALID;
reg[31:0] m_axi_twistMove2_ARADDR;
reg[0:0] m_axi_twistMove2_ARID;
reg[31:0] m_axi_twistMove2_ARLEN;
reg[2:0] m_axi_twistMove2_ARSIZE;
reg[1:0] m_axi_twistMove2_ARBURST;
reg[1:0] m_axi_twistMove2_ARLOCK;
reg[3:0] m_axi_twistMove2_ARCACHE;
reg[2:0] m_axi_twistMove2_ARPROT;
reg[3:0] m_axi_twistMove2_ARQOS;
reg[3:0] m_axi_twistMove2_ARREGION;
reg[0:0] m_axi_twistMove2_ARUSER;
reg m_axi_twistMove2_RREADY;
reg m_axi_flipMove2_ARVALID;
reg[31:0] m_axi_flipMove2_ARADDR;
reg[0:0] m_axi_flipMove2_ARID;
reg[31:0] m_axi_flipMove2_ARLEN;
reg[2:0] m_axi_flipMove2_ARSIZE;
reg[1:0] m_axi_flipMove2_ARBURST;
reg[1:0] m_axi_flipMove2_ARLOCK;
reg[3:0] m_axi_flipMove2_ARCACHE;
reg[2:0] m_axi_flipMove2_ARPROT;
reg[3:0] m_axi_flipMove2_ARQOS;
reg[3:0] m_axi_flipMove2_ARREGION;
reg[0:0] m_axi_flipMove2_ARUSER;
reg m_axi_flipMove2_RREADY;
reg m_axi_FRtoBR_Move2_ARVALID;
reg m_axi_FRtoBR_Move2_RREADY;

(* fsm_encoding = "none" *) reg   [41:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] twistOld;
reg   [15:0] flipOld;
reg   [15:0] sliceOld;
reg   [4:0] twistMove3_address0;
reg    twistMove3_ce0;
reg    twistMove3_we0;
wire   [15:0] twistMove3_q0;
reg   [4:0] flipMove3_address0;
reg    flipMove3_ce0;
reg    flipMove3_we0;
wire   [15:0] flipMove3_q0;
reg   [4:0] FRtoBR_Move3_address0;
reg    FRtoBR_Move3_ce0;
reg    FRtoBR_Move3_we0;
wire  signed [15:0] FRtoBR_Move3_q0;
wire   [4:0] label_0_address0;
reg    label_0_ce0;
wire   [2:0] label_0_q0;
wire   [4:0] label_1_address0;
reg    label_1_ce0;
wire   [1:0] label_1_q0;
reg    twistMove2_blk_n_AR;
wire    ap_CS_fsm_state7;
reg    twistMove2_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_reg_2624;
reg    flipMove2_blk_n_AR;
reg    flipMove2_blk_n_R;
reg    FRtoBR_Move2_blk_n_AR;
reg    FRtoBR_Move2_blk_n_R;
reg    P2Buffer_V_flip_blk_n;
wire    ap_CS_fsm_state41;
reg   [0:0] brmerge1_reg_2982;
reg    P2Buffer_V_twist_blk_n;
reg    P2Buffer_V_slice_blk_n;
reg    P2Buffer_V_parity_blk_n;
reg    P2Buffer_V_URFtoDLF_blk_n;
reg    P2Buffer_V_FRtoBR_blk_n;
reg    P2Buffer_V_URtoDF_blk_n;
reg    P2Buffer_V_depthPhas_blk_n;
reg    P2Buffer_V_n_blk_n;
reg    P2Buffer_V_i_0_blk_n;
reg    P2Buffer_V_i_1_blk_n;
reg    P2Buffer_V_i_2_blk_n;
reg    P2Buffer_V_i_3_blk_n;
reg    P2Buffer_V_i_4_blk_n;
reg    P2Buffer_V_i_5_blk_n;
reg    P2Buffer_V_i_6_blk_n;
reg    P2Buffer_V_i_7_blk_n;
reg    P2Buffer_V_i_8_blk_n;
reg    P2Buffer_V_i_9_blk_n;
reg    P2Buffer_V_i_10_blk_n;
reg    P2Buffer_V_i_11_blk_n;
reg    P2Buffer_V_i_12_blk_n;
reg    P2Buffer_V_i_13_blk_n;
reg    P2Buffer_V_i_14_blk_n;
reg    P2Buffer_V_i_15_blk_n;
reg    P2Buffer_V_i_16_blk_n;
reg    P2Buffer_V_i_17_blk_n;
reg    P2Buffer_V_i_18_blk_n;
reg    P2Buffer_V_i_19_blk_n;
reg    P2Buffer_V_i_20_blk_n;
reg    P2Buffer_V_i_21_blk_n;
reg    P2Buffer_V_i_22_blk_n;
reg    P2Buffer_V_i_23_blk_n;
reg    P2Buffer_V_i_24_blk_n;
reg    P2Buffer_V_i_25_blk_n;
reg    P2Buffer_V_i_26_blk_n;
reg    P2Buffer_V_i_27_blk_n;
reg    P2Buffer_V_i_28_blk_n;
reg    P2Buffer_V_i_29_blk_n;
reg    P2Buffer_V_i_30_blk_n;
reg   [4:0] i17_reg_1547;
reg   [4:0] i17_reg_1547_pp0_iter1_reg;
wire    ap_block_state14_pp0_stage0_iter0;
reg    ap_block_state15_pp0_stage0_iter1;
wire    ap_block_state16_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [18:0] tmp_119_fu_1652_p2;
reg   [18:0] tmp_119_reg_2444;
wire    ap_CS_fsm_state2;
wire   [7:0] depthPhase1_cast_fu_1658_p1;
reg   [7:0] depthPhase1_cast_reg_2516;
reg   [15:0] b_reg_2522;
reg   [15:0] a_1_reg_2530;
reg  signed [15:0] c_reg_2538;
reg   [7:0] search_new_0_depthP_reg_2545;
reg  signed [7:0] n_2_reg_2550;
wire   [4:0] i_16_fu_1668_p2;
reg   [4:0] i_16_reg_2560;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond_i_fu_1662_p2;
wire   [7:0] search_new_0_i_q0;
reg  signed [7:0] i_reg_2575;
wire    ap_CS_fsm_state5;
wire   [16:0] tmp_101_fu_1707_p1;
reg   [16:0] tmp_101_reg_2580;
reg   [0:0] tmp_102_reg_2585;
reg   [7:0] tmp_104_reg_2591;
wire   [6:0] tmp_126_fu_1772_p3;
reg   [6:0] tmp_126_reg_2596;
wire    ap_CS_fsm_state6;
wire   [0:0] or_cond2_fu_1812_p2;
reg   [0:0] or_cond2_reg_2602;
reg   [31:0] Slice_Twist_Prun2_ad_reg_2606;
reg   [31:0] Slice_Flip_Prun2_add_reg_2612;
reg   [31:0] FRtoBR_Move2_addr_reg_2618;
wire   [0:0] exitcond_fu_1935_p2;
reg   [0:0] exitcond_reg_2624_pp0_iter1_reg;
wire   [4:0] i_18_fu_1941_p2;
reg   [4:0] i_18_reg_2628;
reg    ap_enable_reg_pp0_iter0;
reg   [15:0] Slice_Twist_Prun2_ad_2_reg_2633;
reg   [15:0] Slice_Flip_Prun2_add_2_reg_2638;
reg   [15:0] FRtoBR_Move2_addr_re_reg_2643;
wire  signed [7:0] n_fu_1980_p2;
reg  signed [7:0] n_reg_2669;
wire    ap_CS_fsm_state17;
wire   [0:0] tmp_129_fu_1986_p2;
reg   [0:0] tmp_129_reg_2675;
reg   [4:0] search_new_0_i_addr_2_reg_2682;
wire   [0:0] tmp_131_fu_1997_p2;
reg   [0:0] tmp_131_reg_2687;
wire   [0:0] tmp_133_fu_2019_p2;
reg   [0:0] tmp_133_reg_2692;
wire   [8:0] tmp_135_fu_2034_p2;
reg   [8:0] tmp_135_reg_2852;
wire   [6:0] tmp_136_fu_2040_p2;
reg   [6:0] tmp_136_reg_2857;
wire   [0:0] tmp_199_not_fu_2045_p2;
reg   [0:0] tmp_199_not_reg_2862;
wire   [31:0] tmp_138_fu_2061_p3;
reg   [31:0] tmp_138_reg_2867;
wire   [0:0] zero_load_load_fu_2088_p1;
reg   [0:0] zero_load_reg_2875;
wire    ap_CS_fsm_state18;
wire   [0:0] tmp_139_fu_2082_p2;
wire  signed [7:0] p_i1_fu_2091_p3;
reg  signed [7:0] p_i1_reg_2879;
reg   [2:0] ax_reg_2895;
wire    ap_CS_fsm_state19;
reg   [1:0] po_reg_2902;
wire   [0:0] or_cond_fu_2151_p2;
reg   [0:0] or_cond_reg_2907;
wire    ap_CS_fsm_state20;
wire   [0:0] demorgan_fu_2161_p2;
reg   [0:0] demorgan_reg_2911;
reg  signed [15:0] search_new_0_twist_reg_2930;
wire    ap_CS_fsm_state21;
wire   [32:0] tmp_107_fu_2177_p1;
reg   [32:0] tmp_107_reg_2937;
reg   [0:0] tmp_108_reg_2942;
reg   [12:0] tmp_110_reg_2948;
reg  signed [15:0] search_new_0_flip_reg_2953;
wire  signed [15:0] search_new_0_slice_fu_2232_p3;
reg  signed [15:0] search_new_0_slice_reg_2960;
wire    ap_CS_fsm_state22;
wire  signed [24:0] grp_fu_2421_p3;
reg   [24:0] tmp_149_reg_2966;
wire  signed [24:0] grp_fu_2429_p3;
reg   [24:0] tmp_152_reg_2971;
wire   [3:0] minDistPhase1_fu_2255_p3;
reg   [3:0] minDistPhase1_reg_2976;
wire    ap_CS_fsm_state24;
wire    grp_getPruning_1_fu_1604_ap_idle;
wire    grp_getPruning_1_fu_1604_ap_ready;
wire    grp_getPruning_1_fu_1604_ap_done;
wire    grp_getPruning_fu_1612_ap_idle;
wire    grp_getPruning_fu_1612_ap_ready;
wire    grp_getPruning_fu_1612_ap_done;
reg    ap_block_state24_on_subcall_done;
wire   [0:0] brmerge1_fu_2273_p2;
wire    ap_CS_fsm_state25;
wire   [3:0] minDistPhase1_mux_fu_2278_p3;
reg   [7:0] tmp_i_0_reg_2991;
wire    ap_CS_fsm_state26;
reg   [7:0] tmp_i_1_reg_2996;
wire    ap_CS_fsm_state27;
wire   [7:0] search_new_0_i_q1;
reg   [7:0] tmp_i_2_reg_3001;
reg   [7:0] tmp_i_3_reg_3006;
wire    ap_CS_fsm_state28;
reg   [7:0] tmp_i_4_reg_3011;
reg   [7:0] tmp_i_5_reg_3016;
wire    ap_CS_fsm_state29;
reg   [7:0] tmp_i_6_reg_3021;
reg   [7:0] tmp_i_7_reg_3026;
wire    ap_CS_fsm_state30;
reg   [7:0] tmp_i_8_reg_3031;
reg   [7:0] tmp_i_9_reg_3036;
wire    ap_CS_fsm_state31;
reg   [7:0] tmp_i_10_reg_3041;
reg   [7:0] tmp_i_11_reg_3046;
wire    ap_CS_fsm_state32;
reg   [7:0] tmp_i_12_reg_3051;
reg   [7:0] tmp_i_13_reg_3056;
wire    ap_CS_fsm_state33;
reg   [7:0] tmp_i_14_reg_3061;
reg   [7:0] tmp_i_15_reg_3066;
wire    ap_CS_fsm_state34;
reg   [7:0] tmp_i_16_reg_3071;
reg   [7:0] tmp_i_17_reg_3076;
wire    ap_CS_fsm_state35;
reg   [7:0] tmp_i_18_reg_3081;
reg   [7:0] tmp_i_19_reg_3086;
wire    ap_CS_fsm_state36;
reg   [7:0] tmp_i_20_reg_3091;
reg   [7:0] tmp_i_21_reg_3096;
wire    ap_CS_fsm_state37;
reg   [7:0] tmp_i_22_reg_3101;
reg   [7:0] tmp_i_23_reg_3106;
wire    ap_CS_fsm_state38;
reg   [7:0] tmp_i_24_reg_3111;
reg   [7:0] tmp_i_25_reg_3116;
wire    ap_CS_fsm_state39;
reg   [7:0] tmp_i_26_reg_3121;
reg   [7:0] tmp_i_27_reg_3126;
wire    ap_CS_fsm_state40;
reg   [7:0] tmp_i_28_reg_3131;
wire   [0:0] tmp_154_fu_2293_p2;
reg   [0:0] tmp_154_reg_3136;
wire    P2Buffer_V_n1_status;
reg    ap_block_state41;
wire   [18:0] tmp_160_fu_2323_p2;
reg   [18:0] tmp_160_reg_3140;
reg   [12:0] P1Buffer_0_flip_add_1_reg_3145;
reg   [12:0] P1Buffer_0_twist_ad_1_reg_3150;
reg   [12:0] P1Buffer_0_slice_ad_1_reg_3155;
reg   [12:0] P1Buffer_0_depthPha_2_reg_3160;
reg   [12:0] P1Buffer_0_n_addr_1_reg_3165;
wire   [4:0] i_19_fu_2335_p2;
reg   [4:0] i_19_reg_3173;
wire    ap_CS_fsm_state42;
wire   [18:0] tmp_161_fu_2350_p2;
reg   [18:0] tmp_161_reg_3178;
wire   [0:0] exitcond_i2_fu_2329_p2;
wire   [31:0] p_s_fu_2371_p3;
reg   [31:0] p_s_reg_3188;
wire   [0:0] tmp_158_fu_2379_p2;
reg   [0:0] tmp_158_reg_3193;
wire   [7:0] i_20_fu_2398_p2;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state13;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state14;
reg    ap_enable_reg_pp0_iter2;
reg   [4:0] search_new_0_i_address0;
reg    search_new_0_i_ce0;
reg    search_new_0_i_we0;
reg   [7:0] search_new_0_i_d0;
reg   [4:0] search_new_0_i_address1;
reg    search_new_0_i_ce1;
wire    grp_getPruning_1_fu_1604_ap_start;
wire    grp_getPruning_1_fu_1604_m_axi_table_r_AWVALID;
wire   [31:0] grp_getPruning_1_fu_1604_m_axi_table_r_AWADDR;
wire   [0:0] grp_getPruning_1_fu_1604_m_axi_table_r_AWID;
wire   [31:0] grp_getPruning_1_fu_1604_m_axi_table_r_AWLEN;
wire   [2:0] grp_getPruning_1_fu_1604_m_axi_table_r_AWSIZE;
wire   [1:0] grp_getPruning_1_fu_1604_m_axi_table_r_AWBURST;
wire   [1:0] grp_getPruning_1_fu_1604_m_axi_table_r_AWLOCK;
wire   [3:0] grp_getPruning_1_fu_1604_m_axi_table_r_AWCACHE;
wire   [2:0] grp_getPruning_1_fu_1604_m_axi_table_r_AWPROT;
wire   [3:0] grp_getPruning_1_fu_1604_m_axi_table_r_AWQOS;
wire   [3:0] grp_getPruning_1_fu_1604_m_axi_table_r_AWREGION;
wire   [0:0] grp_getPruning_1_fu_1604_m_axi_table_r_AWUSER;
wire    grp_getPruning_1_fu_1604_m_axi_table_r_WVALID;
wire   [15:0] grp_getPruning_1_fu_1604_m_axi_table_r_WDATA;
wire   [1:0] grp_getPruning_1_fu_1604_m_axi_table_r_WSTRB;
wire    grp_getPruning_1_fu_1604_m_axi_table_r_WLAST;
wire   [0:0] grp_getPruning_1_fu_1604_m_axi_table_r_WID;
wire   [0:0] grp_getPruning_1_fu_1604_m_axi_table_r_WUSER;
wire    grp_getPruning_1_fu_1604_m_axi_table_r_ARVALID;
wire   [31:0] grp_getPruning_1_fu_1604_m_axi_table_r_ARADDR;
wire   [0:0] grp_getPruning_1_fu_1604_m_axi_table_r_ARID;
wire   [31:0] grp_getPruning_1_fu_1604_m_axi_table_r_ARLEN;
wire   [2:0] grp_getPruning_1_fu_1604_m_axi_table_r_ARSIZE;
wire   [1:0] grp_getPruning_1_fu_1604_m_axi_table_r_ARBURST;
wire   [1:0] grp_getPruning_1_fu_1604_m_axi_table_r_ARLOCK;
wire   [3:0] grp_getPruning_1_fu_1604_m_axi_table_r_ARCACHE;
wire   [2:0] grp_getPruning_1_fu_1604_m_axi_table_r_ARPROT;
wire   [3:0] grp_getPruning_1_fu_1604_m_axi_table_r_ARQOS;
wire   [3:0] grp_getPruning_1_fu_1604_m_axi_table_r_ARREGION;
wire   [0:0] grp_getPruning_1_fu_1604_m_axi_table_r_ARUSER;
wire    grp_getPruning_1_fu_1604_m_axi_table_r_RREADY;
wire    grp_getPruning_1_fu_1604_m_axi_table_r_BREADY;
wire   [3:0] grp_getPruning_1_fu_1604_ap_return;
wire    grp_getPruning_fu_1612_ap_start;
wire    grp_getPruning_fu_1612_m_axi_table_r_AWVALID;
wire   [31:0] grp_getPruning_fu_1612_m_axi_table_r_AWADDR;
wire   [0:0] grp_getPruning_fu_1612_m_axi_table_r_AWID;
wire   [31:0] grp_getPruning_fu_1612_m_axi_table_r_AWLEN;
wire   [2:0] grp_getPruning_fu_1612_m_axi_table_r_AWSIZE;
wire   [1:0] grp_getPruning_fu_1612_m_axi_table_r_AWBURST;
wire   [1:0] grp_getPruning_fu_1612_m_axi_table_r_AWLOCK;
wire   [3:0] grp_getPruning_fu_1612_m_axi_table_r_AWCACHE;
wire   [2:0] grp_getPruning_fu_1612_m_axi_table_r_AWPROT;
wire   [3:0] grp_getPruning_fu_1612_m_axi_table_r_AWQOS;
wire   [3:0] grp_getPruning_fu_1612_m_axi_table_r_AWREGION;
wire   [0:0] grp_getPruning_fu_1612_m_axi_table_r_AWUSER;
wire    grp_getPruning_fu_1612_m_axi_table_r_WVALID;
wire   [15:0] grp_getPruning_fu_1612_m_axi_table_r_WDATA;
wire   [1:0] grp_getPruning_fu_1612_m_axi_table_r_WSTRB;
wire    grp_getPruning_fu_1612_m_axi_table_r_WLAST;
wire   [0:0] grp_getPruning_fu_1612_m_axi_table_r_WID;
wire   [0:0] grp_getPruning_fu_1612_m_axi_table_r_WUSER;
wire    grp_getPruning_fu_1612_m_axi_table_r_ARVALID;
wire   [31:0] grp_getPruning_fu_1612_m_axi_table_r_ARADDR;
wire   [0:0] grp_getPruning_fu_1612_m_axi_table_r_ARID;
wire   [31:0] grp_getPruning_fu_1612_m_axi_table_r_ARLEN;
wire   [2:0] grp_getPruning_fu_1612_m_axi_table_r_ARSIZE;
wire   [1:0] grp_getPruning_fu_1612_m_axi_table_r_ARBURST;
wire   [1:0] grp_getPruning_fu_1612_m_axi_table_r_ARLOCK;
wire   [3:0] grp_getPruning_fu_1612_m_axi_table_r_ARCACHE;
wire   [2:0] grp_getPruning_fu_1612_m_axi_table_r_ARPROT;
wire   [3:0] grp_getPruning_fu_1612_m_axi_table_r_ARQOS;
wire   [3:0] grp_getPruning_fu_1612_m_axi_table_r_ARREGION;
wire   [0:0] grp_getPruning_fu_1612_m_axi_table_r_ARUSER;
wire    grp_getPruning_fu_1612_m_axi_table_r_RREADY;
wire    grp_getPruning_fu_1612_m_axi_table_r_BREADY;
wire   [3:0] grp_getPruning_fu_1612_ap_return;
reg   [4:0] i_i_reg_1535;
wire    ap_CS_fsm_state4;
reg   [4:0] ap_phi_mux_i17_phi_fu_1551_p4;
reg   [7:0] i1_reg_1559;
reg   [3:0] ap_phi_mux_minDistPhase_phi_fu_1573_p4;
reg   [3:0] minDistPhase_reg_1570;
reg   [4:0] i_i1_reg_1580;
wire    ap_CS_fsm_state43;
reg   [7:0] ap_phi_mux_i1_2_phi_fu_1595_p6;
reg   [7:0] i1_2_reg_1591;
reg    grp_getPruning_1_fu_1604_ap_start_reg;
wire    ap_CS_fsm_state23;
reg    grp_getPruning_fu_1612_ap_start_reg;
wire  signed [63:0] tmp_fu_1627_p1;
wire  signed [63:0] tmp_168_cast_fu_1683_p1;
wire  signed [63:0] tmp_s_fu_1688_p1;
wire   [63:0] tmp_i_fu_1692_p1;
wire   [63:0] tmp_128_fu_1947_p1;
wire  signed [63:0] tmp_130_fu_1992_p1;
wire  signed [63:0] tmp_140_fu_2097_p1;
wire  signed [63:0] tmp_144_fu_2166_p1;
wire  signed [63:0] tmp_155_fu_2298_p1;
wire   [63:0] tmp_i3_fu_2341_p1;
wire  signed [63:0] tmp_176_cast_fu_2384_p1;
wire  signed [63:0] sum_cast_fu_1894_p1;
wire  signed [63:0] sum5_cast_fu_1913_p1;
wire  signed [63:0] sum6_cast_fu_1926_p1;
reg    ap_reg_ioackin_m_axi_twistMove2_ARREADY;
reg    ap_sig_ioackin_m_axi_twistMove2_ARREADY;
reg    ap_sig_ioackin_m_axi_flipMove2_ARREADY;
reg    ap_sig_ioackin_m_axi_FRtoBR_Move2_ARREADY;
reg    ap_block_state7_io;
reg    ap_reg_ioackin_m_axi_flipMove2_ARREADY;
reg    ap_reg_ioackin_m_axi_FRtoBR_Move2_ARREADY;
reg    P2Buffer_V_n1_update;
reg   [31:0] P1Start_fu_838;
wire   [31:0] tmp_213_s_fu_2388_p3;
reg   [7:0] search_new_0_depthP_1_fu_842;
reg   [0:0] zero_fu_846;
wire  signed [7:0] mv_cast_fu_2141_p1;
wire  signed [31:0] tmp_fu_1627_p0;
wire  signed [31:0] tmp_99_fu_1636_p0;
wire  signed [31:0] tmp_100_fu_1640_p0;
wire   [13:0] tmp_100_fu_1640_p1;
wire   [18:0] p_shl12_cast_fu_1644_p3;
wire   [18:0] tmp_99_fu_1636_p1;
wire   [18:0] tmp_i_cast_fu_1674_p1;
wire   [18:0] tmp_127_fu_1678_p2;
wire  signed [7:0] sext2_cast_fu_1697_p0;
wire  signed [7:0] mul_fu_1701_p1;
wire   [17:0] mul_fu_1701_p2;
wire  signed [7:0] tmp_102_fu_1711_p1;
wire   [16:0] neg_mul_fu_1729_p2;
wire   [6:0] tmp_103_fu_1734_p4;
wire  signed [8:0] tmp_120_fu_1744_p1;
wire  signed [8:0] tmp_121_fu_1748_p1;
wire   [8:0] p_v_fu_1751_p3;
wire   [6:0] tmp_105_fu_1758_p1;
wire   [6:0] neg_ti_fu_1762_p2;
wire   [6:0] tmp_106_fu_1768_p1;
wire   [0:0] tmp_123_fu_1792_p2;
wire   [0:0] tmp_124_fu_1801_p2;
wire   [0:0] tmp1_fu_1806_p2;
wire   [0:0] tmp_122_fu_1783_p2;
wire   [19:0] p_shl2_fu_1818_p3;
wire   [19:0] p_shl_fu_1836_p3;
wire   [16:0] p_shl3_fu_1829_p3;
wire  signed [20:0] tmp_26_fu_1857_p1;
wire  signed [20:0] p_shl2_cast_fu_1825_p1;
wire   [20:0] tmp_27_fu_1861_p2;
wire   [16:0] p_shl1_fu_1847_p3;
wire  signed [20:0] tmp_31_fu_1871_p1;
wire  signed [20:0] p_shl_cast_fu_1843_p1;
wire   [20:0] tmp_32_fu_1875_p2;
wire  signed [32:0] tmp_28_cast_fu_1867_p1;
wire   [32:0] sext_cast_fu_1885_p1;
wire   [32:0] sum_fu_1888_p2;
wire  signed [32:0] tmp_33_cast_fu_1881_p1;
wire   [32:0] sext4_cast_fu_1904_p1;
wire   [32:0] sum5_fu_1907_p2;
wire  signed [32:0] grp_fu_2404_p3;
wire   [0:0] n_1_n_fu_1974_p0;
wire   [7:0] n_1_fu_1969_p2;
wire   [7:0] n_1_n_fu_1974_p3;
wire   [4:0] tmp_132_fu_2010_p2;
wire  signed [7:0] tmp_165_cast_fu_2015_p1;
wire   [4:0] tmp_134_fu_2025_p2;
wire   [8:0] tmp_164_cast_fu_2007_p1;
wire  signed [8:0] tmp_163_cast_fu_2003_p1;
wire   [7:0] tmp_167_cast_fu_2030_p1;
wire  signed [31:0] tmp_137_fu_2051_p0;
wire  signed [31:0] p_op_fu_2056_p0;
wire   [0:0] tmp_137_fu_2051_p2;
wire   [31:0] p_op_fu_2056_p2;
wire   [4:0] p_shl4_fu_2112_p3;
wire   [5:0] p_shl4_cast_fu_2119_p1;
wire   [5:0] ax_cast6_fu_2106_p1;
wire   [5:0] tmp_141_fu_2123_p2;
wire   [5:0] po_cast_fu_2109_p1;
wire   [5:0] tmp4_fu_2129_p2;
wire  signed [5:0] mv_fu_2135_p2;
wire   [6:0] ax_cast7_fu_2103_p1;
wire   [0:0] tmp_142_fu_2146_p2;
wire   [0:0] tmp_143_fu_2156_p2;
wire  signed [33:0] mul1_fu_2413_p2;
wire  signed [15:0] tmp_108_fu_2180_p1;
wire   [32:0] neg_mul1_fu_2197_p2;
wire   [11:0] tmp_109_fu_2202_p4;
wire  signed [15:0] tmp_145_fu_2212_p1;
wire  signed [15:0] tmp_146_fu_2216_p1;
wire   [15:0] tmp_147_fu_2219_p3;
wire   [15:0] neg_ti1_fu_2226_p2;
wire   [0:0] tmp_153_fu_2249_p2;
wire   [0:0] p_not_fu_2263_p2;
wire   [0:0] brmerge_fu_2268_p2;
wire   [8:0] tmp_189_cast_fu_2289_p1;
wire  signed [31:0] tmp_155_fu_2298_p0;
wire  signed [31:0] tmp_111_fu_2307_p0;
wire  signed [31:0] tmp_112_fu_2311_p0;
wire   [13:0] tmp_112_fu_2311_p1;
wire   [18:0] p_shl13_cast_fu_2315_p3;
wire   [18:0] tmp_111_fu_2307_p1;
wire   [18:0] tmp_i3_cast_fu_2346_p1;
wire   [31:0] tmp_156_fu_2359_p2;
wire   [0:0] tmp_157_fu_2365_p2;
wire  signed [31:0] tmp_158_fu_2379_p1;
wire   [9:0] grp_fu_2404_p1;
wire   [30:0] grp_fu_2404_p2;
wire   [17:0] mul1_fu_2413_p0;
wire   [9:0] grp_fu_2421_p0;
wire  signed [14:0] grp_fu_2421_p2;
wire  signed [24:0] tmp_183_cast_fu_2242_p1;
wire   [9:0] grp_fu_2429_p0;
wire  signed [14:0] grp_fu_2429_p2;
reg   [41:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [32:0] grp_fu_2404_p20;

// power-on initialization
initial begin
#0 ap_CS_fsm = 42'd1;
#0 twistOld = 16'd65535;
#0 flipOld = 16'd65535;
#0 sliceOld = 16'd65436;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 grp_getPruning_1_fu_1604_ap_start_reg = 1'b0;
#0 grp_getPruning_fu_1612_ap_start_reg = 1'b0;
#0 ap_reg_ioackin_m_axi_twistMove2_ARREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_flipMove2_ARREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_FRtoBR_Move2_ARREADY = 1'b0;
end

parallel_v2_twistmb6 #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
twistMove3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(twistMove3_address0),
    .ce0(twistMove3_ce0),
    .we0(twistMove3_we0),
    .d0(Slice_Twist_Prun2_ad_2_reg_2633),
    .q0(twistMove3_q0)
);

parallel_v2_twistmb6 #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
flipMove3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(flipMove3_address0),
    .ce0(flipMove3_ce0),
    .we0(flipMove3_we0),
    .d0(Slice_Flip_Prun2_add_2_reg_2638),
    .q0(flipMove3_q0)
);

parallel_v2_twistmb6 #(
    .DataWidth( 16 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
FRtoBR_Move3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(FRtoBR_Move3_address0),
    .ce0(FRtoBR_Move3_ce0),
    .we0(FRtoBR_Move3_we0),
    .d0(FRtoBR_Move2_addr_re_reg_2643),
    .q0(FRtoBR_Move3_q0)
);

parallel_v2_label_0 #(
    .DataWidth( 3 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
label_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(label_0_address0),
    .ce0(label_0_ce0),
    .q0(label_0_q0)
);

parallel_v2_label_1 #(
    .DataWidth( 2 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
label_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(label_1_address0),
    .ce0(label_1_ce0),
    .q0(label_1_q0)
);

parallel_v2_searcpcA #(
    .DataWidth( 8 ),
    .AddressRange( 31 ),
    .AddressWidth( 5 ))
search_new_0_i_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(search_new_0_i_address0),
    .ce0(search_new_0_i_ce0),
    .we0(search_new_0_i_we0),
    .d0(search_new_0_i_d0),
    .q0(search_new_0_i_q0),
    .address1(search_new_0_i_address1),
    .ce1(search_new_0_i_ce1),
    .q1(search_new_0_i_q1)
);

getPruning_1 grp_getPruning_1_fu_1604(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_getPruning_1_fu_1604_ap_start),
    .ap_done(grp_getPruning_1_fu_1604_ap_done),
    .ap_idle(grp_getPruning_1_fu_1604_ap_idle),
    .ap_ready(grp_getPruning_1_fu_1604_ap_ready),
    .m_axi_table_r_AWVALID(grp_getPruning_1_fu_1604_m_axi_table_r_AWVALID),
    .m_axi_table_r_AWREADY(1'b0),
    .m_axi_table_r_AWADDR(grp_getPruning_1_fu_1604_m_axi_table_r_AWADDR),
    .m_axi_table_r_AWID(grp_getPruning_1_fu_1604_m_axi_table_r_AWID),
    .m_axi_table_r_AWLEN(grp_getPruning_1_fu_1604_m_axi_table_r_AWLEN),
    .m_axi_table_r_AWSIZE(grp_getPruning_1_fu_1604_m_axi_table_r_AWSIZE),
    .m_axi_table_r_AWBURST(grp_getPruning_1_fu_1604_m_axi_table_r_AWBURST),
    .m_axi_table_r_AWLOCK(grp_getPruning_1_fu_1604_m_axi_table_r_AWLOCK),
    .m_axi_table_r_AWCACHE(grp_getPruning_1_fu_1604_m_axi_table_r_AWCACHE),
    .m_axi_table_r_AWPROT(grp_getPruning_1_fu_1604_m_axi_table_r_AWPROT),
    .m_axi_table_r_AWQOS(grp_getPruning_1_fu_1604_m_axi_table_r_AWQOS),
    .m_axi_table_r_AWREGION(grp_getPruning_1_fu_1604_m_axi_table_r_AWREGION),
    .m_axi_table_r_AWUSER(grp_getPruning_1_fu_1604_m_axi_table_r_AWUSER),
    .m_axi_table_r_WVALID(grp_getPruning_1_fu_1604_m_axi_table_r_WVALID),
    .m_axi_table_r_WREADY(1'b0),
    .m_axi_table_r_WDATA(grp_getPruning_1_fu_1604_m_axi_table_r_WDATA),
    .m_axi_table_r_WSTRB(grp_getPruning_1_fu_1604_m_axi_table_r_WSTRB),
    .m_axi_table_r_WLAST(grp_getPruning_1_fu_1604_m_axi_table_r_WLAST),
    .m_axi_table_r_WID(grp_getPruning_1_fu_1604_m_axi_table_r_WID),
    .m_axi_table_r_WUSER(grp_getPruning_1_fu_1604_m_axi_table_r_WUSER),
    .m_axi_table_r_ARVALID(grp_getPruning_1_fu_1604_m_axi_table_r_ARVALID),
    .m_axi_table_r_ARREADY(m_axi_flipMove2_ARREADY),
    .m_axi_table_r_ARADDR(grp_getPruning_1_fu_1604_m_axi_table_r_ARADDR),
    .m_axi_table_r_ARID(grp_getPruning_1_fu_1604_m_axi_table_r_ARID),
    .m_axi_table_r_ARLEN(grp_getPruning_1_fu_1604_m_axi_table_r_ARLEN),
    .m_axi_table_r_ARSIZE(grp_getPruning_1_fu_1604_m_axi_table_r_ARSIZE),
    .m_axi_table_r_ARBURST(grp_getPruning_1_fu_1604_m_axi_table_r_ARBURST),
    .m_axi_table_r_ARLOCK(grp_getPruning_1_fu_1604_m_axi_table_r_ARLOCK),
    .m_axi_table_r_ARCACHE(grp_getPruning_1_fu_1604_m_axi_table_r_ARCACHE),
    .m_axi_table_r_ARPROT(grp_getPruning_1_fu_1604_m_axi_table_r_ARPROT),
    .m_axi_table_r_ARQOS(grp_getPruning_1_fu_1604_m_axi_table_r_ARQOS),
    .m_axi_table_r_ARREGION(grp_getPruning_1_fu_1604_m_axi_table_r_ARREGION),
    .m_axi_table_r_ARUSER(grp_getPruning_1_fu_1604_m_axi_table_r_ARUSER),
    .m_axi_table_r_RVALID(m_axi_flipMove2_RVALID),
    .m_axi_table_r_RREADY(grp_getPruning_1_fu_1604_m_axi_table_r_RREADY),
    .m_axi_table_r_RDATA(m_axi_flipMove2_RDATA),
    .m_axi_table_r_RLAST(m_axi_flipMove2_RLAST),
    .m_axi_table_r_RID(m_axi_flipMove2_RID),
    .m_axi_table_r_RUSER(m_axi_flipMove2_RUSER),
    .m_axi_table_r_RRESP(m_axi_flipMove2_RRESP),
    .m_axi_table_r_BVALID(1'b0),
    .m_axi_table_r_BREADY(grp_getPruning_1_fu_1604_m_axi_table_r_BREADY),
    .m_axi_table_r_BRESP(2'd0),
    .m_axi_table_r_BID(1'd0),
    .m_axi_table_r_BUSER(1'd0),
    .table_offset(Slice_Flip_Prun2_offset),
    .index(tmp_149_reg_2966),
    .ap_return(grp_getPruning_1_fu_1604_ap_return)
);

getPruning grp_getPruning_fu_1612(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_getPruning_fu_1612_ap_start),
    .ap_done(grp_getPruning_fu_1612_ap_done),
    .ap_idle(grp_getPruning_fu_1612_ap_idle),
    .ap_ready(grp_getPruning_fu_1612_ap_ready),
    .m_axi_table_r_AWVALID(grp_getPruning_fu_1612_m_axi_table_r_AWVALID),
    .m_axi_table_r_AWREADY(1'b0),
    .m_axi_table_r_AWADDR(grp_getPruning_fu_1612_m_axi_table_r_AWADDR),
    .m_axi_table_r_AWID(grp_getPruning_fu_1612_m_axi_table_r_AWID),
    .m_axi_table_r_AWLEN(grp_getPruning_fu_1612_m_axi_table_r_AWLEN),
    .m_axi_table_r_AWSIZE(grp_getPruning_fu_1612_m_axi_table_r_AWSIZE),
    .m_axi_table_r_AWBURST(grp_getPruning_fu_1612_m_axi_table_r_AWBURST),
    .m_axi_table_r_AWLOCK(grp_getPruning_fu_1612_m_axi_table_r_AWLOCK),
    .m_axi_table_r_AWCACHE(grp_getPruning_fu_1612_m_axi_table_r_AWCACHE),
    .m_axi_table_r_AWPROT(grp_getPruning_fu_1612_m_axi_table_r_AWPROT),
    .m_axi_table_r_AWQOS(grp_getPruning_fu_1612_m_axi_table_r_AWQOS),
    .m_axi_table_r_AWREGION(grp_getPruning_fu_1612_m_axi_table_r_AWREGION),
    .m_axi_table_r_AWUSER(grp_getPruning_fu_1612_m_axi_table_r_AWUSER),
    .m_axi_table_r_WVALID(grp_getPruning_fu_1612_m_axi_table_r_WVALID),
    .m_axi_table_r_WREADY(1'b0),
    .m_axi_table_r_WDATA(grp_getPruning_fu_1612_m_axi_table_r_WDATA),
    .m_axi_table_r_WSTRB(grp_getPruning_fu_1612_m_axi_table_r_WSTRB),
    .m_axi_table_r_WLAST(grp_getPruning_fu_1612_m_axi_table_r_WLAST),
    .m_axi_table_r_WID(grp_getPruning_fu_1612_m_axi_table_r_WID),
    .m_axi_table_r_WUSER(grp_getPruning_fu_1612_m_axi_table_r_WUSER),
    .m_axi_table_r_ARVALID(grp_getPruning_fu_1612_m_axi_table_r_ARVALID),
    .m_axi_table_r_ARREADY(m_axi_twistMove2_ARREADY),
    .m_axi_table_r_ARADDR(grp_getPruning_fu_1612_m_axi_table_r_ARADDR),
    .m_axi_table_r_ARID(grp_getPruning_fu_1612_m_axi_table_r_ARID),
    .m_axi_table_r_ARLEN(grp_getPruning_fu_1612_m_axi_table_r_ARLEN),
    .m_axi_table_r_ARSIZE(grp_getPruning_fu_1612_m_axi_table_r_ARSIZE),
    .m_axi_table_r_ARBURST(grp_getPruning_fu_1612_m_axi_table_r_ARBURST),
    .m_axi_table_r_ARLOCK(grp_getPruning_fu_1612_m_axi_table_r_ARLOCK),
    .m_axi_table_r_ARCACHE(grp_getPruning_fu_1612_m_axi_table_r_ARCACHE),
    .m_axi_table_r_ARPROT(grp_getPruning_fu_1612_m_axi_table_r_ARPROT),
    .m_axi_table_r_ARQOS(grp_getPruning_fu_1612_m_axi_table_r_ARQOS),
    .m_axi_table_r_ARREGION(grp_getPruning_fu_1612_m_axi_table_r_ARREGION),
    .m_axi_table_r_ARUSER(grp_getPruning_fu_1612_m_axi_table_r_ARUSER),
    .m_axi_table_r_RVALID(m_axi_twistMove2_RVALID),
    .m_axi_table_r_RREADY(grp_getPruning_fu_1612_m_axi_table_r_RREADY),
    .m_axi_table_r_RDATA(m_axi_twistMove2_RDATA),
    .m_axi_table_r_RLAST(m_axi_twistMove2_RLAST),
    .m_axi_table_r_RID(m_axi_twistMove2_RID),
    .m_axi_table_r_RUSER(m_axi_twistMove2_RUSER),
    .m_axi_table_r_RRESP(m_axi_twistMove2_RRESP),
    .m_axi_table_r_BVALID(1'b0),
    .m_axi_table_r_BREADY(grp_getPruning_fu_1612_m_axi_table_r_BREADY),
    .m_axi_table_r_BRESP(2'd0),
    .m_axi_table_r_BID(1'd0),
    .m_axi_table_r_BUSER(1'd0),
    .table_offset(Slice_Twist_Prun2_offset),
    .index(tmp_152_reg_2971),
    .ap_return(grp_getPruning_fu_1612_ap_return)
);

solution_mac_mulaqcK #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 31 ),
    .dout_WIDTH( 33 ))
solution_mac_mulaqcK_U64(
    .din0(c_reg_2538),
    .din1(grp_fu_2404_p1),
    .din2(grp_fu_2404_p2),
    .dout(grp_fu_2404_p3)
);

solution_mul_mul_rcU #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 34 ))
solution_mul_mul_rcU_U65(
    .din0(mul1_fu_2413_p0),
    .din1(FRtoBR_Move3_q0),
    .dout(mul1_fu_2413_p2)
);

solution_mac_mulasc4 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 15 ),
    .dout_WIDTH( 25 ))
solution_mac_mulasc4_U66(
    .din0(grp_fu_2421_p0),
    .din1(search_new_0_flip_reg_2953),
    .din2(grp_fu_2421_p2),
    .dout(grp_fu_2421_p3)
);

solution_mac_mulasc4 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 15 ),
    .dout_WIDTH( 25 ))
solution_mac_mulasc4_U67(
    .din0(grp_fu_2429_p0),
    .din1(search_new_0_twist_reg_2930),
    .din2(grp_fu_2429_p2),
    .dout(grp_fu_2429_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state14) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state14)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state14);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_FRtoBR_Move2_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            if ((1'b0 == ap_block_state7_io)) begin
                ap_reg_ioackin_m_axi_FRtoBR_Move2_ARREADY <= 1'b0;
            end else if ((m_axi_FRtoBR_Move2_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_FRtoBR_Move2_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_flipMove2_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            if ((1'b0 == ap_block_state7_io)) begin
                ap_reg_ioackin_m_axi_flipMove2_ARREADY <= 1'b0;
            end else if ((m_axi_flipMove2_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_flipMove2_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_twistMove2_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            if ((1'b0 == ap_block_state7_io)) begin
                ap_reg_ioackin_m_axi_twistMove2_ARREADY <= 1'b0;
            end else if ((m_axi_twistMove2_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_twistMove2_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_getPruning_1_fu_1604_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state23)) begin
            grp_getPruning_1_fu_1604_ap_start_reg <= 1'b1;
        end else if ((grp_getPruning_1_fu_1604_ap_ready == 1'b1)) begin
            grp_getPruning_1_fu_1604_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_getPruning_fu_1612_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state23)) begin
            grp_getPruning_fu_1612_ap_start_reg <= 1'b1;
        end else if ((grp_getPruning_fu_1612_ap_ready == 1'b1)) begin
            grp_getPruning_fu_1612_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_154_reg_3136 == 1'd1) & (demorgan_reg_2911 == 1'd1) & (1'b1 == ap_CS_fsm_state44) & (or_cond_reg_2907 == 1'd0) & (zero_load_reg_2875 == 1'd0))) begin
        P1Start_fu_838 <= tmp_213_s_fu_2388_p3;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        P1Start_fu_838 <= P1Start_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_reg_2624 == 1'd0))) begin
        i17_reg_1547 <= i_18_reg_2628;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        i17_reg_1547 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state20) & ((or_cond_fu_2151_p2 == 1'd1) | (demorgan_fu_2161_p2 == 1'd0))) | ((demorgan_reg_2911 == 1'd1) & (1'b1 == ap_CS_fsm_state44) & (or_cond_reg_2907 == 1'd0) & (zero_load_reg_2875 == 1'd0)))) begin
        i1_2_reg_1591 <= p_i1_reg_2879;
    end else if (((tmp_139_fu_2082_p2 == 1'd1) & (zero_load_load_fu_2088_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        i1_2_reg_1591 <= 8'd18;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        i1_reg_1559 <= i_20_fu_2398_p2;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        i1_reg_1559 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        i_i1_reg_1580 <= i_19_reg_3173;
    end else if ((~((1'b0 == P2Buffer_V_n1_status) & (brmerge1_reg_2982 == 1'd0)) & (tmp_154_fu_2293_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state41))) begin
        i_i1_reg_1580 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_i_reg_1535 <= i_16_reg_2560;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_i_reg_1535 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == P2Buffer_V_n1_status) & (brmerge1_reg_2982 == 1'd0)) & (1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        minDistPhase_reg_1570 <= 4'd10;
    end else if (((brmerge1_fu_2273_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25))) begin
        minDistPhase_reg_1570 <= minDistPhase1_mux_fu_2278_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) & (brmerge1_fu_2273_p2 == 1'd0))) begin
        search_new_0_depthP_1_fu_842 <= depthPhase1_cast_reg_2516;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        search_new_0_depthP_1_fu_842 <= search_new_0_depthP_reg_2545;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state20) & ((or_cond_fu_2151_p2 == 1'd1) | (demorgan_fu_2161_p2 == 1'd0))) | ((demorgan_reg_2911 == 1'd1) & (1'b1 == ap_CS_fsm_state44) & (or_cond_reg_2907 == 1'd0) & (zero_load_reg_2875 == 1'd0)))) begin
        zero_fu_846 <= tmp_129_reg_2675;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        zero_fu_846 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_reg_2624 == 1'd0))) begin
        FRtoBR_Move2_addr_re_reg_2643 <= m_axi_FRtoBR_Move2_RDATA;
        Slice_Flip_Prun2_add_2_reg_2638 <= m_axi_flipMove2_RDATA;
        Slice_Twist_Prun2_ad_2_reg_2633 <= m_axi_twistMove2_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (or_cond2_fu_1812_p2 == 1'd0))) begin
        FRtoBR_Move2_addr_reg_2618 <= sum6_cast_fu_1926_p1;
        Slice_Flip_Prun2_add_reg_2612 <= sum5_cast_fu_1913_p1;
        Slice_Twist_Prun2_ad_reg_2606 <= sum_cast_fu_1894_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == P2Buffer_V_n1_status) & (brmerge1_reg_2982 == 1'd0)) & (tmp_154_fu_2293_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state41))) begin
        P1Buffer_0_depthPha_2_reg_3160 <= tmp_155_fu_2298_p1;
        P1Buffer_0_flip_add_1_reg_3145 <= tmp_155_fu_2298_p1;
        P1Buffer_0_n_addr_1_reg_3165 <= tmp_155_fu_2298_p1;
        P1Buffer_0_slice_ad_1_reg_3155 <= tmp_155_fu_2298_p1;
        P1Buffer_0_twist_ad_1_reg_3150 <= tmp_155_fu_2298_p1;
        tmp_160_reg_3140 <= tmp_160_fu_2323_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        a_1_reg_2530 <= P1Buffer_0_twist_q0;
        b_reg_2522 <= P1Buffer_0_flip_q0;
        c_reg_2538 <= P1Buffer_0_slice_q0;
        depthPhase1_cast_reg_2516[4 : 0] <= depthPhase1_cast_fu_1658_p1[4 : 0];
        n_2_reg_2550 <= P1Buffer_0_n_q0;
        search_new_0_depthP_reg_2545 <= P1Buffer_0_depthPha_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ax_reg_2895 <= label_0_q0;
        po_reg_2902 <= label_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        brmerge1_reg_2982 <= brmerge1_fu_2273_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (or_cond_fu_2151_p2 == 1'd0))) begin
        demorgan_reg_2911 <= demorgan_fu_2161_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_reg_2624 <= exitcond_fu_1935_p2;
        exitcond_reg_2624_pp0_iter1_reg <= exitcond_reg_2624;
        i17_reg_1547_pp0_iter1_reg <= i17_reg_1547;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & (or_cond2_reg_2602 == 1'd0))) begin
        flipOld <= b_reg_2522;
        sliceOld <= c_reg_2538;
        twistOld <= a_1_reg_2530;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_16_reg_2560 <= i_16_fu_1668_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_18_reg_2628 <= i_18_fu_1941_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        i_19_reg_3173 <= i_19_fu_2335_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_reg_2575 <= search_new_0_i_q0;
        tmp_101_reg_2580 <= tmp_101_fu_1707_p1;
        tmp_102_reg_2585 <= tmp_102_fu_1711_p1[32'd7];
        tmp_104_reg_2591 <= {{mul_fu_1701_p2[17:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state24_on_subcall_done) & (1'b1 == ap_CS_fsm_state24))) begin
        minDistPhase1_reg_2976 <= minDistPhase1_fu_2255_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        n_reg_2669 <= n_fu_1980_p2;
        search_new_0_i_addr_2_reg_2682 <= tmp_130_fu_1992_p1;
        tmp_129_reg_2675 <= tmp_129_fu_1986_p2;
        tmp_131_reg_2687 <= tmp_131_fu_1997_p2;
        tmp_133_reg_2692 <= tmp_133_fu_2019_p2;
        tmp_135_reg_2852 <= tmp_135_fu_2034_p2;
        tmp_136_reg_2857 <= tmp_136_fu_2040_p2;
        tmp_138_reg_2867 <= tmp_138_fu_2061_p3;
        tmp_199_not_reg_2862 <= tmp_199_not_fu_2045_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        or_cond2_reg_2602 <= or_cond2_fu_1812_p2;
        tmp_126_reg_2596 <= tmp_126_fu_1772_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        or_cond_reg_2907 <= or_cond_fu_2151_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_139_fu_2082_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18) & (zero_load_load_fu_2088_p1 == 1'd0))) begin
        p_i1_reg_2879 <= p_i1_fu_2091_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i2_fu_2329_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state42))) begin
        p_s_reg_3188 <= p_s_fu_2371_p3;
        tmp_158_reg_3193 <= tmp_158_fu_2379_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        search_new_0_flip_reg_2953 <= flipMove3_q0;
        search_new_0_twist_reg_2930 <= twistMove3_q0;
        tmp_107_reg_2937 <= tmp_107_fu_2177_p1;
        tmp_108_reg_2942 <= tmp_108_fu_2180_p1[32'd15];
        tmp_110_reg_2948 <= {{mul1_fu_2413_p2[33:21]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        search_new_0_slice_reg_2960 <= search_new_0_slice_fu_2232_p3;
        tmp_149_reg_2966 <= grp_fu_2421_p3;
        tmp_152_reg_2971 <= grp_fu_2429_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_119_reg_2444 <= tmp_119_fu_1652_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == P2Buffer_V_n1_status) & (brmerge1_reg_2982 == 1'd0)) & (1'b1 == ap_CS_fsm_state41))) begin
        tmp_154_reg_3136 <= tmp_154_fu_2293_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) & (exitcond_i2_fu_2329_p2 == 1'd0))) begin
        tmp_161_reg_3178 <= tmp_161_fu_2350_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        tmp_i_0_reg_2991 <= search_new_0_i_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        tmp_i_10_reg_3041 <= search_new_0_i_q0;
        tmp_i_9_reg_3036 <= search_new_0_i_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        tmp_i_11_reg_3046 <= search_new_0_i_q1;
        tmp_i_12_reg_3051 <= search_new_0_i_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        tmp_i_13_reg_3056 <= search_new_0_i_q1;
        tmp_i_14_reg_3061 <= search_new_0_i_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        tmp_i_15_reg_3066 <= search_new_0_i_q1;
        tmp_i_16_reg_3071 <= search_new_0_i_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        tmp_i_17_reg_3076 <= search_new_0_i_q1;
        tmp_i_18_reg_3081 <= search_new_0_i_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        tmp_i_19_reg_3086 <= search_new_0_i_q1;
        tmp_i_20_reg_3091 <= search_new_0_i_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        tmp_i_1_reg_2996 <= search_new_0_i_q0;
        tmp_i_2_reg_3001 <= search_new_0_i_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        tmp_i_21_reg_3096 <= search_new_0_i_q1;
        tmp_i_22_reg_3101 <= search_new_0_i_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        tmp_i_23_reg_3106 <= search_new_0_i_q1;
        tmp_i_24_reg_3111 <= search_new_0_i_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        tmp_i_25_reg_3116 <= search_new_0_i_q1;
        tmp_i_26_reg_3121 <= search_new_0_i_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        tmp_i_27_reg_3126 <= search_new_0_i_q1;
        tmp_i_28_reg_3131 <= search_new_0_i_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        tmp_i_3_reg_3006 <= search_new_0_i_q1;
        tmp_i_4_reg_3011 <= search_new_0_i_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        tmp_i_5_reg_3016 <= search_new_0_i_q1;
        tmp_i_6_reg_3021 <= search_new_0_i_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        tmp_i_7_reg_3026 <= search_new_0_i_q1;
        tmp_i_8_reg_3031 <= search_new_0_i_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_139_fu_2082_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        zero_load_reg_2875 <= zero_fu_846;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        FRtoBR_Move2_blk_n_AR = m_axi_FRtoBR_Move2_ARREADY;
    end else begin
        FRtoBR_Move2_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_reg_2624 == 1'd0))) begin
        FRtoBR_Move2_blk_n_R = m_axi_FRtoBR_Move2_RVALID;
    end else begin
        FRtoBR_Move2_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        FRtoBR_Move3_address0 = tmp_144_fu_2166_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        FRtoBR_Move3_address0 = tmp_128_fu_1947_p1;
    end else begin
        FRtoBR_Move3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        FRtoBR_Move3_ce0 = 1'b1;
    end else begin
        FRtoBR_Move3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond_reg_2624_pp0_iter1_reg == 1'd0))) begin
        FRtoBR_Move3_we0 = 1'b1;
    end else begin
        FRtoBR_Move3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        P1Buffer_0_depthPha_address0 = P1Buffer_0_depthPha_2_reg_3160;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        P1Buffer_0_depthPha_address0 = tmp_fu_1627_p1;
    end else begin
        P1Buffer_0_depthPha_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        P1Buffer_0_depthPha_ce0 = 1'b1;
    end else begin
        P1Buffer_0_depthPha_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i2_fu_2329_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state42))) begin
        P1Buffer_0_depthPha_we0 = 1'b1;
    end else begin
        P1Buffer_0_depthPha_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        P1Buffer_0_flip_address0 = P1Buffer_0_flip_add_1_reg_3145;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        P1Buffer_0_flip_address0 = tmp_fu_1627_p1;
    end else begin
        P1Buffer_0_flip_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        P1Buffer_0_flip_ce0 = 1'b1;
    end else begin
        P1Buffer_0_flip_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i2_fu_2329_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state42))) begin
        P1Buffer_0_flip_we0 = 1'b1;
    end else begin
        P1Buffer_0_flip_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        P1Buffer_0_i_address0 = tmp_176_cast_fu_2384_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        P1Buffer_0_i_address0 = tmp_168_cast_fu_1683_p1;
    end else begin
        P1Buffer_0_i_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state43))) begin
        P1Buffer_0_i_ce0 = 1'b1;
    end else begin
        P1Buffer_0_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        P1Buffer_0_i_we0 = 1'b1;
    end else begin
        P1Buffer_0_i_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        P1Buffer_0_n_address0 = P1Buffer_0_n_addr_1_reg_3165;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        P1Buffer_0_n_address0 = tmp_fu_1627_p1;
    end else begin
        P1Buffer_0_n_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        P1Buffer_0_n_ce0 = 1'b1;
    end else begin
        P1Buffer_0_n_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i2_fu_2329_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state42))) begin
        P1Buffer_0_n_we0 = 1'b1;
    end else begin
        P1Buffer_0_n_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        P1Buffer_0_slice_address0 = P1Buffer_0_slice_ad_1_reg_3155;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        P1Buffer_0_slice_address0 = tmp_fu_1627_p1;
    end else begin
        P1Buffer_0_slice_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        P1Buffer_0_slice_ce0 = 1'b1;
    end else begin
        P1Buffer_0_slice_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i2_fu_2329_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state42))) begin
        P1Buffer_0_slice_we0 = 1'b1;
    end else begin
        P1Buffer_0_slice_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        P1Buffer_0_twist_address0 = P1Buffer_0_twist_ad_1_reg_3150;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        P1Buffer_0_twist_address0 = tmp_fu_1627_p1;
    end else begin
        P1Buffer_0_twist_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        P1Buffer_0_twist_ce0 = 1'b1;
    end else begin
        P1Buffer_0_twist_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i2_fu_2329_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state42))) begin
        P1Buffer_0_twist_we0 = 1'b1;
    end else begin
        P1Buffer_0_twist_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_FRtoBR_blk_n = P2Buffer_V_FRtoBR_full_n;
    end else begin
        P2Buffer_V_FRtoBR_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_URFtoDLF_blk_n = P2Buffer_V_URFtoDLF_full_n;
    end else begin
        P2Buffer_V_URFtoDLF_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_URtoDF_blk_n = P2Buffer_V_URtoDF_full_n;
    end else begin
        P2Buffer_V_URtoDF_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_depthPhas_blk_n = P2Buffer_V_depthPhas_full_n;
    end else begin
        P2Buffer_V_depthPhas_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_flip_blk_n = P2Buffer_V_flip_full_n;
    end else begin
        P2Buffer_V_flip_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_i_0_blk_n = P2Buffer_V_i_0_full_n;
    end else begin
        P2Buffer_V_i_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_i_10_blk_n = P2Buffer_V_i_10_full_n;
    end else begin
        P2Buffer_V_i_10_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_i_11_blk_n = P2Buffer_V_i_11_full_n;
    end else begin
        P2Buffer_V_i_11_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_i_12_blk_n = P2Buffer_V_i_12_full_n;
    end else begin
        P2Buffer_V_i_12_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_i_13_blk_n = P2Buffer_V_i_13_full_n;
    end else begin
        P2Buffer_V_i_13_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_i_14_blk_n = P2Buffer_V_i_14_full_n;
    end else begin
        P2Buffer_V_i_14_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_i_15_blk_n = P2Buffer_V_i_15_full_n;
    end else begin
        P2Buffer_V_i_15_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_i_16_blk_n = P2Buffer_V_i_16_full_n;
    end else begin
        P2Buffer_V_i_16_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_i_17_blk_n = P2Buffer_V_i_17_full_n;
    end else begin
        P2Buffer_V_i_17_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_i_18_blk_n = P2Buffer_V_i_18_full_n;
    end else begin
        P2Buffer_V_i_18_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_i_19_blk_n = P2Buffer_V_i_19_full_n;
    end else begin
        P2Buffer_V_i_19_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_i_1_blk_n = P2Buffer_V_i_1_full_n;
    end else begin
        P2Buffer_V_i_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_i_20_blk_n = P2Buffer_V_i_20_full_n;
    end else begin
        P2Buffer_V_i_20_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_i_21_blk_n = P2Buffer_V_i_21_full_n;
    end else begin
        P2Buffer_V_i_21_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_i_22_blk_n = P2Buffer_V_i_22_full_n;
    end else begin
        P2Buffer_V_i_22_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_i_23_blk_n = P2Buffer_V_i_23_full_n;
    end else begin
        P2Buffer_V_i_23_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_i_24_blk_n = P2Buffer_V_i_24_full_n;
    end else begin
        P2Buffer_V_i_24_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_i_25_blk_n = P2Buffer_V_i_25_full_n;
    end else begin
        P2Buffer_V_i_25_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_i_26_blk_n = P2Buffer_V_i_26_full_n;
    end else begin
        P2Buffer_V_i_26_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_i_27_blk_n = P2Buffer_V_i_27_full_n;
    end else begin
        P2Buffer_V_i_27_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_i_28_blk_n = P2Buffer_V_i_28_full_n;
    end else begin
        P2Buffer_V_i_28_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_i_29_blk_n = P2Buffer_V_i_29_full_n;
    end else begin
        P2Buffer_V_i_29_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_i_2_blk_n = P2Buffer_V_i_2_full_n;
    end else begin
        P2Buffer_V_i_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_i_30_blk_n = P2Buffer_V_i_30_full_n;
    end else begin
        P2Buffer_V_i_30_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_i_3_blk_n = P2Buffer_V_i_3_full_n;
    end else begin
        P2Buffer_V_i_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_i_4_blk_n = P2Buffer_V_i_4_full_n;
    end else begin
        P2Buffer_V_i_4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_i_5_blk_n = P2Buffer_V_i_5_full_n;
    end else begin
        P2Buffer_V_i_5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_i_6_blk_n = P2Buffer_V_i_6_full_n;
    end else begin
        P2Buffer_V_i_6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_i_7_blk_n = P2Buffer_V_i_7_full_n;
    end else begin
        P2Buffer_V_i_7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_i_8_blk_n = P2Buffer_V_i_8_full_n;
    end else begin
        P2Buffer_V_i_8_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_i_9_blk_n = P2Buffer_V_i_9_full_n;
    end else begin
        P2Buffer_V_i_9_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == P2Buffer_V_n1_status) & (brmerge1_reg_2982 == 1'd0)) & (1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_n1_update = 1'b1;
    end else begin
        P2Buffer_V_n1_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_n_blk_n = P2Buffer_V_n_full_n;
    end else begin
        P2Buffer_V_n_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_parity_blk_n = P2Buffer_V_parity_full_n;
    end else begin
        P2Buffer_V_parity_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_slice_blk_n = P2Buffer_V_slice_full_n;
    end else begin
        P2Buffer_V_slice_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        P2Buffer_V_twist_blk_n = P2Buffer_V_twist_full_n;
    end else begin
        P2Buffer_V_twist_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((exitcond_fu_1935_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state14 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state14 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state18) & (tmp_139_fu_2082_p2 == 1'd0)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_reg_2624 == 1'd0))) begin
        ap_phi_mux_i17_phi_fu_1551_p4 = i_18_reg_2628;
    end else begin
        ap_phi_mux_i17_phi_fu_1551_p4 = i17_reg_1547;
    end
end

always @ (*) begin
    if (((demorgan_reg_2911 == 1'd1) & (1'b1 == ap_CS_fsm_state44) & (or_cond_reg_2907 == 1'd0) & (zero_load_reg_2875 == 1'd0))) begin
        ap_phi_mux_i1_2_phi_fu_1595_p6 = p_i1_reg_2879;
    end else begin
        ap_phi_mux_i1_2_phi_fu_1595_p6 = i1_2_reg_1591;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (brmerge1_reg_2982 == 1'd0))) begin
        ap_phi_mux_minDistPhase_phi_fu_1573_p4 = 4'd10;
    end else begin
        ap_phi_mux_minDistPhase_phi_fu_1573_p4 = minDistPhase_reg_1570;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) & (tmp_139_fu_2082_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_FRtoBR_Move2_ARREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_FRtoBR_Move2_ARREADY = m_axi_FRtoBR_Move2_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_FRtoBR_Move2_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_flipMove2_ARREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_flipMove2_ARREADY = m_axi_flipMove2_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_flipMove2_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_twistMove2_ARREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_twistMove2_ARREADY = m_axi_twistMove2_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_twistMove2_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        flipMove2_blk_n_AR = m_axi_flipMove2_ARREADY;
    end else begin
        flipMove2_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_reg_2624 == 1'd0))) begin
        flipMove2_blk_n_R = m_axi_flipMove2_RVALID;
    end else begin
        flipMove2_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        flipMove3_address0 = tmp_144_fu_2166_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        flipMove3_address0 = tmp_128_fu_1947_p1;
    end else begin
        flipMove3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        flipMove3_ce0 = 1'b1;
    end else begin
        flipMove3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond_reg_2624_pp0_iter1_reg == 1'd0))) begin
        flipMove3_we0 = 1'b1;
    end else begin
        flipMove3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        label_0_ce0 = 1'b1;
    end else begin
        label_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        label_1_ce0 = 1'b1;
    end else begin
        label_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_FRtoBR_Move2_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
        m_axi_FRtoBR_Move2_ARVALID = 1'b1;
    end else begin
        m_axi_FRtoBR_Move2_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_reg_2624 == 1'd0))) begin
        m_axi_FRtoBR_Move2_RREADY = 1'b1;
    end else begin
        m_axi_FRtoBR_Move2_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_flipMove2_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
        m_axi_flipMove2_ARADDR = Slice_Flip_Prun2_add_reg_2612;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_flipMove2_ARADDR = grp_getPruning_1_fu_1604_m_axi_table_r_ARADDR;
    end else begin
        m_axi_flipMove2_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_flipMove2_ARBURST = grp_getPruning_1_fu_1604_m_axi_table_r_ARBURST;
    end else begin
        m_axi_flipMove2_ARBURST = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_flipMove2_ARCACHE = grp_getPruning_1_fu_1604_m_axi_table_r_ARCACHE;
    end else begin
        m_axi_flipMove2_ARCACHE = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_flipMove2_ARID = grp_getPruning_1_fu_1604_m_axi_table_r_ARID;
    end else begin
        m_axi_flipMove2_ARID = 1'd0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_flipMove2_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
        m_axi_flipMove2_ARLEN = 32'd18;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_flipMove2_ARLEN = grp_getPruning_1_fu_1604_m_axi_table_r_ARLEN;
    end else begin
        m_axi_flipMove2_ARLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_flipMove2_ARLOCK = grp_getPruning_1_fu_1604_m_axi_table_r_ARLOCK;
    end else begin
        m_axi_flipMove2_ARLOCK = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_flipMove2_ARPROT = grp_getPruning_1_fu_1604_m_axi_table_r_ARPROT;
    end else begin
        m_axi_flipMove2_ARPROT = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_flipMove2_ARQOS = grp_getPruning_1_fu_1604_m_axi_table_r_ARQOS;
    end else begin
        m_axi_flipMove2_ARQOS = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_flipMove2_ARREGION = grp_getPruning_1_fu_1604_m_axi_table_r_ARREGION;
    end else begin
        m_axi_flipMove2_ARREGION = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_flipMove2_ARSIZE = grp_getPruning_1_fu_1604_m_axi_table_r_ARSIZE;
    end else begin
        m_axi_flipMove2_ARSIZE = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_flipMove2_ARUSER = grp_getPruning_1_fu_1604_m_axi_table_r_ARUSER;
    end else begin
        m_axi_flipMove2_ARUSER = 1'd0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_flipMove2_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
        m_axi_flipMove2_ARVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_flipMove2_ARVALID = grp_getPruning_1_fu_1604_m_axi_table_r_ARVALID;
    end else begin
        m_axi_flipMove2_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_reg_2624 == 1'd0))) begin
        m_axi_flipMove2_RREADY = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_flipMove2_RREADY = grp_getPruning_1_fu_1604_m_axi_table_r_RREADY;
    end else begin
        m_axi_flipMove2_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_twistMove2_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
        m_axi_twistMove2_ARADDR = Slice_Twist_Prun2_ad_reg_2606;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_twistMove2_ARADDR = grp_getPruning_fu_1612_m_axi_table_r_ARADDR;
    end else begin
        m_axi_twistMove2_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_twistMove2_ARBURST = grp_getPruning_fu_1612_m_axi_table_r_ARBURST;
    end else begin
        m_axi_twistMove2_ARBURST = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_twistMove2_ARCACHE = grp_getPruning_fu_1612_m_axi_table_r_ARCACHE;
    end else begin
        m_axi_twistMove2_ARCACHE = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_twistMove2_ARID = grp_getPruning_fu_1612_m_axi_table_r_ARID;
    end else begin
        m_axi_twistMove2_ARID = 1'd0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_twistMove2_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
        m_axi_twistMove2_ARLEN = 32'd18;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_twistMove2_ARLEN = grp_getPruning_fu_1612_m_axi_table_r_ARLEN;
    end else begin
        m_axi_twistMove2_ARLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_twistMove2_ARLOCK = grp_getPruning_fu_1612_m_axi_table_r_ARLOCK;
    end else begin
        m_axi_twistMove2_ARLOCK = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_twistMove2_ARPROT = grp_getPruning_fu_1612_m_axi_table_r_ARPROT;
    end else begin
        m_axi_twistMove2_ARPROT = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_twistMove2_ARQOS = grp_getPruning_fu_1612_m_axi_table_r_ARQOS;
    end else begin
        m_axi_twistMove2_ARQOS = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_twistMove2_ARREGION = grp_getPruning_fu_1612_m_axi_table_r_ARREGION;
    end else begin
        m_axi_twistMove2_ARREGION = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_twistMove2_ARSIZE = grp_getPruning_fu_1612_m_axi_table_r_ARSIZE;
    end else begin
        m_axi_twistMove2_ARSIZE = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_twistMove2_ARUSER = grp_getPruning_fu_1612_m_axi_table_r_ARUSER;
    end else begin
        m_axi_twistMove2_ARUSER = 1'd0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_twistMove2_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
        m_axi_twistMove2_ARVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_twistMove2_ARVALID = grp_getPruning_fu_1612_m_axi_table_r_ARVALID;
    end else begin
        m_axi_twistMove2_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_reg_2624 == 1'd0))) begin
        m_axi_twistMove2_RREADY = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_twistMove2_RREADY = grp_getPruning_fu_1612_m_axi_table_r_RREADY;
    end else begin
        m_axi_twistMove2_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        search_new_0_i_address0 = 64'd30;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        search_new_0_i_address0 = 64'd28;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        search_new_0_i_address0 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        search_new_0_i_address0 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        search_new_0_i_address0 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        search_new_0_i_address0 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        search_new_0_i_address0 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        search_new_0_i_address0 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        search_new_0_i_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        search_new_0_i_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        search_new_0_i_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        search_new_0_i_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        search_new_0_i_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        search_new_0_i_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        search_new_0_i_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        search_new_0_i_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        search_new_0_i_address0 = search_new_0_i_addr_2_reg_2682;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        search_new_0_i_address0 = tmp_i_fu_1692_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        search_new_0_i_address0 = tmp_s_fu_1688_p1;
    end else begin
        search_new_0_i_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        search_new_0_i_address1 = tmp_i3_fu_2341_p1;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        search_new_0_i_address1 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        search_new_0_i_address1 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        search_new_0_i_address1 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        search_new_0_i_address1 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        search_new_0_i_address1 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        search_new_0_i_address1 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        search_new_0_i_address1 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        search_new_0_i_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        search_new_0_i_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        search_new_0_i_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        search_new_0_i_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        search_new_0_i_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        search_new_0_i_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        search_new_0_i_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        search_new_0_i_address1 = 64'd2;
    end else begin
        search_new_0_i_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        search_new_0_i_ce0 = 1'b1;
    end else begin
        search_new_0_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state42))) begin
        search_new_0_i_ce1 = 1'b1;
    end else begin
        search_new_0_i_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        search_new_0_i_d0 = mv_cast_fu_2141_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        search_new_0_i_d0 = P1Buffer_0_i_q0;
    end else begin
        search_new_0_i_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state4))) begin
        search_new_0_i_we0 = 1'b1;
    end else begin
        search_new_0_i_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        twistMove2_blk_n_AR = m_axi_twistMove2_ARREADY;
    end else begin
        twistMove2_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_reg_2624 == 1'd0))) begin
        twistMove2_blk_n_R = m_axi_twistMove2_RVALID;
    end else begin
        twistMove2_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        twistMove3_address0 = tmp_144_fu_2166_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        twistMove3_address0 = tmp_128_fu_1947_p1;
    end else begin
        twistMove3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        twistMove3_ce0 = 1'b1;
    end else begin
        twistMove3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond_reg_2624_pp0_iter1_reg == 1'd0))) begin
        twistMove3_we0 = 1'b1;
    end else begin
        twistMove3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond_i_fu_1662_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((or_cond2_fu_1812_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_block_state7_io))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_fu_1935_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((exitcond_fu_1935_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (tmp_139_fu_2082_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((tmp_139_fu_2082_p2 == 1'd1) & (zero_load_load_fu_2088_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & ((or_cond_fu_2151_p2 == 1'd1) | (demorgan_fu_2161_p2 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if (((1'b0 == ap_block_state24_on_subcall_done) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((brmerge1_fu_2273_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            if ((~((1'b0 == P2Buffer_V_n1_status) & (brmerge1_reg_2982 == 1'd0)) & (tmp_154_fu_2293_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else if ((~((1'b0 == P2Buffer_V_n1_status) & (brmerge1_reg_2982 == 1'd0)) & (1'b1 == ap_CS_fsm_state41) & (tmp_154_fu_2293_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            if (((exitcond_i2_fu_2329_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign P1Buffer_0_depthPha_d0 = search_new_0_depthP_1_fu_842;

assign P1Buffer_0_flip_d0 = search_new_0_flip_reg_2953;

assign P1Buffer_0_i_d0 = search_new_0_i_q1;

assign P1Buffer_0_n_d0 = n_reg_2669;

assign P1Buffer_0_slice_d0 = search_new_0_slice_reg_2960;

assign P1Buffer_0_twist_d0 = search_new_0_twist_reg_2930;

assign P2Buffer_V_FRtoBR_din = 16'd0;

assign P2Buffer_V_FRtoBR_write = P2Buffer_V_n1_update;

assign P2Buffer_V_URFtoDLF_din = 16'd0;

assign P2Buffer_V_URFtoDLF_write = P2Buffer_V_n1_update;

assign P2Buffer_V_URtoDF_din = 16'd0;

assign P2Buffer_V_URtoDF_write = P2Buffer_V_n1_update;

assign P2Buffer_V_depthPhas_din = depthPhase1_cast_reg_2516;

assign P2Buffer_V_depthPhas_write = P2Buffer_V_n1_update;

assign P2Buffer_V_flip_din = search_new_0_flip_reg_2953;

assign P2Buffer_V_flip_write = P2Buffer_V_n1_update;

assign P2Buffer_V_i_0_din = tmp_i_0_reg_2991;

assign P2Buffer_V_i_0_write = P2Buffer_V_n1_update;

assign P2Buffer_V_i_10_din = tmp_i_10_reg_3041;

assign P2Buffer_V_i_10_write = P2Buffer_V_n1_update;

assign P2Buffer_V_i_11_din = tmp_i_11_reg_3046;

assign P2Buffer_V_i_11_write = P2Buffer_V_n1_update;

assign P2Buffer_V_i_12_din = tmp_i_12_reg_3051;

assign P2Buffer_V_i_12_write = P2Buffer_V_n1_update;

assign P2Buffer_V_i_13_din = tmp_i_13_reg_3056;

assign P2Buffer_V_i_13_write = P2Buffer_V_n1_update;

assign P2Buffer_V_i_14_din = tmp_i_14_reg_3061;

assign P2Buffer_V_i_14_write = P2Buffer_V_n1_update;

assign P2Buffer_V_i_15_din = tmp_i_15_reg_3066;

assign P2Buffer_V_i_15_write = P2Buffer_V_n1_update;

assign P2Buffer_V_i_16_din = tmp_i_16_reg_3071;

assign P2Buffer_V_i_16_write = P2Buffer_V_n1_update;

assign P2Buffer_V_i_17_din = tmp_i_17_reg_3076;

assign P2Buffer_V_i_17_write = P2Buffer_V_n1_update;

assign P2Buffer_V_i_18_din = tmp_i_18_reg_3081;

assign P2Buffer_V_i_18_write = P2Buffer_V_n1_update;

assign P2Buffer_V_i_19_din = tmp_i_19_reg_3086;

assign P2Buffer_V_i_19_write = P2Buffer_V_n1_update;

assign P2Buffer_V_i_1_din = tmp_i_1_reg_2996;

assign P2Buffer_V_i_1_write = P2Buffer_V_n1_update;

assign P2Buffer_V_i_20_din = tmp_i_20_reg_3091;

assign P2Buffer_V_i_20_write = P2Buffer_V_n1_update;

assign P2Buffer_V_i_21_din = tmp_i_21_reg_3096;

assign P2Buffer_V_i_21_write = P2Buffer_V_n1_update;

assign P2Buffer_V_i_22_din = tmp_i_22_reg_3101;

assign P2Buffer_V_i_22_write = P2Buffer_V_n1_update;

assign P2Buffer_V_i_23_din = tmp_i_23_reg_3106;

assign P2Buffer_V_i_23_write = P2Buffer_V_n1_update;

assign P2Buffer_V_i_24_din = tmp_i_24_reg_3111;

assign P2Buffer_V_i_24_write = P2Buffer_V_n1_update;

assign P2Buffer_V_i_25_din = tmp_i_25_reg_3116;

assign P2Buffer_V_i_25_write = P2Buffer_V_n1_update;

assign P2Buffer_V_i_26_din = tmp_i_26_reg_3121;

assign P2Buffer_V_i_26_write = P2Buffer_V_n1_update;

assign P2Buffer_V_i_27_din = tmp_i_27_reg_3126;

assign P2Buffer_V_i_27_write = P2Buffer_V_n1_update;

assign P2Buffer_V_i_28_din = tmp_i_28_reg_3131;

assign P2Buffer_V_i_28_write = P2Buffer_V_n1_update;

assign P2Buffer_V_i_29_din = search_new_0_i_q1;

assign P2Buffer_V_i_29_write = P2Buffer_V_n1_update;

assign P2Buffer_V_i_2_din = tmp_i_2_reg_3001;

assign P2Buffer_V_i_2_write = P2Buffer_V_n1_update;

assign P2Buffer_V_i_30_din = search_new_0_i_q0;

assign P2Buffer_V_i_30_write = P2Buffer_V_n1_update;

assign P2Buffer_V_i_3_din = tmp_i_3_reg_3006;

assign P2Buffer_V_i_3_write = P2Buffer_V_n1_update;

assign P2Buffer_V_i_4_din = tmp_i_4_reg_3011;

assign P2Buffer_V_i_4_write = P2Buffer_V_n1_update;

assign P2Buffer_V_i_5_din = tmp_i_5_reg_3016;

assign P2Buffer_V_i_5_write = P2Buffer_V_n1_update;

assign P2Buffer_V_i_6_din = tmp_i_6_reg_3021;

assign P2Buffer_V_i_6_write = P2Buffer_V_n1_update;

assign P2Buffer_V_i_7_din = tmp_i_7_reg_3026;

assign P2Buffer_V_i_7_write = P2Buffer_V_n1_update;

assign P2Buffer_V_i_8_din = tmp_i_8_reg_3031;

assign P2Buffer_V_i_8_write = P2Buffer_V_n1_update;

assign P2Buffer_V_i_9_din = tmp_i_9_reg_3036;

assign P2Buffer_V_i_9_write = P2Buffer_V_n1_update;

assign P2Buffer_V_n1_status = (P2Buffer_V_twist_full_n & P2Buffer_V_slice_full_n & P2Buffer_V_parity_full_n & P2Buffer_V_n_full_n & P2Buffer_V_i_9_full_n & P2Buffer_V_i_8_full_n & P2Buffer_V_i_7_full_n & P2Buffer_V_i_6_full_n & P2Buffer_V_i_5_full_n & P2Buffer_V_i_4_full_n & P2Buffer_V_i_3_full_n & P2Buffer_V_i_30_full_n & P2Buffer_V_i_2_full_n & P2Buffer_V_i_29_full_n & P2Buffer_V_i_28_full_n & P2Buffer_V_i_27_full_n & P2Buffer_V_i_26_full_n & P2Buffer_V_i_25_full_n & P2Buffer_V_i_24_full_n & P2Buffer_V_i_23_full_n & P2Buffer_V_i_22_full_n & P2Buffer_V_i_21_full_n & P2Buffer_V_i_20_full_n & P2Buffer_V_i_1_full_n & P2Buffer_V_i_19_full_n & P2Buffer_V_i_18_full_n & P2Buffer_V_i_17_full_n & P2Buffer_V_i_16_full_n & P2Buffer_V_i_15_full_n & P2Buffer_V_i_14_full_n & P2Buffer_V_i_13_full_n & P2Buffer_V_i_12_full_n & P2Buffer_V_i_11_full_n & P2Buffer_V_i_10_full_n & P2Buffer_V_i_0_full_n & P2Buffer_V_flip_full_n & P2Buffer_V_depthPhas_full_n & P2Buffer_V_URtoDF_full_n & P2Buffer_V_URFtoDLF_full_n & P2Buffer_V_FRtoBR_full_n);

assign P2Buffer_V_n_din = n_reg_2669;

assign P2Buffer_V_n_write = P2Buffer_V_n1_update;

assign P2Buffer_V_parity_din = 1'd0;

assign P2Buffer_V_parity_write = P2Buffer_V_n1_update;

assign P2Buffer_V_slice_din = search_new_0_slice_reg_2960;

assign P2Buffer_V_slice_write = P2Buffer_V_n1_update;

assign P2Buffer_V_twist_din = search_new_0_twist_reg_2930;

assign P2Buffer_V_twist_write = P2Buffer_V_n1_update;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((m_axi_FRtoBR_Move2_RVALID == 1'b0) & (exitcond_reg_2624 == 1'd0)) | ((m_axi_flipMove2_RVALID == 1'b0) & (exitcond_reg_2624 == 1'd0)) | ((m_axi_twistMove2_RVALID == 1'b0) & (exitcond_reg_2624 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((m_axi_FRtoBR_Move2_RVALID == 1'b0) & (exitcond_reg_2624 == 1'd0)) | ((m_axi_flipMove2_RVALID == 1'b0) & (exitcond_reg_2624 == 1'd0)) | ((m_axi_twistMove2_RVALID == 1'b0) & (exitcond_reg_2624 == 1'd0))));
end

assign ap_block_state14_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state15_pp0_stage0_iter1 = (((m_axi_FRtoBR_Move2_RVALID == 1'b0) & (exitcond_reg_2624 == 1'd0)) | ((m_axi_flipMove2_RVALID == 1'b0) & (exitcond_reg_2624 == 1'd0)) | ((m_axi_twistMove2_RVALID == 1'b0) & (exitcond_reg_2624 == 1'd0)));
end

assign ap_block_state16_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state24_on_subcall_done = ((grp_getPruning_fu_1612_ap_done == 1'b0) | (grp_getPruning_1_fu_1604_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state41 = ((1'b0 == P2Buffer_V_n1_status) & (brmerge1_reg_2982 == 1'd0));
end

always @ (*) begin
    ap_block_state7_io = ((ap_sig_ioackin_m_axi_FRtoBR_Move2_ARREADY == 1'b0) | (ap_sig_ioackin_m_axi_flipMove2_ARREADY == 1'b0) | (ap_sig_ioackin_m_axi_twistMove2_ARREADY == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return = P1Start_fu_838;

assign ax_cast6_fu_2106_p1 = ax_reg_2895;

assign ax_cast7_fu_2103_p1 = ax_reg_2895;

assign brmerge1_fu_2273_p2 = (tmp_199_not_reg_2862 | brmerge_fu_2268_p2);

assign brmerge_fu_2268_p2 = (tmp_133_reg_2692 | p_not_fu_2263_p2);

assign demorgan_fu_2161_p2 = (tmp_143_fu_2156_p2 | tmp_129_reg_2675);

assign depthPhase1_cast_fu_1658_p1 = depthPhase1;

assign exitcond_fu_1935_p2 = ((ap_phi_mux_i17_phi_fu_1551_p4 == 5'd18) ? 1'b1 : 1'b0);

assign exitcond_i2_fu_2329_p2 = ((i_i1_reg_1580 == 5'd31) ? 1'b1 : 1'b0);

assign exitcond_i_fu_1662_p2 = ((i_i_reg_1535 == 5'd31) ? 1'b1 : 1'b0);

assign grp_fu_2404_p1 = 25'd432;

assign grp_fu_2404_p2 = grp_fu_2404_p20;

assign grp_fu_2404_p20 = FRtoBR_Move2_offset;

assign grp_fu_2421_p0 = 25'd495;

assign grp_fu_2421_p2 = tmp_183_cast_fu_2242_p1;

assign grp_fu_2429_p0 = 25'd495;

assign grp_fu_2429_p2 = tmp_183_cast_fu_2242_p1;

assign grp_getPruning_1_fu_1604_ap_start = grp_getPruning_1_fu_1604_ap_start_reg;

assign grp_getPruning_fu_1612_ap_start = grp_getPruning_fu_1612_ap_start_reg;

assign i_16_fu_1668_p2 = (i_i_reg_1535 + 5'd1);

assign i_18_fu_1941_p2 = (ap_phi_mux_i17_phi_fu_1551_p4 + 5'd1);

assign i_19_fu_2335_p2 = (i_i1_reg_1580 + 5'd1);

assign i_20_fu_2398_p2 = (ap_phi_mux_i1_2_phi_fu_1595_p6 + 8'd1);

assign label_0_address0 = tmp_140_fu_2097_p1;

assign label_1_address0 = tmp_140_fu_2097_p1;

assign m_axi_FRtoBR_Move2_ARADDR = FRtoBR_Move2_addr_reg_2618;

assign m_axi_FRtoBR_Move2_ARBURST = 2'd0;

assign m_axi_FRtoBR_Move2_ARCACHE = 4'd0;

assign m_axi_FRtoBR_Move2_ARID = 1'd0;

assign m_axi_FRtoBR_Move2_ARLEN = 32'd18;

assign m_axi_FRtoBR_Move2_ARLOCK = 2'd0;

assign m_axi_FRtoBR_Move2_ARPROT = 3'd0;

assign m_axi_FRtoBR_Move2_ARQOS = 4'd0;

assign m_axi_FRtoBR_Move2_ARREGION = 4'd0;

assign m_axi_FRtoBR_Move2_ARSIZE = 3'd0;

assign m_axi_FRtoBR_Move2_ARUSER = 1'd0;

assign m_axi_FRtoBR_Move2_AWADDR = 32'd0;

assign m_axi_FRtoBR_Move2_AWBURST = 2'd0;

assign m_axi_FRtoBR_Move2_AWCACHE = 4'd0;

assign m_axi_FRtoBR_Move2_AWID = 1'd0;

assign m_axi_FRtoBR_Move2_AWLEN = 32'd0;

assign m_axi_FRtoBR_Move2_AWLOCK = 2'd0;

assign m_axi_FRtoBR_Move2_AWPROT = 3'd0;

assign m_axi_FRtoBR_Move2_AWQOS = 4'd0;

assign m_axi_FRtoBR_Move2_AWREGION = 4'd0;

assign m_axi_FRtoBR_Move2_AWSIZE = 3'd0;

assign m_axi_FRtoBR_Move2_AWUSER = 1'd0;

assign m_axi_FRtoBR_Move2_AWVALID = 1'b0;

assign m_axi_FRtoBR_Move2_BREADY = 1'b0;

assign m_axi_FRtoBR_Move2_WDATA = 16'd0;

assign m_axi_FRtoBR_Move2_WID = 1'd0;

assign m_axi_FRtoBR_Move2_WLAST = 1'b0;

assign m_axi_FRtoBR_Move2_WSTRB = 2'd0;

assign m_axi_FRtoBR_Move2_WUSER = 1'd0;

assign m_axi_FRtoBR_Move2_WVALID = 1'b0;

assign m_axi_flipMove2_AWADDR = 32'd0;

assign m_axi_flipMove2_AWBURST = 2'd0;

assign m_axi_flipMove2_AWCACHE = 4'd0;

assign m_axi_flipMove2_AWID = 1'd0;

assign m_axi_flipMove2_AWLEN = 32'd0;

assign m_axi_flipMove2_AWLOCK = 2'd0;

assign m_axi_flipMove2_AWPROT = 3'd0;

assign m_axi_flipMove2_AWQOS = 4'd0;

assign m_axi_flipMove2_AWREGION = 4'd0;

assign m_axi_flipMove2_AWSIZE = 3'd0;

assign m_axi_flipMove2_AWUSER = 1'd0;

assign m_axi_flipMove2_AWVALID = 1'b0;

assign m_axi_flipMove2_BREADY = 1'b0;

assign m_axi_flipMove2_WDATA = 16'd0;

assign m_axi_flipMove2_WID = 1'd0;

assign m_axi_flipMove2_WLAST = 1'b0;

assign m_axi_flipMove2_WSTRB = 2'd0;

assign m_axi_flipMove2_WUSER = 1'd0;

assign m_axi_flipMove2_WVALID = 1'b0;

assign m_axi_twistMove2_AWADDR = 32'd0;

assign m_axi_twistMove2_AWBURST = 2'd0;

assign m_axi_twistMove2_AWCACHE = 4'd0;

assign m_axi_twistMove2_AWID = 1'd0;

assign m_axi_twistMove2_AWLEN = 32'd0;

assign m_axi_twistMove2_AWLOCK = 2'd0;

assign m_axi_twistMove2_AWPROT = 3'd0;

assign m_axi_twistMove2_AWQOS = 4'd0;

assign m_axi_twistMove2_AWREGION = 4'd0;

assign m_axi_twistMove2_AWSIZE = 3'd0;

assign m_axi_twistMove2_AWUSER = 1'd0;

assign m_axi_twistMove2_AWVALID = 1'b0;

assign m_axi_twistMove2_BREADY = 1'b0;

assign m_axi_twistMove2_WDATA = 16'd0;

assign m_axi_twistMove2_WID = 1'd0;

assign m_axi_twistMove2_WLAST = 1'b0;

assign m_axi_twistMove2_WSTRB = 2'd0;

assign m_axi_twistMove2_WUSER = 1'd0;

assign m_axi_twistMove2_WVALID = 1'b0;

assign minDistPhase1_fu_2255_p3 = ((tmp_153_fu_2249_p2[0:0] === 1'b1) ? grp_getPruning_1_fu_1604_ap_return : grp_getPruning_fu_1612_ap_return);

assign minDistPhase1_mux_fu_2278_p3 = ((brmerge_fu_2268_p2[0:0] === 1'b1) ? minDistPhase1_reg_2976 : 4'd10);

assign mul1_fu_2413_p0 = 34'd87382;

assign mul_fu_1701_p1 = sext2_cast_fu_1697_p0;

assign mul_fu_1701_p2 = ($signed({{1'b0}, {18'd342}}) * $signed(mul_fu_1701_p1));

assign mv_cast_fu_2141_p1 = mv_fu_2135_p2;

assign mv_fu_2135_p2 = (po_cast_fu_2109_p1 + tmp4_fu_2129_p2);

assign n_1_fu_1969_p2 = ($signed(n_2_reg_2550) + $signed(8'd255));

assign n_1_n_fu_1974_p0 = first_read;

assign n_1_n_fu_1974_p3 = ((n_1_n_fu_1974_p0[0:0] === 1'b1) ? n_1_fu_1969_p2 : n_2_reg_2550);

assign n_fu_1980_p2 = (n_1_n_fu_1974_p3 + 8'd1);

assign neg_mul1_fu_2197_p2 = (33'd0 - tmp_107_reg_2937);

assign neg_mul_fu_1729_p2 = (17'd0 - tmp_101_reg_2580);

assign neg_ti1_fu_2226_p2 = (16'd0 - tmp_147_fu_2219_p3);

assign neg_ti_fu_1762_p2 = (7'd0 - tmp_105_fu_1758_p1);

assign or_cond2_fu_1812_p2 = (tmp_122_fu_1783_p2 & tmp1_fu_1806_p2);

assign or_cond_fu_2151_p2 = (tmp_142_fu_2146_p2 & tmp_131_reg_2687);

assign p_i1_fu_2091_p3 = ((tmp_129_reg_2675[0:0] === 1'b1) ? i_reg_2575 : i1_reg_1559);

assign p_not_fu_2263_p2 = ((minDistPhase1_reg_2976 != 4'd0) ? 1'b1 : 1'b0);

assign p_op_fu_2056_p0 = P1End_read;

assign p_op_fu_2056_p2 = ($signed(p_op_fu_2056_p0) + $signed(32'd4294967295));

assign p_s_fu_2371_p3 = ((tmp_157_fu_2365_p2[0:0] === 1'b1) ? 32'd0 : tmp_156_fu_2359_p2);

assign p_shl12_cast_fu_1644_p3 = {{tmp_100_fu_1640_p1}, {5'd0}};

assign p_shl13_cast_fu_2315_p3 = {{tmp_112_fu_2311_p1}, {5'd0}};

assign p_shl1_fu_1847_p3 = {{b_reg_2522}, {1'd0}};

assign p_shl2_cast_fu_1825_p1 = $signed(p_shl2_fu_1818_p3);

assign p_shl2_fu_1818_p3 = {{a_1_reg_2530}, {4'd0}};

assign p_shl3_fu_1829_p3 = {{a_1_reg_2530}, {1'd0}};

assign p_shl4_cast_fu_2119_p1 = p_shl4_fu_2112_p3;

assign p_shl4_fu_2112_p3 = {{ax_reg_2895}, {2'd0}};

assign p_shl_cast_fu_1843_p1 = $signed(p_shl_fu_1836_p3);

assign p_shl_fu_1836_p3 = {{b_reg_2522}, {4'd0}};

assign p_v_fu_1751_p3 = ((tmp_102_reg_2585[0:0] === 1'b1) ? tmp_120_fu_1744_p1 : tmp_121_fu_1748_p1);

assign po_cast_fu_2109_p1 = po_reg_2902;

assign search_new_0_slice_fu_2232_p3 = ((tmp_108_reg_2942[0:0] === 1'b1) ? neg_ti1_fu_2226_p2 : tmp_146_fu_2216_p1);

assign sext2_cast_fu_1697_p0 = search_new_0_i_q0;

assign sext4_cast_fu_1904_p1 = flipMove2_offset;

assign sext_cast_fu_1885_p1 = twistMove2_offset;

assign sum5_cast_fu_1913_p1 = $signed(sum5_fu_1907_p2);

assign sum5_fu_1907_p2 = ($signed(tmp_33_cast_fu_1881_p1) + $signed(sext4_cast_fu_1904_p1));

assign sum6_cast_fu_1926_p1 = grp_fu_2404_p3;

assign sum_cast_fu_1894_p1 = $signed(sum_fu_1888_p2);

assign sum_fu_1888_p2 = ($signed(tmp_28_cast_fu_1867_p1) + $signed(sext_cast_fu_1885_p1));

assign tmp1_fu_1806_p2 = (tmp_124_fu_1801_p2 & tmp_123_fu_1792_p2);

assign tmp4_fu_2129_p2 = ($signed(tmp_141_fu_2123_p2) + $signed(6'd63));

assign tmp_100_fu_1640_p0 = P1End_read;

assign tmp_100_fu_1640_p1 = tmp_100_fu_1640_p0[13:0];

assign tmp_101_fu_1707_p1 = mul_fu_1701_p2[16:0];

assign tmp_102_fu_1711_p1 = search_new_0_i_q0;

assign tmp_103_fu_1734_p4 = {{neg_mul_fu_1729_p2[16:10]}};

assign tmp_105_fu_1758_p1 = p_v_fu_1751_p3[6:0];

assign tmp_106_fu_1768_p1 = p_v_fu_1751_p3[6:0];

assign tmp_107_fu_2177_p1 = mul1_fu_2413_p2[32:0];

assign tmp_108_fu_2180_p1 = FRtoBR_Move3_q0;

assign tmp_109_fu_2202_p4 = {{neg_mul1_fu_2197_p2[32:21]}};

assign tmp_111_fu_2307_p0 = P1Start_fu_838;

assign tmp_111_fu_2307_p1 = tmp_111_fu_2307_p0[18:0];

assign tmp_112_fu_2311_p0 = P1Start_fu_838;

assign tmp_112_fu_2311_p1 = tmp_112_fu_2311_p0[13:0];

assign tmp_119_fu_1652_p2 = (p_shl12_cast_fu_1644_p3 - tmp_99_fu_1636_p1);

assign tmp_120_fu_1744_p1 = $signed(tmp_103_fu_1734_p4);

assign tmp_121_fu_1748_p1 = $signed(tmp_104_reg_2591);

assign tmp_122_fu_1783_p2 = ((twistOld == a_1_reg_2530) ? 1'b1 : 1'b0);

assign tmp_123_fu_1792_p2 = ((flipOld == b_reg_2522) ? 1'b1 : 1'b0);

assign tmp_124_fu_1801_p2 = ((sliceOld == c_reg_2538) ? 1'b1 : 1'b0);

assign tmp_126_fu_1772_p3 = ((tmp_102_reg_2585[0:0] === 1'b1) ? neg_ti_fu_1762_p2 : tmp_106_fu_1768_p1);

assign tmp_127_fu_1678_p2 = (tmp_119_reg_2444 + tmp_i_cast_fu_1674_p1);

assign tmp_128_fu_1947_p1 = i17_reg_1547_pp0_iter1_reg;

assign tmp_129_fu_1986_p2 = ((n_fu_1980_p2 == 8'd0) ? 1'b1 : 1'b0);

assign tmp_130_fu_1992_p1 = n_fu_1980_p2;

assign tmp_131_fu_1997_p2 = ((n_fu_1980_p2 != 8'd0) ? 1'b1 : 1'b0);

assign tmp_132_fu_2010_p2 = ($signed(depthPhase1) + $signed(5'd27));

assign tmp_133_fu_2019_p2 = (($signed(n_fu_1980_p2) < $signed(tmp_165_cast_fu_2015_p1)) ? 1'b1 : 1'b0);

assign tmp_134_fu_2025_p2 = ($signed(depthPhase1) + $signed(5'd31));

assign tmp_135_fu_2034_p2 = ($signed(tmp_164_cast_fu_2007_p1) - $signed(tmp_163_cast_fu_2003_p1));

assign tmp_136_fu_2040_p2 = ($signed(tmp_126_reg_2596) + $signed(7'd125));

assign tmp_137_fu_2051_p0 = P1End_read;

assign tmp_137_fu_2051_p2 = ((tmp_137_fu_2051_p0 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_138_fu_2061_p3 = ((tmp_137_fu_2051_p2[0:0] === 1'b1) ? 32'd7999 : p_op_fu_2056_p2);

assign tmp_139_fu_2082_p2 = (($signed(i1_reg_1559) < $signed(8'd18)) ? 1'b1 : 1'b0);

assign tmp_140_fu_2097_p1 = p_i1_fu_2091_p3;

assign tmp_141_fu_2123_p2 = (p_shl4_cast_fu_2119_p1 - ax_cast6_fu_2106_p1);

assign tmp_142_fu_2146_p2 = ((tmp_126_reg_2596 == ax_cast7_fu_2103_p1) ? 1'b1 : 1'b0);

assign tmp_143_fu_2156_p2 = ((tmp_136_reg_2857 != ax_cast7_fu_2103_p1) ? 1'b1 : 1'b0);

assign tmp_144_fu_2166_p1 = mv_fu_2135_p2;

assign tmp_145_fu_2212_p1 = $signed(tmp_109_fu_2202_p4);

assign tmp_146_fu_2216_p1 = $signed(tmp_110_reg_2948);

assign tmp_147_fu_2219_p3 = ((tmp_108_reg_2942[0:0] === 1'b1) ? tmp_145_fu_2212_p1 : tmp_146_fu_2216_p1);

assign tmp_153_fu_2249_p2 = ((grp_getPruning_1_fu_1604_ap_return > grp_getPruning_fu_1612_ap_return) ? 1'b1 : 1'b0);

assign tmp_154_fu_2293_p2 = (($signed(tmp_135_reg_2852) > $signed(tmp_189_cast_fu_2289_p1)) ? 1'b1 : 1'b0);

assign tmp_155_fu_2298_p0 = P1Start_fu_838;

assign tmp_155_fu_2298_p1 = tmp_155_fu_2298_p0;

assign tmp_156_fu_2359_p2 = (P1Start_fu_838 + 32'd1);

assign tmp_157_fu_2365_p2 = ((tmp_156_fu_2359_p2 == 32'd8000) ? 1'b1 : 1'b0);

assign tmp_158_fu_2379_p1 = P1End_read;

assign tmp_158_fu_2379_p2 = ((p_s_fu_2371_p3 == tmp_158_fu_2379_p1) ? 1'b1 : 1'b0);

assign tmp_160_fu_2323_p2 = (p_shl13_cast_fu_2315_p3 - tmp_111_fu_2307_p1);

assign tmp_161_fu_2350_p2 = (tmp_160_reg_3140 + tmp_i3_cast_fu_2346_p1);

assign tmp_163_cast_fu_2003_p1 = n_fu_1980_p2;

assign tmp_164_cast_fu_2007_p1 = depthPhase1;

assign tmp_165_cast_fu_2015_p1 = $signed(tmp_132_fu_2010_p2);

assign tmp_167_cast_fu_2030_p1 = tmp_134_fu_2025_p2;

assign tmp_168_cast_fu_1683_p1 = $signed(tmp_127_fu_1678_p2);

assign tmp_176_cast_fu_2384_p1 = $signed(tmp_161_reg_3178);

assign tmp_183_cast_fu_2242_p1 = search_new_0_slice_fu_2232_p3;

assign tmp_189_cast_fu_2289_p1 = ap_phi_mux_minDistPhase_phi_fu_1573_p4;

assign tmp_199_not_fu_2045_p2 = ((n_fu_1980_p2 != tmp_167_cast_fu_2030_p1) ? 1'b1 : 1'b0);

assign tmp_213_s_fu_2388_p3 = ((tmp_158_reg_3193[0:0] === 1'b1) ? tmp_138_reg_2867 : p_s_reg_3188);

assign tmp_26_fu_1857_p1 = $signed(p_shl3_fu_1829_p3);

assign tmp_27_fu_1861_p2 = ($signed(tmp_26_fu_1857_p1) + $signed(p_shl2_cast_fu_1825_p1));

assign tmp_28_cast_fu_1867_p1 = $signed(tmp_27_fu_1861_p2);

assign tmp_31_fu_1871_p1 = $signed(p_shl1_fu_1847_p3);

assign tmp_32_fu_1875_p2 = ($signed(tmp_31_fu_1871_p1) + $signed(p_shl_cast_fu_1843_p1));

assign tmp_33_cast_fu_1881_p1 = $signed(tmp_32_fu_1875_p2);

assign tmp_99_fu_1636_p0 = P1End_read;

assign tmp_99_fu_1636_p1 = tmp_99_fu_1636_p0[18:0];

assign tmp_fu_1627_p0 = P1End_read;

assign tmp_fu_1627_p1 = tmp_fu_1627_p0;

assign tmp_i3_cast_fu_2346_p1 = i_i1_reg_1580;

assign tmp_i3_fu_2341_p1 = i_i1_reg_1580;

assign tmp_i_cast_fu_1674_p1 = i_i_reg_1535;

assign tmp_i_fu_1692_p1 = i_i_reg_1535;

assign tmp_s_fu_1688_p1 = n_2_reg_2550;

assign zero_load_load_fu_2088_p1 = zero_fu_846;

always @ (posedge ap_clk) begin
    depthPhase1_cast_reg_2516[7:5] <= 3'b000;
end

endmodule //parallel_v2
