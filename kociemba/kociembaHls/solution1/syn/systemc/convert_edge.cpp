// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "convert_edge.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic convert_edge::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic convert_edge::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> convert_edge::ap_ST_fsm_state1 = "1";
const sc_lv<3> convert_edge::ap_ST_fsm_state2 = "10";
const sc_lv<3> convert_edge::ap_ST_fsm_state3 = "100";
const sc_lv<32> convert_edge::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<4> convert_edge::ap_const_lv4_0 = "0000";
const sc_lv<1> convert_edge::ap_const_lv1_1 = "1";
const sc_lv<4> convert_edge::ap_const_lv4_1 = "1";
const sc_lv<1> convert_edge::ap_const_lv1_0 = "0";
const sc_lv<4> convert_edge::ap_const_lv4_2 = "10";
const sc_lv<4> convert_edge::ap_const_lv4_3 = "11";
const sc_lv<4> convert_edge::ap_const_lv4_4 = "100";
const sc_lv<4> convert_edge::ap_const_lv4_5 = "101";
const sc_lv<4> convert_edge::ap_const_lv4_6 = "110";
const sc_lv<4> convert_edge::ap_const_lv4_7 = "111";
const sc_lv<4> convert_edge::ap_const_lv4_8 = "1000";
const sc_lv<4> convert_edge::ap_const_lv4_9 = "1001";
const sc_lv<4> convert_edge::ap_const_lv4_A = "1010";
const sc_lv<32> convert_edge::ap_const_lv32_1 = "1";
const sc_lv<4> convert_edge::ap_const_lv4_B = "1011";
const sc_lv<32> convert_edge::ap_const_lv32_2 = "10";
const bool convert_edge::ap_const_boolean_1 = true;

convert_edge::convert_edge(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_condition_109);
    sensitive << ( tmp_fu_96_p2 );
    sensitive << ( tmp_s_fu_102_p2 );
    sensitive << ( tmp_205_fu_108_p2 );
    sensitive << ( tmp_206_fu_114_p2 );
    sensitive << ( tmp_207_fu_120_p2 );
    sensitive << ( tmp_208_fu_126_p2 );
    sensitive << ( tmp_209_fu_132_p2 );
    sensitive << ( tmp_210_fu_138_p2 );
    sensitive << ( tmp_211_fu_144_p2 );

    SC_METHOD(thread_ap_condition_123);
    sensitive << ( tmp_fu_96_p2 );
    sensitive << ( tmp_s_fu_102_p2 );
    sensitive << ( tmp_205_fu_108_p2 );
    sensitive << ( tmp_206_fu_114_p2 );
    sensitive << ( tmp_207_fu_120_p2 );
    sensitive << ( tmp_208_fu_126_p2 );
    sensitive << ( tmp_209_fu_132_p2 );
    sensitive << ( tmp_210_fu_138_p2 );
    sensitive << ( tmp_211_fu_144_p2 );
    sensitive << ( tmp_212_fu_150_p2 );

    SC_METHOD(thread_ap_condition_138);
    sensitive << ( tmp_fu_96_p2 );
    sensitive << ( tmp_s_fu_102_p2 );
    sensitive << ( tmp_205_fu_108_p2 );
    sensitive << ( tmp_206_fu_114_p2 );
    sensitive << ( tmp_207_fu_120_p2 );
    sensitive << ( tmp_208_fu_126_p2 );
    sensitive << ( tmp_209_fu_132_p2 );
    sensitive << ( tmp_210_fu_138_p2 );
    sensitive << ( tmp_211_fu_144_p2 );
    sensitive << ( tmp_212_fu_150_p2 );
    sensitive << ( tmp_213_fu_156_p2 );

    SC_METHOD(thread_ap_condition_46);
    sensitive << ( tmp_fu_96_p2 );
    sensitive << ( tmp_s_fu_102_p2 );
    sensitive << ( tmp_205_fu_108_p2 );

    SC_METHOD(thread_ap_condition_54);
    sensitive << ( tmp_fu_96_p2 );
    sensitive << ( tmp_s_fu_102_p2 );
    sensitive << ( tmp_205_fu_108_p2 );
    sensitive << ( tmp_206_fu_114_p2 );

    SC_METHOD(thread_ap_condition_63);
    sensitive << ( tmp_fu_96_p2 );
    sensitive << ( tmp_s_fu_102_p2 );
    sensitive << ( tmp_205_fu_108_p2 );
    sensitive << ( tmp_206_fu_114_p2 );
    sensitive << ( tmp_207_fu_120_p2 );

    SC_METHOD(thread_ap_condition_73);
    sensitive << ( tmp_fu_96_p2 );
    sensitive << ( tmp_s_fu_102_p2 );
    sensitive << ( tmp_205_fu_108_p2 );
    sensitive << ( tmp_206_fu_114_p2 );
    sensitive << ( tmp_207_fu_120_p2 );
    sensitive << ( tmp_208_fu_126_p2 );

    SC_METHOD(thread_ap_condition_84);
    sensitive << ( tmp_fu_96_p2 );
    sensitive << ( tmp_s_fu_102_p2 );
    sensitive << ( tmp_205_fu_108_p2 );
    sensitive << ( tmp_206_fu_114_p2 );
    sensitive << ( tmp_207_fu_120_p2 );
    sensitive << ( tmp_208_fu_126_p2 );
    sensitive << ( tmp_209_fu_132_p2 );

    SC_METHOD(thread_ap_condition_96);
    sensitive << ( tmp_fu_96_p2 );
    sensitive << ( tmp_s_fu_102_p2 );
    sensitive << ( tmp_205_fu_108_p2 );
    sensitive << ( tmp_206_fu_114_p2 );
    sensitive << ( tmp_207_fu_120_p2 );
    sensitive << ( tmp_208_fu_126_p2 );
    sensitive << ( tmp_209_fu_132_p2 );
    sensitive << ( tmp_210_fu_138_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_return);
    sensitive << ( merge_reg_84 );
    sensitive << ( ap_return_preg );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tmp_205_fu_108_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_r );
    sensitive << ( tmp_fu_96_p2 );
    sensitive << ( tmp_s_fu_102_p2 );

    SC_METHOD(thread_tmp_206_fu_114_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_r );
    sensitive << ( tmp_fu_96_p2 );
    sensitive << ( tmp_s_fu_102_p2 );
    sensitive << ( tmp_205_fu_108_p2 );

    SC_METHOD(thread_tmp_207_fu_120_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_r );
    sensitive << ( tmp_fu_96_p2 );
    sensitive << ( tmp_s_fu_102_p2 );
    sensitive << ( tmp_205_fu_108_p2 );
    sensitive << ( tmp_206_fu_114_p2 );

    SC_METHOD(thread_tmp_208_fu_126_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_r );
    sensitive << ( tmp_fu_96_p2 );
    sensitive << ( tmp_s_fu_102_p2 );
    sensitive << ( tmp_205_fu_108_p2 );
    sensitive << ( tmp_206_fu_114_p2 );
    sensitive << ( tmp_207_fu_120_p2 );

    SC_METHOD(thread_tmp_209_fu_132_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_r );
    sensitive << ( tmp_fu_96_p2 );
    sensitive << ( tmp_s_fu_102_p2 );
    sensitive << ( tmp_205_fu_108_p2 );
    sensitive << ( tmp_206_fu_114_p2 );
    sensitive << ( tmp_207_fu_120_p2 );
    sensitive << ( tmp_208_fu_126_p2 );

    SC_METHOD(thread_tmp_210_fu_138_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_r );
    sensitive << ( tmp_fu_96_p2 );
    sensitive << ( tmp_s_fu_102_p2 );
    sensitive << ( tmp_205_fu_108_p2 );
    sensitive << ( tmp_206_fu_114_p2 );
    sensitive << ( tmp_207_fu_120_p2 );
    sensitive << ( tmp_208_fu_126_p2 );
    sensitive << ( tmp_209_fu_132_p2 );

    SC_METHOD(thread_tmp_211_fu_144_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_r );
    sensitive << ( tmp_fu_96_p2 );
    sensitive << ( tmp_s_fu_102_p2 );
    sensitive << ( tmp_205_fu_108_p2 );
    sensitive << ( tmp_206_fu_114_p2 );
    sensitive << ( tmp_207_fu_120_p2 );
    sensitive << ( tmp_208_fu_126_p2 );
    sensitive << ( tmp_209_fu_132_p2 );
    sensitive << ( tmp_210_fu_138_p2 );

    SC_METHOD(thread_tmp_212_fu_150_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_r );
    sensitive << ( tmp_fu_96_p2 );
    sensitive << ( tmp_s_fu_102_p2 );
    sensitive << ( tmp_205_fu_108_p2 );
    sensitive << ( tmp_206_fu_114_p2 );
    sensitive << ( tmp_207_fu_120_p2 );
    sensitive << ( tmp_208_fu_126_p2 );
    sensitive << ( tmp_209_fu_132_p2 );
    sensitive << ( tmp_210_fu_138_p2 );
    sensitive << ( tmp_211_fu_144_p2 );

    SC_METHOD(thread_tmp_213_fu_156_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_r );
    sensitive << ( tmp_fu_96_p2 );
    sensitive << ( tmp_s_fu_102_p2 );
    sensitive << ( tmp_205_fu_108_p2 );
    sensitive << ( tmp_206_fu_114_p2 );
    sensitive << ( tmp_207_fu_120_p2 );
    sensitive << ( tmp_208_fu_126_p2 );
    sensitive << ( tmp_209_fu_132_p2 );
    sensitive << ( tmp_210_fu_138_p2 );
    sensitive << ( tmp_211_fu_144_p2 );
    sensitive << ( tmp_212_fu_150_p2 );

    SC_METHOD(thread_tmp_fu_96_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_r );

    SC_METHOD(thread_tmp_s_fu_102_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_r );
    sensitive << ( tmp_fu_96_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_96_p2 );
    sensitive << ( tmp_s_fu_102_p2 );
    sensitive << ( tmp_205_fu_108_p2 );
    sensitive << ( tmp_206_fu_114_p2 );
    sensitive << ( tmp_207_fu_120_p2 );
    sensitive << ( tmp_208_fu_126_p2 );
    sensitive << ( tmp_209_fu_132_p2 );
    sensitive << ( tmp_210_fu_138_p2 );
    sensitive << ( tmp_211_fu_144_p2 );
    sensitive << ( tmp_212_fu_150_p2 );
    sensitive << ( tmp_213_fu_156_p2 );

    ap_CS_fsm = "001";
    ap_return_preg = "0000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "convert_edge_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in_r, "(port)in_r");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, p_0_reg_34, "p_0_reg_34");
    sc_trace(mVcdFile, tmp_fu_96_p2, "tmp_fu_96_p2");
    sc_trace(mVcdFile, tmp_s_fu_102_p2, "tmp_s_fu_102_p2");
    sc_trace(mVcdFile, tmp_205_fu_108_p2, "tmp_205_fu_108_p2");
    sc_trace(mVcdFile, tmp_206_fu_114_p2, "tmp_206_fu_114_p2");
    sc_trace(mVcdFile, tmp_207_fu_120_p2, "tmp_207_fu_120_p2");
    sc_trace(mVcdFile, tmp_208_fu_126_p2, "tmp_208_fu_126_p2");
    sc_trace(mVcdFile, tmp_209_fu_132_p2, "tmp_209_fu_132_p2");
    sc_trace(mVcdFile, tmp_210_fu_138_p2, "tmp_210_fu_138_p2");
    sc_trace(mVcdFile, tmp_211_fu_144_p2, "tmp_211_fu_144_p2");
    sc_trace(mVcdFile, tmp_212_fu_150_p2, "tmp_212_fu_150_p2");
    sc_trace(mVcdFile, tmp_213_fu_156_p2, "tmp_213_fu_156_p2");
    sc_trace(mVcdFile, merge_reg_84, "merge_reg_84");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_return_preg, "ap_return_preg");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_condition_46, "ap_condition_46");
    sc_trace(mVcdFile, ap_condition_54, "ap_condition_54");
    sc_trace(mVcdFile, ap_condition_63, "ap_condition_63");
    sc_trace(mVcdFile, ap_condition_73, "ap_condition_73");
    sc_trace(mVcdFile, ap_condition_84, "ap_condition_84");
    sc_trace(mVcdFile, ap_condition_96, "ap_condition_96");
    sc_trace(mVcdFile, ap_condition_109, "ap_condition_109");
    sc_trace(mVcdFile, ap_condition_123, "ap_condition_123");
    sc_trace(mVcdFile, ap_condition_138, "ap_condition_138");
#endif

    }
}

convert_edge::~convert_edge() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void convert_edge::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_preg = ap_const_lv4_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            ap_return_preg = merge_reg_84.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(tmp_211_fu_144_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(tmp_210_fu_138_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(tmp_209_fu_132_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(tmp_208_fu_126_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(tmp_207_fu_120_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(tmp_206_fu_114_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(tmp_205_fu_108_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(tmp_213_fu_156_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(tmp_212_fu_150_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(tmp_s_fu_102_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(tmp_fu_96_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        merge_reg_84 = ap_const_lv4_B;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        merge_reg_84 = p_0_reg_34.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        if (esl_seteq<1,1,1>(ap_condition_138.read(), ap_const_boolean_1)) {
            p_0_reg_34 = ap_const_lv4_A;
        } else if (esl_seteq<1,1,1>(ap_condition_123.read(), ap_const_boolean_1)) {
            p_0_reg_34 = ap_const_lv4_9;
        } else if (esl_seteq<1,1,1>(ap_condition_109.read(), ap_const_boolean_1)) {
            p_0_reg_34 = ap_const_lv4_8;
        } else if (esl_seteq<1,1,1>(ap_condition_96.read(), ap_const_boolean_1)) {
            p_0_reg_34 = ap_const_lv4_7;
        } else if (esl_seteq<1,1,1>(ap_condition_84.read(), ap_const_boolean_1)) {
            p_0_reg_34 = ap_const_lv4_6;
        } else if (esl_seteq<1,1,1>(ap_condition_73.read(), ap_const_boolean_1)) {
            p_0_reg_34 = ap_const_lv4_5;
        } else if (esl_seteq<1,1,1>(ap_condition_63.read(), ap_const_boolean_1)) {
            p_0_reg_34 = ap_const_lv4_4;
        } else if (esl_seteq<1,1,1>(ap_condition_54.read(), ap_const_boolean_1)) {
            p_0_reg_34 = ap_const_lv4_3;
        } else if (esl_seteq<1,1,1>(ap_condition_46.read(), ap_const_boolean_1)) {
            p_0_reg_34 = ap_const_lv4_2;
        } else if ((esl_seteq<1,1,1>(tmp_s_fu_102_p2.read(), ap_const_lv1_1) && 
                    esl_seteq<1,1,1>(tmp_fu_96_p2.read(), ap_const_lv1_0))) {
            p_0_reg_34 = ap_const_lv4_1;
        } else if (esl_seteq<1,1,1>(tmp_fu_96_p2.read(), ap_const_lv1_1)) {
            p_0_reg_34 = ap_const_lv4_0;
        }
    }
}

void convert_edge::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void convert_edge::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void convert_edge::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void convert_edge::thread_ap_condition_109() {
    ap_condition_109 = (esl_seteq<1,1,1>(tmp_fu_96_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_s_fu_102_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_205_fu_108_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_206_fu_114_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_207_fu_120_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_208_fu_126_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_209_fu_132_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_211_fu_144_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(tmp_210_fu_138_p2.read(), ap_const_lv1_0));
}

void convert_edge::thread_ap_condition_123() {
    ap_condition_123 = (esl_seteq<1,1,1>(tmp_fu_96_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_s_fu_102_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_205_fu_108_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_206_fu_114_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_207_fu_120_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_208_fu_126_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_209_fu_132_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_210_fu_138_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_212_fu_150_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(tmp_211_fu_144_p2.read(), ap_const_lv1_0));
}

void convert_edge::thread_ap_condition_138() {
    ap_condition_138 = (esl_seteq<1,1,1>(tmp_fu_96_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_s_fu_102_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_205_fu_108_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_206_fu_114_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_207_fu_120_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_208_fu_126_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_209_fu_132_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_210_fu_138_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_211_fu_144_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_213_fu_156_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(tmp_212_fu_150_p2.read(), ap_const_lv1_0));
}

void convert_edge::thread_ap_condition_46() {
    ap_condition_46 = (esl_seteq<1,1,1>(tmp_fu_96_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_205_fu_108_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(tmp_s_fu_102_p2.read(), ap_const_lv1_0));
}

void convert_edge::thread_ap_condition_54() {
    ap_condition_54 = (esl_seteq<1,1,1>(tmp_fu_96_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_s_fu_102_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_206_fu_114_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(tmp_205_fu_108_p2.read(), ap_const_lv1_0));
}

void convert_edge::thread_ap_condition_63() {
    ap_condition_63 = (esl_seteq<1,1,1>(tmp_fu_96_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_s_fu_102_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_205_fu_108_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_207_fu_120_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(tmp_206_fu_114_p2.read(), ap_const_lv1_0));
}

void convert_edge::thread_ap_condition_73() {
    ap_condition_73 = (esl_seteq<1,1,1>(tmp_fu_96_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_s_fu_102_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_205_fu_108_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_206_fu_114_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_208_fu_126_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(tmp_207_fu_120_p2.read(), ap_const_lv1_0));
}

void convert_edge::thread_ap_condition_84() {
    ap_condition_84 = (esl_seteq<1,1,1>(tmp_fu_96_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_s_fu_102_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_205_fu_108_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_206_fu_114_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_207_fu_120_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_209_fu_132_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(tmp_208_fu_126_p2.read(), ap_const_lv1_0));
}

void convert_edge::thread_ap_condition_96() {
    ap_condition_96 = (esl_seteq<1,1,1>(tmp_fu_96_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_s_fu_102_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_205_fu_108_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_206_fu_114_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_207_fu_120_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_208_fu_126_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_210_fu_138_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(tmp_209_fu_132_p2.read(), ap_const_lv1_0));
}

void convert_edge::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void convert_edge::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void convert_edge::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void convert_edge::thread_ap_return() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ap_return = merge_reg_84.read();
    } else {
        ap_return = ap_return_preg.read();
    }
}

void convert_edge::thread_tmp_205_fu_108_p2() {
    tmp_205_fu_108_p2 = (!in_r.read().is_01() || !ap_const_lv4_2.is_01())? sc_lv<1>(): sc_lv<1>(in_r.read() == ap_const_lv4_2);
}

void convert_edge::thread_tmp_206_fu_114_p2() {
    tmp_206_fu_114_p2 = (!in_r.read().is_01() || !ap_const_lv4_3.is_01())? sc_lv<1>(): sc_lv<1>(in_r.read() == ap_const_lv4_3);
}

void convert_edge::thread_tmp_207_fu_120_p2() {
    tmp_207_fu_120_p2 = (!in_r.read().is_01() || !ap_const_lv4_4.is_01())? sc_lv<1>(): sc_lv<1>(in_r.read() == ap_const_lv4_4);
}

void convert_edge::thread_tmp_208_fu_126_p2() {
    tmp_208_fu_126_p2 = (!in_r.read().is_01() || !ap_const_lv4_5.is_01())? sc_lv<1>(): sc_lv<1>(in_r.read() == ap_const_lv4_5);
}

void convert_edge::thread_tmp_209_fu_132_p2() {
    tmp_209_fu_132_p2 = (!in_r.read().is_01() || !ap_const_lv4_6.is_01())? sc_lv<1>(): sc_lv<1>(in_r.read() == ap_const_lv4_6);
}

void convert_edge::thread_tmp_210_fu_138_p2() {
    tmp_210_fu_138_p2 = (!in_r.read().is_01() || !ap_const_lv4_7.is_01())? sc_lv<1>(): sc_lv<1>(in_r.read() == ap_const_lv4_7);
}

void convert_edge::thread_tmp_211_fu_144_p2() {
    tmp_211_fu_144_p2 = (!in_r.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(in_r.read() == ap_const_lv4_8);
}

void convert_edge::thread_tmp_212_fu_150_p2() {
    tmp_212_fu_150_p2 = (!in_r.read().is_01() || !ap_const_lv4_9.is_01())? sc_lv<1>(): sc_lv<1>(in_r.read() == ap_const_lv4_9);
}

void convert_edge::thread_tmp_213_fu_156_p2() {
    tmp_213_fu_156_p2 = (!in_r.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(in_r.read() == ap_const_lv4_A);
}

void convert_edge::thread_tmp_fu_96_p2() {
    tmp_fu_96_p2 = (!in_r.read().is_01() || !ap_const_lv4_0.is_01())? sc_lv<1>(): sc_lv<1>(in_r.read() == ap_const_lv4_0);
}

void convert_edge::thread_tmp_s_fu_102_p2() {
    tmp_s_fu_102_p2 = (!in_r.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<1>(): sc_lv<1>(in_r.read() == ap_const_lv4_1);
}

void convert_edge::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(tmp_211_fu_144_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_210_fu_138_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_209_fu_132_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_208_fu_126_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_207_fu_120_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_206_fu_114_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_205_fu_108_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_213_fu_156_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_212_fu_150_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_s_fu_102_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_fu_96_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && (esl_seteq<1,1,1>(tmp_211_fu_144_p2.read(), ap_const_lv1_1) || 
  esl_seteq<1,1,1>(tmp_210_fu_138_p2.read(), ap_const_lv1_1) || 
  esl_seteq<1,1,1>(tmp_209_fu_132_p2.read(), ap_const_lv1_1) || 
  esl_seteq<1,1,1>(tmp_208_fu_126_p2.read(), ap_const_lv1_1) || 
  esl_seteq<1,1,1>(tmp_207_fu_120_p2.read(), ap_const_lv1_1) || 
  esl_seteq<1,1,1>(tmp_206_fu_114_p2.read(), ap_const_lv1_1) || 
  esl_seteq<1,1,1>(tmp_205_fu_108_p2.read(), ap_const_lv1_1) || 
  esl_seteq<1,1,1>(tmp_s_fu_102_p2.read(), ap_const_lv1_1) || 
  esl_seteq<1,1,1>(tmp_213_fu_156_p2.read(), ap_const_lv1_1) || 
  esl_seteq<1,1,1>(tmp_212_fu_150_p2.read(), ap_const_lv1_1) || 
  esl_seteq<1,1,1>(tmp_fu_96_p2.read(), ap_const_lv1_1)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

