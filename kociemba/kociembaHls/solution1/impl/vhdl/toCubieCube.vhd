-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity toCubieCube is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    facecube_0_f_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    facecube_0_f_ce0 : OUT STD_LOGIC;
    facecube_0_f_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
    facecube_0_f_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    facecube_0_f_ce1 : OUT STD_LOGIC;
    facecube_0_f_q1 : IN STD_LOGIC_VECTOR (2 downto 0);
    ccRet_cp_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ccRet_cp_0_ce0 : OUT STD_LOGIC;
    ccRet_cp_0_we0 : OUT STD_LOGIC;
    ccRet_cp_0_d0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ccRet_ep_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    ccRet_ep_0_ce0 : OUT STD_LOGIC;
    ccRet_ep_0_we0 : OUT STD_LOGIC;
    ccRet_ep_0_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    ccRet_co_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ccRet_co_0_ce0 : OUT STD_LOGIC;
    ccRet_co_0_we0 : OUT STD_LOGIC;
    ccRet_co_0_d0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    ccRet_eo_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    ccRet_eo_0_ce0 : OUT STD_LOGIC;
    ccRet_eo_0_we0 : OUT STD_LOGIC;
    ccRet_eo_0_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of toCubieCube is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (21 downto 0) := "0000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (21 downto 0) := "0000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (21 downto 0) := "0000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (21 downto 0) := "0000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (21 downto 0) := "0000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (21 downto 0) := "0000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (21 downto 0) := "0001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (21 downto 0) := "0010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (21 downto 0) := "0100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (21 downto 0) := "1000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cornerFacelet_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal cornerFacelet_ce0 : STD_LOGIC;
    signal cornerFacelet_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal cornerFacelet_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal cornerFacelet_ce1 : STD_LOGIC;
    signal cornerFacelet_q1 : STD_LOGIC_VECTOR (5 downto 0);
    signal cornerColor_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal cornerColor_1_ce0 : STD_LOGIC;
    signal cornerColor_1_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal cornerColor_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal cornerColor_2_ce0 : STD_LOGIC;
    signal cornerColor_2_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal edgeFacelet_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal edgeFacelet_0_ce0 : STD_LOGIC;
    signal edgeFacelet_0_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal edgeFacelet_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal edgeFacelet_1_ce0 : STD_LOGIC;
    signal edgeFacelet_1_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal edgeColor_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal edgeColor_0_ce0 : STD_LOGIC;
    signal edgeColor_0_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal edgeColor_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal edgeColor_1_ce0 : STD_LOGIC;
    signal edgeColor_1_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal reg_437 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal reg_442 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_8_fu_453_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_9_fu_470_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_10_fu_487_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_10_reg_1011 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_20_fu_493_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_reg_1016 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond8_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_509_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_31_reg_1022 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_21_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_reg_1029 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ori_1_fu_521_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ori_1_reg_1033 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_49_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_58_fu_662_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_reg_1072 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal j_2_fu_670_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_2_reg_1076 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_43_fu_676_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_43_reg_1081 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_44_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_reg_1091 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal merge_i_fu_897_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal merge_i_reg_1103 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_47_fu_687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_925_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_reg_1111 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_22_fu_931_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_reg_1116 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_919_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_28_fu_947_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_reg_1144 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal j_fu_953_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_1148 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_36_fu_959_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_reg_1153 : STD_LOGIC_VECTOR (63 downto 0);
    signal edgeColor_0_load_reg_1164 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_37_fu_964_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_reg_1169 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_970_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_reg_1178 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal edgeColor_1_addr_1_gep_fu_303_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_42_fu_976_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_reg_1187 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_convert_edge_fu_430_ap_start : STD_LOGIC;
    signal grp_convert_edge_fu_430_ap_done : STD_LOGIC;
    signal grp_convert_edge_fu_430_ap_idle : STD_LOGIC;
    signal grp_convert_edge_fu_430_ap_ready : STD_LOGIC;
    signal grp_convert_edge_fu_430_ap_return : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_350 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond1_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_361 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond9_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_reg_372 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ori_reg_383 : STD_LOGIC_VECTOR (1 downto 0);
    signal in_assign_reg_395 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_reg_407 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_predicate_op213_call_state21 : BOOLEAN;
    signal ap_block_state21_on_subcall_done : BOOLEAN;
    signal j_1_reg_418 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal or_cond_fu_987_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_convert_edge_fu_430_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_fu_459_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_476_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_50_cast_fu_536_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_fu_541_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_53_cast_fu_607_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_56_cast_fu_647_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_fu_652_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_38_fu_657_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_fu_937_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_fu_942_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ccRet_ep_0_addr_1_gep_fu_333_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ccRet_eo_0_addr_gep_fu_341_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_30_fu_501_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_20_cast_fu_497_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_26_cast_fu_527_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_34_fu_531_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_48_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_cast_fu_564_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_29_fu_568_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_50_fu_580_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_35_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_cast_fu_586_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_51_fu_590_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_31_cast_fu_598_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_52_fu_602_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_33_fu_612_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_53_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_fu_624_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_55_fu_630_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_35_cast_fu_638_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_56_fu_642_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_i_fu_693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_29_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_741_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_747_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sel_tmp3_fu_757_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal sel_tmp6_demorgan_fu_769_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_297_i_fu_705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_775_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp13_demorgan_fu_787_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_298_i_fu_711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_793_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_799_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_781_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_813_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_cast_fu_805_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sel_tmp3_cast_fu_765_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sel_tmp22_demorgan_fu_827_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_299_i_fu_717_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_fu_833_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp33_demorgan_fu_845_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_300_i_fu_723_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp11_fu_851_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp12_fu_857_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp10_fu_839_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_871_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp13_fu_863_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sel_tmp9_fu_819_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_301_i_fu_729_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp20_fu_885_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp14_fu_891_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0_i_fu_877_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_57_fu_905_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_981_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (21 downto 0);

    component convert_edge IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_r : IN STD_LOGIC_VECTOR (3 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component toCubieCube_cornebkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component toCubieCube_cornecud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component toCubieCube_cornedEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component toCubieCube_edgeFeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component toCubieCube_edgeFfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component toCubieCube_edgeCg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component toCubieCube_edgeChbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;



begin
    cornerFacelet_U : component toCubieCube_cornebkb
    generic map (
        DataWidth => 6,
        AddressRange => 24,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cornerFacelet_address0,
        ce0 => cornerFacelet_ce0,
        q0 => cornerFacelet_q0,
        address1 => cornerFacelet_address1,
        ce1 => cornerFacelet_ce1,
        q1 => cornerFacelet_q1);

    cornerColor_1_U : component toCubieCube_cornecud
    generic map (
        DataWidth => 3,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cornerColor_1_address0,
        ce0 => cornerColor_1_ce0,
        q0 => cornerColor_1_q0);

    cornerColor_2_U : component toCubieCube_cornedEe
    generic map (
        DataWidth => 3,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cornerColor_2_address0,
        ce0 => cornerColor_2_ce0,
        q0 => cornerColor_2_q0);

    edgeFacelet_0_U : component toCubieCube_edgeFeOg
    generic map (
        DataWidth => 6,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => edgeFacelet_0_address0,
        ce0 => edgeFacelet_0_ce0,
        q0 => edgeFacelet_0_q0);

    edgeFacelet_1_U : component toCubieCube_edgeFfYi
    generic map (
        DataWidth => 6,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => edgeFacelet_1_address0,
        ce0 => edgeFacelet_1_ce0,
        q0 => edgeFacelet_1_q0);

    edgeColor_0_U : component toCubieCube_edgeCg8j
    generic map (
        DataWidth => 3,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => edgeColor_0_address0,
        ce0 => edgeColor_0_ce0,
        q0 => edgeColor_0_q0);

    edgeColor_1_U : component toCubieCube_edgeChbi
    generic map (
        DataWidth => 3,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => edgeColor_1_address0,
        ce0 => edgeColor_1_ce0,
        q0 => edgeColor_1_q0);

    grp_convert_edge_fu_430 : component convert_edge
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_convert_edge_fu_430_ap_start,
        ap_done => grp_convert_edge_fu_430_ap_done,
        ap_idle => grp_convert_edge_fu_430_ap_idle,
        ap_ready => grp_convert_edge_fu_430_ap_ready,
        in_r => j_1_reg_418,
        ap_return => grp_convert_edge_fu_430_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_convert_edge_fu_430_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_convert_edge_fu_430_ap_start_reg <= ap_const_logic_0;
            else
                if ((((or_cond_fu_987_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((tmp_40_fu_970_p2 = ap_const_lv1_1) and (tmp_37_reg_1169 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then 
                    grp_convert_edge_fu_430_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_convert_edge_fu_430_ap_ready = ap_const_logic_1)) then 
                    grp_convert_edge_fu_430_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_361_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_447_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_1_reg_361 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond9_fu_464_p2 = ap_const_lv1_0))) then 
                i_1_reg_361 <= i_9_fu_470_p2;
            end if; 
        end if;
    end process;

    i_2_reg_372_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond9_fu_464_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_2_reg_372 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                i_2_reg_372 <= i_10_reg_1011;
            end if; 
        end if;
    end process;

    i_3_reg_407_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond8_fu_481_p2 = ap_const_lv1_1))) then 
                i_3_reg_407 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_state21_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                i_3_reg_407 <= i_4_reg_1111;
            end if; 
        end if;
    end process;

    i_reg_350_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_447_p2 = ap_const_lv1_0))) then 
                i_reg_350 <= i_8_fu_453_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_350 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    in_assign_reg_395_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and ((tmp_47_fu_687_p2 = ap_const_lv1_0) or (tmp_44_reg_1091 = ap_const_lv1_0)))) then 
                in_assign_reg_395 <= j_2_reg_1076;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                in_assign_reg_395 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_1_reg_418_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (or_cond_fu_987_p2 = ap_const_lv1_0))) then 
                j_1_reg_418 <= j_reg_1148;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                j_1_reg_418 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    ori_reg_383_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_49_fu_558_p2 = ap_const_lv1_0) and (tmp_21_reg_1029 = ap_const_lv1_0))) then 
                ori_reg_383 <= ori_1_reg_1033;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond8_fu_481_p2 = ap_const_lv1_0))) then 
                ori_reg_383 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    reg_437_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                reg_437 <= facecube_0_f_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                reg_437 <= facecube_0_f_q0;
            end if; 
        end if;
    end process;

    reg_442_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                reg_442 <= facecube_0_f_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                reg_442 <= facecube_0_f_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                edgeColor_0_load_reg_1164 <= edgeColor_0_q0;
                tmp_37_reg_1169 <= tmp_37_fu_964_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_10_reg_1011 <= i_10_fu_487_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                i_4_reg_1111 <= i_4_fu_925_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                j_2_reg_1076 <= j_2_fu_670_p2;
                tmp_58_reg_1072 <= in_assign_reg_395(3 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                j_reg_1148 <= j_fu_953_p2;
                tmp_28_reg_1144 <= tmp_28_fu_947_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_47_fu_687_p2 = ap_const_lv1_1) and (tmp_44_reg_1091 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                merge_i_reg_1103 <= merge_i_fu_897_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                ori_1_reg_1033 <= ori_1_fu_521_p2;
                tmp_21_reg_1029 <= tmp_21_fu_515_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond8_fu_481_p2 = ap_const_lv1_0))) then
                    tmp_20_reg_1016(3 downto 0) <= tmp_20_fu_493_p1(3 downto 0);
                tmp_31_reg_1022 <= tmp_31_fu_509_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond_fu_919_p2 = ap_const_lv1_0))) then
                    tmp_22_reg_1116(3 downto 0) <= tmp_22_fu_931_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_28_fu_947_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    tmp_36_reg_1153(3 downto 0) <= tmp_36_fu_959_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_37_reg_1169 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                tmp_40_reg_1178 <= tmp_40_fu_970_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and ((tmp_40_fu_970_p2 = ap_const_lv1_0) or (tmp_37_reg_1169 = ap_const_lv1_0)))) then
                tmp_42_reg_1187 <= tmp_42_fu_976_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_58_fu_662_p3 = ap_const_lv1_0))) then
                    tmp_43_reg_1081(3 downto 0) <= tmp_43_fu_676_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_44_reg_1091 <= tmp_44_fu_681_p2;
            end if;
        end if;
    end process;
    tmp_20_reg_1016(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    tmp_43_reg_1081(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    tmp_22_reg_1116(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    tmp_36_reg_1153(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond8_fu_481_p2, tmp_21_fu_515_p2, tmp_21_reg_1029, ap_CS_fsm_state5, ap_CS_fsm_state7, tmp_49_fu_558_p2, tmp_58_fu_662_p3, ap_CS_fsm_state10, tmp_44_reg_1091, ap_CS_fsm_state12, tmp_47_fu_687_p2, ap_CS_fsm_state14, exitcond_fu_919_p2, tmp_28_fu_947_p2, ap_CS_fsm_state17, tmp_37_reg_1169, tmp_40_fu_970_p2, ap_CS_fsm_state19, grp_convert_edge_fu_430_ap_done, exitcond1_fu_447_p2, exitcond9_fu_464_p2, ap_CS_fsm_state21, ap_block_state21_on_subcall_done, ap_CS_fsm_state20, or_cond_fu_987_p2, ap_CS_fsm_state22)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_447_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond9_fu_464_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond8_fu_481_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_21_fu_515_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and ((tmp_49_fu_558_p2 = ap_const_lv1_1) or (tmp_21_reg_1029 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((tmp_58_fu_662_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and ((tmp_47_fu_687_p2 = ap_const_lv1_0) or (tmp_44_reg_1091 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state14 => 
                if (((exitcond_fu_919_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_28_fu_947_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((tmp_40_fu_970_p2 = ap_const_lv1_1) and (tmp_37_reg_1169 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                if (((or_cond_fu_987_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state21 => 
                if (((ap_const_boolean_0 = ap_block_state21_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (((grp_convert_edge_fu_430_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state21_on_subcall_done_assign_proc : process(grp_convert_edge_fu_430_ap_done, ap_predicate_op213_call_state21)
    begin
                ap_block_state21_on_subcall_done <= ((ap_predicate_op213_call_state21 = ap_const_boolean_1) and (grp_convert_edge_fu_430_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state14, exitcond_fu_919_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((exitcond_fu_919_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op213_call_state21_assign_proc : process(tmp_28_reg_1144, tmp_37_reg_1169, tmp_40_reg_1178)
    begin
                ap_predicate_op213_call_state21 <= (((tmp_28_reg_1144 = ap_const_lv1_1) and (tmp_40_reg_1178 = ap_const_lv1_0)) or ((tmp_28_reg_1144 = ap_const_lv1_1) and (tmp_37_reg_1169 = ap_const_lv1_0)));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14, exitcond_fu_919_p2)
    begin
        if (((exitcond_fu_919_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ccRet_co_0_address0 <= tmp_20_reg_1016(3 - 1 downto 0);

    ccRet_co_0_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ccRet_co_0_ce0 <= ap_const_logic_1;
        else 
            ccRet_co_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ccRet_co_0_d0 <= 
        ori_reg_383 when (tmp_57_fu_905_p2(0) = '1') else 
        ori_1_reg_1033;

    ccRet_co_0_we0_assign_proc : process(tmp_44_reg_1091, ap_CS_fsm_state12, tmp_47_fu_687_p2)
    begin
        if (((tmp_47_fu_687_p2 = ap_const_lv1_1) and (tmp_44_reg_1091 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            ccRet_co_0_we0 <= ap_const_logic_1;
        else 
            ccRet_co_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ccRet_cp_0_address0_assign_proc : process(ap_CS_fsm_state2, tmp_20_reg_1016, ap_CS_fsm_state13, tmp_fu_459_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ccRet_cp_0_address0 <= tmp_20_reg_1016(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ccRet_cp_0_address0 <= tmp_fu_459_p1(3 - 1 downto 0);
        else 
            ccRet_cp_0_address0 <= "XXX";
        end if; 
    end process;


    ccRet_cp_0_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ccRet_cp_0_ce0 <= ap_const_logic_1;
        else 
            ccRet_cp_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ccRet_cp_0_d0_assign_proc : process(ap_CS_fsm_state2, merge_i_reg_1103, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ccRet_cp_0_d0 <= merge_i_reg_1103;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ccRet_cp_0_d0 <= ap_const_lv3_0;
        else 
            ccRet_cp_0_d0 <= "XXX";
        end if; 
    end process;


    ccRet_cp_0_we0_assign_proc : process(ap_CS_fsm_state2, tmp_58_reg_1072, exitcond1_fu_447_p2, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state13) and (tmp_58_reg_1072 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_447_p2 = ap_const_lv1_0)))) then 
            ccRet_cp_0_we0 <= ap_const_logic_1;
        else 
            ccRet_cp_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ccRet_eo_0_addr_gep_fu_341_p3 <= tmp_22_reg_1116(4 - 1 downto 0);

    ccRet_eo_0_address0_assign_proc : process(tmp_22_reg_1116, ap_CS_fsm_state21, ap_CS_fsm_state22, ccRet_eo_0_addr_gep_fu_341_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ccRet_eo_0_address0 <= ccRet_eo_0_addr_gep_fu_341_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            ccRet_eo_0_address0 <= tmp_22_reg_1116(4 - 1 downto 0);
        else 
            ccRet_eo_0_address0 <= "XXXX";
        end if; 
    end process;


    ccRet_eo_0_ce0_assign_proc : process(grp_convert_edge_fu_430_ap_done, ap_CS_fsm_state21, ap_block_state21_on_subcall_done, ap_CS_fsm_state22)
    begin
        if ((((grp_convert_edge_fu_430_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((ap_const_boolean_0 = ap_block_state21_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            ccRet_eo_0_ce0 <= ap_const_logic_1;
        else 
            ccRet_eo_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ccRet_eo_0_d0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ccRet_eo_0_d0 <= ap_const_lv1_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            ccRet_eo_0_d0 <= ap_const_lv1_1;
        else 
            ccRet_eo_0_d0 <= "X";
        end if; 
    end process;


    ccRet_eo_0_we0_assign_proc : process(grp_convert_edge_fu_430_ap_done, ap_CS_fsm_state21, ap_predicate_op213_call_state21, ap_block_state21_on_subcall_done, ap_CS_fsm_state22)
    begin
        if ((((grp_convert_edge_fu_430_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((ap_const_boolean_0 = ap_block_state21_on_subcall_done) and (ap_predicate_op213_call_state21 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            ccRet_eo_0_we0 <= ap_const_logic_1;
        else 
            ccRet_eo_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ccRet_ep_0_addr_1_gep_fu_333_p3 <= tmp_22_reg_1116(4 - 1 downto 0);

    ccRet_ep_0_address0_assign_proc : process(ap_CS_fsm_state3, tmp_22_reg_1116, ap_CS_fsm_state21, ap_CS_fsm_state22, tmp_s_fu_476_p1, ccRet_ep_0_addr_1_gep_fu_333_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ccRet_ep_0_address0 <= ccRet_ep_0_addr_1_gep_fu_333_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            ccRet_ep_0_address0 <= tmp_22_reg_1116(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ccRet_ep_0_address0 <= tmp_s_fu_476_p1(4 - 1 downto 0);
        else 
            ccRet_ep_0_address0 <= "XXXX";
        end if; 
    end process;


    ccRet_ep_0_ce0_assign_proc : process(ap_CS_fsm_state3, grp_convert_edge_fu_430_ap_done, ap_CS_fsm_state21, ap_block_state21_on_subcall_done, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((grp_convert_edge_fu_430_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((ap_const_boolean_0 = ap_block_state21_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            ccRet_ep_0_ce0 <= ap_const_logic_1;
        else 
            ccRet_ep_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ccRet_ep_0_d0_assign_proc : process(ap_CS_fsm_state3, grp_convert_edge_fu_430_ap_return, ap_CS_fsm_state21, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            ccRet_ep_0_d0 <= grp_convert_edge_fu_430_ap_return;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ccRet_ep_0_d0 <= ap_const_lv4_0;
        else 
            ccRet_ep_0_d0 <= "XXXX";
        end if; 
    end process;


    ccRet_ep_0_we0_assign_proc : process(ap_CS_fsm_state3, grp_convert_edge_fu_430_ap_done, exitcond9_fu_464_p2, ap_CS_fsm_state21, ap_predicate_op213_call_state21, ap_block_state21_on_subcall_done, ap_CS_fsm_state22)
    begin
        if ((((grp_convert_edge_fu_430_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((ap_const_boolean_0 = ap_block_state21_on_subcall_done) and (ap_predicate_op213_call_state21 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond9_fu_464_p2 = ap_const_lv1_0)))) then 
            ccRet_ep_0_we0 <= ap_const_logic_1;
        else 
            ccRet_ep_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cornerColor_1_address0 <= tmp_43_fu_676_p1(3 - 1 downto 0);

    cornerColor_1_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            cornerColor_1_ce0 <= ap_const_logic_1;
        else 
            cornerColor_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cornerColor_2_address0 <= tmp_43_reg_1081(3 - 1 downto 0);

    cornerColor_2_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            cornerColor_2_ce0 <= ap_const_logic_1;
        else 
            cornerColor_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cornerFacelet_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, tmp_50_cast_fu_536_p1, tmp_53_cast_fu_607_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            cornerFacelet_address0 <= tmp_53_cast_fu_607_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            cornerFacelet_address0 <= tmp_50_cast_fu_536_p1(5 - 1 downto 0);
        else 
            cornerFacelet_address0 <= "XXXXX";
        end if; 
    end process;

    cornerFacelet_address1 <= tmp_56_cast_fu_647_p1(5 - 1 downto 0);

    cornerFacelet_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            cornerFacelet_ce0 <= ap_const_logic_1;
        else 
            cornerFacelet_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cornerFacelet_ce1_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            cornerFacelet_ce1 <= ap_const_logic_1;
        else 
            cornerFacelet_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    edgeColor_0_address0 <= tmp_36_fu_959_p1(4 - 1 downto 0);

    edgeColor_0_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            edgeColor_0_ce0 <= ap_const_logic_1;
        else 
            edgeColor_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    edgeColor_1_addr_1_gep_fu_303_p3 <= tmp_36_reg_1153(4 - 1 downto 0);

    edgeColor_1_address0_assign_proc : process(tmp_36_reg_1153, ap_CS_fsm_state18, ap_CS_fsm_state19, edgeColor_1_addr_1_gep_fu_303_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            edgeColor_1_address0 <= edgeColor_1_addr_1_gep_fu_303_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            edgeColor_1_address0 <= tmp_36_reg_1153(4 - 1 downto 0);
        else 
            edgeColor_1_address0 <= "XXXX";
        end if; 
    end process;


    edgeColor_1_ce0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            edgeColor_1_ce0 <= ap_const_logic_1;
        else 
            edgeColor_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    edgeFacelet_0_address0 <= tmp_22_fu_931_p1(4 - 1 downto 0);

    edgeFacelet_0_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            edgeFacelet_0_ce0 <= ap_const_logic_1;
        else 
            edgeFacelet_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    edgeFacelet_1_address0 <= tmp_22_fu_931_p1(4 - 1 downto 0);

    edgeFacelet_1_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            edgeFacelet_1_ce0 <= ap_const_logic_1;
        else 
            edgeFacelet_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_447_p2 <= "1" when (i_reg_350 = ap_const_lv4_8) else "0";
    exitcond8_fu_481_p2 <= "1" when (i_2_reg_372 = ap_const_lv4_8) else "0";
    exitcond9_fu_464_p2 <= "1" when (i_1_reg_361 = ap_const_lv4_C) else "0";
    exitcond_fu_919_p2 <= "1" when (i_3_reg_407 = ap_const_lv4_C) else "0";

    facecube_0_f_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state15, tmp_27_fu_541_p1, tmp_32_fu_652_p1, tmp_24_fu_942_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            facecube_0_f_address0 <= tmp_24_fu_942_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            facecube_0_f_address0 <= tmp_32_fu_652_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            facecube_0_f_address0 <= tmp_27_fu_541_p1(6 - 1 downto 0);
        else 
            facecube_0_f_address0 <= "XXXXXX";
        end if; 
    end process;


    facecube_0_f_address1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state15, tmp_38_fu_657_p1, tmp_23_fu_937_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            facecube_0_f_address1 <= tmp_23_fu_937_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            facecube_0_f_address1 <= tmp_38_fu_657_p1(6 - 1 downto 0);
        else 
            facecube_0_f_address1 <= "XXXXXX";
        end if; 
    end process;


    facecube_0_f_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            facecube_0_f_ce0 <= ap_const_logic_1;
        else 
            facecube_0_f_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    facecube_0_f_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            facecube_0_f_ce1 <= ap_const_logic_1;
        else 
            facecube_0_f_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_convert_edge_fu_430_ap_start <= grp_convert_edge_fu_430_ap_start_reg;
    i_10_fu_487_p2 <= std_logic_vector(unsigned(i_2_reg_372) + unsigned(ap_const_lv4_1));
    i_4_fu_925_p2 <= std_logic_vector(unsigned(i_3_reg_407) + unsigned(ap_const_lv4_1));
    i_8_fu_453_p2 <= std_logic_vector(unsigned(i_reg_350) + unsigned(ap_const_lv4_1));
    i_9_fu_470_p2 <= std_logic_vector(unsigned(i_1_reg_361) + unsigned(ap_const_lv4_1));
    j_2_fu_670_p2 <= std_logic_vector(unsigned(in_assign_reg_395) + unsigned(ap_const_lv4_1));
    j_fu_953_p2 <= std_logic_vector(unsigned(j_1_reg_418) + unsigned(ap_const_lv4_1));
    merge_i_fu_897_p3 <= 
        p_0_i_fu_877_p3 when (sel_tmp14_fu_891_p2(0) = '1') else 
        ap_const_lv3_7;
    or_cond_fu_987_p2 <= (tmp_42_reg_1187 and tmp_41_fu_981_p2);
    ori_1_fu_521_p2 <= std_logic_vector(unsigned(ori_reg_383) + unsigned(ap_const_lv2_1));
    p_0_i_fu_877_p3 <= 
        sel_tmp13_fu_863_p3 when (tmp_19_fu_871_p2(0) = '1') else 
        sel_tmp9_fu_819_p3;
    sel_tmp10_fu_839_p2 <= (tmp_299_i_fu_717_p2 and sel_tmp8_fu_833_p2);
    sel_tmp11_fu_851_p2 <= (sel_tmp33_demorgan_fu_845_p2 xor ap_const_lv1_1);
    sel_tmp12_fu_857_p2 <= (tmp_300_i_fu_723_p2 and sel_tmp11_fu_851_p2);
    sel_tmp13_demorgan_fu_787_p2 <= (tmp_297_i_fu_705_p2 or sel_tmp6_demorgan_fu_769_p2);
    sel_tmp13_fu_863_p3 <= 
        ap_const_lv3_5 when (sel_tmp12_fu_857_p2(0) = '1') else 
        ap_const_lv3_4;
    sel_tmp14_fu_891_p2 <= (tmp20_fu_885_p2 or sel_tmp33_demorgan_fu_845_p2);
    sel_tmp1_fu_735_p2 <= (tmp_i_fu_693_p2 xor ap_const_lv1_1);
    sel_tmp22_demorgan_fu_827_p2 <= (tmp_298_i_fu_711_p2 or sel_tmp13_demorgan_fu_787_p2);
    sel_tmp2_fu_741_p2 <= (tmp_i_29_fu_699_p2 and sel_tmp1_fu_735_p2);
    sel_tmp33_demorgan_fu_845_p2 <= (tmp_299_i_fu_717_p2 or sel_tmp22_demorgan_fu_827_p2);
        sel_tmp3_cast_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sel_tmp3_fu_757_p3),3));

    sel_tmp3_fu_757_p3 <= 
        sel_tmp_fu_747_p1 when (tmp_17_fu_751_p2(0) = '1') else 
        ap_const_lv2_2;
    sel_tmp4_fu_793_p2 <= (sel_tmp13_demorgan_fu_787_p2 xor ap_const_lv1_1);
    sel_tmp5_fu_799_p2 <= (tmp_298_i_fu_711_p2 and sel_tmp4_fu_793_p2);
    sel_tmp6_demorgan_fu_769_p2 <= (tmp_i_fu_693_p2 or tmp_i_29_fu_699_p2);
    sel_tmp6_fu_775_p2 <= (sel_tmp6_demorgan_fu_769_p2 xor ap_const_lv1_1);
    sel_tmp7_fu_781_p2 <= (tmp_297_i_fu_705_p2 and sel_tmp6_fu_775_p2);
    sel_tmp8_cast_fu_805_p3 <= 
        ap_const_lv3_3 when (sel_tmp5_fu_799_p2(0) = '1') else 
        ap_const_lv3_2;
    sel_tmp8_fu_833_p2 <= (sel_tmp22_demorgan_fu_827_p2 xor ap_const_lv1_1);
    sel_tmp9_fu_819_p3 <= 
        sel_tmp8_cast_fu_805_p3 when (tmp_18_fu_813_p2(0) = '1') else 
        sel_tmp3_cast_fu_765_p1;
    sel_tmp_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sel_tmp2_fu_741_p2),2));
    tmp20_fu_885_p2 <= (tmp_301_i_fu_729_p2 or tmp_300_i_fu_723_p2);
    tmp_17_fu_751_p2 <= (tmp_i_fu_693_p2 or sel_tmp2_fu_741_p2);
    tmp_18_fu_813_p2 <= (sel_tmp7_fu_781_p2 or sel_tmp5_fu_799_p2);
    tmp_19_fu_871_p2 <= (sel_tmp12_fu_857_p2 or sel_tmp10_fu_839_p2);
    tmp_20_cast_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_372),6));
    tmp_20_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_372),64));
    tmp_21_fu_515_p2 <= "1" when (ori_reg_383 = ap_const_lv2_3) else "0";
    tmp_22_fu_931_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_407),64));
    tmp_23_fu_937_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(edgeFacelet_0_q0),64));
    tmp_24_fu_942_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(edgeFacelet_1_q0),64));
    tmp_26_cast_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ori_reg_383),6));
    tmp_27_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cornerFacelet_q0),64));
    tmp_28_fu_947_p2 <= "1" when (unsigned(j_1_reg_418) < unsigned(ap_const_lv4_C)) else "0";
    tmp_297_i_fu_705_p2 <= "1" when (in_assign_reg_395 = ap_const_lv4_2) else "0";
    tmp_298_i_fu_711_p2 <= "1" when (in_assign_reg_395 = ap_const_lv4_3) else "0";
    tmp_299_i_fu_717_p2 <= "1" when (in_assign_reg_395 = ap_const_lv4_4) else "0";
    tmp_29_fu_568_p2 <= std_logic_vector(unsigned(tmp_32_cast_fu_564_p1) + unsigned(ap_const_lv3_1));
    tmp_300_i_fu_723_p2 <= "1" when (in_assign_reg_395 = ap_const_lv4_5) else "0";
    tmp_301_i_fu_729_p2 <= "1" when (in_assign_reg_395 = ap_const_lv4_6) else "0";
    tmp_30_fu_501_p3 <= (i_2_reg_372 & ap_const_lv2_0);
    tmp_31_cast_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_fu_590_p3),6));
    tmp_31_fu_509_p2 <= std_logic_vector(unsigned(tmp_30_fu_501_p3) - unsigned(tmp_20_cast_fu_497_p1));
    tmp_32_cast_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ori_reg_383),3));
    tmp_32_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cornerFacelet_q0),64));
    tmp_33_fu_612_p2 <= std_logic_vector(unsigned(tmp_32_cast_fu_564_p1) + unsigned(ap_const_lv3_2));
    tmp_34_fu_531_p2 <= std_logic_vector(unsigned(tmp_31_reg_1022) + unsigned(tmp_26_cast_fu_527_p1));
    tmp_35_cast_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_fu_630_p3),6));
    tmp_35_fu_574_p2 <= "1" when (unsigned(tmp_29_fu_568_p2) < unsigned(ap_const_lv3_3)) else "0";
    tmp_36_fu_959_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_418),64));
    tmp_37_fu_964_p2 <= "1" when (reg_437 = edgeColor_0_q0) else "0";
    tmp_38_fu_657_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cornerFacelet_q1),64));
    tmp_39_fu_546_p2 <= "1" when (facecube_0_f_q0 = ap_const_lv3_3) else "0";
    tmp_40_fu_970_p2 <= "1" when (reg_442 = edgeColor_1_q0) else "0";
    tmp_41_fu_981_p2 <= "1" when (reg_437 = edgeColor_1_q0) else "0";
    tmp_42_fu_976_p2 <= "1" when (reg_442 = edgeColor_0_load_reg_1164) else "0";
    tmp_43_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_assign_reg_395),64));
    tmp_44_fu_681_p2 <= "1" when (reg_437 = cornerColor_1_q0) else "0";
    tmp_47_fu_687_p2 <= "1" when (reg_442 = cornerColor_2_q0) else "0";
    tmp_48_fu_552_p2 <= "1" when (facecube_0_f_q0 = ap_const_lv3_0) else "0";
    tmp_49_fu_558_p2 <= (tmp_48_fu_552_p2 or tmp_39_fu_546_p2);
        tmp_50_cast_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_34_fu_531_p2),64));

    tmp_50_fu_580_p2 <= (ori_reg_383 xor ap_const_lv2_2);
    tmp_51_fu_590_p3 <= 
        tmp_29_fu_568_p2 when (tmp_35_fu_574_p2(0) = '1') else 
        tmp_52_cast_fu_586_p1;
        tmp_52_cast_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_50_fu_580_p2),3));

    tmp_52_fu_602_p2 <= std_logic_vector(unsigned(tmp_31_cast_fu_598_p1) + unsigned(tmp_31_reg_1022));
        tmp_53_cast_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_52_fu_602_p2),64));

    tmp_53_fu_618_p2 <= "1" when (unsigned(tmp_33_fu_612_p2) < unsigned(ap_const_lv3_3)) else "0";
    tmp_54_fu_624_p2 <= std_logic_vector(unsigned(tmp_32_cast_fu_564_p1) + unsigned(ap_const_lv3_7));
    tmp_55_fu_630_p3 <= 
        tmp_33_fu_612_p2 when (tmp_53_fu_618_p2(0) = '1') else 
        tmp_54_fu_624_p2;
        tmp_56_cast_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_56_fu_642_p2),64));

    tmp_56_fu_642_p2 <= std_logic_vector(unsigned(tmp_35_cast_fu_638_p1) + unsigned(tmp_31_reg_1022));
    tmp_57_fu_905_p2 <= "0" when (ori_reg_383 = ap_const_lv2_3) else "1";
    tmp_58_fu_662_p3 <= in_assign_reg_395(3 downto 3);
    tmp_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_350),64));
    tmp_i_29_fu_699_p2 <= "1" when (in_assign_reg_395 = ap_const_lv4_1) else "0";
    tmp_i_fu_693_p2 <= "1" when (in_assign_reg_395 = ap_const_lv4_0) else "0";
    tmp_s_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_361),64));
end behav;
