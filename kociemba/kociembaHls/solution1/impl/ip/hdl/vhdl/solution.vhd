-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity solution is
generic (
    C_M_AXI_CTRL_BUS1_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_CTRL_BUS1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_CTRL_BUS1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTRL_BUS1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_CTRL_BUS1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTRL_BUS1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTRL_BUS1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTRL_BUS1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTRL_BUS2_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_CTRL_BUS2_ID_WIDTH : INTEGER := 1;
    C_M_AXI_CTRL_BUS2_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTRL_BUS2_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_CTRL_BUS2_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTRL_BUS2_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTRL_BUS2_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTRL_BUS2_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTRL_BUS3_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_CTRL_BUS3_ID_WIDTH : INTEGER := 1;
    C_M_AXI_CTRL_BUS3_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTRL_BUS3_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_CTRL_BUS3_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTRL_BUS3_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTRL_BUS3_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTRL_BUS3_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_CTRL_BUS1_USER_VALUE : INTEGER := 0;
    C_M_AXI_CTRL_BUS1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_CTRL_BUS1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_CTRL_BUS2_USER_VALUE : INTEGER := 0;
    C_M_AXI_CTRL_BUS2_PROT_VALUE : INTEGER := 0;
    C_M_AXI_CTRL_BUS2_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_CTRL_BUS3_USER_VALUE : INTEGER := 0;
    C_M_AXI_CTRL_BUS3_PROT_VALUE : INTEGER := 0;
    C_M_AXI_CTRL_BUS3_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_CTRL_BUS1_AWVALID : OUT STD_LOGIC;
    m_axi_CTRL_BUS1_AWREADY : IN STD_LOGIC;
    m_axi_CTRL_BUS1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS1_ADDR_WIDTH-1 downto 0);
    m_axi_CTRL_BUS1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS1_ID_WIDTH-1 downto 0);
    m_axi_CTRL_BUS1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_CTRL_BUS1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CTRL_BUS1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CTRL_BUS1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CTRL_BUS1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CTRL_BUS1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CTRL_BUS1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CTRL_BUS1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CTRL_BUS1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS1_AWUSER_WIDTH-1 downto 0);
    m_axi_CTRL_BUS1_WVALID : OUT STD_LOGIC;
    m_axi_CTRL_BUS1_WREADY : IN STD_LOGIC;
    m_axi_CTRL_BUS1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS1_DATA_WIDTH-1 downto 0);
    m_axi_CTRL_BUS1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS1_DATA_WIDTH/8-1 downto 0);
    m_axi_CTRL_BUS1_WLAST : OUT STD_LOGIC;
    m_axi_CTRL_BUS1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS1_ID_WIDTH-1 downto 0);
    m_axi_CTRL_BUS1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS1_WUSER_WIDTH-1 downto 0);
    m_axi_CTRL_BUS1_ARVALID : OUT STD_LOGIC;
    m_axi_CTRL_BUS1_ARREADY : IN STD_LOGIC;
    m_axi_CTRL_BUS1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS1_ADDR_WIDTH-1 downto 0);
    m_axi_CTRL_BUS1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS1_ID_WIDTH-1 downto 0);
    m_axi_CTRL_BUS1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_CTRL_BUS1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CTRL_BUS1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CTRL_BUS1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CTRL_BUS1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CTRL_BUS1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CTRL_BUS1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CTRL_BUS1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CTRL_BUS1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS1_ARUSER_WIDTH-1 downto 0);
    m_axi_CTRL_BUS1_RVALID : IN STD_LOGIC;
    m_axi_CTRL_BUS1_RREADY : OUT STD_LOGIC;
    m_axi_CTRL_BUS1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS1_DATA_WIDTH-1 downto 0);
    m_axi_CTRL_BUS1_RLAST : IN STD_LOGIC;
    m_axi_CTRL_BUS1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS1_ID_WIDTH-1 downto 0);
    m_axi_CTRL_BUS1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS1_RUSER_WIDTH-1 downto 0);
    m_axi_CTRL_BUS1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CTRL_BUS1_BVALID : IN STD_LOGIC;
    m_axi_CTRL_BUS1_BREADY : OUT STD_LOGIC;
    m_axi_CTRL_BUS1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CTRL_BUS1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS1_ID_WIDTH-1 downto 0);
    m_axi_CTRL_BUS1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS1_BUSER_WIDTH-1 downto 0);
    m_axi_CTRL_BUS2_AWVALID : OUT STD_LOGIC;
    m_axi_CTRL_BUS2_AWREADY : IN STD_LOGIC;
    m_axi_CTRL_BUS2_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS2_ADDR_WIDTH-1 downto 0);
    m_axi_CTRL_BUS2_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS2_ID_WIDTH-1 downto 0);
    m_axi_CTRL_BUS2_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_CTRL_BUS2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CTRL_BUS2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CTRL_BUS2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CTRL_BUS2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CTRL_BUS2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CTRL_BUS2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CTRL_BUS2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CTRL_BUS2_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS2_AWUSER_WIDTH-1 downto 0);
    m_axi_CTRL_BUS2_WVALID : OUT STD_LOGIC;
    m_axi_CTRL_BUS2_WREADY : IN STD_LOGIC;
    m_axi_CTRL_BUS2_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS2_DATA_WIDTH-1 downto 0);
    m_axi_CTRL_BUS2_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS2_DATA_WIDTH/8-1 downto 0);
    m_axi_CTRL_BUS2_WLAST : OUT STD_LOGIC;
    m_axi_CTRL_BUS2_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS2_ID_WIDTH-1 downto 0);
    m_axi_CTRL_BUS2_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS2_WUSER_WIDTH-1 downto 0);
    m_axi_CTRL_BUS2_ARVALID : OUT STD_LOGIC;
    m_axi_CTRL_BUS2_ARREADY : IN STD_LOGIC;
    m_axi_CTRL_BUS2_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS2_ADDR_WIDTH-1 downto 0);
    m_axi_CTRL_BUS2_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS2_ID_WIDTH-1 downto 0);
    m_axi_CTRL_BUS2_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_CTRL_BUS2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CTRL_BUS2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CTRL_BUS2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CTRL_BUS2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CTRL_BUS2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CTRL_BUS2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CTRL_BUS2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CTRL_BUS2_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS2_ARUSER_WIDTH-1 downto 0);
    m_axi_CTRL_BUS2_RVALID : IN STD_LOGIC;
    m_axi_CTRL_BUS2_RREADY : OUT STD_LOGIC;
    m_axi_CTRL_BUS2_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS2_DATA_WIDTH-1 downto 0);
    m_axi_CTRL_BUS2_RLAST : IN STD_LOGIC;
    m_axi_CTRL_BUS2_RID : IN STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS2_ID_WIDTH-1 downto 0);
    m_axi_CTRL_BUS2_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS2_RUSER_WIDTH-1 downto 0);
    m_axi_CTRL_BUS2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CTRL_BUS2_BVALID : IN STD_LOGIC;
    m_axi_CTRL_BUS2_BREADY : OUT STD_LOGIC;
    m_axi_CTRL_BUS2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CTRL_BUS2_BID : IN STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS2_ID_WIDTH-1 downto 0);
    m_axi_CTRL_BUS2_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS2_BUSER_WIDTH-1 downto 0);
    m_axi_CTRL_BUS3_AWVALID : OUT STD_LOGIC;
    m_axi_CTRL_BUS3_AWREADY : IN STD_LOGIC;
    m_axi_CTRL_BUS3_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS3_ADDR_WIDTH-1 downto 0);
    m_axi_CTRL_BUS3_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS3_ID_WIDTH-1 downto 0);
    m_axi_CTRL_BUS3_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_CTRL_BUS3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CTRL_BUS3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CTRL_BUS3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CTRL_BUS3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CTRL_BUS3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CTRL_BUS3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CTRL_BUS3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CTRL_BUS3_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS3_AWUSER_WIDTH-1 downto 0);
    m_axi_CTRL_BUS3_WVALID : OUT STD_LOGIC;
    m_axi_CTRL_BUS3_WREADY : IN STD_LOGIC;
    m_axi_CTRL_BUS3_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS3_DATA_WIDTH-1 downto 0);
    m_axi_CTRL_BUS3_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS3_DATA_WIDTH/8-1 downto 0);
    m_axi_CTRL_BUS3_WLAST : OUT STD_LOGIC;
    m_axi_CTRL_BUS3_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS3_ID_WIDTH-1 downto 0);
    m_axi_CTRL_BUS3_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS3_WUSER_WIDTH-1 downto 0);
    m_axi_CTRL_BUS3_ARVALID : OUT STD_LOGIC;
    m_axi_CTRL_BUS3_ARREADY : IN STD_LOGIC;
    m_axi_CTRL_BUS3_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS3_ADDR_WIDTH-1 downto 0);
    m_axi_CTRL_BUS3_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS3_ID_WIDTH-1 downto 0);
    m_axi_CTRL_BUS3_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_CTRL_BUS3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CTRL_BUS3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CTRL_BUS3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CTRL_BUS3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CTRL_BUS3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CTRL_BUS3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CTRL_BUS3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CTRL_BUS3_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS3_ARUSER_WIDTH-1 downto 0);
    m_axi_CTRL_BUS3_RVALID : IN STD_LOGIC;
    m_axi_CTRL_BUS3_RREADY : OUT STD_LOGIC;
    m_axi_CTRL_BUS3_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS3_DATA_WIDTH-1 downto 0);
    m_axi_CTRL_BUS3_RLAST : IN STD_LOGIC;
    m_axi_CTRL_BUS3_RID : IN STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS3_ID_WIDTH-1 downto 0);
    m_axi_CTRL_BUS3_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS3_RUSER_WIDTH-1 downto 0);
    m_axi_CTRL_BUS3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CTRL_BUS3_BVALID : IN STD_LOGIC;
    m_axi_CTRL_BUS3_BREADY : OUT STD_LOGIC;
    m_axi_CTRL_BUS3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CTRL_BUS3_BID : IN STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS3_ID_WIDTH-1 downto 0);
    m_axi_CTRL_BUS3_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUS3_BUSER_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of solution is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "solution,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.902312,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=231,HLS_SYN_DSP=33,HLS_SYN_FF=14581,HLS_SYN_LUT=28213,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (29 downto 0) := "000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (29 downto 0) := "000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (29 downto 0) := "000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (29 downto 0) := "000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (29 downto 0) := "000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (29 downto 0) := "000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (29 downto 0) := "000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (29 downto 0) := "000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (29 downto 0) := "000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (29 downto 0) := "001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (29 downto 0) := "010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (29 downto 0) := "100000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_42 : STD_LOGIC_VECTOR (7 downto 0) := "01000010";
    constant ap_const_lv8_4C : STD_LOGIC_VECTOR (7 downto 0) := "01001100";
    constant ap_const_lv8_44 : STD_LOGIC_VECTOR (7 downto 0) := "01000100";
    constant ap_const_lv8_46 : STD_LOGIC_VECTOR (7 downto 0) := "01000110";
    constant ap_const_lv8_52 : STD_LOGIC_VECTOR (7 downto 0) := "01010010";
    constant ap_const_lv8_55 : STD_LOGIC_VECTOR (7 downto 0) := "01010101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv6_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv6_36 : STD_LOGIC_VECTOR (5 downto 0) := "110110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv32_FFFFFFFE : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111110";
    constant ap_const_lv34_15556 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000010101010101010110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal facelets_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal facelets_ce0 : STD_LOGIC;
    signal facelets_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal maxDepth : STD_LOGIC_VECTOR (7 downto 0);
    signal unsolvable : STD_LOGIC;
    signal unsolvable_ap_vld : STD_LOGIC;
    signal encode_length : STD_LOGIC_VECTOR (7 downto 0);
    signal encode_length_ap_vld : STD_LOGIC;
    signal twistMove2 : STD_LOGIC_VECTOR (31 downto 0);
    signal flipMove2 : STD_LOGIC_VECTOR (31 downto 0);
    signal FRtoBR_Move2 : STD_LOGIC_VECTOR (31 downto 0);
    signal URFtoDLF_Move2 : STD_LOGIC_VECTOR (31 downto 0);
    signal URtoDF_Move2 : STD_LOGIC_VECTOR (31 downto 0);
    signal URtoUL_Move2 : STD_LOGIC_VECTOR (31 downto 0);
    signal UBtoDF_Move2 : STD_LOGIC_VECTOR (31 downto 0);
    signal MergeURtoULandUBtoDF2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Slice_URFtoDLF_Parity_Prun2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Slice_URtoDF_Parity_Prun2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Slice_Twist_Prun2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Slice_Flip_Prun2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_f_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal res_f_0_ce0 : STD_LOGIC;
    signal res_f_0_we0 : STD_LOGIC;
    signal res_f_0_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal res_f_0_ce1 : STD_LOGIC;
    signal res_f_0_q1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ccRet_cp_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal ccRet_cp_0_ce0 : STD_LOGIC;
    signal ccRet_cp_0_we0 : STD_LOGIC;
    signal ccRet_cp_0_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal ccRet_ep_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ccRet_ep_0_ce0 : STD_LOGIC;
    signal ccRet_ep_0_we0 : STD_LOGIC;
    signal ccRet_ep_0_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ccRet_co_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal ccRet_co_0_ce0 : STD_LOGIC;
    signal ccRet_co_0_we0 : STD_LOGIC;
    signal ccRet_co_0_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal ccRet_eo_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ccRet_eo_0_ce0 : STD_LOGIC;
    signal ccRet_eo_0_we0 : STD_LOGIC;
    signal ccRet_eo_0_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_twist_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal result_flip_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal result_parity_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal result_FRtoBR_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal result_URFtoDLF_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal result_URtoUL_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal result_UBtoDF_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal a : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal CTRL_BUS1_AWREADY : STD_LOGIC;
    signal CTRL_BUS1_WREADY : STD_LOGIC;
    signal CTRL_BUS1_ARVALID : STD_LOGIC;
    signal CTRL_BUS1_ARREADY : STD_LOGIC;
    signal CTRL_BUS1_RVALID : STD_LOGIC;
    signal CTRL_BUS1_RREADY : STD_LOGIC;
    signal CTRL_BUS1_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal CTRL_BUS1_RLAST : STD_LOGIC;
    signal CTRL_BUS1_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal CTRL_BUS1_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal CTRL_BUS1_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal CTRL_BUS1_BVALID : STD_LOGIC;
    signal CTRL_BUS1_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal CTRL_BUS1_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal CTRL_BUS1_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal CTRL_BUS2_AWREADY : STD_LOGIC;
    signal CTRL_BUS2_WREADY : STD_LOGIC;
    signal CTRL_BUS2_ARVALID : STD_LOGIC;
    signal CTRL_BUS2_ARREADY : STD_LOGIC;
    signal CTRL_BUS2_RVALID : STD_LOGIC;
    signal CTRL_BUS2_RREADY : STD_LOGIC;
    signal CTRL_BUS2_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal CTRL_BUS2_RLAST : STD_LOGIC;
    signal CTRL_BUS2_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal CTRL_BUS2_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal CTRL_BUS2_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal CTRL_BUS2_BVALID : STD_LOGIC;
    signal CTRL_BUS2_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal CTRL_BUS2_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal CTRL_BUS2_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal CTRL_BUS3_AWREADY : STD_LOGIC;
    signal CTRL_BUS3_WREADY : STD_LOGIC;
    signal CTRL_BUS3_ARVALID : STD_LOGIC;
    signal CTRL_BUS3_ARREADY : STD_LOGIC;
    signal CTRL_BUS3_RVALID : STD_LOGIC;
    signal CTRL_BUS3_RREADY : STD_LOGIC;
    signal CTRL_BUS3_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal CTRL_BUS3_RLAST : STD_LOGIC;
    signal CTRL_BUS3_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal CTRL_BUS3_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal CTRL_BUS3_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal CTRL_BUS3_BVALID : STD_LOGIC;
    signal CTRL_BUS3_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal CTRL_BUS3_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal CTRL_BUS3_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_1527 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal maxDepth_read_reg_1997 : STD_LOGIC_VECTOR (7 downto 0);
    signal Slice_Flip_Prun_reg_2002 : STD_LOGIC_VECTOR (30 downto 0);
    signal Slice_Twist_Prun_reg_2007 : STD_LOGIC_VECTOR (30 downto 0);
    signal Slice_URtoDF_Parity_s_reg_2012 : STD_LOGIC_VECTOR (30 downto 0);
    signal Slice_URFtoDLF_Parit_reg_2017 : STD_LOGIC_VECTOR (30 downto 0);
    signal MergeURtoULandUBtoDF_reg_2022 : STD_LOGIC_VECTOR (30 downto 0);
    signal UBtoDF_Move_reg_2027 : STD_LOGIC_VECTOR (30 downto 0);
    signal URtoUL_Move_reg_2032 : STD_LOGIC_VECTOR (30 downto 0);
    signal URtoDF_Move_reg_2037 : STD_LOGIC_VECTOR (30 downto 0);
    signal URFtoDLF_Move_reg_2042 : STD_LOGIC_VECTOR (30 downto 0);
    signal FRtoBR_Move_reg_2047 : STD_LOGIC_VECTOR (30 downto 0);
    signal flipMove_reg_2052 : STD_LOGIC_VECTOR (30 downto 0);
    signal twistMove_reg_2057 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvarinc_fu_1652_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_11_fu_1675_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_11_reg_2073 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_49_fu_1681_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_49_reg_2078 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond1_fu_1669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_complete_phi_fu_1234_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_reg_2130 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_56_reg_2140 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_59_reg_2150 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp8_fu_1753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp8_reg_2165 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_65_reg_2170 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_69_reg_2180 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_79_reg_2190 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal complete_1_fu_1809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i_12_fu_1821_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_12_reg_2208 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal exitcond_fu_1815_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_71_fu_1832_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_71_reg_2218 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal i_5_fu_1838_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_5_reg_2222 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_83_fu_1855_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_83_reg_2235 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_verify_fu_1495_ap_idle : STD_LOGIC;
    signal grp_verify_fu_1495_ap_ready : STD_LOGIC;
    signal grp_verify_fu_1495_ap_done : STD_LOGIC;
    signal FRtoBR_reg_2239 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal tmp_89_fu_1869_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_89_reg_2244 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_90_reg_2249 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_93_reg_2255 : STD_LOGIC_VECTOR (12 downto 0);
    signal flip_reg_2260 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal twist_reg_2265 : STD_LOGIC_VECTOR (15 downto 0);
    signal slice_fu_1936_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal slice_reg_2270 : STD_LOGIC_VECTOR (15 downto 0);
    signal URFtoDLF_reg_2275 : STD_LOGIC_VECTOR (15 downto 0);
    signal URtoUL_reg_2280 : STD_LOGIC_VECTOR (15 downto 0);
    signal UBtoDF_reg_2285 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_86_fu_1955_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_86_reg_2290 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_87_fu_1961_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_87_reg_2295 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal depthPhase1_1_fu_1983_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal complete_reg_1230 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_88_fu_1977_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal count_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal count_ce0 : STD_LOGIC;
    signal count_we0 : STD_LOGIC;
    signal count_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal P1Buffer_flip_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal P1Buffer_twist_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal P1Buffer_slice_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal P1Buffer_depthPhase1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal P1Buffer_n_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal P1Buffer_0_i_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal P3Buffer_parity_0_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal P3Buffer_URFtoDLF_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal P3Buffer_FRtoBR_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal P3Buffer_URtoDF_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal P3Buffer_n_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal P3Buffer_0_i_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal P3Buffer_0_i_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_blockP1_fu_1276_ap_start : STD_LOGIC;
    signal grp_blockP1_fu_1276_ap_done : STD_LOGIC;
    signal grp_blockP1_fu_1276_ap_idle : STD_LOGIC;
    signal grp_blockP1_fu_1276_ap_ready : STD_LOGIC;
    signal grp_blockP1_fu_1276_P1Buffer_0_flip_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_blockP1_fu_1276_P1Buffer_0_flip_ce0 : STD_LOGIC;
    signal grp_blockP1_fu_1276_P1Buffer_0_flip_we0 : STD_LOGIC;
    signal grp_blockP1_fu_1276_P1Buffer_0_flip_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_blockP1_fu_1276_P1Buffer_0_twist_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_blockP1_fu_1276_P1Buffer_0_twist_ce0 : STD_LOGIC;
    signal grp_blockP1_fu_1276_P1Buffer_0_twist_we0 : STD_LOGIC;
    signal grp_blockP1_fu_1276_P1Buffer_0_twist_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_blockP1_fu_1276_P1Buffer_0_slice_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_blockP1_fu_1276_P1Buffer_0_slice_ce0 : STD_LOGIC;
    signal grp_blockP1_fu_1276_P1Buffer_0_slice_we0 : STD_LOGIC;
    signal grp_blockP1_fu_1276_P1Buffer_0_slice_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_blockP1_fu_1276_P1Buffer_0_depthPha_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_blockP1_fu_1276_P1Buffer_0_depthPha_ce0 : STD_LOGIC;
    signal grp_blockP1_fu_1276_P1Buffer_0_depthPha_we0 : STD_LOGIC;
    signal grp_blockP1_fu_1276_P1Buffer_0_depthPha_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_blockP1_fu_1276_P1Buffer_0_n_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_blockP1_fu_1276_P1Buffer_0_n_ce0 : STD_LOGIC;
    signal grp_blockP1_fu_1276_P1Buffer_0_n_we0 : STD_LOGIC;
    signal grp_blockP1_fu_1276_P1Buffer_0_n_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_blockP1_fu_1276_P1Buffer_0_i_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_blockP1_fu_1276_P1Buffer_0_i_ce0 : STD_LOGIC;
    signal grp_blockP1_fu_1276_P1Buffer_0_i_we0 : STD_LOGIC;
    signal grp_blockP1_fu_1276_P1Buffer_0_i_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_blockP1_fu_1276_parity : STD_LOGIC;
    signal grp_blockP1_fu_1276_P3Buffer_0_parity_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_blockP1_fu_1276_P3Buffer_0_parity_ce0 : STD_LOGIC;
    signal grp_blockP1_fu_1276_P3Buffer_0_parity_we0 : STD_LOGIC;
    signal grp_blockP1_fu_1276_P3Buffer_0_parity_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_blockP1_fu_1276_P3Buffer_0_URFtoDLF_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_blockP1_fu_1276_P3Buffer_0_URFtoDLF_ce0 : STD_LOGIC;
    signal grp_blockP1_fu_1276_P3Buffer_0_URFtoDLF_we0 : STD_LOGIC;
    signal grp_blockP1_fu_1276_P3Buffer_0_URFtoDLF_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_blockP1_fu_1276_P3Buffer_0_FRtoBR_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_blockP1_fu_1276_P3Buffer_0_FRtoBR_ce0 : STD_LOGIC;
    signal grp_blockP1_fu_1276_P3Buffer_0_FRtoBR_we0 : STD_LOGIC;
    signal grp_blockP1_fu_1276_P3Buffer_0_FRtoBR_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_blockP1_fu_1276_P3Buffer_0_URtoDF_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_blockP1_fu_1276_P3Buffer_0_URtoDF_ce0 : STD_LOGIC;
    signal grp_blockP1_fu_1276_P3Buffer_0_URtoDF_we0 : STD_LOGIC;
    signal grp_blockP1_fu_1276_P3Buffer_0_URtoDF_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_blockP1_fu_1276_P3Buffer_0_n_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_blockP1_fu_1276_P3Buffer_0_n_ce0 : STD_LOGIC;
    signal grp_blockP1_fu_1276_P3Buffer_0_n_we0 : STD_LOGIC;
    signal grp_blockP1_fu_1276_P3Buffer_0_n_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_blockP1_fu_1276_P3Buffer_0_i_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_blockP1_fu_1276_P3Buffer_0_i_ce0 : STD_LOGIC;
    signal grp_blockP1_fu_1276_P3Buffer_0_i_we0 : STD_LOGIC;
    signal grp_blockP1_fu_1276_P3Buffer_0_i_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_blockP1_fu_1276_P3Buffer_0_i_address1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_blockP1_fu_1276_P3Buffer_0_i_ce1 : STD_LOGIC;
    signal grp_blockP1_fu_1276_P3Buffer_0_i_we1 : STD_LOGIC;
    signal grp_blockP1_fu_1276_P3Buffer_0_i_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_blockP1_fu_1276_encode_length : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_blockP1_fu_1276_encode_length_ap_vld : STD_LOGIC;
    signal grp_blockP1_fu_1276_encode_array_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_blockP1_fu_1276_encode_array_ce0 : STD_LOGIC;
    signal grp_blockP1_fu_1276_encode_array_we0 : STD_LOGIC;
    signal grp_blockP1_fu_1276_encode_array_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_blockP1_fu_1276_m_axi_twistMove2_AWVALID : STD_LOGIC;
    signal grp_blockP1_fu_1276_m_axi_twistMove2_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_blockP1_fu_1276_m_axi_twistMove2_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_blockP1_fu_1276_m_axi_twistMove2_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_blockP1_fu_1276_m_axi_twistMove2_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_blockP1_fu_1276_m_axi_twistMove2_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_blockP1_fu_1276_m_axi_twistMove2_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_blockP1_fu_1276_m_axi_twistMove2_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_blockP1_fu_1276_m_axi_twistMove2_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_blockP1_fu_1276_m_axi_twistMove2_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_blockP1_fu_1276_m_axi_twistMove2_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_blockP1_fu_1276_m_axi_twistMove2_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_blockP1_fu_1276_m_axi_twistMove2_WVALID : STD_LOGIC;
    signal grp_blockP1_fu_1276_m_axi_twistMove2_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_blockP1_fu_1276_m_axi_twistMove2_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_blockP1_fu_1276_m_axi_twistMove2_WLAST : STD_LOGIC;
    signal grp_blockP1_fu_1276_m_axi_twistMove2_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_blockP1_fu_1276_m_axi_twistMove2_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_blockP1_fu_1276_m_axi_twistMove2_ARVALID : STD_LOGIC;
    signal grp_blockP1_fu_1276_m_axi_twistMove2_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_blockP1_fu_1276_m_axi_twistMove2_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_blockP1_fu_1276_m_axi_twistMove2_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_blockP1_fu_1276_m_axi_twistMove2_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_blockP1_fu_1276_m_axi_twistMove2_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_blockP1_fu_1276_m_axi_twistMove2_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_blockP1_fu_1276_m_axi_twistMove2_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_blockP1_fu_1276_m_axi_twistMove2_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_blockP1_fu_1276_m_axi_twistMove2_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_blockP1_fu_1276_m_axi_twistMove2_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_blockP1_fu_1276_m_axi_twistMove2_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_blockP1_fu_1276_m_axi_twistMove2_RREADY : STD_LOGIC;
    signal grp_blockP1_fu_1276_m_axi_twistMove2_BREADY : STD_LOGIC;
    signal grp_blockP1_fu_1276_m_axi_flipMove2_AWVALID : STD_LOGIC;
    signal grp_blockP1_fu_1276_m_axi_flipMove2_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_blockP1_fu_1276_m_axi_flipMove2_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_blockP1_fu_1276_m_axi_flipMove2_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_blockP1_fu_1276_m_axi_flipMove2_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_blockP1_fu_1276_m_axi_flipMove2_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_blockP1_fu_1276_m_axi_flipMove2_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_blockP1_fu_1276_m_axi_flipMove2_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_blockP1_fu_1276_m_axi_flipMove2_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_blockP1_fu_1276_m_axi_flipMove2_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_blockP1_fu_1276_m_axi_flipMove2_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_blockP1_fu_1276_m_axi_flipMove2_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_blockP1_fu_1276_m_axi_flipMove2_WVALID : STD_LOGIC;
    signal grp_blockP1_fu_1276_m_axi_flipMove2_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_blockP1_fu_1276_m_axi_flipMove2_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_blockP1_fu_1276_m_axi_flipMove2_WLAST : STD_LOGIC;
    signal grp_blockP1_fu_1276_m_axi_flipMove2_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_blockP1_fu_1276_m_axi_flipMove2_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_blockP1_fu_1276_m_axi_flipMove2_ARVALID : STD_LOGIC;
    signal grp_blockP1_fu_1276_m_axi_flipMove2_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_blockP1_fu_1276_m_axi_flipMove2_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_blockP1_fu_1276_m_axi_flipMove2_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_blockP1_fu_1276_m_axi_flipMove2_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_blockP1_fu_1276_m_axi_flipMove2_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_blockP1_fu_1276_m_axi_flipMove2_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_blockP1_fu_1276_m_axi_flipMove2_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_blockP1_fu_1276_m_axi_flipMove2_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_blockP1_fu_1276_m_axi_flipMove2_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_blockP1_fu_1276_m_axi_flipMove2_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_blockP1_fu_1276_m_axi_flipMove2_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_blockP1_fu_1276_m_axi_flipMove2_RREADY : STD_LOGIC;
    signal grp_blockP1_fu_1276_m_axi_flipMove2_BREADY : STD_LOGIC;
    signal grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_AWVALID : STD_LOGIC;
    signal grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_WVALID : STD_LOGIC;
    signal grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_WLAST : STD_LOGIC;
    signal grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_ARVALID : STD_LOGIC;
    signal grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_RREADY : STD_LOGIC;
    signal grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_BREADY : STD_LOGIC;
    signal grp_blockP1_fu_1276_a_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_blockP1_fu_1276_a_o_ap_vld : STD_LOGIC;
    signal grp_get_coordcube_fu_1441_ap_start : STD_LOGIC;
    signal grp_get_coordcube_fu_1441_ap_done : STD_LOGIC;
    signal grp_get_coordcube_fu_1441_ap_idle : STD_LOGIC;
    signal grp_get_coordcube_fu_1441_ap_ready : STD_LOGIC;
    signal grp_get_coordcube_fu_1441_cubiecube_0_cp_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_get_coordcube_fu_1441_cubiecube_0_cp_ce0 : STD_LOGIC;
    signal grp_get_coordcube_fu_1441_cubiecube_0_co_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_get_coordcube_fu_1441_cubiecube_0_co_ce0 : STD_LOGIC;
    signal grp_get_coordcube_fu_1441_cubiecube_0_ep_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_get_coordcube_fu_1441_cubiecube_0_ep_ce0 : STD_LOGIC;
    signal grp_get_coordcube_fu_1441_cubiecube_0_eo_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_get_coordcube_fu_1441_cubiecube_0_eo_ce0 : STD_LOGIC;
    signal grp_get_coordcube_fu_1441_result_twist_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_get_coordcube_fu_1441_result_twist_0_ap_vld : STD_LOGIC;
    signal grp_get_coordcube_fu_1441_result_flip_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_get_coordcube_fu_1441_result_flip_0_ap_vld : STD_LOGIC;
    signal grp_get_coordcube_fu_1441_result_parity_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_get_coordcube_fu_1441_result_parity_0_ap_vld : STD_LOGIC;
    signal grp_get_coordcube_fu_1441_result_FRtoBR_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_get_coordcube_fu_1441_result_FRtoBR_0_ap_vld : STD_LOGIC;
    signal grp_get_coordcube_fu_1441_result_URFtoDLF_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_get_coordcube_fu_1441_result_URFtoDLF_0_ap_vld : STD_LOGIC;
    signal grp_get_coordcube_fu_1441_result_URtoUL_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_get_coordcube_fu_1441_result_URtoUL_0_ap_vld : STD_LOGIC;
    signal grp_get_coordcube_fu_1441_result_UBtoDF_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_get_coordcube_fu_1441_result_UBtoDF_0_ap_vld : STD_LOGIC;
    signal grp_toCubieCube_fu_1467_ap_start : STD_LOGIC;
    signal grp_toCubieCube_fu_1467_ap_done : STD_LOGIC;
    signal grp_toCubieCube_fu_1467_ap_idle : STD_LOGIC;
    signal grp_toCubieCube_fu_1467_ap_ready : STD_LOGIC;
    signal grp_toCubieCube_fu_1467_facecube_0_f_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_toCubieCube_fu_1467_facecube_0_f_ce0 : STD_LOGIC;
    signal grp_toCubieCube_fu_1467_facecube_0_f_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_toCubieCube_fu_1467_facecube_0_f_ce1 : STD_LOGIC;
    signal grp_toCubieCube_fu_1467_ccRet_cp_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_toCubieCube_fu_1467_ccRet_cp_0_ce0 : STD_LOGIC;
    signal grp_toCubieCube_fu_1467_ccRet_cp_0_we0 : STD_LOGIC;
    signal grp_toCubieCube_fu_1467_ccRet_cp_0_d0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_toCubieCube_fu_1467_ccRet_ep_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_toCubieCube_fu_1467_ccRet_ep_0_ce0 : STD_LOGIC;
    signal grp_toCubieCube_fu_1467_ccRet_ep_0_we0 : STD_LOGIC;
    signal grp_toCubieCube_fu_1467_ccRet_ep_0_d0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_toCubieCube_fu_1467_ccRet_co_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_toCubieCube_fu_1467_ccRet_co_0_ce0 : STD_LOGIC;
    signal grp_toCubieCube_fu_1467_ccRet_co_0_we0 : STD_LOGIC;
    signal grp_toCubieCube_fu_1467_ccRet_co_0_d0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_toCubieCube_fu_1467_ccRet_eo_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_toCubieCube_fu_1467_ccRet_eo_0_ce0 : STD_LOGIC;
    signal grp_toCubieCube_fu_1467_ccRet_eo_0_we0 : STD_LOGIC;
    signal grp_toCubieCube_fu_1467_ccRet_eo_0_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_verify_fu_1495_ap_start : STD_LOGIC;
    signal grp_verify_fu_1495_cubiecube_0_cp_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_verify_fu_1495_cubiecube_0_cp_ce0 : STD_LOGIC;
    signal grp_verify_fu_1495_cubiecube_0_co_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_verify_fu_1495_cubiecube_0_co_ce0 : STD_LOGIC;
    signal grp_verify_fu_1495_cubiecube_0_ep_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_verify_fu_1495_cubiecube_0_ep_ce0 : STD_LOGIC;
    signal grp_verify_fu_1495_cubiecube_0_eo_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_verify_fu_1495_cubiecube_0_eo_ce0 : STD_LOGIC;
    signal grp_verify_fu_1495_ap_return : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_get_facecube_fromstr_fu_1507_ap_start : STD_LOGIC;
    signal grp_get_facecube_fromstr_fu_1507_ap_done : STD_LOGIC;
    signal grp_get_facecube_fromstr_fu_1507_ap_idle : STD_LOGIC;
    signal grp_get_facecube_fromstr_fu_1507_ap_ready : STD_LOGIC;
    signal grp_get_facecube_fromstr_fu_1507_cubeString_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_get_facecube_fromstr_fu_1507_cubeString_ce0 : STD_LOGIC;
    signal grp_get_facecube_fromstr_fu_1507_res_f_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_get_facecube_fromstr_fu_1507_res_f_0_ce0 : STD_LOGIC;
    signal grp_get_facecube_fromstr_fu_1507_res_f_0_we0 : STD_LOGIC;
    signal grp_get_facecube_fromstr_fu_1507_res_f_0_d0 : STD_LOGIC_VECTOR (2 downto 0);
    signal invdar_reg_1208 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_48_fu_1663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_1219 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_1242 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal i_2_reg_1253 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_82_fu_1849_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal depthPhase1_reg_1264 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_blockP1_fu_1276_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal grp_get_coordcube_fu_1441_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_toCubieCube_fu_1467_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_verify_fu_1495_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_get_facecube_fromstr_fu_1507_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_s_fu_1658_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_50_fu_1689_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_52_fu_1699_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_55_fu_1709_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_58_fu_1719_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_61_fu_1729_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_64_fu_1739_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_68_fu_1764_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_78_fu_1774_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_84_fu_1784_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_66_fu_1827_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_81_fu_1844_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1520_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_51_fu_1694_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_54_fu_1704_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_57_fu_1714_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_60_fu_1724_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_63_fu_1734_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp10_fu_1748_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp9_fu_1744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_67_fu_1759_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_70_fu_1769_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_80_fu_1779_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp13_fu_1793_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp12_fu_1789_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp11_fu_1798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_1804_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_fu_1989_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_90_fu_1872_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal neg_mul_fu_1901_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_91_fu_1906_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_92_fu_1916_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_94_fu_1920_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_95_fu_1923_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal neg_ti_fu_1930_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_fu_1989_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (29 downto 0);

    component blockP1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        flip : IN STD_LOGIC_VECTOR (15 downto 0);
        twist : IN STD_LOGIC_VECTOR (15 downto 0);
        slice : IN STD_LOGIC_VECTOR (15 downto 0);
        P1Buffer_0_flip_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        P1Buffer_0_flip_ce0 : OUT STD_LOGIC;
        P1Buffer_0_flip_we0 : OUT STD_LOGIC;
        P1Buffer_0_flip_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        P1Buffer_0_flip_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        P1Buffer_0_twist_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        P1Buffer_0_twist_ce0 : OUT STD_LOGIC;
        P1Buffer_0_twist_we0 : OUT STD_LOGIC;
        P1Buffer_0_twist_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        P1Buffer_0_twist_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        P1Buffer_0_slice_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        P1Buffer_0_slice_ce0 : OUT STD_LOGIC;
        P1Buffer_0_slice_we0 : OUT STD_LOGIC;
        P1Buffer_0_slice_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        P1Buffer_0_slice_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        P1Buffer_0_depthPha_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        P1Buffer_0_depthPha_ce0 : OUT STD_LOGIC;
        P1Buffer_0_depthPha_we0 : OUT STD_LOGIC;
        P1Buffer_0_depthPha_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        P1Buffer_0_depthPha_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        P1Buffer_0_n_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        P1Buffer_0_n_ce0 : OUT STD_LOGIC;
        P1Buffer_0_n_we0 : OUT STD_LOGIC;
        P1Buffer_0_n_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        P1Buffer_0_n_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        P1Buffer_0_i_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        P1Buffer_0_i_ce0 : OUT STD_LOGIC;
        P1Buffer_0_i_we0 : OUT STD_LOGIC;
        P1Buffer_0_i_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        P1Buffer_0_i_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        depthPhase1 : IN STD_LOGIC_VECTOR (4 downto 0);
        maxDepth : IN STD_LOGIC_VECTOR (7 downto 0);
        URFtoDLF : IN STD_LOGIC_VECTOR (15 downto 0);
        FRtoBR : IN STD_LOGIC_VECTOR (15 downto 0);
        parity : IN STD_LOGIC;
        URtoUL : IN STD_LOGIC_VECTOR (15 downto 0);
        UBtoDF : IN STD_LOGIC_VECTOR (15 downto 0);
        P3Buffer_0_parity_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        P3Buffer_0_parity_ce0 : OUT STD_LOGIC;
        P3Buffer_0_parity_we0 : OUT STD_LOGIC;
        P3Buffer_0_parity_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        P3Buffer_0_parity_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        P3Buffer_0_URFtoDLF_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        P3Buffer_0_URFtoDLF_ce0 : OUT STD_LOGIC;
        P3Buffer_0_URFtoDLF_we0 : OUT STD_LOGIC;
        P3Buffer_0_URFtoDLF_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        P3Buffer_0_URFtoDLF_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        P3Buffer_0_FRtoBR_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        P3Buffer_0_FRtoBR_ce0 : OUT STD_LOGIC;
        P3Buffer_0_FRtoBR_we0 : OUT STD_LOGIC;
        P3Buffer_0_FRtoBR_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        P3Buffer_0_FRtoBR_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        P3Buffer_0_URtoDF_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        P3Buffer_0_URtoDF_ce0 : OUT STD_LOGIC;
        P3Buffer_0_URtoDF_we0 : OUT STD_LOGIC;
        P3Buffer_0_URtoDF_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        P3Buffer_0_URtoDF_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        P3Buffer_0_n_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        P3Buffer_0_n_ce0 : OUT STD_LOGIC;
        P3Buffer_0_n_we0 : OUT STD_LOGIC;
        P3Buffer_0_n_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        P3Buffer_0_n_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        P3Buffer_0_i_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        P3Buffer_0_i_ce0 : OUT STD_LOGIC;
        P3Buffer_0_i_we0 : OUT STD_LOGIC;
        P3Buffer_0_i_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        P3Buffer_0_i_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        P3Buffer_0_i_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
        P3Buffer_0_i_ce1 : OUT STD_LOGIC;
        P3Buffer_0_i_we1 : OUT STD_LOGIC;
        P3Buffer_0_i_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        P3Buffer_0_i_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        encode_length : OUT STD_LOGIC_VECTOR (7 downto 0);
        encode_length_ap_vld : OUT STD_LOGIC;
        encode_array_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        encode_array_ce0 : OUT STD_LOGIC;
        encode_array_we0 : OUT STD_LOGIC;
        encode_array_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_twistMove2_AWVALID : OUT STD_LOGIC;
        m_axi_twistMove2_AWREADY : IN STD_LOGIC;
        m_axi_twistMove2_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_twistMove2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_twistMove2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_twistMove2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_twistMove2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_twistMove2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_twistMove2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_twistMove2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_twistMove2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_twistMove2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_twistMove2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_twistMove2_WVALID : OUT STD_LOGIC;
        m_axi_twistMove2_WREADY : IN STD_LOGIC;
        m_axi_twistMove2_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_twistMove2_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_twistMove2_WLAST : OUT STD_LOGIC;
        m_axi_twistMove2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_twistMove2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_twistMove2_ARVALID : OUT STD_LOGIC;
        m_axi_twistMove2_ARREADY : IN STD_LOGIC;
        m_axi_twistMove2_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_twistMove2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_twistMove2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_twistMove2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_twistMove2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_twistMove2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_twistMove2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_twistMove2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_twistMove2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_twistMove2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_twistMove2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_twistMove2_RVALID : IN STD_LOGIC;
        m_axi_twistMove2_RREADY : OUT STD_LOGIC;
        m_axi_twistMove2_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_twistMove2_RLAST : IN STD_LOGIC;
        m_axi_twistMove2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_twistMove2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_twistMove2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_twistMove2_BVALID : IN STD_LOGIC;
        m_axi_twistMove2_BREADY : OUT STD_LOGIC;
        m_axi_twistMove2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_twistMove2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_twistMove2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        twistMove2_offset : IN STD_LOGIC_VECTOR (30 downto 0);
        m_axi_flipMove2_AWVALID : OUT STD_LOGIC;
        m_axi_flipMove2_AWREADY : IN STD_LOGIC;
        m_axi_flipMove2_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_flipMove2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_flipMove2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_flipMove2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_flipMove2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_flipMove2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_flipMove2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_flipMove2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_flipMove2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_flipMove2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_flipMove2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_flipMove2_WVALID : OUT STD_LOGIC;
        m_axi_flipMove2_WREADY : IN STD_LOGIC;
        m_axi_flipMove2_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_flipMove2_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_flipMove2_WLAST : OUT STD_LOGIC;
        m_axi_flipMove2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_flipMove2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_flipMove2_ARVALID : OUT STD_LOGIC;
        m_axi_flipMove2_ARREADY : IN STD_LOGIC;
        m_axi_flipMove2_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_flipMove2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_flipMove2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_flipMove2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_flipMove2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_flipMove2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_flipMove2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_flipMove2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_flipMove2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_flipMove2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_flipMove2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_flipMove2_RVALID : IN STD_LOGIC;
        m_axi_flipMove2_RREADY : OUT STD_LOGIC;
        m_axi_flipMove2_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_flipMove2_RLAST : IN STD_LOGIC;
        m_axi_flipMove2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_flipMove2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_flipMove2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_flipMove2_BVALID : IN STD_LOGIC;
        m_axi_flipMove2_BREADY : OUT STD_LOGIC;
        m_axi_flipMove2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_flipMove2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_flipMove2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        flipMove2_offset : IN STD_LOGIC_VECTOR (30 downto 0);
        m_axi_FRtoBR_Move2_AWVALID : OUT STD_LOGIC;
        m_axi_FRtoBR_Move2_AWREADY : IN STD_LOGIC;
        m_axi_FRtoBR_Move2_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_FRtoBR_Move2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FRtoBR_Move2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_FRtoBR_Move2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_FRtoBR_Move2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_FRtoBR_Move2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_FRtoBR_Move2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_FRtoBR_Move2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_FRtoBR_Move2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_FRtoBR_Move2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_FRtoBR_Move2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FRtoBR_Move2_WVALID : OUT STD_LOGIC;
        m_axi_FRtoBR_Move2_WREADY : IN STD_LOGIC;
        m_axi_FRtoBR_Move2_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_FRtoBR_Move2_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_FRtoBR_Move2_WLAST : OUT STD_LOGIC;
        m_axi_FRtoBR_Move2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FRtoBR_Move2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FRtoBR_Move2_ARVALID : OUT STD_LOGIC;
        m_axi_FRtoBR_Move2_ARREADY : IN STD_LOGIC;
        m_axi_FRtoBR_Move2_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_FRtoBR_Move2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FRtoBR_Move2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_FRtoBR_Move2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_FRtoBR_Move2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_FRtoBR_Move2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_FRtoBR_Move2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_FRtoBR_Move2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_FRtoBR_Move2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_FRtoBR_Move2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_FRtoBR_Move2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FRtoBR_Move2_RVALID : IN STD_LOGIC;
        m_axi_FRtoBR_Move2_RREADY : OUT STD_LOGIC;
        m_axi_FRtoBR_Move2_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_FRtoBR_Move2_RLAST : IN STD_LOGIC;
        m_axi_FRtoBR_Move2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FRtoBR_Move2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FRtoBR_Move2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_FRtoBR_Move2_BVALID : IN STD_LOGIC;
        m_axi_FRtoBR_Move2_BREADY : OUT STD_LOGIC;
        m_axi_FRtoBR_Move2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_FRtoBR_Move2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_FRtoBR_Move2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        FRtoBR_Move2_offset : IN STD_LOGIC_VECTOR (30 downto 0);
        Slice_Twist_Prun2_offset : IN STD_LOGIC_VECTOR (30 downto 0);
        Slice_Flip_Prun2_offset : IN STD_LOGIC_VECTOR (30 downto 0);
        URFtoDLF_Move2_offset : IN STD_LOGIC_VECTOR (30 downto 0);
        URtoDF_Move2_offset : IN STD_LOGIC_VECTOR (30 downto 0);
        URtoUL_Move2_offset : IN STD_LOGIC_VECTOR (30 downto 0);
        UBtoDF_Move2_offset : IN STD_LOGIC_VECTOR (30 downto 0);
        MergeURtoULandUBtoDF2_offset : IN STD_LOGIC_VECTOR (30 downto 0);
        Slice_URFtoDLF_Parity_Prun2_offset : IN STD_LOGIC_VECTOR (30 downto 0);
        Slice_URtoDF_Parity_Prun2_offset : IN STD_LOGIC_VECTOR (30 downto 0);
        a_i : IN STD_LOGIC_VECTOR (31 downto 0);
        a_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        a_o_ap_vld : OUT STD_LOGIC );
    end component;


    component get_coordcube IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        cubiecube_0_cp_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        cubiecube_0_cp_ce0 : OUT STD_LOGIC;
        cubiecube_0_cp_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
        cubiecube_0_co_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        cubiecube_0_co_ce0 : OUT STD_LOGIC;
        cubiecube_0_co_q0 : IN STD_LOGIC_VECTOR (1 downto 0);
        cubiecube_0_ep_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        cubiecube_0_ep_ce0 : OUT STD_LOGIC;
        cubiecube_0_ep_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
        cubiecube_0_eo_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        cubiecube_0_eo_ce0 : OUT STD_LOGIC;
        cubiecube_0_eo_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        result_twist_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        result_twist_0_ap_vld : OUT STD_LOGIC;
        result_flip_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        result_flip_0_ap_vld : OUT STD_LOGIC;
        result_parity_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        result_parity_0_ap_vld : OUT STD_LOGIC;
        result_FRtoBR_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        result_FRtoBR_0_ap_vld : OUT STD_LOGIC;
        result_URFtoDLF_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        result_URFtoDLF_0_ap_vld : OUT STD_LOGIC;
        result_URtoUL_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        result_URtoUL_0_ap_vld : OUT STD_LOGIC;
        result_UBtoDF_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        result_UBtoDF_0_ap_vld : OUT STD_LOGIC );
    end component;


    component toCubieCube IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        facecube_0_f_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        facecube_0_f_ce0 : OUT STD_LOGIC;
        facecube_0_f_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
        facecube_0_f_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        facecube_0_f_ce1 : OUT STD_LOGIC;
        facecube_0_f_q1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ccRet_cp_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ccRet_cp_0_ce0 : OUT STD_LOGIC;
        ccRet_cp_0_we0 : OUT STD_LOGIC;
        ccRet_cp_0_d0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ccRet_ep_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        ccRet_ep_0_ce0 : OUT STD_LOGIC;
        ccRet_ep_0_we0 : OUT STD_LOGIC;
        ccRet_ep_0_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        ccRet_co_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ccRet_co_0_ce0 : OUT STD_LOGIC;
        ccRet_co_0_we0 : OUT STD_LOGIC;
        ccRet_co_0_d0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        ccRet_eo_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        ccRet_eo_0_ce0 : OUT STD_LOGIC;
        ccRet_eo_0_we0 : OUT STD_LOGIC;
        ccRet_eo_0_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component verify IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        cubiecube_0_cp_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        cubiecube_0_cp_ce0 : OUT STD_LOGIC;
        cubiecube_0_cp_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
        cubiecube_0_co_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        cubiecube_0_co_ce0 : OUT STD_LOGIC;
        cubiecube_0_co_q0 : IN STD_LOGIC_VECTOR (1 downto 0);
        cubiecube_0_ep_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        cubiecube_0_ep_ce0 : OUT STD_LOGIC;
        cubiecube_0_ep_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
        cubiecube_0_eo_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        cubiecube_0_eo_ce0 : OUT STD_LOGIC;
        cubiecube_0_eo_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component get_facecube_fromstr IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        cubeString_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cubeString_ce0 : OUT STD_LOGIC;
        cubeString_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        res_f_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        res_f_0_ce0 : OUT STD_LOGIC;
        res_f_0_we0 : OUT STD_LOGIC;
        res_f_0_d0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component solution_mul_mul_rcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (33 downto 0) );
    end component;


    component solution_res_f_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (2 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component solution_ccRet_cp_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (2 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component solution_ccRet_ep_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (3 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component solution_ccRet_co_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (1 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component solution_ccRet_eo_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component solution_count IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component solution_P1Buffervdy IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component solution_P1Bufferyd2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component solution_P1BufferAem IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component solution_P3BufferBew IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component solution_P3BufferCeG IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component solution_P3BufferFfa IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component solution_P3BufferGfk IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component solution_CTRL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        facelets_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        facelets_ce0 : IN STD_LOGIC;
        facelets_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        maxDepth : OUT STD_LOGIC_VECTOR (7 downto 0);
        unsolvable : IN STD_LOGIC;
        unsolvable_ap_vld : IN STD_LOGIC;
        encode_length : IN STD_LOGIC_VECTOR (7 downto 0);
        encode_length_ap_vld : IN STD_LOGIC;
        encode_array_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        encode_array_ce0 : IN STD_LOGIC;
        encode_array_we0 : IN STD_LOGIC;
        encode_array_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        twistMove2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        flipMove2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        FRtoBR_Move2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        URFtoDLF_Move2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        URtoDF_Move2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        URtoUL_Move2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        UBtoDF_Move2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        MergeURtoULandUBtoDF2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Slice_URFtoDLF_Parity_Prun2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Slice_URtoDF_Parity_Prun2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Slice_Twist_Prun2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Slice_Flip_Prun2 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component solution_CTRL_BUS1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component solution_CTRL_BUS2_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component solution_CTRL_BUS3_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    res_f_0_U : component solution_res_f_0
    generic map (
        DataWidth => 3,
        AddressRange => 54,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => res_f_0_address0,
        ce0 => res_f_0_ce0,
        we0 => res_f_0_we0,
        d0 => grp_get_facecube_fromstr_fu_1507_res_f_0_d0,
        q0 => res_f_0_q0,
        address1 => grp_toCubieCube_fu_1467_facecube_0_f_address1,
        ce1 => res_f_0_ce1,
        q1 => res_f_0_q1);

    ccRet_cp_0_U : component solution_ccRet_cp_0
    generic map (
        DataWidth => 3,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ccRet_cp_0_address0,
        ce0 => ccRet_cp_0_ce0,
        we0 => ccRet_cp_0_we0,
        d0 => grp_toCubieCube_fu_1467_ccRet_cp_0_d0,
        q0 => ccRet_cp_0_q0);

    ccRet_ep_0_U : component solution_ccRet_ep_0
    generic map (
        DataWidth => 4,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ccRet_ep_0_address0,
        ce0 => ccRet_ep_0_ce0,
        we0 => ccRet_ep_0_we0,
        d0 => grp_toCubieCube_fu_1467_ccRet_ep_0_d0,
        q0 => ccRet_ep_0_q0);

    ccRet_co_0_U : component solution_ccRet_co_0
    generic map (
        DataWidth => 2,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ccRet_co_0_address0,
        ce0 => ccRet_co_0_ce0,
        we0 => ccRet_co_0_we0,
        d0 => grp_toCubieCube_fu_1467_ccRet_co_0_d0,
        q0 => ccRet_co_0_q0);

    ccRet_eo_0_U : component solution_ccRet_eo_0
    generic map (
        DataWidth => 1,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ccRet_eo_0_address0,
        ce0 => ccRet_eo_0_ce0,
        we0 => ccRet_eo_0_we0,
        d0 => grp_toCubieCube_fu_1467_ccRet_eo_0_d0,
        q0 => ccRet_eo_0_q0);

    solution_CTRL_BUS_s_axi_U : component solution_CTRL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_BUS_AWVALID,
        AWREADY => s_axi_CTRL_BUS_AWREADY,
        AWADDR => s_axi_CTRL_BUS_AWADDR,
        WVALID => s_axi_CTRL_BUS_WVALID,
        WREADY => s_axi_CTRL_BUS_WREADY,
        WDATA => s_axi_CTRL_BUS_WDATA,
        WSTRB => s_axi_CTRL_BUS_WSTRB,
        ARVALID => s_axi_CTRL_BUS_ARVALID,
        ARREADY => s_axi_CTRL_BUS_ARREADY,
        ARADDR => s_axi_CTRL_BUS_ARADDR,
        RVALID => s_axi_CTRL_BUS_RVALID,
        RREADY => s_axi_CTRL_BUS_RREADY,
        RDATA => s_axi_CTRL_BUS_RDATA,
        RRESP => s_axi_CTRL_BUS_RRESP,
        BVALID => s_axi_CTRL_BUS_BVALID,
        BREADY => s_axi_CTRL_BUS_BREADY,
        BRESP => s_axi_CTRL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        facelets_address0 => facelets_address0,
        facelets_ce0 => facelets_ce0,
        facelets_q0 => facelets_q0,
        maxDepth => maxDepth,
        unsolvable => unsolvable,
        unsolvable_ap_vld => unsolvable_ap_vld,
        encode_length => encode_length,
        encode_length_ap_vld => encode_length_ap_vld,
        encode_array_address0 => grp_blockP1_fu_1276_encode_array_address0,
        encode_array_ce0 => grp_blockP1_fu_1276_encode_array_ce0,
        encode_array_we0 => grp_blockP1_fu_1276_encode_array_we0,
        encode_array_d0 => grp_blockP1_fu_1276_encode_array_d0,
        twistMove2 => twistMove2,
        flipMove2 => flipMove2,
        FRtoBR_Move2 => FRtoBR_Move2,
        URFtoDLF_Move2 => URFtoDLF_Move2,
        URtoDF_Move2 => URtoDF_Move2,
        URtoUL_Move2 => URtoUL_Move2,
        UBtoDF_Move2 => UBtoDF_Move2,
        MergeURtoULandUBtoDF2 => MergeURtoULandUBtoDF2,
        Slice_URFtoDLF_Parity_Prun2 => Slice_URFtoDLF_Parity_Prun2,
        Slice_URtoDF_Parity_Prun2 => Slice_URtoDF_Parity_Prun2,
        Slice_Twist_Prun2 => Slice_Twist_Prun2,
        Slice_Flip_Prun2 => Slice_Flip_Prun2);

    solution_CTRL_BUS1_m_axi_U : component solution_CTRL_BUS1_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_CTRL_BUS1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_CTRL_BUS1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_CTRL_BUS1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_CTRL_BUS1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_CTRL_BUS1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_CTRL_BUS1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_CTRL_BUS1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_CTRL_BUS1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_CTRL_BUS1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_CTRL_BUS1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_CTRL_BUS1_CACHE_VALUE)
    port map (
        AWVALID => m_axi_CTRL_BUS1_AWVALID,
        AWREADY => m_axi_CTRL_BUS1_AWREADY,
        AWADDR => m_axi_CTRL_BUS1_AWADDR,
        AWID => m_axi_CTRL_BUS1_AWID,
        AWLEN => m_axi_CTRL_BUS1_AWLEN,
        AWSIZE => m_axi_CTRL_BUS1_AWSIZE,
        AWBURST => m_axi_CTRL_BUS1_AWBURST,
        AWLOCK => m_axi_CTRL_BUS1_AWLOCK,
        AWCACHE => m_axi_CTRL_BUS1_AWCACHE,
        AWPROT => m_axi_CTRL_BUS1_AWPROT,
        AWQOS => m_axi_CTRL_BUS1_AWQOS,
        AWREGION => m_axi_CTRL_BUS1_AWREGION,
        AWUSER => m_axi_CTRL_BUS1_AWUSER,
        WVALID => m_axi_CTRL_BUS1_WVALID,
        WREADY => m_axi_CTRL_BUS1_WREADY,
        WDATA => m_axi_CTRL_BUS1_WDATA,
        WSTRB => m_axi_CTRL_BUS1_WSTRB,
        WLAST => m_axi_CTRL_BUS1_WLAST,
        WID => m_axi_CTRL_BUS1_WID,
        WUSER => m_axi_CTRL_BUS1_WUSER,
        ARVALID => m_axi_CTRL_BUS1_ARVALID,
        ARREADY => m_axi_CTRL_BUS1_ARREADY,
        ARADDR => m_axi_CTRL_BUS1_ARADDR,
        ARID => m_axi_CTRL_BUS1_ARID,
        ARLEN => m_axi_CTRL_BUS1_ARLEN,
        ARSIZE => m_axi_CTRL_BUS1_ARSIZE,
        ARBURST => m_axi_CTRL_BUS1_ARBURST,
        ARLOCK => m_axi_CTRL_BUS1_ARLOCK,
        ARCACHE => m_axi_CTRL_BUS1_ARCACHE,
        ARPROT => m_axi_CTRL_BUS1_ARPROT,
        ARQOS => m_axi_CTRL_BUS1_ARQOS,
        ARREGION => m_axi_CTRL_BUS1_ARREGION,
        ARUSER => m_axi_CTRL_BUS1_ARUSER,
        RVALID => m_axi_CTRL_BUS1_RVALID,
        RREADY => m_axi_CTRL_BUS1_RREADY,
        RDATA => m_axi_CTRL_BUS1_RDATA,
        RLAST => m_axi_CTRL_BUS1_RLAST,
        RID => m_axi_CTRL_BUS1_RID,
        RUSER => m_axi_CTRL_BUS1_RUSER,
        RRESP => m_axi_CTRL_BUS1_RRESP,
        BVALID => m_axi_CTRL_BUS1_BVALID,
        BREADY => m_axi_CTRL_BUS1_BREADY,
        BRESP => m_axi_CTRL_BUS1_BRESP,
        BID => m_axi_CTRL_BUS1_BID,
        BUSER => m_axi_CTRL_BUS1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => CTRL_BUS1_ARVALID,
        I_ARREADY => CTRL_BUS1_ARREADY,
        I_ARADDR => grp_blockP1_fu_1276_m_axi_twistMove2_ARADDR,
        I_ARID => grp_blockP1_fu_1276_m_axi_twistMove2_ARID,
        I_ARLEN => grp_blockP1_fu_1276_m_axi_twistMove2_ARLEN,
        I_ARSIZE => grp_blockP1_fu_1276_m_axi_twistMove2_ARSIZE,
        I_ARLOCK => grp_blockP1_fu_1276_m_axi_twistMove2_ARLOCK,
        I_ARCACHE => grp_blockP1_fu_1276_m_axi_twistMove2_ARCACHE,
        I_ARQOS => grp_blockP1_fu_1276_m_axi_twistMove2_ARQOS,
        I_ARPROT => grp_blockP1_fu_1276_m_axi_twistMove2_ARPROT,
        I_ARUSER => grp_blockP1_fu_1276_m_axi_twistMove2_ARUSER,
        I_ARBURST => grp_blockP1_fu_1276_m_axi_twistMove2_ARBURST,
        I_ARREGION => grp_blockP1_fu_1276_m_axi_twistMove2_ARREGION,
        I_RVALID => CTRL_BUS1_RVALID,
        I_RREADY => CTRL_BUS1_RREADY,
        I_RDATA => CTRL_BUS1_RDATA,
        I_RID => CTRL_BUS1_RID,
        I_RUSER => CTRL_BUS1_RUSER,
        I_RRESP => CTRL_BUS1_RRESP,
        I_RLAST => CTRL_BUS1_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => CTRL_BUS1_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => CTRL_BUS1_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => CTRL_BUS1_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => CTRL_BUS1_BRESP,
        I_BID => CTRL_BUS1_BID,
        I_BUSER => CTRL_BUS1_BUSER);

    solution_CTRL_BUS2_m_axi_U : component solution_CTRL_BUS2_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_CTRL_BUS2_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_CTRL_BUS2_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_CTRL_BUS2_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_CTRL_BUS2_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_CTRL_BUS2_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_CTRL_BUS2_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_CTRL_BUS2_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_CTRL_BUS2_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_CTRL_BUS2_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_CTRL_BUS2_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_CTRL_BUS2_CACHE_VALUE)
    port map (
        AWVALID => m_axi_CTRL_BUS2_AWVALID,
        AWREADY => m_axi_CTRL_BUS2_AWREADY,
        AWADDR => m_axi_CTRL_BUS2_AWADDR,
        AWID => m_axi_CTRL_BUS2_AWID,
        AWLEN => m_axi_CTRL_BUS2_AWLEN,
        AWSIZE => m_axi_CTRL_BUS2_AWSIZE,
        AWBURST => m_axi_CTRL_BUS2_AWBURST,
        AWLOCK => m_axi_CTRL_BUS2_AWLOCK,
        AWCACHE => m_axi_CTRL_BUS2_AWCACHE,
        AWPROT => m_axi_CTRL_BUS2_AWPROT,
        AWQOS => m_axi_CTRL_BUS2_AWQOS,
        AWREGION => m_axi_CTRL_BUS2_AWREGION,
        AWUSER => m_axi_CTRL_BUS2_AWUSER,
        WVALID => m_axi_CTRL_BUS2_WVALID,
        WREADY => m_axi_CTRL_BUS2_WREADY,
        WDATA => m_axi_CTRL_BUS2_WDATA,
        WSTRB => m_axi_CTRL_BUS2_WSTRB,
        WLAST => m_axi_CTRL_BUS2_WLAST,
        WID => m_axi_CTRL_BUS2_WID,
        WUSER => m_axi_CTRL_BUS2_WUSER,
        ARVALID => m_axi_CTRL_BUS2_ARVALID,
        ARREADY => m_axi_CTRL_BUS2_ARREADY,
        ARADDR => m_axi_CTRL_BUS2_ARADDR,
        ARID => m_axi_CTRL_BUS2_ARID,
        ARLEN => m_axi_CTRL_BUS2_ARLEN,
        ARSIZE => m_axi_CTRL_BUS2_ARSIZE,
        ARBURST => m_axi_CTRL_BUS2_ARBURST,
        ARLOCK => m_axi_CTRL_BUS2_ARLOCK,
        ARCACHE => m_axi_CTRL_BUS2_ARCACHE,
        ARPROT => m_axi_CTRL_BUS2_ARPROT,
        ARQOS => m_axi_CTRL_BUS2_ARQOS,
        ARREGION => m_axi_CTRL_BUS2_ARREGION,
        ARUSER => m_axi_CTRL_BUS2_ARUSER,
        RVALID => m_axi_CTRL_BUS2_RVALID,
        RREADY => m_axi_CTRL_BUS2_RREADY,
        RDATA => m_axi_CTRL_BUS2_RDATA,
        RLAST => m_axi_CTRL_BUS2_RLAST,
        RID => m_axi_CTRL_BUS2_RID,
        RUSER => m_axi_CTRL_BUS2_RUSER,
        RRESP => m_axi_CTRL_BUS2_RRESP,
        BVALID => m_axi_CTRL_BUS2_BVALID,
        BREADY => m_axi_CTRL_BUS2_BREADY,
        BRESP => m_axi_CTRL_BUS2_BRESP,
        BID => m_axi_CTRL_BUS2_BID,
        BUSER => m_axi_CTRL_BUS2_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => CTRL_BUS2_ARVALID,
        I_ARREADY => CTRL_BUS2_ARREADY,
        I_ARADDR => grp_blockP1_fu_1276_m_axi_flipMove2_ARADDR,
        I_ARID => grp_blockP1_fu_1276_m_axi_flipMove2_ARID,
        I_ARLEN => grp_blockP1_fu_1276_m_axi_flipMove2_ARLEN,
        I_ARSIZE => grp_blockP1_fu_1276_m_axi_flipMove2_ARSIZE,
        I_ARLOCK => grp_blockP1_fu_1276_m_axi_flipMove2_ARLOCK,
        I_ARCACHE => grp_blockP1_fu_1276_m_axi_flipMove2_ARCACHE,
        I_ARQOS => grp_blockP1_fu_1276_m_axi_flipMove2_ARQOS,
        I_ARPROT => grp_blockP1_fu_1276_m_axi_flipMove2_ARPROT,
        I_ARUSER => grp_blockP1_fu_1276_m_axi_flipMove2_ARUSER,
        I_ARBURST => grp_blockP1_fu_1276_m_axi_flipMove2_ARBURST,
        I_ARREGION => grp_blockP1_fu_1276_m_axi_flipMove2_ARREGION,
        I_RVALID => CTRL_BUS2_RVALID,
        I_RREADY => CTRL_BUS2_RREADY,
        I_RDATA => CTRL_BUS2_RDATA,
        I_RID => CTRL_BUS2_RID,
        I_RUSER => CTRL_BUS2_RUSER,
        I_RRESP => CTRL_BUS2_RRESP,
        I_RLAST => CTRL_BUS2_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => CTRL_BUS2_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => CTRL_BUS2_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => CTRL_BUS2_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => CTRL_BUS2_BRESP,
        I_BID => CTRL_BUS2_BID,
        I_BUSER => CTRL_BUS2_BUSER);

    solution_CTRL_BUS3_m_axi_U : component solution_CTRL_BUS3_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_CTRL_BUS3_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_CTRL_BUS3_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_CTRL_BUS3_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_CTRL_BUS3_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_CTRL_BUS3_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_CTRL_BUS3_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_CTRL_BUS3_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_CTRL_BUS3_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_CTRL_BUS3_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_CTRL_BUS3_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_CTRL_BUS3_CACHE_VALUE)
    port map (
        AWVALID => m_axi_CTRL_BUS3_AWVALID,
        AWREADY => m_axi_CTRL_BUS3_AWREADY,
        AWADDR => m_axi_CTRL_BUS3_AWADDR,
        AWID => m_axi_CTRL_BUS3_AWID,
        AWLEN => m_axi_CTRL_BUS3_AWLEN,
        AWSIZE => m_axi_CTRL_BUS3_AWSIZE,
        AWBURST => m_axi_CTRL_BUS3_AWBURST,
        AWLOCK => m_axi_CTRL_BUS3_AWLOCK,
        AWCACHE => m_axi_CTRL_BUS3_AWCACHE,
        AWPROT => m_axi_CTRL_BUS3_AWPROT,
        AWQOS => m_axi_CTRL_BUS3_AWQOS,
        AWREGION => m_axi_CTRL_BUS3_AWREGION,
        AWUSER => m_axi_CTRL_BUS3_AWUSER,
        WVALID => m_axi_CTRL_BUS3_WVALID,
        WREADY => m_axi_CTRL_BUS3_WREADY,
        WDATA => m_axi_CTRL_BUS3_WDATA,
        WSTRB => m_axi_CTRL_BUS3_WSTRB,
        WLAST => m_axi_CTRL_BUS3_WLAST,
        WID => m_axi_CTRL_BUS3_WID,
        WUSER => m_axi_CTRL_BUS3_WUSER,
        ARVALID => m_axi_CTRL_BUS3_ARVALID,
        ARREADY => m_axi_CTRL_BUS3_ARREADY,
        ARADDR => m_axi_CTRL_BUS3_ARADDR,
        ARID => m_axi_CTRL_BUS3_ARID,
        ARLEN => m_axi_CTRL_BUS3_ARLEN,
        ARSIZE => m_axi_CTRL_BUS3_ARSIZE,
        ARBURST => m_axi_CTRL_BUS3_ARBURST,
        ARLOCK => m_axi_CTRL_BUS3_ARLOCK,
        ARCACHE => m_axi_CTRL_BUS3_ARCACHE,
        ARPROT => m_axi_CTRL_BUS3_ARPROT,
        ARQOS => m_axi_CTRL_BUS3_ARQOS,
        ARREGION => m_axi_CTRL_BUS3_ARREGION,
        ARUSER => m_axi_CTRL_BUS3_ARUSER,
        RVALID => m_axi_CTRL_BUS3_RVALID,
        RREADY => m_axi_CTRL_BUS3_RREADY,
        RDATA => m_axi_CTRL_BUS3_RDATA,
        RLAST => m_axi_CTRL_BUS3_RLAST,
        RID => m_axi_CTRL_BUS3_RID,
        RUSER => m_axi_CTRL_BUS3_RUSER,
        RRESP => m_axi_CTRL_BUS3_RRESP,
        BVALID => m_axi_CTRL_BUS3_BVALID,
        BREADY => m_axi_CTRL_BUS3_BREADY,
        BRESP => m_axi_CTRL_BUS3_BRESP,
        BID => m_axi_CTRL_BUS3_BID,
        BUSER => m_axi_CTRL_BUS3_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => CTRL_BUS3_ARVALID,
        I_ARREADY => CTRL_BUS3_ARREADY,
        I_ARADDR => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_ARADDR,
        I_ARID => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_ARID,
        I_ARLEN => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_ARLEN,
        I_ARSIZE => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_ARSIZE,
        I_ARLOCK => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_ARLOCK,
        I_ARCACHE => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_ARCACHE,
        I_ARQOS => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_ARQOS,
        I_ARPROT => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_ARPROT,
        I_ARUSER => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_ARUSER,
        I_ARBURST => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_ARBURST,
        I_ARREGION => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_ARREGION,
        I_RVALID => CTRL_BUS3_RVALID,
        I_RREADY => CTRL_BUS3_RREADY,
        I_RDATA => CTRL_BUS3_RDATA,
        I_RID => CTRL_BUS3_RID,
        I_RUSER => CTRL_BUS3_RUSER,
        I_RRESP => CTRL_BUS3_RRESP,
        I_RLAST => CTRL_BUS3_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => CTRL_BUS3_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => CTRL_BUS3_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => CTRL_BUS3_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => CTRL_BUS3_BRESP,
        I_BID => CTRL_BUS3_BID,
        I_BUSER => CTRL_BUS3_BUSER);

    count_U : component solution_count
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => count_address0,
        ce0 => count_ce0,
        we0 => count_we0,
        d0 => count_d0,
        q0 => count_q0);

    P1Buffer_flip_0_U : component solution_P1Buffervdy
    generic map (
        DataWidth => 16,
        AddressRange => 8000,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_blockP1_fu_1276_P1Buffer_0_flip_address0,
        ce0 => grp_blockP1_fu_1276_P1Buffer_0_flip_ce0,
        we0 => grp_blockP1_fu_1276_P1Buffer_0_flip_we0,
        d0 => grp_blockP1_fu_1276_P1Buffer_0_flip_d0,
        q0 => P1Buffer_flip_0_q0);

    P1Buffer_twist_0_U : component solution_P1Buffervdy
    generic map (
        DataWidth => 16,
        AddressRange => 8000,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_blockP1_fu_1276_P1Buffer_0_twist_address0,
        ce0 => grp_blockP1_fu_1276_P1Buffer_0_twist_ce0,
        we0 => grp_blockP1_fu_1276_P1Buffer_0_twist_we0,
        d0 => grp_blockP1_fu_1276_P1Buffer_0_twist_d0,
        q0 => P1Buffer_twist_0_q0);

    P1Buffer_slice_0_U : component solution_P1Buffervdy
    generic map (
        DataWidth => 16,
        AddressRange => 8000,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_blockP1_fu_1276_P1Buffer_0_slice_address0,
        ce0 => grp_blockP1_fu_1276_P1Buffer_0_slice_ce0,
        we0 => grp_blockP1_fu_1276_P1Buffer_0_slice_we0,
        d0 => grp_blockP1_fu_1276_P1Buffer_0_slice_d0,
        q0 => P1Buffer_slice_0_q0);

    P1Buffer_depthPhase1_U : component solution_P1Bufferyd2
    generic map (
        DataWidth => 8,
        AddressRange => 8000,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_blockP1_fu_1276_P1Buffer_0_depthPha_address0,
        ce0 => grp_blockP1_fu_1276_P1Buffer_0_depthPha_ce0,
        we0 => grp_blockP1_fu_1276_P1Buffer_0_depthPha_we0,
        d0 => grp_blockP1_fu_1276_P1Buffer_0_depthPha_d0,
        q0 => P1Buffer_depthPhase1_q0);

    P1Buffer_n_0_U : component solution_P1Bufferyd2
    generic map (
        DataWidth => 8,
        AddressRange => 8000,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_blockP1_fu_1276_P1Buffer_0_n_address0,
        ce0 => grp_blockP1_fu_1276_P1Buffer_0_n_ce0,
        we0 => grp_blockP1_fu_1276_P1Buffer_0_n_we0,
        d0 => grp_blockP1_fu_1276_P1Buffer_0_n_d0,
        q0 => P1Buffer_n_0_q0);

    P1Buffer_0_i_U : component solution_P1BufferAem
    generic map (
        DataWidth => 8,
        AddressRange => 248000,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_blockP1_fu_1276_P1Buffer_0_i_address0,
        ce0 => grp_blockP1_fu_1276_P1Buffer_0_i_ce0,
        we0 => grp_blockP1_fu_1276_P1Buffer_0_i_we0,
        d0 => grp_blockP1_fu_1276_P1Buffer_0_i_d0,
        q0 => P1Buffer_0_i_q0);

    P3Buffer_parity_0_U : component solution_P3BufferBew
    generic map (
        DataWidth => 1,
        AddressRange => 1000,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_blockP1_fu_1276_P3Buffer_0_parity_address0,
        ce0 => grp_blockP1_fu_1276_P3Buffer_0_parity_ce0,
        we0 => grp_blockP1_fu_1276_P3Buffer_0_parity_we0,
        d0 => grp_blockP1_fu_1276_P3Buffer_0_parity_d0,
        q0 => P3Buffer_parity_0_q0);

    P3Buffer_URFtoDLF_0_U : component solution_P3BufferCeG
    generic map (
        DataWidth => 16,
        AddressRange => 1000,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_blockP1_fu_1276_P3Buffer_0_URFtoDLF_address0,
        ce0 => grp_blockP1_fu_1276_P3Buffer_0_URFtoDLF_ce0,
        we0 => grp_blockP1_fu_1276_P3Buffer_0_URFtoDLF_we0,
        d0 => grp_blockP1_fu_1276_P3Buffer_0_URFtoDLF_d0,
        q0 => P3Buffer_URFtoDLF_0_q0);

    P3Buffer_FRtoBR_0_U : component solution_P3BufferCeG
    generic map (
        DataWidth => 16,
        AddressRange => 1000,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_blockP1_fu_1276_P3Buffer_0_FRtoBR_address0,
        ce0 => grp_blockP1_fu_1276_P3Buffer_0_FRtoBR_ce0,
        we0 => grp_blockP1_fu_1276_P3Buffer_0_FRtoBR_we0,
        d0 => grp_blockP1_fu_1276_P3Buffer_0_FRtoBR_d0,
        q0 => P3Buffer_FRtoBR_0_q0);

    P3Buffer_URtoDF_0_U : component solution_P3BufferCeG
    generic map (
        DataWidth => 16,
        AddressRange => 1000,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_blockP1_fu_1276_P3Buffer_0_URtoDF_address0,
        ce0 => grp_blockP1_fu_1276_P3Buffer_0_URtoDF_ce0,
        we0 => grp_blockP1_fu_1276_P3Buffer_0_URtoDF_we0,
        d0 => grp_blockP1_fu_1276_P3Buffer_0_URtoDF_d0,
        q0 => P3Buffer_URtoDF_0_q0);

    P3Buffer_n_0_U : component solution_P3BufferFfa
    generic map (
        DataWidth => 8,
        AddressRange => 1000,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_blockP1_fu_1276_P3Buffer_0_n_address0,
        ce0 => grp_blockP1_fu_1276_P3Buffer_0_n_ce0,
        we0 => grp_blockP1_fu_1276_P3Buffer_0_n_we0,
        d0 => grp_blockP1_fu_1276_P3Buffer_0_n_d0,
        q0 => P3Buffer_n_0_q0);

    P3Buffer_0_i_U : component solution_P3BufferGfk
    generic map (
        DataWidth => 8,
        AddressRange => 31000,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_blockP1_fu_1276_P3Buffer_0_i_address0,
        ce0 => grp_blockP1_fu_1276_P3Buffer_0_i_ce0,
        we0 => grp_blockP1_fu_1276_P3Buffer_0_i_we0,
        d0 => grp_blockP1_fu_1276_P3Buffer_0_i_d0,
        q0 => P3Buffer_0_i_q0,
        address1 => grp_blockP1_fu_1276_P3Buffer_0_i_address1,
        ce1 => grp_blockP1_fu_1276_P3Buffer_0_i_ce1,
        we1 => grp_blockP1_fu_1276_P3Buffer_0_i_we1,
        d1 => grp_blockP1_fu_1276_P3Buffer_0_i_d1,
        q1 => P3Buffer_0_i_q1);

    grp_blockP1_fu_1276 : component blockP1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_blockP1_fu_1276_ap_start,
        ap_done => grp_blockP1_fu_1276_ap_done,
        ap_idle => grp_blockP1_fu_1276_ap_idle,
        ap_ready => grp_blockP1_fu_1276_ap_ready,
        flip => flip_reg_2260,
        twist => twist_reg_2265,
        slice => slice_reg_2270,
        P1Buffer_0_flip_address0 => grp_blockP1_fu_1276_P1Buffer_0_flip_address0,
        P1Buffer_0_flip_ce0 => grp_blockP1_fu_1276_P1Buffer_0_flip_ce0,
        P1Buffer_0_flip_we0 => grp_blockP1_fu_1276_P1Buffer_0_flip_we0,
        P1Buffer_0_flip_d0 => grp_blockP1_fu_1276_P1Buffer_0_flip_d0,
        P1Buffer_0_flip_q0 => P1Buffer_flip_0_q0,
        P1Buffer_0_twist_address0 => grp_blockP1_fu_1276_P1Buffer_0_twist_address0,
        P1Buffer_0_twist_ce0 => grp_blockP1_fu_1276_P1Buffer_0_twist_ce0,
        P1Buffer_0_twist_we0 => grp_blockP1_fu_1276_P1Buffer_0_twist_we0,
        P1Buffer_0_twist_d0 => grp_blockP1_fu_1276_P1Buffer_0_twist_d0,
        P1Buffer_0_twist_q0 => P1Buffer_twist_0_q0,
        P1Buffer_0_slice_address0 => grp_blockP1_fu_1276_P1Buffer_0_slice_address0,
        P1Buffer_0_slice_ce0 => grp_blockP1_fu_1276_P1Buffer_0_slice_ce0,
        P1Buffer_0_slice_we0 => grp_blockP1_fu_1276_P1Buffer_0_slice_we0,
        P1Buffer_0_slice_d0 => grp_blockP1_fu_1276_P1Buffer_0_slice_d0,
        P1Buffer_0_slice_q0 => P1Buffer_slice_0_q0,
        P1Buffer_0_depthPha_address0 => grp_blockP1_fu_1276_P1Buffer_0_depthPha_address0,
        P1Buffer_0_depthPha_ce0 => grp_blockP1_fu_1276_P1Buffer_0_depthPha_ce0,
        P1Buffer_0_depthPha_we0 => grp_blockP1_fu_1276_P1Buffer_0_depthPha_we0,
        P1Buffer_0_depthPha_d0 => grp_blockP1_fu_1276_P1Buffer_0_depthPha_d0,
        P1Buffer_0_depthPha_q0 => P1Buffer_depthPhase1_q0,
        P1Buffer_0_n_address0 => grp_blockP1_fu_1276_P1Buffer_0_n_address0,
        P1Buffer_0_n_ce0 => grp_blockP1_fu_1276_P1Buffer_0_n_ce0,
        P1Buffer_0_n_we0 => grp_blockP1_fu_1276_P1Buffer_0_n_we0,
        P1Buffer_0_n_d0 => grp_blockP1_fu_1276_P1Buffer_0_n_d0,
        P1Buffer_0_n_q0 => P1Buffer_n_0_q0,
        P1Buffer_0_i_address0 => grp_blockP1_fu_1276_P1Buffer_0_i_address0,
        P1Buffer_0_i_ce0 => grp_blockP1_fu_1276_P1Buffer_0_i_ce0,
        P1Buffer_0_i_we0 => grp_blockP1_fu_1276_P1Buffer_0_i_we0,
        P1Buffer_0_i_d0 => grp_blockP1_fu_1276_P1Buffer_0_i_d0,
        P1Buffer_0_i_q0 => P1Buffer_0_i_q0,
        depthPhase1 => depthPhase1_reg_1264,
        maxDepth => maxDepth_read_reg_1997,
        URFtoDLF => URFtoDLF_reg_2275,
        FRtoBR => FRtoBR_reg_2239,
        parity => grp_blockP1_fu_1276_parity,
        URtoUL => URtoUL_reg_2280,
        UBtoDF => UBtoDF_reg_2285,
        P3Buffer_0_parity_address0 => grp_blockP1_fu_1276_P3Buffer_0_parity_address0,
        P3Buffer_0_parity_ce0 => grp_blockP1_fu_1276_P3Buffer_0_parity_ce0,
        P3Buffer_0_parity_we0 => grp_blockP1_fu_1276_P3Buffer_0_parity_we0,
        P3Buffer_0_parity_d0 => grp_blockP1_fu_1276_P3Buffer_0_parity_d0,
        P3Buffer_0_parity_q0 => P3Buffer_parity_0_q0,
        P3Buffer_0_URFtoDLF_address0 => grp_blockP1_fu_1276_P3Buffer_0_URFtoDLF_address0,
        P3Buffer_0_URFtoDLF_ce0 => grp_blockP1_fu_1276_P3Buffer_0_URFtoDLF_ce0,
        P3Buffer_0_URFtoDLF_we0 => grp_blockP1_fu_1276_P3Buffer_0_URFtoDLF_we0,
        P3Buffer_0_URFtoDLF_d0 => grp_blockP1_fu_1276_P3Buffer_0_URFtoDLF_d0,
        P3Buffer_0_URFtoDLF_q0 => P3Buffer_URFtoDLF_0_q0,
        P3Buffer_0_FRtoBR_address0 => grp_blockP1_fu_1276_P3Buffer_0_FRtoBR_address0,
        P3Buffer_0_FRtoBR_ce0 => grp_blockP1_fu_1276_P3Buffer_0_FRtoBR_ce0,
        P3Buffer_0_FRtoBR_we0 => grp_blockP1_fu_1276_P3Buffer_0_FRtoBR_we0,
        P3Buffer_0_FRtoBR_d0 => grp_blockP1_fu_1276_P3Buffer_0_FRtoBR_d0,
        P3Buffer_0_FRtoBR_q0 => P3Buffer_FRtoBR_0_q0,
        P3Buffer_0_URtoDF_address0 => grp_blockP1_fu_1276_P3Buffer_0_URtoDF_address0,
        P3Buffer_0_URtoDF_ce0 => grp_blockP1_fu_1276_P3Buffer_0_URtoDF_ce0,
        P3Buffer_0_URtoDF_we0 => grp_blockP1_fu_1276_P3Buffer_0_URtoDF_we0,
        P3Buffer_0_URtoDF_d0 => grp_blockP1_fu_1276_P3Buffer_0_URtoDF_d0,
        P3Buffer_0_URtoDF_q0 => P3Buffer_URtoDF_0_q0,
        P3Buffer_0_n_address0 => grp_blockP1_fu_1276_P3Buffer_0_n_address0,
        P3Buffer_0_n_ce0 => grp_blockP1_fu_1276_P3Buffer_0_n_ce0,
        P3Buffer_0_n_we0 => grp_blockP1_fu_1276_P3Buffer_0_n_we0,
        P3Buffer_0_n_d0 => grp_blockP1_fu_1276_P3Buffer_0_n_d0,
        P3Buffer_0_n_q0 => P3Buffer_n_0_q0,
        P3Buffer_0_i_address0 => grp_blockP1_fu_1276_P3Buffer_0_i_address0,
        P3Buffer_0_i_ce0 => grp_blockP1_fu_1276_P3Buffer_0_i_ce0,
        P3Buffer_0_i_we0 => grp_blockP1_fu_1276_P3Buffer_0_i_we0,
        P3Buffer_0_i_d0 => grp_blockP1_fu_1276_P3Buffer_0_i_d0,
        P3Buffer_0_i_q0 => P3Buffer_0_i_q0,
        P3Buffer_0_i_address1 => grp_blockP1_fu_1276_P3Buffer_0_i_address1,
        P3Buffer_0_i_ce1 => grp_blockP1_fu_1276_P3Buffer_0_i_ce1,
        P3Buffer_0_i_we1 => grp_blockP1_fu_1276_P3Buffer_0_i_we1,
        P3Buffer_0_i_d1 => grp_blockP1_fu_1276_P3Buffer_0_i_d1,
        P3Buffer_0_i_q1 => P3Buffer_0_i_q1,
        encode_length => grp_blockP1_fu_1276_encode_length,
        encode_length_ap_vld => grp_blockP1_fu_1276_encode_length_ap_vld,
        encode_array_address0 => grp_blockP1_fu_1276_encode_array_address0,
        encode_array_ce0 => grp_blockP1_fu_1276_encode_array_ce0,
        encode_array_we0 => grp_blockP1_fu_1276_encode_array_we0,
        encode_array_d0 => grp_blockP1_fu_1276_encode_array_d0,
        m_axi_twistMove2_AWVALID => grp_blockP1_fu_1276_m_axi_twistMove2_AWVALID,
        m_axi_twistMove2_AWREADY => ap_const_logic_0,
        m_axi_twistMove2_AWADDR => grp_blockP1_fu_1276_m_axi_twistMove2_AWADDR,
        m_axi_twistMove2_AWID => grp_blockP1_fu_1276_m_axi_twistMove2_AWID,
        m_axi_twistMove2_AWLEN => grp_blockP1_fu_1276_m_axi_twistMove2_AWLEN,
        m_axi_twistMove2_AWSIZE => grp_blockP1_fu_1276_m_axi_twistMove2_AWSIZE,
        m_axi_twistMove2_AWBURST => grp_blockP1_fu_1276_m_axi_twistMove2_AWBURST,
        m_axi_twistMove2_AWLOCK => grp_blockP1_fu_1276_m_axi_twistMove2_AWLOCK,
        m_axi_twistMove2_AWCACHE => grp_blockP1_fu_1276_m_axi_twistMove2_AWCACHE,
        m_axi_twistMove2_AWPROT => grp_blockP1_fu_1276_m_axi_twistMove2_AWPROT,
        m_axi_twistMove2_AWQOS => grp_blockP1_fu_1276_m_axi_twistMove2_AWQOS,
        m_axi_twistMove2_AWREGION => grp_blockP1_fu_1276_m_axi_twistMove2_AWREGION,
        m_axi_twistMove2_AWUSER => grp_blockP1_fu_1276_m_axi_twistMove2_AWUSER,
        m_axi_twistMove2_WVALID => grp_blockP1_fu_1276_m_axi_twistMove2_WVALID,
        m_axi_twistMove2_WREADY => ap_const_logic_0,
        m_axi_twistMove2_WDATA => grp_blockP1_fu_1276_m_axi_twistMove2_WDATA,
        m_axi_twistMove2_WSTRB => grp_blockP1_fu_1276_m_axi_twistMove2_WSTRB,
        m_axi_twistMove2_WLAST => grp_blockP1_fu_1276_m_axi_twistMove2_WLAST,
        m_axi_twistMove2_WID => grp_blockP1_fu_1276_m_axi_twistMove2_WID,
        m_axi_twistMove2_WUSER => grp_blockP1_fu_1276_m_axi_twistMove2_WUSER,
        m_axi_twistMove2_ARVALID => grp_blockP1_fu_1276_m_axi_twistMove2_ARVALID,
        m_axi_twistMove2_ARREADY => CTRL_BUS1_ARREADY,
        m_axi_twistMove2_ARADDR => grp_blockP1_fu_1276_m_axi_twistMove2_ARADDR,
        m_axi_twistMove2_ARID => grp_blockP1_fu_1276_m_axi_twistMove2_ARID,
        m_axi_twistMove2_ARLEN => grp_blockP1_fu_1276_m_axi_twistMove2_ARLEN,
        m_axi_twistMove2_ARSIZE => grp_blockP1_fu_1276_m_axi_twistMove2_ARSIZE,
        m_axi_twistMove2_ARBURST => grp_blockP1_fu_1276_m_axi_twistMove2_ARBURST,
        m_axi_twistMove2_ARLOCK => grp_blockP1_fu_1276_m_axi_twistMove2_ARLOCK,
        m_axi_twistMove2_ARCACHE => grp_blockP1_fu_1276_m_axi_twistMove2_ARCACHE,
        m_axi_twistMove2_ARPROT => grp_blockP1_fu_1276_m_axi_twistMove2_ARPROT,
        m_axi_twistMove2_ARQOS => grp_blockP1_fu_1276_m_axi_twistMove2_ARQOS,
        m_axi_twistMove2_ARREGION => grp_blockP1_fu_1276_m_axi_twistMove2_ARREGION,
        m_axi_twistMove2_ARUSER => grp_blockP1_fu_1276_m_axi_twistMove2_ARUSER,
        m_axi_twistMove2_RVALID => CTRL_BUS1_RVALID,
        m_axi_twistMove2_RREADY => grp_blockP1_fu_1276_m_axi_twistMove2_RREADY,
        m_axi_twistMove2_RDATA => CTRL_BUS1_RDATA,
        m_axi_twistMove2_RLAST => CTRL_BUS1_RLAST,
        m_axi_twistMove2_RID => CTRL_BUS1_RID,
        m_axi_twistMove2_RUSER => CTRL_BUS1_RUSER,
        m_axi_twistMove2_RRESP => CTRL_BUS1_RRESP,
        m_axi_twistMove2_BVALID => ap_const_logic_0,
        m_axi_twistMove2_BREADY => grp_blockP1_fu_1276_m_axi_twistMove2_BREADY,
        m_axi_twistMove2_BRESP => ap_const_lv2_0,
        m_axi_twistMove2_BID => ap_const_lv1_0,
        m_axi_twistMove2_BUSER => ap_const_lv1_0,
        twistMove2_offset => twistMove_reg_2057,
        m_axi_flipMove2_AWVALID => grp_blockP1_fu_1276_m_axi_flipMove2_AWVALID,
        m_axi_flipMove2_AWREADY => ap_const_logic_0,
        m_axi_flipMove2_AWADDR => grp_blockP1_fu_1276_m_axi_flipMove2_AWADDR,
        m_axi_flipMove2_AWID => grp_blockP1_fu_1276_m_axi_flipMove2_AWID,
        m_axi_flipMove2_AWLEN => grp_blockP1_fu_1276_m_axi_flipMove2_AWLEN,
        m_axi_flipMove2_AWSIZE => grp_blockP1_fu_1276_m_axi_flipMove2_AWSIZE,
        m_axi_flipMove2_AWBURST => grp_blockP1_fu_1276_m_axi_flipMove2_AWBURST,
        m_axi_flipMove2_AWLOCK => grp_blockP1_fu_1276_m_axi_flipMove2_AWLOCK,
        m_axi_flipMove2_AWCACHE => grp_blockP1_fu_1276_m_axi_flipMove2_AWCACHE,
        m_axi_flipMove2_AWPROT => grp_blockP1_fu_1276_m_axi_flipMove2_AWPROT,
        m_axi_flipMove2_AWQOS => grp_blockP1_fu_1276_m_axi_flipMove2_AWQOS,
        m_axi_flipMove2_AWREGION => grp_blockP1_fu_1276_m_axi_flipMove2_AWREGION,
        m_axi_flipMove2_AWUSER => grp_blockP1_fu_1276_m_axi_flipMove2_AWUSER,
        m_axi_flipMove2_WVALID => grp_blockP1_fu_1276_m_axi_flipMove2_WVALID,
        m_axi_flipMove2_WREADY => ap_const_logic_0,
        m_axi_flipMove2_WDATA => grp_blockP1_fu_1276_m_axi_flipMove2_WDATA,
        m_axi_flipMove2_WSTRB => grp_blockP1_fu_1276_m_axi_flipMove2_WSTRB,
        m_axi_flipMove2_WLAST => grp_blockP1_fu_1276_m_axi_flipMove2_WLAST,
        m_axi_flipMove2_WID => grp_blockP1_fu_1276_m_axi_flipMove2_WID,
        m_axi_flipMove2_WUSER => grp_blockP1_fu_1276_m_axi_flipMove2_WUSER,
        m_axi_flipMove2_ARVALID => grp_blockP1_fu_1276_m_axi_flipMove2_ARVALID,
        m_axi_flipMove2_ARREADY => CTRL_BUS2_ARREADY,
        m_axi_flipMove2_ARADDR => grp_blockP1_fu_1276_m_axi_flipMove2_ARADDR,
        m_axi_flipMove2_ARID => grp_blockP1_fu_1276_m_axi_flipMove2_ARID,
        m_axi_flipMove2_ARLEN => grp_blockP1_fu_1276_m_axi_flipMove2_ARLEN,
        m_axi_flipMove2_ARSIZE => grp_blockP1_fu_1276_m_axi_flipMove2_ARSIZE,
        m_axi_flipMove2_ARBURST => grp_blockP1_fu_1276_m_axi_flipMove2_ARBURST,
        m_axi_flipMove2_ARLOCK => grp_blockP1_fu_1276_m_axi_flipMove2_ARLOCK,
        m_axi_flipMove2_ARCACHE => grp_blockP1_fu_1276_m_axi_flipMove2_ARCACHE,
        m_axi_flipMove2_ARPROT => grp_blockP1_fu_1276_m_axi_flipMove2_ARPROT,
        m_axi_flipMove2_ARQOS => grp_blockP1_fu_1276_m_axi_flipMove2_ARQOS,
        m_axi_flipMove2_ARREGION => grp_blockP1_fu_1276_m_axi_flipMove2_ARREGION,
        m_axi_flipMove2_ARUSER => grp_blockP1_fu_1276_m_axi_flipMove2_ARUSER,
        m_axi_flipMove2_RVALID => CTRL_BUS2_RVALID,
        m_axi_flipMove2_RREADY => grp_blockP1_fu_1276_m_axi_flipMove2_RREADY,
        m_axi_flipMove2_RDATA => CTRL_BUS2_RDATA,
        m_axi_flipMove2_RLAST => CTRL_BUS2_RLAST,
        m_axi_flipMove2_RID => CTRL_BUS2_RID,
        m_axi_flipMove2_RUSER => CTRL_BUS2_RUSER,
        m_axi_flipMove2_RRESP => CTRL_BUS2_RRESP,
        m_axi_flipMove2_BVALID => ap_const_logic_0,
        m_axi_flipMove2_BREADY => grp_blockP1_fu_1276_m_axi_flipMove2_BREADY,
        m_axi_flipMove2_BRESP => ap_const_lv2_0,
        m_axi_flipMove2_BID => ap_const_lv1_0,
        m_axi_flipMove2_BUSER => ap_const_lv1_0,
        flipMove2_offset => flipMove_reg_2052,
        m_axi_FRtoBR_Move2_AWVALID => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_AWVALID,
        m_axi_FRtoBR_Move2_AWREADY => ap_const_logic_0,
        m_axi_FRtoBR_Move2_AWADDR => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_AWADDR,
        m_axi_FRtoBR_Move2_AWID => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_AWID,
        m_axi_FRtoBR_Move2_AWLEN => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_AWLEN,
        m_axi_FRtoBR_Move2_AWSIZE => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_AWSIZE,
        m_axi_FRtoBR_Move2_AWBURST => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_AWBURST,
        m_axi_FRtoBR_Move2_AWLOCK => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_AWLOCK,
        m_axi_FRtoBR_Move2_AWCACHE => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_AWCACHE,
        m_axi_FRtoBR_Move2_AWPROT => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_AWPROT,
        m_axi_FRtoBR_Move2_AWQOS => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_AWQOS,
        m_axi_FRtoBR_Move2_AWREGION => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_AWREGION,
        m_axi_FRtoBR_Move2_AWUSER => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_AWUSER,
        m_axi_FRtoBR_Move2_WVALID => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_WVALID,
        m_axi_FRtoBR_Move2_WREADY => ap_const_logic_0,
        m_axi_FRtoBR_Move2_WDATA => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_WDATA,
        m_axi_FRtoBR_Move2_WSTRB => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_WSTRB,
        m_axi_FRtoBR_Move2_WLAST => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_WLAST,
        m_axi_FRtoBR_Move2_WID => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_WID,
        m_axi_FRtoBR_Move2_WUSER => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_WUSER,
        m_axi_FRtoBR_Move2_ARVALID => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_ARVALID,
        m_axi_FRtoBR_Move2_ARREADY => CTRL_BUS3_ARREADY,
        m_axi_FRtoBR_Move2_ARADDR => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_ARADDR,
        m_axi_FRtoBR_Move2_ARID => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_ARID,
        m_axi_FRtoBR_Move2_ARLEN => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_ARLEN,
        m_axi_FRtoBR_Move2_ARSIZE => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_ARSIZE,
        m_axi_FRtoBR_Move2_ARBURST => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_ARBURST,
        m_axi_FRtoBR_Move2_ARLOCK => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_ARLOCK,
        m_axi_FRtoBR_Move2_ARCACHE => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_ARCACHE,
        m_axi_FRtoBR_Move2_ARPROT => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_ARPROT,
        m_axi_FRtoBR_Move2_ARQOS => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_ARQOS,
        m_axi_FRtoBR_Move2_ARREGION => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_ARREGION,
        m_axi_FRtoBR_Move2_ARUSER => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_ARUSER,
        m_axi_FRtoBR_Move2_RVALID => CTRL_BUS3_RVALID,
        m_axi_FRtoBR_Move2_RREADY => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_RREADY,
        m_axi_FRtoBR_Move2_RDATA => CTRL_BUS3_RDATA,
        m_axi_FRtoBR_Move2_RLAST => CTRL_BUS3_RLAST,
        m_axi_FRtoBR_Move2_RID => CTRL_BUS3_RID,
        m_axi_FRtoBR_Move2_RUSER => CTRL_BUS3_RUSER,
        m_axi_FRtoBR_Move2_RRESP => CTRL_BUS3_RRESP,
        m_axi_FRtoBR_Move2_BVALID => ap_const_logic_0,
        m_axi_FRtoBR_Move2_BREADY => grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_BREADY,
        m_axi_FRtoBR_Move2_BRESP => ap_const_lv2_0,
        m_axi_FRtoBR_Move2_BID => ap_const_lv1_0,
        m_axi_FRtoBR_Move2_BUSER => ap_const_lv1_0,
        FRtoBR_Move2_offset => FRtoBR_Move_reg_2047,
        Slice_Twist_Prun2_offset => Slice_Twist_Prun_reg_2007,
        Slice_Flip_Prun2_offset => Slice_Flip_Prun_reg_2002,
        URFtoDLF_Move2_offset => URFtoDLF_Move_reg_2042,
        URtoDF_Move2_offset => URtoDF_Move_reg_2037,
        URtoUL_Move2_offset => URtoUL_Move_reg_2032,
        UBtoDF_Move2_offset => UBtoDF_Move_reg_2027,
        MergeURtoULandUBtoDF2_offset => MergeURtoULandUBtoDF_reg_2022,
        Slice_URFtoDLF_Parity_Prun2_offset => Slice_URFtoDLF_Parit_reg_2017,
        Slice_URtoDF_Parity_Prun2_offset => Slice_URtoDF_Parity_s_reg_2012,
        a_i => a,
        a_o => grp_blockP1_fu_1276_a_o,
        a_o_ap_vld => grp_blockP1_fu_1276_a_o_ap_vld);

    grp_get_coordcube_fu_1441 : component get_coordcube
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_get_coordcube_fu_1441_ap_start,
        ap_done => grp_get_coordcube_fu_1441_ap_done,
        ap_idle => grp_get_coordcube_fu_1441_ap_idle,
        ap_ready => grp_get_coordcube_fu_1441_ap_ready,
        cubiecube_0_cp_address0 => grp_get_coordcube_fu_1441_cubiecube_0_cp_address0,
        cubiecube_0_cp_ce0 => grp_get_coordcube_fu_1441_cubiecube_0_cp_ce0,
        cubiecube_0_cp_q0 => ccRet_cp_0_q0,
        cubiecube_0_co_address0 => grp_get_coordcube_fu_1441_cubiecube_0_co_address0,
        cubiecube_0_co_ce0 => grp_get_coordcube_fu_1441_cubiecube_0_co_ce0,
        cubiecube_0_co_q0 => ccRet_co_0_q0,
        cubiecube_0_ep_address0 => grp_get_coordcube_fu_1441_cubiecube_0_ep_address0,
        cubiecube_0_ep_ce0 => grp_get_coordcube_fu_1441_cubiecube_0_ep_ce0,
        cubiecube_0_ep_q0 => ccRet_ep_0_q0,
        cubiecube_0_eo_address0 => grp_get_coordcube_fu_1441_cubiecube_0_eo_address0,
        cubiecube_0_eo_ce0 => grp_get_coordcube_fu_1441_cubiecube_0_eo_ce0,
        cubiecube_0_eo_q0 => ccRet_eo_0_q0,
        result_twist_0 => grp_get_coordcube_fu_1441_result_twist_0,
        result_twist_0_ap_vld => grp_get_coordcube_fu_1441_result_twist_0_ap_vld,
        result_flip_0 => grp_get_coordcube_fu_1441_result_flip_0,
        result_flip_0_ap_vld => grp_get_coordcube_fu_1441_result_flip_0_ap_vld,
        result_parity_0 => grp_get_coordcube_fu_1441_result_parity_0,
        result_parity_0_ap_vld => grp_get_coordcube_fu_1441_result_parity_0_ap_vld,
        result_FRtoBR_0 => grp_get_coordcube_fu_1441_result_FRtoBR_0,
        result_FRtoBR_0_ap_vld => grp_get_coordcube_fu_1441_result_FRtoBR_0_ap_vld,
        result_URFtoDLF_0 => grp_get_coordcube_fu_1441_result_URFtoDLF_0,
        result_URFtoDLF_0_ap_vld => grp_get_coordcube_fu_1441_result_URFtoDLF_0_ap_vld,
        result_URtoUL_0 => grp_get_coordcube_fu_1441_result_URtoUL_0,
        result_URtoUL_0_ap_vld => grp_get_coordcube_fu_1441_result_URtoUL_0_ap_vld,
        result_UBtoDF_0 => grp_get_coordcube_fu_1441_result_UBtoDF_0,
        result_UBtoDF_0_ap_vld => grp_get_coordcube_fu_1441_result_UBtoDF_0_ap_vld);

    grp_toCubieCube_fu_1467 : component toCubieCube
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_toCubieCube_fu_1467_ap_start,
        ap_done => grp_toCubieCube_fu_1467_ap_done,
        ap_idle => grp_toCubieCube_fu_1467_ap_idle,
        ap_ready => grp_toCubieCube_fu_1467_ap_ready,
        facecube_0_f_address0 => grp_toCubieCube_fu_1467_facecube_0_f_address0,
        facecube_0_f_ce0 => grp_toCubieCube_fu_1467_facecube_0_f_ce0,
        facecube_0_f_q0 => res_f_0_q0,
        facecube_0_f_address1 => grp_toCubieCube_fu_1467_facecube_0_f_address1,
        facecube_0_f_ce1 => grp_toCubieCube_fu_1467_facecube_0_f_ce1,
        facecube_0_f_q1 => res_f_0_q1,
        ccRet_cp_0_address0 => grp_toCubieCube_fu_1467_ccRet_cp_0_address0,
        ccRet_cp_0_ce0 => grp_toCubieCube_fu_1467_ccRet_cp_0_ce0,
        ccRet_cp_0_we0 => grp_toCubieCube_fu_1467_ccRet_cp_0_we0,
        ccRet_cp_0_d0 => grp_toCubieCube_fu_1467_ccRet_cp_0_d0,
        ccRet_ep_0_address0 => grp_toCubieCube_fu_1467_ccRet_ep_0_address0,
        ccRet_ep_0_ce0 => grp_toCubieCube_fu_1467_ccRet_ep_0_ce0,
        ccRet_ep_0_we0 => grp_toCubieCube_fu_1467_ccRet_ep_0_we0,
        ccRet_ep_0_d0 => grp_toCubieCube_fu_1467_ccRet_ep_0_d0,
        ccRet_co_0_address0 => grp_toCubieCube_fu_1467_ccRet_co_0_address0,
        ccRet_co_0_ce0 => grp_toCubieCube_fu_1467_ccRet_co_0_ce0,
        ccRet_co_0_we0 => grp_toCubieCube_fu_1467_ccRet_co_0_we0,
        ccRet_co_0_d0 => grp_toCubieCube_fu_1467_ccRet_co_0_d0,
        ccRet_eo_0_address0 => grp_toCubieCube_fu_1467_ccRet_eo_0_address0,
        ccRet_eo_0_ce0 => grp_toCubieCube_fu_1467_ccRet_eo_0_ce0,
        ccRet_eo_0_we0 => grp_toCubieCube_fu_1467_ccRet_eo_0_we0,
        ccRet_eo_0_d0 => grp_toCubieCube_fu_1467_ccRet_eo_0_d0);

    grp_verify_fu_1495 : component verify
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_verify_fu_1495_ap_start,
        ap_done => grp_verify_fu_1495_ap_done,
        ap_idle => grp_verify_fu_1495_ap_idle,
        ap_ready => grp_verify_fu_1495_ap_ready,
        cubiecube_0_cp_address0 => grp_verify_fu_1495_cubiecube_0_cp_address0,
        cubiecube_0_cp_ce0 => grp_verify_fu_1495_cubiecube_0_cp_ce0,
        cubiecube_0_cp_q0 => ccRet_cp_0_q0,
        cubiecube_0_co_address0 => grp_verify_fu_1495_cubiecube_0_co_address0,
        cubiecube_0_co_ce0 => grp_verify_fu_1495_cubiecube_0_co_ce0,
        cubiecube_0_co_q0 => ccRet_co_0_q0,
        cubiecube_0_ep_address0 => grp_verify_fu_1495_cubiecube_0_ep_address0,
        cubiecube_0_ep_ce0 => grp_verify_fu_1495_cubiecube_0_ep_ce0,
        cubiecube_0_ep_q0 => ccRet_ep_0_q0,
        cubiecube_0_eo_address0 => grp_verify_fu_1495_cubiecube_0_eo_address0,
        cubiecube_0_eo_ce0 => grp_verify_fu_1495_cubiecube_0_eo_ce0,
        cubiecube_0_eo_q0 => ccRet_eo_0_q0,
        ap_return => grp_verify_fu_1495_ap_return);

    grp_get_facecube_fromstr_fu_1507 : component get_facecube_fromstr
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_get_facecube_fromstr_fu_1507_ap_start,
        ap_done => grp_get_facecube_fromstr_fu_1507_ap_done,
        ap_idle => grp_get_facecube_fromstr_fu_1507_ap_idle,
        ap_ready => grp_get_facecube_fromstr_fu_1507_ap_ready,
        cubeString_address0 => grp_get_facecube_fromstr_fu_1507_cubeString_address0,
        cubeString_ce0 => grp_get_facecube_fromstr_fu_1507_cubeString_ce0,
        cubeString_q0 => facelets_q0,
        res_f_0_address0 => grp_get_facecube_fromstr_fu_1507_res_f_0_address0,
        res_f_0_ce0 => grp_get_facecube_fromstr_fu_1507_res_f_0_ce0,
        res_f_0_we0 => grp_get_facecube_fromstr_fu_1507_res_f_0_we0,
        res_f_0_d0 => grp_get_facecube_fromstr_fu_1507_res_f_0_d0);

    solution_mul_mul_rcU_U378 : component solution_mul_mul_rcU
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 16,
        dout_WIDTH => 34)
    port map (
        din0 => mul_fu_1989_p0,
        din1 => result_FRtoBR_0,
        dout => mul_fu_1989_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_blockP1_fu_1276_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_blockP1_fu_1276_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                    grp_blockP1_fu_1276_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_blockP1_fu_1276_ap_ready = ap_const_logic_1)) then 
                    grp_blockP1_fu_1276_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_get_coordcube_fu_1441_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_get_coordcube_fu_1441_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                    grp_get_coordcube_fu_1441_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_get_coordcube_fu_1441_ap_ready = ap_const_logic_1)) then 
                    grp_get_coordcube_fu_1441_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_get_facecube_fromstr_fu_1507_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_get_facecube_fromstr_fu_1507_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_71_fu_1832_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                    grp_get_facecube_fromstr_fu_1507_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_get_facecube_fromstr_fu_1507_ap_ready = ap_const_logic_1)) then 
                    grp_get_facecube_fromstr_fu_1507_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_toCubieCube_fu_1467_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_toCubieCube_fu_1467_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    grp_toCubieCube_fu_1467_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_toCubieCube_fu_1467_ap_ready = ap_const_logic_1)) then 
                    grp_toCubieCube_fu_1467_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_verify_fu_1495_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_verify_fu_1495_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                    grp_verify_fu_1495_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_verify_fu_1495_ap_ready = ap_const_logic_1)) then 
                    grp_verify_fu_1495_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    a_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_87_fu_1961_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                a <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state29) and (grp_blockP1_fu_1276_a_o_ap_vld = ap_const_logic_1))) then 
                a <= grp_blockP1_fu_1276_a_o;
            end if; 
        end if;
    end process;

    complete_reg_1230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_48_fu_1663_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                complete_reg_1230 <= ap_const_lv1_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                complete_reg_1230 <= complete_1_fu_1809_p2;
            end if; 
        end if;
    end process;

    depthPhase1_reg_1264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_87_reg_2295 = ap_const_lv1_1) and (tmp_83_reg_2235 = ap_const_lv1_1) and (tmp_88_fu_1977_p2 = ap_const_lv1_0) and (complete_reg_1230 = ap_const_lv1_0) and (tmp_71_reg_2218 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                depthPhase1_reg_1264 <= depthPhase1_1_fu_1983_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                depthPhase1_reg_1264 <= ap_const_lv5_1;
            end if; 
        end if;
    end process;

    i_1_reg_1242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_complete_phi_fu_1234_p4 = ap_const_lv1_0) and (exitcond1_fu_1669_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_1_reg_1242 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_1_reg_1242 <= i_12_reg_2208;
            end if; 
        end if;
    end process;

    i_2_reg_1253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_1815_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                i_2_reg_1253 <= ap_const_lv3_0;
            elsif (((tmp_82_fu_1849_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                i_2_reg_1253 <= i_5_reg_2222;
            end if; 
        end if;
    end process;

    i_reg_1219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_48_fu_1663_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_1219 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_reg_1219 <= i_11_reg_2073;
            end if; 
        end if;
    end process;

    invdar_reg_1208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_48_fu_1663_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                invdar_reg_1208 <= indvarinc_fu_1652_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                invdar_reg_1208 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                FRtoBR_Move_reg_2047 <= FRtoBR_Move2(31 downto 1);
                MergeURtoULandUBtoDF_reg_2022 <= MergeURtoULandUBtoDF2(31 downto 1);
                Slice_Flip_Prun_reg_2002 <= Slice_Flip_Prun2(31 downto 1);
                Slice_Twist_Prun_reg_2007 <= Slice_Twist_Prun2(31 downto 1);
                Slice_URFtoDLF_Parit_reg_2017 <= Slice_URFtoDLF_Parity_Prun2(31 downto 1);
                Slice_URtoDF_Parity_s_reg_2012 <= Slice_URtoDF_Parity_Prun2(31 downto 1);
                UBtoDF_Move_reg_2027 <= UBtoDF_Move2(31 downto 1);
                URFtoDLF_Move_reg_2042 <= URFtoDLF_Move2(31 downto 1);
                URtoDF_Move_reg_2037 <= URtoDF_Move2(31 downto 1);
                URtoUL_Move_reg_2032 <= URtoUL_Move2(31 downto 1);
                flipMove_reg_2052 <= flipMove2(31 downto 1);
                maxDepth_read_reg_1997 <= maxDepth;
                twistMove_reg_2057 <= twistMove2(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                FRtoBR_reg_2239 <= result_FRtoBR_0;
                tmp_89_reg_2244 <= tmp_89_fu_1869_p1;
                tmp_90_reg_2249 <= tmp_90_fu_1872_p1(15 downto 15);
                tmp_93_reg_2255 <= mul_fu_1989_p2(33 downto 21);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                UBtoDF_reg_2285 <= result_UBtoDF_0;
                URFtoDLF_reg_2275 <= result_URFtoDLF_0;
                URtoUL_reg_2280 <= result_URtoUL_0;
                flip_reg_2260 <= result_flip_0;
                slice_reg_2270 <= slice_fu_1936_p3;
                tmp_86_reg_2290 <= tmp_86_fu_1955_p2;
                twist_reg_2265 <= result_twist_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_11_reg_2073 <= i_11_fu_1675_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                i_12_reg_2208 <= i_12_fu_1821_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                i_5_reg_2222 <= i_5_fu_1838_p2;
                tmp_71_reg_2218 <= tmp_71_fu_1832_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_1527 <= facelets_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (grp_get_coordcube_fu_1441_result_FRtoBR_0_ap_vld = ap_const_logic_1))) then
                result_FRtoBR_0 <= grp_get_coordcube_fu_1441_result_FRtoBR_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (grp_get_coordcube_fu_1441_result_UBtoDF_0_ap_vld = ap_const_logic_1))) then
                result_UBtoDF_0 <= grp_get_coordcube_fu_1441_result_UBtoDF_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (grp_get_coordcube_fu_1441_result_URFtoDLF_0_ap_vld = ap_const_logic_1))) then
                result_URFtoDLF_0 <= grp_get_coordcube_fu_1441_result_URFtoDLF_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (grp_get_coordcube_fu_1441_result_URtoUL_0_ap_vld = ap_const_logic_1))) then
                result_URtoUL_0 <= grp_get_coordcube_fu_1441_result_URtoUL_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (grp_get_coordcube_fu_1441_result_flip_0_ap_vld = ap_const_logic_1))) then
                result_flip_0 <= grp_get_coordcube_fu_1441_result_flip_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (grp_get_coordcube_fu_1441_result_parity_0_ap_vld = ap_const_logic_1))) then
                result_parity_0 <= grp_get_coordcube_fu_1441_result_parity_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (grp_get_coordcube_fu_1441_result_twist_0_ap_vld = ap_const_logic_1))) then
                result_twist_0 <= grp_get_coordcube_fu_1441_result_twist_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp8_reg_2165 <= tmp8_fu_1753_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1669_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_49_reg_2078 <= tmp_49_fu_1681_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_53_reg_2130 <= grp_fu_1515_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_56_reg_2140 <= grp_fu_1515_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_59_reg_2150 <= grp_fu_1515_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_65_reg_2170 <= grp_fu_1515_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_69_reg_2180 <= grp_fu_1515_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_79_reg_2190 <= grp_fu_1515_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_verify_fu_1495_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                tmp_83_reg_2235 <= tmp_83_fu_1855_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                tmp_87_reg_2295 <= tmp_87_fu_1961_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond1_fu_1669_p2, ap_phi_mux_complete_phi_fu_1234_p4, ap_CS_fsm_state13, exitcond_fu_1815_p2, tmp_71_fu_1832_p2, tmp_71_reg_2218, ap_CS_fsm_state16, tmp_83_fu_1855_p2, tmp_83_reg_2235, ap_CS_fsm_state22, grp_verify_fu_1495_ap_done, tmp_87_fu_1961_p2, tmp_87_reg_2295, ap_CS_fsm_state27, ap_CS_fsm_state30, complete_reg_1230, tmp_88_fu_1977_p2, grp_blockP1_fu_1276_ap_done, grp_get_coordcube_fu_1441_ap_done, grp_toCubieCube_fu_1467_ap_done, grp_get_facecube_fromstr_fu_1507_ap_done, tmp_48_fu_1663_p2, ap_CS_fsm_state17, tmp_82_fu_1849_p2, ap_CS_fsm_state29, ap_CS_fsm_state24, ap_CS_fsm_state20, ap_CS_fsm_state18)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_48_fu_1663_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_phi_mux_complete_phi_fu_1234_p4 = ap_const_lv1_0) and (exitcond1_fu_1669_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                elsif (((ap_phi_mux_complete_phi_fu_1234_p4 = ap_const_lv1_1) and (exitcond1_fu_1669_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state13 => 
                if (((exitcond_fu_1815_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state16 => 
                if (((tmp_71_fu_1832_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                if (((tmp_82_fu_1849_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (grp_get_facecube_fromstr_fu_1507_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (grp_toCubieCube_fu_1467_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((grp_verify_fu_1495_ap_done = ap_const_logic_1) and (tmp_83_fu_1855_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                elsif (((grp_verify_fu_1495_ap_done = ap_const_logic_1) and (tmp_83_fu_1855_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (grp_get_coordcube_fu_1441_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((tmp_87_fu_1961_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if (((grp_blockP1_fu_1276_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and ((tmp_88_fu_1977_p2 = ap_const_lv1_1) or (complete_reg_1230 = ap_const_lv1_1) or (tmp_71_reg_2218 = ap_const_lv1_1) or (tmp_87_reg_2295 = ap_const_lv1_0) or (tmp_83_reg_2235 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    CTRL_BUS1_ARVALID_assign_proc : process(grp_blockP1_fu_1276_m_axi_twistMove2_ARVALID, ap_CS_fsm_state28, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            CTRL_BUS1_ARVALID <= grp_blockP1_fu_1276_m_axi_twistMove2_ARVALID;
        else 
            CTRL_BUS1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    CTRL_BUS1_RREADY_assign_proc : process(grp_blockP1_fu_1276_m_axi_twistMove2_RREADY, ap_CS_fsm_state28, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            CTRL_BUS1_RREADY <= grp_blockP1_fu_1276_m_axi_twistMove2_RREADY;
        else 
            CTRL_BUS1_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    CTRL_BUS2_ARVALID_assign_proc : process(grp_blockP1_fu_1276_m_axi_flipMove2_ARVALID, ap_CS_fsm_state28, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            CTRL_BUS2_ARVALID <= grp_blockP1_fu_1276_m_axi_flipMove2_ARVALID;
        else 
            CTRL_BUS2_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    CTRL_BUS2_RREADY_assign_proc : process(grp_blockP1_fu_1276_m_axi_flipMove2_RREADY, ap_CS_fsm_state28, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            CTRL_BUS2_RREADY <= grp_blockP1_fu_1276_m_axi_flipMove2_RREADY;
        else 
            CTRL_BUS2_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    CTRL_BUS3_ARVALID_assign_proc : process(grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_ARVALID, ap_CS_fsm_state28, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            CTRL_BUS3_ARVALID <= grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_ARVALID;
        else 
            CTRL_BUS3_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    CTRL_BUS3_RREADY_assign_proc : process(grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_RREADY, ap_CS_fsm_state28, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            CTRL_BUS3_RREADY <= grp_blockP1_fu_1276_m_axi_FRtoBR_Move2_RREADY;
        else 
            CTRL_BUS3_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(tmp_71_reg_2218, tmp_83_reg_2235, tmp_87_reg_2295, ap_CS_fsm_state30, complete_reg_1230, tmp_88_fu_1977_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) and ((tmp_88_fu_1977_p2 = ap_const_lv1_1) or (complete_reg_1230 = ap_const_lv1_1) or (tmp_71_reg_2218 = ap_const_lv1_1) or (tmp_87_reg_2295 = ap_const_lv1_0) or (tmp_83_reg_2235 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_complete_phi_fu_1234_p4 <= complete_reg_1230;

    ap_ready_assign_proc : process(tmp_71_reg_2218, tmp_83_reg_2235, tmp_87_reg_2295, ap_CS_fsm_state30, complete_reg_1230, tmp_88_fu_1977_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) and ((tmp_88_fu_1977_p2 = ap_const_lv1_1) or (complete_reg_1230 = ap_const_lv1_1) or (tmp_71_reg_2218 = ap_const_lv1_1) or (tmp_87_reg_2295 = ap_const_lv1_0) or (tmp_83_reg_2235 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ccRet_co_0_address0_assign_proc : process(ap_CS_fsm_state22, grp_get_coordcube_fu_1441_cubiecube_0_co_address0, grp_toCubieCube_fu_1467_ccRet_co_0_address0, grp_verify_fu_1495_cubiecube_0_co_address0, ap_CS_fsm_state24, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ccRet_co_0_address0 <= grp_verify_fu_1495_cubiecube_0_co_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ccRet_co_0_address0 <= grp_toCubieCube_fu_1467_ccRet_co_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            ccRet_co_0_address0 <= grp_get_coordcube_fu_1441_cubiecube_0_co_address0;
        else 
            ccRet_co_0_address0 <= "XXX";
        end if; 
    end process;


    ccRet_co_0_ce0_assign_proc : process(ap_CS_fsm_state22, grp_get_coordcube_fu_1441_cubiecube_0_co_ce0, grp_toCubieCube_fu_1467_ccRet_co_0_ce0, grp_verify_fu_1495_cubiecube_0_co_ce0, ap_CS_fsm_state24, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ccRet_co_0_ce0 <= grp_verify_fu_1495_cubiecube_0_co_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ccRet_co_0_ce0 <= grp_toCubieCube_fu_1467_ccRet_co_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            ccRet_co_0_ce0 <= grp_get_coordcube_fu_1441_cubiecube_0_co_ce0;
        else 
            ccRet_co_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ccRet_co_0_we0_assign_proc : process(grp_toCubieCube_fu_1467_ccRet_co_0_we0, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ccRet_co_0_we0 <= grp_toCubieCube_fu_1467_ccRet_co_0_we0;
        else 
            ccRet_co_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ccRet_cp_0_address0_assign_proc : process(ap_CS_fsm_state22, grp_get_coordcube_fu_1441_cubiecube_0_cp_address0, grp_toCubieCube_fu_1467_ccRet_cp_0_address0, grp_verify_fu_1495_cubiecube_0_cp_address0, ap_CS_fsm_state24, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ccRet_cp_0_address0 <= grp_verify_fu_1495_cubiecube_0_cp_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ccRet_cp_0_address0 <= grp_toCubieCube_fu_1467_ccRet_cp_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            ccRet_cp_0_address0 <= grp_get_coordcube_fu_1441_cubiecube_0_cp_address0;
        else 
            ccRet_cp_0_address0 <= "XXX";
        end if; 
    end process;


    ccRet_cp_0_ce0_assign_proc : process(ap_CS_fsm_state22, grp_get_coordcube_fu_1441_cubiecube_0_cp_ce0, grp_toCubieCube_fu_1467_ccRet_cp_0_ce0, grp_verify_fu_1495_cubiecube_0_cp_ce0, ap_CS_fsm_state24, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ccRet_cp_0_ce0 <= grp_verify_fu_1495_cubiecube_0_cp_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ccRet_cp_0_ce0 <= grp_toCubieCube_fu_1467_ccRet_cp_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            ccRet_cp_0_ce0 <= grp_get_coordcube_fu_1441_cubiecube_0_cp_ce0;
        else 
            ccRet_cp_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ccRet_cp_0_we0_assign_proc : process(grp_toCubieCube_fu_1467_ccRet_cp_0_we0, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ccRet_cp_0_we0 <= grp_toCubieCube_fu_1467_ccRet_cp_0_we0;
        else 
            ccRet_cp_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ccRet_eo_0_address0_assign_proc : process(ap_CS_fsm_state22, grp_get_coordcube_fu_1441_cubiecube_0_eo_address0, grp_toCubieCube_fu_1467_ccRet_eo_0_address0, grp_verify_fu_1495_cubiecube_0_eo_address0, ap_CS_fsm_state24, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ccRet_eo_0_address0 <= grp_verify_fu_1495_cubiecube_0_eo_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ccRet_eo_0_address0 <= grp_toCubieCube_fu_1467_ccRet_eo_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            ccRet_eo_0_address0 <= grp_get_coordcube_fu_1441_cubiecube_0_eo_address0;
        else 
            ccRet_eo_0_address0 <= "XXXX";
        end if; 
    end process;


    ccRet_eo_0_ce0_assign_proc : process(ap_CS_fsm_state22, grp_get_coordcube_fu_1441_cubiecube_0_eo_ce0, grp_toCubieCube_fu_1467_ccRet_eo_0_ce0, grp_verify_fu_1495_cubiecube_0_eo_ce0, ap_CS_fsm_state24, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ccRet_eo_0_ce0 <= grp_verify_fu_1495_cubiecube_0_eo_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ccRet_eo_0_ce0 <= grp_toCubieCube_fu_1467_ccRet_eo_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            ccRet_eo_0_ce0 <= grp_get_coordcube_fu_1441_cubiecube_0_eo_ce0;
        else 
            ccRet_eo_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ccRet_eo_0_we0_assign_proc : process(grp_toCubieCube_fu_1467_ccRet_eo_0_we0, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ccRet_eo_0_we0 <= grp_toCubieCube_fu_1467_ccRet_eo_0_we0;
        else 
            ccRet_eo_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ccRet_ep_0_address0_assign_proc : process(ap_CS_fsm_state22, grp_get_coordcube_fu_1441_cubiecube_0_ep_address0, grp_toCubieCube_fu_1467_ccRet_ep_0_address0, grp_verify_fu_1495_cubiecube_0_ep_address0, ap_CS_fsm_state24, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ccRet_ep_0_address0 <= grp_verify_fu_1495_cubiecube_0_ep_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ccRet_ep_0_address0 <= grp_toCubieCube_fu_1467_ccRet_ep_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            ccRet_ep_0_address0 <= grp_get_coordcube_fu_1441_cubiecube_0_ep_address0;
        else 
            ccRet_ep_0_address0 <= "XXXX";
        end if; 
    end process;


    ccRet_ep_0_ce0_assign_proc : process(ap_CS_fsm_state22, grp_get_coordcube_fu_1441_cubiecube_0_ep_ce0, grp_toCubieCube_fu_1467_ccRet_ep_0_ce0, grp_verify_fu_1495_cubiecube_0_ep_ce0, ap_CS_fsm_state24, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ccRet_ep_0_ce0 <= grp_verify_fu_1495_cubiecube_0_ep_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ccRet_ep_0_ce0 <= grp_toCubieCube_fu_1467_ccRet_ep_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            ccRet_ep_0_ce0 <= grp_get_coordcube_fu_1441_cubiecube_0_ep_ce0;
        else 
            ccRet_ep_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ccRet_ep_0_we0_assign_proc : process(grp_toCubieCube_fu_1467_ccRet_ep_0_we0, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ccRet_ep_0_we0 <= grp_toCubieCube_fu_1467_ccRet_ep_0_we0;
        else 
            ccRet_ep_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    complete_1_fu_1809_p2 <= (tmp_21_fu_1804_p2 and complete_reg_1230);

    count_address0_assign_proc : process(facelets_q0, reg_1527, ap_CS_fsm_state14, ap_CS_fsm_state2, ap_CS_fsm_state16, ap_CS_fsm_state15, tmp_s_fu_1658_p1, tmp_81_fu_1844_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            count_address0 <= tmp_81_fu_1844_p1(3 - 1 downto 0);
        elsif ((((facelets_q0 = ap_const_lv8_55) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((reg_1527 = ap_const_lv8_55) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            count_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((((facelets_q0 = ap_const_lv8_52) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((reg_1527 = ap_const_lv8_52) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            count_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((((facelets_q0 = ap_const_lv8_46) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((reg_1527 = ap_const_lv8_46) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            count_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((((facelets_q0 = ap_const_lv8_44) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((reg_1527 = ap_const_lv8_44) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            count_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((((facelets_q0 = ap_const_lv8_4C) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((reg_1527 = ap_const_lv8_4C) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            count_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((((facelets_q0 = ap_const_lv8_42) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((reg_1527 = ap_const_lv8_42) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            count_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            count_address0 <= tmp_s_fu_1658_p1(3 - 1 downto 0);
        else 
            count_address0 <= "XXX";
        end if; 
    end process;


    count_ce0_assign_proc : process(facelets_q0, reg_1527, ap_CS_fsm_state14, ap_CS_fsm_state2, ap_CS_fsm_state16, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((facelets_q0 = ap_const_lv8_55) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((facelets_q0 = ap_const_lv8_52) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((facelets_q0 = ap_const_lv8_46) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((facelets_q0 = ap_const_lv8_44) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((facelets_q0 = ap_const_lv8_4C) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((facelets_q0 = ap_const_lv8_42) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((reg_1527 = ap_const_lv8_55) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((reg_1527 = ap_const_lv8_52) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((reg_1527 = ap_const_lv8_46) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((reg_1527 = ap_const_lv8_44) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((reg_1527 = ap_const_lv8_4C) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((reg_1527 = ap_const_lv8_42) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            count_ce0 <= ap_const_logic_1;
        else 
            count_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    count_d0_assign_proc : process(reg_1527, ap_CS_fsm_state2, ap_CS_fsm_state15, grp_fu_1520_p2)
    begin
        if ((((reg_1527 = ap_const_lv8_55) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((reg_1527 = ap_const_lv8_52) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((reg_1527 = ap_const_lv8_46) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((reg_1527 = ap_const_lv8_44) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((reg_1527 = ap_const_lv8_4C) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((reg_1527 = ap_const_lv8_42) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            count_d0 <= grp_fu_1520_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            count_d0 <= ap_const_lv32_0;
        else 
            count_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    count_we0_assign_proc : process(reg_1527, ap_CS_fsm_state2, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((reg_1527 = ap_const_lv8_55) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((reg_1527 = ap_const_lv8_52) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((reg_1527 = ap_const_lv8_46) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((reg_1527 = ap_const_lv8_44) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((reg_1527 = ap_const_lv8_4C) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((reg_1527 = ap_const_lv8_42) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            count_we0 <= ap_const_logic_1;
        else 
            count_we0 <= ap_const_logic_0;
        end if; 
    end process;

    depthPhase1_1_fu_1983_p2 <= std_logic_vector(unsigned(depthPhase1_reg_1264) + unsigned(ap_const_lv5_1));

    encode_length_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_blockP1_fu_1276_encode_length, grp_blockP1_fu_1276_encode_length_ap_vld, ap_CS_fsm_state29)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            encode_length <= ap_const_lv8_0;
        elsif (((grp_blockP1_fu_1276_encode_length_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            encode_length <= grp_blockP1_fu_1276_encode_length;
        else 
            encode_length <= "XXXXXXXX";
        end if; 
    end process;


    encode_length_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_blockP1_fu_1276_encode_length_ap_vld, ap_CS_fsm_state29)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            encode_length_ap_vld <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            encode_length_ap_vld <= grp_blockP1_fu_1276_encode_length_ap_vld;
        else 
            encode_length_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_1669_p2 <= "1" when (i_reg_1219 = ap_const_lv3_6) else "0";
    exitcond_fu_1815_p2 <= "1" when (i_1_reg_1242 = ap_const_lv6_36) else "0";

    facelets_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state13, grp_get_facecube_fromstr_fu_1507_cubeString_address0, ap_CS_fsm_state18, tmp_50_fu_1689_p1, tmp_52_fu_1699_p1, tmp_55_fu_1709_p1, tmp_58_fu_1719_p1, tmp_61_fu_1729_p1, tmp_64_fu_1739_p1, tmp_68_fu_1764_p1, tmp_78_fu_1774_p1, tmp_84_fu_1784_p1, tmp_66_fu_1827_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            facelets_address0 <= tmp_66_fu_1827_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            facelets_address0 <= tmp_84_fu_1784_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            facelets_address0 <= tmp_78_fu_1774_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            facelets_address0 <= tmp_68_fu_1764_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            facelets_address0 <= tmp_64_fu_1739_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            facelets_address0 <= tmp_61_fu_1729_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            facelets_address0 <= tmp_58_fu_1719_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            facelets_address0 <= tmp_55_fu_1709_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            facelets_address0 <= tmp_52_fu_1699_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            facelets_address0 <= tmp_50_fu_1689_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            facelets_address0 <= grp_get_facecube_fromstr_fu_1507_cubeString_address0;
        else 
            facelets_address0 <= "XXXXXX";
        end if; 
    end process;


    facelets_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state13, grp_get_facecube_fromstr_fu_1507_cubeString_ce0, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            facelets_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            facelets_ce0 <= grp_get_facecube_fromstr_fu_1507_cubeString_ce0;
        else 
            facelets_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_blockP1_fu_1276_ap_start <= grp_blockP1_fu_1276_ap_start_reg;
    grp_blockP1_fu_1276_parity <= tmp_86_reg_2290(0);
    grp_fu_1515_p2 <= "1" when (reg_1527 = facelets_q0) else "0";
    grp_fu_1520_p2 <= std_logic_vector(unsigned(count_q0) + unsigned(ap_const_lv32_1));
    grp_get_coordcube_fu_1441_ap_start <= grp_get_coordcube_fu_1441_ap_start_reg;
    grp_get_facecube_fromstr_fu_1507_ap_start <= grp_get_facecube_fromstr_fu_1507_ap_start_reg;
    grp_toCubieCube_fu_1467_ap_start <= grp_toCubieCube_fu_1467_ap_start_reg;
    grp_verify_fu_1495_ap_start <= grp_verify_fu_1495_ap_start_reg;
    i_11_fu_1675_p2 <= std_logic_vector(unsigned(i_reg_1219) + unsigned(ap_const_lv3_1));
    i_12_fu_1821_p2 <= std_logic_vector(unsigned(i_1_reg_1242) + unsigned(ap_const_lv6_1));
    i_5_fu_1838_p2 <= std_logic_vector(unsigned(i_2_reg_1253) + unsigned(ap_const_lv3_1));
    indvarinc_fu_1652_p2 <= std_logic_vector(unsigned(invdar_reg_1208) + unsigned(ap_const_lv3_1));
    mul_fu_1989_p0 <= ap_const_lv34_15556(18 - 1 downto 0);
    neg_mul_fu_1901_p2 <= std_logic_vector(unsigned(ap_const_lv33_0) - unsigned(tmp_89_reg_2244));
    neg_ti_fu_1930_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(tmp_95_fu_1923_p3));

    res_f_0_address0_assign_proc : process(grp_toCubieCube_fu_1467_facecube_0_f_address0, grp_get_facecube_fromstr_fu_1507_res_f_0_address0, ap_CS_fsm_state20, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            res_f_0_address0 <= grp_get_facecube_fromstr_fu_1507_res_f_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            res_f_0_address0 <= grp_toCubieCube_fu_1467_facecube_0_f_address0;
        else 
            res_f_0_address0 <= "XXXXXX";
        end if; 
    end process;


    res_f_0_ce0_assign_proc : process(grp_toCubieCube_fu_1467_facecube_0_f_ce0, grp_get_facecube_fromstr_fu_1507_res_f_0_ce0, ap_CS_fsm_state20, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            res_f_0_ce0 <= grp_get_facecube_fromstr_fu_1507_res_f_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            res_f_0_ce0 <= grp_toCubieCube_fu_1467_facecube_0_f_ce0;
        else 
            res_f_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    res_f_0_ce1_assign_proc : process(grp_toCubieCube_fu_1467_facecube_0_f_ce1, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            res_f_0_ce1 <= grp_toCubieCube_fu_1467_facecube_0_f_ce1;
        else 
            res_f_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    res_f_0_we0_assign_proc : process(grp_get_facecube_fromstr_fu_1507_res_f_0_we0, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            res_f_0_we0 <= grp_get_facecube_fromstr_fu_1507_res_f_0_we0;
        else 
            res_f_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    slice_fu_1936_p3 <= 
        neg_ti_fu_1930_p2 when (tmp_90_reg_2249(0) = '1') else 
        tmp_94_fu_1920_p1;
    tmp10_fu_1748_p2 <= (tmp_59_reg_2150 and grp_fu_1515_p2);
    tmp11_fu_1798_p2 <= (tmp13_fu_1793_p2 and tmp12_fu_1789_p2);
    tmp12_fu_1789_p2 <= (tmp_69_reg_2180 and tmp_65_reg_2170);
    tmp13_fu_1793_p2 <= (tmp_79_reg_2190 and grp_fu_1515_p2);
    tmp8_fu_1753_p2 <= (tmp9_fu_1744_p2 and tmp10_fu_1748_p2);
    tmp9_fu_1744_p2 <= (tmp_56_reg_2140 and tmp_53_reg_2130);
    tmp_21_fu_1804_p2 <= (tmp8_reg_2165 and tmp11_fu_1798_p2);
    tmp_48_fu_1663_p2 <= "1" when (invdar_reg_1208 = ap_const_lv3_5) else "0";
    tmp_49_fu_1681_p3 <= (i_reg_1219 & i_reg_1219);
    tmp_50_fu_1689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_49_fu_1681_p3),64));
    tmp_51_fu_1694_p2 <= std_logic_vector(unsigned(tmp_49_reg_2078) + unsigned(ap_const_lv6_1));
    tmp_52_fu_1699_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_fu_1694_p2),64));
    tmp_54_fu_1704_p2 <= std_logic_vector(unsigned(tmp_49_reg_2078) + unsigned(ap_const_lv6_2));
    tmp_55_fu_1709_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_54_fu_1704_p2),64));
    tmp_57_fu_1714_p2 <= std_logic_vector(unsigned(tmp_49_reg_2078) + unsigned(ap_const_lv6_3));
    tmp_58_fu_1719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_fu_1714_p2),64));
    tmp_60_fu_1724_p2 <= std_logic_vector(unsigned(tmp_49_reg_2078) + unsigned(ap_const_lv6_4));
    tmp_61_fu_1729_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_60_fu_1724_p2),64));
    tmp_63_fu_1734_p2 <= std_logic_vector(unsigned(tmp_49_reg_2078) + unsigned(ap_const_lv6_5));
    tmp_64_fu_1739_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_63_fu_1734_p2),64));
    tmp_66_fu_1827_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_1242),64));
    tmp_67_fu_1759_p2 <= std_logic_vector(unsigned(tmp_49_reg_2078) + unsigned(ap_const_lv6_6));
    tmp_68_fu_1764_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_67_fu_1759_p2),64));
    tmp_70_fu_1769_p2 <= std_logic_vector(unsigned(tmp_49_reg_2078) + unsigned(ap_const_lv6_7));
    tmp_71_fu_1832_p2 <= "1" when (unsigned(i_2_reg_1253) < unsigned(ap_const_lv3_6)) else "0";
    tmp_78_fu_1774_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_70_fu_1769_p2),64));
    tmp_80_fu_1779_p2 <= std_logic_vector(unsigned(tmp_49_reg_2078) + unsigned(ap_const_lv6_8));
    tmp_81_fu_1844_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_1253),64));
    tmp_82_fu_1849_p2 <= "1" when (count_q0 = ap_const_lv32_9) else "0";
    tmp_83_fu_1855_p2 <= "1" when (grp_verify_fu_1495_ap_return = ap_const_lv4_0) else "0";
    tmp_84_fu_1784_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_80_fu_1779_p2),64));
    tmp_86_fu_1955_p2 <= "0" when (result_parity_0 = ap_const_lv16_0) else "1";
    tmp_87_fu_1961_p2 <= "1" when (unsigned(depthPhase1_reg_1264) < unsigned(ap_const_lv5_13)) else "0";
    tmp_88_fu_1977_p2 <= "1" when (a = ap_const_lv32_FFFFFFFE) else "0";
    tmp_89_fu_1869_p1 <= mul_fu_1989_p2(33 - 1 downto 0);
    tmp_90_fu_1872_p1 <= result_FRtoBR_0;
    tmp_91_fu_1906_p4 <= neg_mul_fu_1901_p2(32 downto 21);
        tmp_92_fu_1916_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_91_fu_1906_p4),16));

        tmp_94_fu_1920_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_93_reg_2255),16));

    tmp_95_fu_1923_p3 <= 
        tmp_92_fu_1916_p1 when (tmp_90_reg_2249(0) = '1') else 
        tmp_94_fu_1920_p1;
    tmp_s_fu_1658_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar_reg_1208),64));

    unsolvable_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_83_fu_1855_p2, ap_CS_fsm_state22, grp_verify_fu_1495_ap_done, ap_CS_fsm_state17, tmp_82_fu_1849_p2)
    begin
        if ((((grp_verify_fu_1495_ap_done = ap_const_logic_1) and (tmp_83_fu_1855_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((tmp_82_fu_1849_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            unsolvable <= ap_const_logic_1;
        elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            unsolvable <= ap_const_logic_0;
        else 
            unsolvable <= 'X';
        end if; 
    end process;


    unsolvable_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_83_fu_1855_p2, ap_CS_fsm_state22, grp_verify_fu_1495_ap_done, ap_CS_fsm_state17, tmp_82_fu_1849_p2)
    begin
        if ((((grp_verify_fu_1495_ap_done = ap_const_logic_1) and (tmp_83_fu_1855_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_82_fu_1849_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            unsolvable_ap_vld <= ap_const_logic_1;
        else 
            unsolvable_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
