-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity getUBtoDF is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cubiecube_0_ep_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    cubiecube_0_ep_ce0 : OUT STD_LOGIC;
    cubiecube_0_ep_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of getUBtoDF is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (46 downto 0) := "00000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (46 downto 0) := "00000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (46 downto 0) := "00000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (46 downto 0) := "00000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (46 downto 0) := "00000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (46 downto 0) := "00000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (46 downto 0) := "00001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (46 downto 0) := "00010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (46 downto 0) := "00100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (46 downto 0) := "01000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (46 downto 0) := "10000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal n_assign_cast4_fu_377_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_assign_cast4_reg_751 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal j_10_fu_387_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_10_reg_761 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal edge3_0_reg_792 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal or_cond_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_799 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_4_fu_431_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_4_reg_803 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_380_i_fu_475_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_380_i_reg_811 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_fu_486_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_reg_819 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond_i_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_28_fu_492_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_28_reg_824 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_9_fu_503_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_9_reg_829 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_498_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal tmp_225_cast_fu_548_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_225_cast_reg_845 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal tmp_184_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cond2_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cond2_reg_850 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal k_3_fu_612_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_3_reg_870 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_189_fu_618_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_189_reg_875 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_188_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_624_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_880 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_29_fu_636_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_29_reg_888 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal arr_load_phi_i_fu_648_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond1_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_190_fu_699_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_190_reg_900 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal indvars_iv_next_fu_705_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvars_iv_next_reg_905 : STD_LOGIC_VECTOR (1 downto 0);
    signal b_3_fu_711_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal i_reg_107 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal j_i_reg_119 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i_reg_131 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_i_reg_140 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0_i_reg_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv_reg_164 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_assign_reg_176 : STD_LOGIC_VECTOR (1 downto 0);
    signal b_reg_188 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_200 : STD_LOGIC_VECTOR (31 downto 0);
    signal arr2_i_reg_212 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal write_flag_i_reg_222 : STD_LOGIC_VECTOR (0 downto 0);
    signal arr1_i_reg_234 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr_i_reg_244 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_i_i1_phi_fu_260_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_i1_reg_256 : STD_LOGIC_VECTOR (1 downto 0);
    signal arr2_i_be_reg_267 : STD_LOGIC_VECTOR (3 downto 0);
    signal write_flag_i_be_reg_282 : STD_LOGIC_VECTOR (0 downto 0);
    signal arr1_i_be_reg_299 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr_i_be_reg_314 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_393_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal edge3_2_6_fu_62 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_126_fu_516_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal edge3_2_7_fu_66 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge3_2_8_fu_70 : STD_LOGIC_VECTOR (3 downto 0);
    signal a_1_fu_74 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_3_fu_509_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_fu_82 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge3_0_2_fu_673_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge3_1_3_fu_86 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge3_1_fu_666_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge3_2_9_fu_90 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge3_2_fu_659_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_182_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_183_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_lshr_f_i_cast_fu_442_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_i_cast_fu_452_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_379_i_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_assign_3_fu_462_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_k_i_fu_467_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_cast_fu_532_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_187_fu_542_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_558_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_123_fu_564_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_185_fu_570_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_125_fu_580_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_124_fu_576_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal edge3_load_phi_fu_596_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_228_cast_fu_603_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal cond_i_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_190_fu_699_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_498_ap_start : STD_LOGIC;
    signal grp_fu_498_ap_done : STD_LOGIC;
    signal tmp_186_fu_584_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_190_fu_699_p00 : STD_LOGIC_VECTOR (31 downto 0);

    component solution_sdiv_32nkbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    solution_sdiv_32nkbM_U43 : component solution_sdiv_32nkbM
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_498_ap_start,
        done => grp_fu_498_ap_done,
        din0 => s_reg_819,
        din1 => j_i_reg_119,
        ce => ap_const_logic_1,
        dout => grp_fu_498_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv16_0;
            else
                if (((tmp_184_fu_536_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                    ap_return_preg <= tmp_186_fu_584_p2;
                end if; 
            end if;
        end if;
    end process;


    a_1_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not((tmp_126_fu_516_p1 = ap_const_lv2_1)) and not((tmp_126_fu_516_p1 = ap_const_lv2_0)) and (or_cond_reg_799 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((or_cond_reg_799 = ap_const_lv1_1) and (tmp_126_fu_516_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((or_cond_reg_799 = ap_const_lv1_1) and (tmp_126_fu_516_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state41)))) then 
                a_1_fu_74 <= a_3_fu_509_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                a_1_fu_74 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    arr1_i_be_reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_630_p2 = ap_const_lv1_0) and (ap_phi_mux_i_i1_phi_fu_260_p4 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                arr1_i_be_reg_299 <= arr_load_phi_i_fu_648_p3;
            elsif (((not((ap_phi_mux_i_i1_phi_fu_260_p4 = ap_const_lv2_1)) and not((ap_phi_mux_i_i1_phi_fu_260_p4 = ap_const_lv2_0)) and (exitcond1_fu_630_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((exitcond1_fu_630_p2 = ap_const_lv1_0) and (ap_phi_mux_i_i1_phi_fu_260_p4 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state44)))) then 
                arr1_i_be_reg_299 <= arr1_i_reg_234;
            end if; 
        end if;
    end process;

    arr1_i_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                arr1_i_reg_234 <= arr1_i_be_reg_299;
            elsif (((tmp_188_fu_607_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                arr1_i_reg_234 <= edge3_1_3_fu_86;
            end if; 
        end if;
    end process;

    arr2_i_be_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((exitcond1_fu_630_p2 = ap_const_lv1_0) and (ap_phi_mux_i_i1_phi_fu_260_p4 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((exitcond1_fu_630_p2 = ap_const_lv1_0) and (ap_phi_mux_i_i1_phi_fu_260_p4 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state44)))) then 
                arr2_i_be_reg_267 <= arr2_i_reg_212;
            elsif ((not((ap_phi_mux_i_i1_phi_fu_260_p4 = ap_const_lv2_1)) and not((ap_phi_mux_i_i1_phi_fu_260_p4 = ap_const_lv2_0)) and (exitcond1_fu_630_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                arr2_i_be_reg_267 <= arr_load_phi_i_fu_648_p3;
            end if; 
        end if;
    end process;

    arr2_i_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                arr2_i_reg_212 <= arr2_i_be_reg_267;
            elsif (((tmp_188_fu_607_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                arr2_i_reg_212 <= edge3_2_9_fu_90;
            end if; 
        end if;
    end process;

    arr_i_be_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_630_p2 = ap_const_lv1_0) and (ap_phi_mux_i_i1_phi_fu_260_p4 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                arr_i_be_reg_314 <= arr_load_phi_i_fu_648_p3;
            elsif ((((exitcond1_fu_630_p2 = ap_const_lv1_0) and (ap_phi_mux_i_i1_phi_fu_260_p4 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state44)) or (not((ap_phi_mux_i_i1_phi_fu_260_p4 = ap_const_lv2_1)) and not((ap_phi_mux_i_i1_phi_fu_260_p4 = ap_const_lv2_0)) and (exitcond1_fu_630_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state44)))) then 
                arr_i_be_reg_314 <= arr_i_reg_244;
            end if; 
        end if;
    end process;

    b_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_381_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                b_reg_188 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                b_reg_188 <= b_3_fu_711_p2;
            end if; 
        end if;
    end process;

    edge3_1_3_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_630_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                edge3_1_3_fu_86 <= edge3_1_fu_666_p3;
            elsif (((exitcond_fu_381_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                edge3_1_3_fu_86 <= edge3_2_7_fu_66;
            end if; 
        end if;
    end process;

    edge3_2_6_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_reg_799 = ap_const_lv1_1) and (tmp_126_fu_516_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                edge3_2_6_fu_62 <= edge3_0_reg_792;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                edge3_2_6_fu_62 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    edge3_2_7_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_reg_799 = ap_const_lv1_1) and (tmp_126_fu_516_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                edge3_2_7_fu_66 <= edge3_0_reg_792;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                edge3_2_7_fu_66 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    edge3_2_8_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((tmp_126_fu_516_p1 = ap_const_lv2_1)) and not((tmp_126_fu_516_p1 = ap_const_lv2_0)) and (or_cond_reg_799 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                edge3_2_8_fu_70 <= edge3_0_reg_792;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                edge3_2_8_fu_70 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    edge3_2_9_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_630_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                edge3_2_9_fu_90 <= edge3_2_fu_659_p3;
            elsif (((exitcond_fu_381_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                edge3_2_9_fu_90 <= edge3_2_8_fu_70;
            end if; 
        end if;
    end process;

    i_i1_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                i_i1_reg_256 <= i_29_reg_888;
            elsif (((tmp_188_fu_607_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                i_i1_reg_256 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i_i_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                i_i_reg_131 <= i_28_reg_824;
            elsif (((or_cond_fu_425_p2 = ap_const_lv1_1) and (tmp_i_fu_437_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_i_reg_131 <= n_assign_cast4_reg_751;
            end if; 
        end if;
    end process;

    i_reg_107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                i_reg_107 <= j_10_reg_761;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_107 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvars_iv_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_381_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvars_iv_reg_164 <= ap_const_lv2_2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                indvars_iv_reg_164 <= indvars_iv_next_reg_905;
            end if; 
        end if;
    end process;

    j_i_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                j_i_reg_119 <= j_9_reg_829;
            elsif (((or_cond_fu_425_p2 = ap_const_lv1_1) and (tmp_i_fu_437_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_i_reg_119 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    k_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_630_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                k_reg_200 <= k_3_reg_870;
            elsif (((tmp_184_fu_536_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                k_reg_200 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_0_i_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_481_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_0_i_reg_152 <= s_i_reg_140;
            elsif (((tmp_i_fu_437_p2 = ap_const_lv1_1) and (or_cond_fu_425_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_0_i_reg_152 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    r_assign_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_381_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                r_assign_reg_176 <= ap_const_lv2_2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                r_assign_reg_176 <= j_reg_880;
            end if; 
        end if;
    end process;

    s_i_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                s_i_reg_140 <= grp_fu_498_p2;
            elsif (((or_cond_fu_425_p2 = ap_const_lv1_1) and (tmp_i_fu_437_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                s_i_reg_140 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    temp_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_630_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                temp_fu_82 <= edge3_0_2_fu_673_p3;
            elsif (((exitcond_fu_381_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                temp_fu_82 <= edge3_2_6_fu_62;
            end if; 
        end if;
    end process;

    write_flag_i_be_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_630_p2 = ap_const_lv1_0) and (ap_phi_mux_i_i1_phi_fu_260_p4 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                write_flag_i_be_reg_282 <= ap_const_lv1_1;
            elsif ((((exitcond1_fu_630_p2 = ap_const_lv1_0) and (ap_phi_mux_i_i1_phi_fu_260_p4 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state44)) or (not((ap_phi_mux_i_i1_phi_fu_260_p4 = ap_const_lv2_1)) and not((ap_phi_mux_i_i1_phi_fu_260_p4 = ap_const_lv2_0)) and (exitcond1_fu_630_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state44)))) then 
                write_flag_i_be_reg_282 <= write_flag_i_reg_222;
            end if; 
        end if;
    end process;

    write_flag_i_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                write_flag_i_reg_222 <= write_flag_i_be_reg_282;
            elsif (((tmp_188_fu_607_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                write_flag_i_reg_222 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    x_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not((tmp_126_fu_516_p1 = ap_const_lv2_1)) and not((tmp_126_fu_516_p1 = ap_const_lv2_0)) and (or_cond_reg_799 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((or_cond_reg_799 = ap_const_lv1_1) and (tmp_126_fu_516_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((or_cond_reg_799 = ap_const_lv1_1) and (tmp_126_fu_516_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state41)))) then 
                x_fu_78 <= x_4_reg_803;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                x_fu_78 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                arr_i_reg_244 <= arr_i_be_reg_314;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_184_fu_536_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                cond2_reg_850 <= cond2_fu_552_p2;
                    tmp_225_cast_reg_845(2 downto 0) <= tmp_225_cast_fu_548_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                edge3_0_reg_792 <= cubiecube_0_ep_q0;
                or_cond_reg_799 <= or_cond_fu_425_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_481_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                i_28_reg_824 <= i_28_fu_492_p2;
                s_reg_819 <= s_fu_486_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                i_29_reg_888 <= i_29_fu_636_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                indvars_iv_next_reg_905 <= indvars_iv_next_fu_705_p2;
                tmp_190_reg_900 <= tmp_190_fu_699_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                j_10_reg_761 <= j_10_fu_387_p2;
                    n_assign_cast4_reg_751(3 downto 0) <= n_assign_cast4_fu_377_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                j_9_reg_829 <= j_9_fu_503_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_188_fu_607_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                j_reg_880 <= j_fu_624_p2;
                tmp_189_reg_875 <= tmp_189_fu_618_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                k_3_reg_870 <= k_3_fu_612_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_fu_425_p2 = ap_const_lv1_1) and (tmp_i_fu_437_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_380_i_reg_811 <= tmp_380_i_fu_475_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_fu_425_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                x_4_reg_803 <= x_4_fu_431_p2;
            end if;
        end if;
    end process;
    n_assign_cast4_reg_751(31 downto 4) <= "0000000000000000000000000000";
    tmp_225_cast_reg_845(4 downto 3) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_381_p2, ap_CS_fsm_state3, or_cond_fu_425_p2, tmp_i_fu_437_p2, ap_CS_fsm_state4, exitcond_i_fu_481_p2, ap_CS_fsm_state42, tmp_184_fu_536_p2, ap_CS_fsm_state43, tmp_188_fu_607_p2, ap_CS_fsm_state44, exitcond1_fu_630_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond_fu_381_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((or_cond_fu_425_p2 = ap_const_lv1_1) and (tmp_i_fu_437_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond_i_fu_481_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state42 => 
                if (((tmp_184_fu_536_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state43 => 
                if (((tmp_188_fu_607_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state44 => 
                if (((exitcond1_fu_630_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_3_fu_509_p2 <= std_logic_vector(unsigned(p_0_i_reg_152) + unsigned(a_1_fu_74));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state42, tmp_184_fu_536_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_184_fu_536_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_i_i1_phi_fu_260_p4 <= i_i1_reg_256;

    ap_ready_assign_proc : process(ap_CS_fsm_state42, tmp_184_fu_536_p2)
    begin
        if (((tmp_184_fu_536_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state42, tmp_184_fu_536_p2, tmp_186_fu_584_p2, ap_return_preg)
    begin
        if (((tmp_184_fu_536_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            ap_return <= tmp_186_fu_584_p2;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    arr_load_phi_i_fu_648_p3 <= 
        arr1_i_reg_234 when (cond_i_fu_642_p2(0) = '1') else 
        arr2_i_reg_212;
    b_3_fu_711_p2 <= std_logic_vector(unsigned(k_reg_200) + unsigned(tmp_190_reg_900));
    cond2_fu_552_p2 <= "1" when (r_assign_reg_176 = ap_const_lv2_1) else "0";
    cond_i_fu_642_p2 <= "1" when (i_i1_reg_256 = ap_const_lv2_0) else "0";
    cubiecube_0_ep_address0 <= tmp_s_fu_393_p1(4 - 1 downto 0);

    cubiecube_0_ep_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cubiecube_0_ep_ce0 <= ap_const_logic_1;
        else 
            cubiecube_0_ep_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    edge3_0_2_fu_673_p3 <= 
        arr_i_reg_244 when (write_flag_i_reg_222(0) = '1') else 
        temp_fu_82;
    edge3_1_fu_666_p3 <= 
        temp_fu_82 when (cond2_reg_850(0) = '1') else 
        arr1_i_reg_234;
    edge3_2_fu_659_p3 <= 
        arr2_i_reg_212 when (cond2_reg_850(0) = '1') else 
        temp_fu_82;
    edge3_load_phi_fu_596_p3 <= 
        edge3_1_3_fu_86 when (cond2_reg_850(0) = '1') else 
        edge3_2_9_fu_90;
    exitcond1_fu_630_p2 <= "1" when (i_i1_reg_256 = indvars_iv_reg_164) else "0";
    exitcond_fu_381_p2 <= "1" when (i_reg_107 = ap_const_lv4_C) else "0";
    exitcond_i_fu_481_p2 <= "1" when (j_i_reg_119 = tmp_380_i_reg_811) else "0";

    grp_fu_498_ap_start_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_498_ap_start <= ap_const_logic_1;
        else 
            grp_fu_498_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    i_28_fu_492_p2 <= std_logic_vector(signed(i_i_reg_131) + signed(ap_const_lv32_FFFFFFFF));
    i_29_fu_636_p2 <= std_logic_vector(unsigned(i_i1_reg_256) + unsigned(ap_const_lv2_1));
    indvars_iv_next_fu_705_p2 <= std_logic_vector(unsigned(indvars_iv_reg_164) + unsigned(ap_const_lv2_3));
    j_10_fu_387_p2 <= std_logic_vector(unsigned(i_reg_107) + unsigned(ap_const_lv4_1));
    j_1_cast_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_assign_reg_176),3));
    j_9_fu_503_p2 <= std_logic_vector(unsigned(j_i_reg_119) + unsigned(ap_const_lv32_1));
    j_fu_624_p2 <= std_logic_vector(unsigned(r_assign_reg_176) + unsigned(ap_const_lv2_3));
    k_3_fu_612_p2 <= std_logic_vector(unsigned(k_reg_200) + unsigned(ap_const_lv32_1));
    k_assign_3_fu_462_p2 <= std_logic_vector(unsigned(n_assign_cast4_reg_751) - unsigned(x_4_fu_431_p2));
    n_assign_cast4_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_107),32));
    or_cond_fu_425_p2 <= (tmp_183_fu_419_p2 and tmp_182_fu_413_p2);
    p_k_i_fu_467_p3 <= 
        k_assign_3_fu_462_p2 when (tmp_379_i_fu_456_p2(0) = '1') else 
        x_4_fu_431_p2;
    p_lshr_f_i_cast_fu_442_p4 <= i_reg_107(3 downto 1);
    s_fu_486_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(s_i_reg_140) * signed(i_i_reg_131))), 32));
    tmp_123_fu_564_p2 <= std_logic_vector(shift_left(unsigned(a_1_fu_74),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    tmp_124_fu_576_p1 <= b_reg_188(16 - 1 downto 0);
    tmp_125_fu_580_p1 <= tmp_185_fu_570_p2(16 - 1 downto 0);
    tmp_126_fu_516_p1 <= x_fu_78(2 - 1 downto 0);
    tmp_182_fu_413_p2 <= "1" when (unsigned(cubiecube_0_ep_q0) > unsigned(ap_const_lv4_2)) else "0";
    tmp_183_fu_419_p2 <= "1" when (unsigned(cubiecube_0_ep_q0) < unsigned(ap_const_lv4_6)) else "0";
    tmp_184_fu_536_p2 <= "1" when (r_assign_reg_176 = ap_const_lv2_0) else "0";
    tmp_185_fu_570_p2 <= std_logic_vector(unsigned(tmp_fu_558_p2) - unsigned(tmp_123_fu_564_p2));
    tmp_186_fu_584_p2 <= std_logic_vector(unsigned(tmp_125_fu_580_p1) + unsigned(tmp_124_fu_576_p1));
    tmp_187_fu_542_p2 <= std_logic_vector(unsigned(j_1_cast_fu_532_p1) + unsigned(ap_const_lv3_3));
    tmp_188_fu_607_p2 <= "1" when (tmp_228_cast_fu_603_p1 = tmp_225_cast_reg_845) else "0";
    tmp_189_fu_618_p2 <= std_logic_vector(unsigned(r_assign_reg_176) + unsigned(ap_const_lv2_1));
    tmp_190_fu_699_p0 <= tmp_190_fu_699_p00(2 - 1 downto 0);
    tmp_190_fu_699_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_189_reg_875),32));
    tmp_190_fu_699_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &tmp_190_fu_699_p0) * signed(b_reg_188))), 32));
    tmp_225_cast_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_187_fu_542_p2),5));
    tmp_228_cast_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(edge3_load_phi_fu_596_p3),5));
    tmp_379_i_fu_456_p2 <= "1" when (signed(tmp_i_cast_fu_452_p1) < signed(x_4_fu_431_p2)) else "0";
    tmp_380_i_fu_475_p2 <= std_logic_vector(unsigned(p_k_i_fu_467_p3) + unsigned(ap_const_lv32_1));
    tmp_fu_558_p2 <= std_logic_vector(shift_left(unsigned(a_1_fu_74),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    tmp_i_cast_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lshr_f_i_cast_fu_442_p4),32));
    tmp_i_fu_437_p2 <= "1" when (signed(n_assign_cast4_reg_751) < signed(x_4_fu_431_p2)) else "0";
    tmp_s_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_107),64));
    x_4_fu_431_p2 <= std_logic_vector(unsigned(x_fu_78) + unsigned(ap_const_lv32_1));
end behav;
