-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity get_facecube_fromstr is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cubeString_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    cubeString_ce0 : OUT STD_LOGIC;
    cubeString_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    res_f_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    res_f_0_ce0 : OUT STD_LOGIC;
    res_f_0_we0 : OUT STD_LOGIC;
    res_f_0_d0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
end;


architecture behav of get_facecube_fromstr is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv8_42 : STD_LOGIC_VECTOR (7 downto 0) := "01000010";
    constant ap_const_lv8_4C : STD_LOGIC_VECTOR (7 downto 0) := "01001100";
    constant ap_const_lv8_44 : STD_LOGIC_VECTOR (7 downto 0) := "01000100";
    constant ap_const_lv8_46 : STD_LOGIC_VECTOR (7 downto 0) := "01000110";
    constant ap_const_lv8_52 : STD_LOGIC_VECTOR (7 downto 0) := "01010010";
    constant ap_const_lv8_55 : STD_LOGIC_VECTOR (7 downto 0) := "01010101";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_36 : STD_LOGIC_VECTOR (5 downto 0) := "110110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_21_fu_137_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_21_reg_151 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_143_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_156 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_120 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal res_f_0_addr_4_gep_fu_75_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal res_f_0_addr_3_gep_fu_84_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal res_f_0_addr_2_gep_fu_93_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal res_f_0_addr_1_gep_fu_102_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal res_f_0_addr_gep_fu_111_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_120 <= i_21_reg_151;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_120 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_21_reg_151 <= i_21_fu_137_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_131_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_reg_156(5 downto 0) <= tmp_fu_143_p1(5 downto 0);
            end if;
        end if;
    end process;
    tmp_reg_156(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_131_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond_fu_131_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_131_p2)
    begin
        if ((((exitcond_fu_131_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_131_p2)
    begin
        if (((exitcond_fu_131_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cubeString_address0 <= tmp_fu_143_p1(6 - 1 downto 0);

    cubeString_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cubeString_ce0 <= ap_const_logic_1;
        else 
            cubeString_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_131_p2 <= "1" when (i_reg_120 = ap_const_lv6_36) else "0";
    i_21_fu_137_p2 <= std_logic_vector(unsigned(i_reg_120) + unsigned(ap_const_lv6_1));
    res_f_0_addr_1_gep_fu_102_p3 <= tmp_reg_156(6 - 1 downto 0);
    res_f_0_addr_2_gep_fu_93_p3 <= tmp_reg_156(6 - 1 downto 0);
    res_f_0_addr_3_gep_fu_84_p3 <= tmp_reg_156(6 - 1 downto 0);
    res_f_0_addr_4_gep_fu_75_p3 <= tmp_reg_156(6 - 1 downto 0);
    res_f_0_addr_gep_fu_111_p3 <= tmp_reg_156(6 - 1 downto 0);

    res_f_0_address0_assign_proc : process(cubeString_q0, tmp_reg_156, ap_CS_fsm_state3, res_f_0_addr_4_gep_fu_75_p3, res_f_0_addr_3_gep_fu_84_p3, res_f_0_addr_2_gep_fu_93_p3, res_f_0_addr_1_gep_fu_102_p3, res_f_0_addr_gep_fu_111_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
            if ((cubeString_q0 = ap_const_lv8_55)) then 
                res_f_0_address0 <= res_f_0_addr_gep_fu_111_p3;
            elsif ((cubeString_q0 = ap_const_lv8_52)) then 
                res_f_0_address0 <= res_f_0_addr_1_gep_fu_102_p3;
            elsif ((cubeString_q0 = ap_const_lv8_46)) then 
                res_f_0_address0 <= res_f_0_addr_2_gep_fu_93_p3;
            elsif ((cubeString_q0 = ap_const_lv8_44)) then 
                res_f_0_address0 <= res_f_0_addr_3_gep_fu_84_p3;
            elsif ((cubeString_q0 = ap_const_lv8_4C)) then 
                res_f_0_address0 <= res_f_0_addr_4_gep_fu_75_p3;
            elsif ((cubeString_q0 = ap_const_lv8_42)) then 
                res_f_0_address0 <= tmp_reg_156(6 - 1 downto 0);
            else 
                res_f_0_address0 <= "XXXXXX";
            end if;
        else 
            res_f_0_address0 <= "XXXXXX";
        end if; 
    end process;


    res_f_0_ce0_assign_proc : process(cubeString_q0, ap_CS_fsm_state3)
    begin
        if ((((cubeString_q0 = ap_const_lv8_55) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((cubeString_q0 = ap_const_lv8_52) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((cubeString_q0 = ap_const_lv8_46) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((cubeString_q0 = ap_const_lv8_44) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((cubeString_q0 = ap_const_lv8_4C) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((cubeString_q0 = ap_const_lv8_42) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            res_f_0_ce0 <= ap_const_logic_1;
        else 
            res_f_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    res_f_0_d0_assign_proc : process(cubeString_q0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
            if ((cubeString_q0 = ap_const_lv8_55)) then 
                res_f_0_d0 <= ap_const_lv3_0;
            elsif ((cubeString_q0 = ap_const_lv8_52)) then 
                res_f_0_d0 <= ap_const_lv3_1;
            elsif ((cubeString_q0 = ap_const_lv8_46)) then 
                res_f_0_d0 <= ap_const_lv3_2;
            elsif ((cubeString_q0 = ap_const_lv8_44)) then 
                res_f_0_d0 <= ap_const_lv3_3;
            elsif ((cubeString_q0 = ap_const_lv8_4C)) then 
                res_f_0_d0 <= ap_const_lv3_4;
            elsif ((cubeString_q0 = ap_const_lv8_42)) then 
                res_f_0_d0 <= ap_const_lv3_5;
            else 
                res_f_0_d0 <= "XXX";
            end if;
        else 
            res_f_0_d0 <= "XXX";
        end if; 
    end process;


    res_f_0_we0_assign_proc : process(cubeString_q0, ap_CS_fsm_state3)
    begin
        if ((((cubeString_q0 = ap_const_lv8_55) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((cubeString_q0 = ap_const_lv8_52) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((cubeString_q0 = ap_const_lv8_46) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((cubeString_q0 = ap_const_lv8_44) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((cubeString_q0 = ap_const_lv8_4C) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((cubeString_q0 = ap_const_lv8_42) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            res_f_0_we0 <= ap_const_logic_1;
        else 
            res_f_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_120),64));
end behav;
