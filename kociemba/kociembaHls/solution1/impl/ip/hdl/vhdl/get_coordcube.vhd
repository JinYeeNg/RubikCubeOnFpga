-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity get_coordcube is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cubiecube_0_cp_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    cubiecube_0_cp_ce0 : OUT STD_LOGIC;
    cubiecube_0_cp_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
    cubiecube_0_co_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    cubiecube_0_co_ce0 : OUT STD_LOGIC;
    cubiecube_0_co_q0 : IN STD_LOGIC_VECTOR (1 downto 0);
    cubiecube_0_ep_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    cubiecube_0_ep_ce0 : OUT STD_LOGIC;
    cubiecube_0_ep_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
    cubiecube_0_eo_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    cubiecube_0_eo_ce0 : OUT STD_LOGIC;
    cubiecube_0_eo_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    result_twist_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    result_twist_0_ap_vld : OUT STD_LOGIC;
    result_flip_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    result_flip_0_ap_vld : OUT STD_LOGIC;
    result_parity_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    result_parity_0_ap_vld : OUT STD_LOGIC;
    result_FRtoBR_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    result_FRtoBR_0_ap_vld : OUT STD_LOGIC;
    result_URFtoDLF_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    result_URFtoDLF_0_ap_vld : OUT STD_LOGIC;
    result_URtoUL_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    result_URtoUL_0_ap_vld : OUT STD_LOGIC;
    result_UBtoDF_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    result_UBtoDF_0_ap_vld : OUT STD_LOGIC );
end;


architecture behav of get_coordcube is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_228_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_451 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_i_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_fu_261_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_22_fu_273_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_22_reg_469 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond_i3_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_fu_284_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_113_reg_479 : STD_LOGIC_VECTOR (14 downto 0);
    signal ret_1_fu_299_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_i6_cast_fu_306_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_i6_cast_reg_496 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_i7_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cubiecube_0_cp_load_reg_509 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal j_fu_321_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_514 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_285_i_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_23_fu_342_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_getFRtoBR_fu_189_ap_start : STD_LOGIC;
    signal grp_getFRtoBR_fu_189_ap_done : STD_LOGIC;
    signal grp_getFRtoBR_fu_189_ap_idle : STD_LOGIC;
    signal grp_getFRtoBR_fu_189_ap_ready : STD_LOGIC;
    signal grp_getFRtoBR_fu_189_cubiecube_0_ep_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_getFRtoBR_fu_189_cubiecube_0_ep_ce0 : STD_LOGIC;
    signal grp_getFRtoBR_fu_189_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_getUBtoDF_fu_195_ap_start : STD_LOGIC;
    signal grp_getUBtoDF_fu_195_ap_done : STD_LOGIC;
    signal grp_getUBtoDF_fu_195_ap_idle : STD_LOGIC;
    signal grp_getUBtoDF_fu_195_ap_ready : STD_LOGIC;
    signal grp_getUBtoDF_fu_195_cubiecube_0_ep_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_getUBtoDF_fu_195_cubiecube_0_ep_ce0 : STD_LOGIC;
    signal grp_getUBtoDF_fu_195_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_getURtoUL_fu_201_ap_start : STD_LOGIC;
    signal grp_getURtoUL_fu_201_ap_done : STD_LOGIC;
    signal grp_getURtoUL_fu_201_ap_idle : STD_LOGIC;
    signal grp_getURtoUL_fu_201_ap_ready : STD_LOGIC;
    signal grp_getURtoUL_fu_201_cubiecube_0_ep_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_getURtoUL_fu_201_cubiecube_0_ep_ce0 : STD_LOGIC;
    signal grp_getURtoUL_fu_201_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_getURFtoDLF_fu_207_ap_start : STD_LOGIC;
    signal grp_getURFtoDLF_fu_207_ap_done : STD_LOGIC;
    signal grp_getURFtoDLF_fu_207_ap_idle : STD_LOGIC;
    signal grp_getURFtoDLF_fu_207_ap_ready : STD_LOGIC;
    signal grp_getURFtoDLF_fu_207_cubiecube_0_cp_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_getURFtoDLF_fu_207_cubiecube_0_cp_ce0 : STD_LOGIC;
    signal grp_getURFtoDLF_fu_207_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_getURtoDF_fu_213_ap_start : STD_LOGIC;
    signal grp_getURtoDF_fu_213_ap_done : STD_LOGIC;
    signal grp_getURtoDF_fu_213_ap_idle : STD_LOGIC;
    signal grp_getURtoDF_fu_213_ap_ready : STD_LOGIC;
    signal grp_getURtoDF_fu_213_cubiecube_0_ep_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_getURtoDF_fu_213_cubiecube_0_ep_ce0 : STD_LOGIC;
    signal ret_i_reg_123 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_i_reg_135 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_i1_reg_146 : STD_LOGIC_VECTOR (3 downto 0);
    signal ret_i2_reg_157 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_i6_reg_168 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_0_in_i_reg_180 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_getFRtoBR_fu_189_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_getUBtoDF_fu_195_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_getURtoUL_fu_201_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_getURFtoDLF_fu_207_ap_start_reg : STD_LOGIC := '0';
    signal grp_getURtoDF_fu_213_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_i_36_fu_234_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i5_fu_279_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i8_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_286_i_fu_337_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_i_fu_72 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_s_1_i_fu_359_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state10_on_subcall_done : BOOLEAN;
    signal tmp_fu_245_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_256_i_fu_257_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_i_fu_251_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_cast_fu_327_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_287_i_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_fu_353_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_116_fu_408_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_117_fu_412_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_115_fu_404_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_114_fu_396_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_118_fu_420_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_426_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);

    component getFRtoBR IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        cubiecube_0_ep_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        cubiecube_0_ep_ce0 : OUT STD_LOGIC;
        cubiecube_0_ep_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component getUBtoDF IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        cubiecube_0_ep_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        cubiecube_0_ep_ce0 : OUT STD_LOGIC;
        cubiecube_0_ep_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component getURtoUL IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        cubiecube_0_ep_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        cubiecube_0_ep_ce0 : OUT STD_LOGIC;
        cubiecube_0_ep_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component getURFtoDLF IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        cubiecube_0_cp_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        cubiecube_0_cp_ce0 : OUT STD_LOGIC;
        cubiecube_0_cp_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component getURtoDF IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        cubiecube_0_ep_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        cubiecube_0_ep_ce0 : OUT STD_LOGIC;
        cubiecube_0_ep_q0 : IN STD_LOGIC_VECTOR (3 downto 0) );
    end component;



begin
    grp_getFRtoBR_fu_189 : component getFRtoBR
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_getFRtoBR_fu_189_ap_start,
        ap_done => grp_getFRtoBR_fu_189_ap_done,
        ap_idle => grp_getFRtoBR_fu_189_ap_idle,
        ap_ready => grp_getFRtoBR_fu_189_ap_ready,
        cubiecube_0_ep_address0 => grp_getFRtoBR_fu_189_cubiecube_0_ep_address0,
        cubiecube_0_ep_ce0 => grp_getFRtoBR_fu_189_cubiecube_0_ep_ce0,
        cubiecube_0_ep_q0 => cubiecube_0_ep_q0,
        ap_return => grp_getFRtoBR_fu_189_ap_return);

    grp_getUBtoDF_fu_195 : component getUBtoDF
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_getUBtoDF_fu_195_ap_start,
        ap_done => grp_getUBtoDF_fu_195_ap_done,
        ap_idle => grp_getUBtoDF_fu_195_ap_idle,
        ap_ready => grp_getUBtoDF_fu_195_ap_ready,
        cubiecube_0_ep_address0 => grp_getUBtoDF_fu_195_cubiecube_0_ep_address0,
        cubiecube_0_ep_ce0 => grp_getUBtoDF_fu_195_cubiecube_0_ep_ce0,
        cubiecube_0_ep_q0 => cubiecube_0_ep_q0,
        ap_return => grp_getUBtoDF_fu_195_ap_return);

    grp_getURtoUL_fu_201 : component getURtoUL
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_getURtoUL_fu_201_ap_start,
        ap_done => grp_getURtoUL_fu_201_ap_done,
        ap_idle => grp_getURtoUL_fu_201_ap_idle,
        ap_ready => grp_getURtoUL_fu_201_ap_ready,
        cubiecube_0_ep_address0 => grp_getURtoUL_fu_201_cubiecube_0_ep_address0,
        cubiecube_0_ep_ce0 => grp_getURtoUL_fu_201_cubiecube_0_ep_ce0,
        cubiecube_0_ep_q0 => cubiecube_0_ep_q0,
        ap_return => grp_getURtoUL_fu_201_ap_return);

    grp_getURFtoDLF_fu_207 : component getURFtoDLF
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_getURFtoDLF_fu_207_ap_start,
        ap_done => grp_getURFtoDLF_fu_207_ap_done,
        ap_idle => grp_getURFtoDLF_fu_207_ap_idle,
        ap_ready => grp_getURFtoDLF_fu_207_ap_ready,
        cubiecube_0_cp_address0 => grp_getURFtoDLF_fu_207_cubiecube_0_cp_address0,
        cubiecube_0_cp_ce0 => grp_getURFtoDLF_fu_207_cubiecube_0_cp_ce0,
        cubiecube_0_cp_q0 => cubiecube_0_cp_q0,
        ap_return => grp_getURFtoDLF_fu_207_ap_return);

    grp_getURtoDF_fu_213 : component getURtoDF
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_getURtoDF_fu_213_ap_start,
        ap_done => grp_getURtoDF_fu_213_ap_done,
        ap_idle => grp_getURtoDF_fu_213_ap_idle,
        ap_ready => grp_getURtoDF_fu_213_ap_ready,
        cubiecube_0_ep_address0 => grp_getURtoDF_fu_213_cubiecube_0_ep_address0,
        cubiecube_0_ep_ce0 => grp_getURtoDF_fu_213_cubiecube_0_ep_ce0,
        cubiecube_0_ep_q0 => cubiecube_0_ep_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_getFRtoBR_fu_189_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_getFRtoBR_fu_189_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_i7_fu_310_p2 = ap_const_lv1_1))) then 
                    grp_getFRtoBR_fu_189_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_getFRtoBR_fu_189_ap_ready = ap_const_logic_1)) then 
                    grp_getFRtoBR_fu_189_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_getUBtoDF_fu_195_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_getUBtoDF_fu_195_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    grp_getUBtoDF_fu_195_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_getUBtoDF_fu_195_ap_ready = ap_const_logic_1)) then 
                    grp_getUBtoDF_fu_195_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_getURFtoDLF_fu_207_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_getURFtoDLF_fu_207_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_i7_fu_310_p2 = ap_const_lv1_1))) then 
                    grp_getURFtoDLF_fu_207_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_getURFtoDLF_fu_207_ap_ready = ap_const_logic_1)) then 
                    grp_getURFtoDLF_fu_207_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_getURtoDF_fu_213_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_getURtoDF_fu_213_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    grp_getURtoDF_fu_213_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_getURtoDF_fu_213_ap_ready = ap_const_logic_1)) then 
                    grp_getURtoDF_fu_213_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_getURtoUL_fu_201_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_getURtoUL_fu_201_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_getURtoUL_fu_201_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_getURtoUL_fu_201_ap_ready = ap_const_logic_1)) then 
                    grp_getURtoUL_fu_201_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_i1_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_i1_reg_146 <= i_22_reg_469;
            elsif (((exitcond_i_fu_222_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_i1_reg_146 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_i6_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_285_i_fu_331_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i_i6_reg_168 <= i_23_fu_342_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_i3_fu_267_p2 = ap_const_lv1_1))) then 
                i_i6_reg_168 <= ap_const_lv3_7;
            end if; 
        end if;
    end process;

    i_i_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_i_reg_135 <= i_reg_451;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_i_reg_135 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_0_in_i_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j_0_in_i_reg_180 <= i_i6_cast_reg_496;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                j_0_in_i_reg_180 <= j_reg_514;
            end if; 
        end if;
    end process;

    ret_i2_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                ret_i2_reg_157 <= ret_1_fu_299_p3;
            elsif (((exitcond_i_fu_222_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ret_i2_reg_157 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    ret_i_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                ret_i_reg_123 <= ret_fu_261_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ret_i_reg_123 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    s_i_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                s_i_fu_72 <= p_s_1_i_fu_359_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_i3_fu_267_p2 = ap_const_lv1_1))) then 
                s_i_fu_72 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                cubiecube_0_cp_load_reg_509 <= cubiecube_0_cp_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_22_reg_469 <= i_22_fu_273_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    i_i6_cast_reg_496(2 downto 0) <= i_i6_cast_fu_306_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_451 <= i_fu_228_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                j_reg_514 <= j_fu_321_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i3_fu_267_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_113_reg_479 <= tmp_113_fu_284_p1;
            end if;
        end if;
    end process;
    i_i6_cast_reg_496(3) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_i_fu_222_p2, ap_CS_fsm_state4, exitcond_i3_fu_267_p2, ap_CS_fsm_state6, tmp_i7_fu_310_p2, ap_CS_fsm_state8, tmp_285_i_fu_331_p2, grp_getUBtoDF_fu_195_ap_done, grp_getURtoUL_fu_201_ap_done, grp_getURtoDF_fu_213_ap_done, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_block_state10_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond_i_fu_222_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_i3_fu_267_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_i7_fu_310_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((tmp_285_i_fu_331_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state10 => 
                if (((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_getURtoUL_fu_201_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_getUBtoDF_fu_195_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_getURtoDF_fu_213_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state10_on_subcall_done_assign_proc : process(grp_getFRtoBR_fu_189_ap_done, grp_getURFtoDLF_fu_207_ap_done)
    begin
                ap_block_state10_on_subcall_done <= ((grp_getURFtoDLF_fu_207_ap_done = ap_const_logic_0) or (grp_getFRtoBR_fu_189_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_getURtoDF_fu_213_ap_done, ap_CS_fsm_state16)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_getURtoDF_fu_213_ap_done = ap_const_logic_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_getURtoDF_fu_213_ap_done, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_getURtoDF_fu_213_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cubiecube_0_co_address0 <= tmp_i_36_fu_234_p1(3 - 1 downto 0);

    cubiecube_0_co_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cubiecube_0_co_ce0 <= ap_const_logic_1;
        else 
            cubiecube_0_co_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cubiecube_0_cp_address0_assign_proc : process(ap_CS_fsm_state6, tmp_i7_fu_310_p2, ap_CS_fsm_state8, grp_getURFtoDLF_fu_207_cubiecube_0_cp_address0, ap_CS_fsm_state10, tmp_i8_fu_316_p1, tmp_286_i_fu_337_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cubiecube_0_cp_address0 <= tmp_286_i_fu_337_p1(3 - 1 downto 0);
        elsif (((tmp_i7_fu_310_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            cubiecube_0_cp_address0 <= tmp_i8_fu_316_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            cubiecube_0_cp_address0 <= grp_getURFtoDLF_fu_207_cubiecube_0_cp_address0;
        else 
            cubiecube_0_cp_address0 <= "XXX";
        end if; 
    end process;


    cubiecube_0_cp_ce0_assign_proc : process(ap_CS_fsm_state6, tmp_i7_fu_310_p2, ap_CS_fsm_state8, grp_getURFtoDLF_fu_207_cubiecube_0_cp_ce0, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((tmp_i7_fu_310_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            cubiecube_0_cp_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            cubiecube_0_cp_ce0 <= grp_getURFtoDLF_fu_207_cubiecube_0_cp_ce0;
        else 
            cubiecube_0_cp_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cubiecube_0_eo_address0 <= tmp_i5_fu_279_p1(4 - 1 downto 0);

    cubiecube_0_eo_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cubiecube_0_eo_ce0 <= ap_const_logic_1;
        else 
            cubiecube_0_eo_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cubiecube_0_ep_address0_assign_proc : process(grp_getFRtoBR_fu_189_cubiecube_0_ep_address0, grp_getUBtoDF_fu_195_cubiecube_0_ep_address0, grp_getURtoUL_fu_201_cubiecube_0_ep_address0, grp_getURtoDF_fu_213_cubiecube_0_ep_address0, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state12, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            cubiecube_0_ep_address0 <= grp_getURtoDF_fu_213_cubiecube_0_ep_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            cubiecube_0_ep_address0 <= grp_getURtoUL_fu_201_cubiecube_0_ep_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            cubiecube_0_ep_address0 <= grp_getUBtoDF_fu_195_cubiecube_0_ep_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            cubiecube_0_ep_address0 <= grp_getFRtoBR_fu_189_cubiecube_0_ep_address0;
        else 
            cubiecube_0_ep_address0 <= "XXXX";
        end if; 
    end process;


    cubiecube_0_ep_ce0_assign_proc : process(grp_getFRtoBR_fu_189_cubiecube_0_ep_ce0, grp_getUBtoDF_fu_195_cubiecube_0_ep_ce0, grp_getURtoUL_fu_201_cubiecube_0_ep_ce0, grp_getURtoDF_fu_213_cubiecube_0_ep_ce0, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state12, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            cubiecube_0_ep_ce0 <= grp_getURtoDF_fu_213_cubiecube_0_ep_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            cubiecube_0_ep_ce0 <= grp_getURtoUL_fu_201_cubiecube_0_ep_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            cubiecube_0_ep_ce0 <= grp_getUBtoDF_fu_195_cubiecube_0_ep_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            cubiecube_0_ep_ce0 <= grp_getFRtoBR_fu_189_cubiecube_0_ep_ce0;
        else 
            cubiecube_0_ep_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_i3_fu_267_p2 <= "1" when (i_i1_reg_146 = ap_const_lv4_B) else "0";
    exitcond_i_fu_222_p2 <= "1" when (i_i_reg_135 = ap_const_lv3_7) else "0";
    grp_getFRtoBR_fu_189_ap_start <= grp_getFRtoBR_fu_189_ap_start_reg;
    grp_getUBtoDF_fu_195_ap_start <= grp_getUBtoDF_fu_195_ap_start_reg;
    grp_getURFtoDLF_fu_207_ap_start <= grp_getURFtoDLF_fu_207_ap_start_reg;
    grp_getURtoDF_fu_213_ap_start <= grp_getURtoDF_fu_213_ap_start_reg;
    grp_getURtoUL_fu_201_ap_start <= grp_getURtoUL_fu_201_ap_start_reg;
    i_22_fu_273_p2 <= std_logic_vector(unsigned(i_i1_reg_146) + unsigned(ap_const_lv4_1));
    i_23_fu_342_p2 <= std_logic_vector(unsigned(i_i6_reg_168) + unsigned(ap_const_lv3_7));
    i_fu_228_p2 <= std_logic_vector(unsigned(i_i_reg_135) + unsigned(ap_const_lv3_1));
    i_i6_cast_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i6_reg_168),4));
        j_cast_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j_fu_321_p2),32));

    j_fu_321_p2 <= std_logic_vector(unsigned(j_0_in_i_reg_180) + unsigned(ap_const_lv4_F));
    p_s_1_i_fu_359_p3 <= 
        s_fu_353_p2 when (tmp_287_i_fu_348_p2(0) = '1') else 
        s_i_fu_72;
    result_FRtoBR_0 <= grp_getFRtoBR_fu_189_ap_return;

    result_FRtoBR_0_ap_vld_assign_proc : process(ap_CS_fsm_state10, ap_block_state10_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            result_FRtoBR_0_ap_vld <= ap_const_logic_1;
        else 
            result_FRtoBR_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    result_UBtoDF_0 <= grp_getUBtoDF_fu_195_ap_return;

    result_UBtoDF_0_ap_vld_assign_proc : process(grp_getUBtoDF_fu_195_ap_done, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_getUBtoDF_fu_195_ap_done = ap_const_logic_1))) then 
            result_UBtoDF_0_ap_vld <= ap_const_logic_1;
        else 
            result_UBtoDF_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    result_URFtoDLF_0 <= grp_getURFtoDLF_fu_207_ap_return;

    result_URFtoDLF_0_ap_vld_assign_proc : process(ap_CS_fsm_state10, ap_block_state10_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            result_URFtoDLF_0_ap_vld <= ap_const_logic_1;
        else 
            result_URFtoDLF_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    result_URtoUL_0 <= grp_getURtoUL_fu_201_ap_return;

    result_URtoUL_0_ap_vld_assign_proc : process(grp_getURtoUL_fu_201_ap_done, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_getURtoUL_fu_201_ap_done = ap_const_logic_1))) then 
            result_URtoUL_0_ap_vld <= ap_const_logic_1;
        else 
            result_URtoUL_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    result_flip_0 <= ret_i2_reg_157;

    result_flip_0_ap_vld_assign_proc : process(ap_CS_fsm_state4, exitcond_i3_fu_267_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_i3_fu_267_p2 = ap_const_lv1_1))) then 
            result_flip_0_ap_vld <= ap_const_logic_1;
        else 
            result_flip_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    result_parity_0 <= 
        tmp_118_fu_420_p2 when (tmp_114_fu_396_p3(0) = '1') else 
        tmp_s_fu_426_p3;

    result_parity_0_ap_vld_assign_proc : process(grp_getURtoDF_fu_213_ap_done, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_getURtoDF_fu_213_ap_done = ap_const_logic_1))) then 
            result_parity_0_ap_vld <= ap_const_logic_1;
        else 
            result_parity_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    result_twist_0 <= ret_i_reg_123;

    result_twist_0_ap_vld_assign_proc : process(ap_CS_fsm_state2, exitcond_i_fu_222_p2)
    begin
        if (((exitcond_i_fu_222_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            result_twist_0_ap_vld <= ap_const_logic_1;
        else 
            result_twist_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ret_1_fu_299_p3 <= (tmp_113_reg_479 & cubiecube_0_eo_q0);
    ret_fu_261_p2 <= std_logic_vector(unsigned(tmp_256_i_fu_257_p1) + unsigned(tmp_i_fu_251_p2));
    s_fu_353_p2 <= std_logic_vector(unsigned(s_i_fu_72) + unsigned(ap_const_lv32_1));
    tmp_113_fu_284_p1 <= ret_i2_reg_157(15 - 1 downto 0);
    tmp_114_fu_396_p3 <= s_i_fu_72(31 downto 31);
    tmp_115_fu_404_p1 <= s_i_fu_72(1 - 1 downto 0);
    tmp_116_fu_408_p1 <= s_i_fu_72(1 - 1 downto 0);
    tmp_117_fu_412_p3 <= (ap_const_lv15_0 & tmp_116_fu_408_p1);
    tmp_118_fu_420_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(tmp_117_fu_412_p3));
    tmp_256_i_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cubiecube_0_co_q0),16));
    tmp_285_i_fu_331_p2 <= "1" when (signed(j_0_in_i_reg_180) > signed(ap_const_lv4_0)) else "0";
    tmp_286_i_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_cast_fu_327_p1),64));
    tmp_287_i_fu_348_p2 <= "1" when (unsigned(cubiecube_0_cp_q0) > unsigned(cubiecube_0_cp_load_reg_509)) else "0";
    tmp_fu_245_p2 <= std_logic_vector(shift_left(unsigned(ret_i_reg_123),to_integer(unsigned('0' & ap_const_lv16_2(16-1 downto 0)))));
    tmp_i5_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i1_reg_146),64));
    tmp_i7_fu_310_p2 <= "1" when (i_i6_reg_168 = ap_const_lv3_0) else "0";
    tmp_i8_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i6_reg_168),64));
    tmp_i_36_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_135),64));
    tmp_i_fu_251_p2 <= std_logic_vector(unsigned(tmp_fu_245_p2) - unsigned(ret_i_reg_123));
    tmp_s_fu_426_p3 <= (ap_const_lv15_0 & tmp_115_fu_404_p1);
end behav;
