// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module getURFtoDLF (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        cubiecube_0_cp_address0,
        cubiecube_0_cp_ce0,
        cubiecube_0_cp_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 51'd1;
parameter    ap_ST_fsm_state2 = 51'd2;
parameter    ap_ST_fsm_state3 = 51'd4;
parameter    ap_ST_fsm_state4 = 51'd8;
parameter    ap_ST_fsm_state5 = 51'd16;
parameter    ap_ST_fsm_state6 = 51'd32;
parameter    ap_ST_fsm_state7 = 51'd64;
parameter    ap_ST_fsm_state8 = 51'd128;
parameter    ap_ST_fsm_state9 = 51'd256;
parameter    ap_ST_fsm_state10 = 51'd512;
parameter    ap_ST_fsm_state11 = 51'd1024;
parameter    ap_ST_fsm_state12 = 51'd2048;
parameter    ap_ST_fsm_state13 = 51'd4096;
parameter    ap_ST_fsm_state14 = 51'd8192;
parameter    ap_ST_fsm_state15 = 51'd16384;
parameter    ap_ST_fsm_state16 = 51'd32768;
parameter    ap_ST_fsm_state17 = 51'd65536;
parameter    ap_ST_fsm_state18 = 51'd131072;
parameter    ap_ST_fsm_state19 = 51'd262144;
parameter    ap_ST_fsm_state20 = 51'd524288;
parameter    ap_ST_fsm_state21 = 51'd1048576;
parameter    ap_ST_fsm_state22 = 51'd2097152;
parameter    ap_ST_fsm_state23 = 51'd4194304;
parameter    ap_ST_fsm_state24 = 51'd8388608;
parameter    ap_ST_fsm_state25 = 51'd16777216;
parameter    ap_ST_fsm_state26 = 51'd33554432;
parameter    ap_ST_fsm_state27 = 51'd67108864;
parameter    ap_ST_fsm_state28 = 51'd134217728;
parameter    ap_ST_fsm_state29 = 51'd268435456;
parameter    ap_ST_fsm_state30 = 51'd536870912;
parameter    ap_ST_fsm_state31 = 51'd1073741824;
parameter    ap_ST_fsm_state32 = 51'd2147483648;
parameter    ap_ST_fsm_state33 = 51'd4294967296;
parameter    ap_ST_fsm_state34 = 51'd8589934592;
parameter    ap_ST_fsm_state35 = 51'd17179869184;
parameter    ap_ST_fsm_state36 = 51'd34359738368;
parameter    ap_ST_fsm_state37 = 51'd68719476736;
parameter    ap_ST_fsm_state38 = 51'd137438953472;
parameter    ap_ST_fsm_state39 = 51'd274877906944;
parameter    ap_ST_fsm_state40 = 51'd549755813888;
parameter    ap_ST_fsm_state41 = 51'd1099511627776;
parameter    ap_ST_fsm_state42 = 51'd2199023255552;
parameter    ap_ST_fsm_state43 = 51'd4398046511104;
parameter    ap_ST_fsm_state44 = 51'd8796093022208;
parameter    ap_ST_fsm_state45 = 51'd17592186044416;
parameter    ap_ST_fsm_state46 = 51'd35184372088832;
parameter    ap_ST_fsm_state47 = 51'd70368744177664;
parameter    ap_ST_fsm_state48 = 51'd140737488355328;
parameter    ap_ST_fsm_state49 = 51'd281474976710656;
parameter    ap_ST_fsm_state50 = 51'd562949953421312;
parameter    ap_ST_fsm_state51 = 51'd1125899906842624;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] cubiecube_0_cp_address0;
output   cubiecube_0_cp_ce0;
input  [2:0] cubiecube_0_cp_q0;
output  [15:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg cubiecube_0_cp_ce0;

(* fsm_encoding = "none" *) reg   [50:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] corner6_addr_reg_499;
wire   [2:0] p_sum_fu_261_p2;
wire    ap_CS_fsm_state2;
wire   [31:0] n_assign_cast3_fu_288_p1;
reg   [31:0] n_assign_cast3_reg_526;
wire    ap_CS_fsm_state3;
wire   [3:0] j_8_fu_298_p2;
reg   [3:0] j_8_reg_536;
wire   [0:0] exitcond_fu_292_p2;
reg   [2:0] cubiecube_0_cp_load_reg_546;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_173_fu_309_p2;
reg   [0:0] tmp_173_reg_551;
wire   [31:0] x_3_fu_315_p2;
reg   [31:0] x_3_reg_555;
wire   [0:0] tmp_i_fu_321_p2;
reg   [0:0] tmp_i_reg_560;
wire   [31:0] tmp_380_i_fu_359_p2;
reg   [31:0] tmp_380_i_reg_564;
wire   [31:0] s_fu_370_p2;
reg   [31:0] s_reg_572;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond_i_fu_365_p2;
wire   [31:0] i_26_fu_376_p2;
reg   [31:0] i_26_reg_577;
wire   [31:0] j_7_fu_396_p2;
reg   [31:0] j_7_reg_582;
wire    ap_CS_fsm_state6;
wire   [31:0] grp_fu_391_p2;
wire    ap_CS_fsm_state41;
reg   [2:0] corner6_addr_2_reg_595;
wire    ap_CS_fsm_state43;
wire   [0:0] tmp_174_fu_413_p2;
wire   [31:0] tmp_175_fu_424_p2;
reg   [31:0] tmp_175_reg_600;
wire   [31:0] k_2_fu_436_p2;
reg   [31:0] k_2_reg_608;
wire    ap_CS_fsm_state45;
wire   [2:0] tmp_179_fu_442_p2;
reg   [2:0] tmp_179_reg_613;
wire   [0:0] tmp_178_fu_430_p2;
wire   [2:0] corner6_q0;
reg   [2:0] temp_reg_618;
wire    ap_CS_fsm_state46;
wire   [2:0] i_27_fu_454_p2;
reg   [2:0] i_27_reg_626;
wire    ap_CS_fsm_state47;
wire   [0:0] exitcond5_fu_448_p2;
wire   [31:0] tmp_180_fu_473_p2;
reg   [31:0] tmp_180_reg_636;
wire    ap_CS_fsm_state49;
wire   [31:0] b_2_fu_479_p2;
wire    ap_CS_fsm_state50;
wire   [2:0] j_fu_484_p2;
reg   [2:0] corner6_address0;
reg    corner6_ce0;
reg    corner6_we0;
reg   [2:0] corner6_d0;
reg   [2:0] p_rec_reg_139;
wire   [0:0] tmp_s_fu_272_p2;
reg   [3:0] i_reg_150;
wire    ap_CS_fsm_state42;
reg   [31:0] j_i_reg_162;
reg  signed [31:0] i_i_reg_174;
reg  signed [31:0] s_i_reg_183;
reg   [31:0] p_0_i_reg_195;
reg   [2:0] r_assign_reg_207;
reg  signed [31:0] b_reg_219;
reg   [31:0] k_reg_231;
reg   [2:0] i_i2_reg_243;
wire    ap_CS_fsm_state48;
wire   [63:0] p_sum_cast_fu_267_p1;
wire   [63:0] tmp_172_fu_304_p1;
wire  signed [63:0] tmp_181_fu_382_p1;
wire   [63:0] tmp_177_fu_419_p1;
wire   [63:0] tmp_i4_fu_460_p1;
wire   [63:0] tmp_110_i_fu_465_p1;
reg   [31:0] a_1_fu_68;
wire   [31:0] a_2_fu_402_p2;
reg   [31:0] x_fu_72;
wire    ap_CS_fsm_state44;
wire   [1:0] p_lshr_f_i_cast_fu_326_p4;
wire   [31:0] tmp_i_cast_fu_336_p1;
wire   [0:0] tmp_379_i_fu_340_p2;
wire   [31:0] k_assign_2_fu_346_p2;
wire   [31:0] p_k_i_fu_351_p3;
wire  signed [31:0] tmp_181_fu_382_p0;
wire  signed [31:0] tmp_175_fu_424_p1;
wire   [2:0] tmp_180_fu_473_p0;
wire    ap_CS_fsm_state51;
wire   [31:0] tmp_176_fu_490_p2;
reg    grp_fu_391_ap_start;
wire    grp_fu_391_ap_done;
reg   [50:0] ap_NS_fsm;
wire   [31:0] tmp_180_fu_473_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 51'd1;
end

getURFtoDLF_corner6 #(
    .DataWidth( 3 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
corner6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(corner6_address0),
    .ce0(corner6_ce0),
    .we0(corner6_we0),
    .d0(corner6_d0),
    .q0(corner6_q0)
);

solution_sdiv_32nkbM #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
solution_sdiv_32nkbM_U38(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_391_ap_start),
    .done(grp_fu_391_ap_done),
    .din0(s_reg_572),
    .din1(j_i_reg_162),
    .ce(1'b1),
    .dout(grp_fu_391_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) & (tmp_173_reg_551 == 1'd1))) begin
        a_1_fu_68 <= a_2_fu_402_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_272_p2 == 1'd1))) begin
        a_1_fu_68 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_292_p2 == 1'd1))) begin
        b_reg_219 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        b_reg_219 <= b_2_fu_479_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        i_i2_reg_243 <= i_27_reg_626;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        i_i2_reg_243 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        i_i_reg_174 <= i_26_reg_577;
    end else if (((1'b1 == ap_CS_fsm_state4) & (tmp_173_fu_309_p2 == 1'd1) & (tmp_i_fu_321_p2 == 1'd0))) begin
        i_i_reg_174 <= n_assign_cast3_reg_526;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        i_reg_150 <= j_8_reg_536;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_272_p2 == 1'd1))) begin
        i_reg_150 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        j_i_reg_162 <= j_7_reg_582;
    end else if (((1'b1 == ap_CS_fsm_state4) & (tmp_173_fu_309_p2 == 1'd1) & (tmp_i_fu_321_p2 == 1'd0))) begin
        j_i_reg_162 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state43) & (tmp_174_fu_413_p2 == 1'd0))) begin
        k_reg_231 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state47) & (exitcond5_fu_448_p2 == 1'd1))) begin
        k_reg_231 <= k_2_reg_608;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond_i_fu_365_p2 == 1'd1) & (tmp_i_reg_560 == 1'd0))) begin
        p_0_i_reg_195 <= s_i_reg_183;
    end else if (((1'b1 == ap_CS_fsm_state4) & (tmp_i_fu_321_p2 == 1'd1) & (tmp_173_fu_309_p2 == 1'd1))) begin
        p_0_i_reg_195 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_272_p2 == 1'd0))) begin
        p_rec_reg_139 <= p_sum_fu_261_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_rec_reg_139 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_292_p2 == 1'd1))) begin
        r_assign_reg_207 <= 3'd5;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        r_assign_reg_207 <= j_fu_484_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        s_i_reg_183 <= grp_fu_391_p2;
    end else if (((1'b1 == ap_CS_fsm_state4) & (tmp_173_fu_309_p2 == 1'd1) & (tmp_i_fu_321_p2 == 1'd0))) begin
        s_i_reg_183 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & ((exitcond_i_fu_365_p2 == 1'd1) | (tmp_i_reg_560 == 1'd1)))) begin
        x_fu_72 <= x_3_reg_555;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_272_p2 == 1'd1))) begin
        x_fu_72 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state43) & (tmp_174_fu_413_p2 == 1'd0))) begin
        corner6_addr_2_reg_595 <= tmp_177_fu_419_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cubiecube_0_cp_load_reg_546 <= cubiecube_0_cp_q0;
        tmp_173_reg_551 <= tmp_173_fu_309_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond_i_fu_365_p2 == 1'd0) & (tmp_i_reg_560 == 1'd0))) begin
        i_26_reg_577 <= i_26_fu_376_p2;
        s_reg_572 <= s_fu_370_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        i_27_reg_626 <= i_27_fu_454_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_7_reg_582 <= j_7_fu_396_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_8_reg_536 <= j_8_fu_298_p2;
        n_assign_cast3_reg_526[3 : 0] <= n_assign_cast3_fu_288_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        k_2_reg_608 <= k_2_fu_436_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        temp_reg_618 <= corner6_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state43) & (tmp_174_fu_413_p2 == 1'd1))) begin
        tmp_175_reg_600 <= tmp_175_fu_424_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state45) & (tmp_178_fu_430_p2 == 1'd1))) begin
        tmp_179_reg_613 <= tmp_179_fu_442_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        tmp_180_reg_636 <= tmp_180_fu_473_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_173_fu_309_p2 == 1'd1) & (tmp_i_fu_321_p2 == 1'd0))) begin
        tmp_380_i_reg_564 <= tmp_380_i_fu_359_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_173_fu_309_p2 == 1'd1))) begin
        tmp_i_reg_560 <= tmp_i_fu_321_p2;
        x_3_reg_555 <= x_3_fu_315_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        corner6_address0 = tmp_110_i_fu_465_p1;
    end else if (((1'b1 == ap_CS_fsm_state47) & (exitcond5_fu_448_p2 == 1'd0))) begin
        corner6_address0 = tmp_i4_fu_460_p1;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        corner6_address0 = corner6_addr_reg_499;
    end else if (((1'b1 == ap_CS_fsm_state44) | ((1'b1 == ap_CS_fsm_state47) & (exitcond5_fu_448_p2 == 1'd1)))) begin
        corner6_address0 = corner6_addr_2_reg_595;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        corner6_address0 = tmp_181_fu_382_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        corner6_address0 = p_sum_cast_fu_267_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        corner6_address0 = 64'd0;
    end else begin
        corner6_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state47) & (exitcond5_fu_448_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state47) & (exitcond5_fu_448_p2 == 1'd0)))) begin
        corner6_ce0 = 1'b1;
    end else begin
        corner6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        corner6_d0 = corner6_q0;
    end else if (((1'b1 == ap_CS_fsm_state47) & (exitcond5_fu_448_p2 == 1'd1))) begin
        corner6_d0 = temp_reg_618;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        corner6_d0 = cubiecube_0_cp_load_reg_546;
    end else if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        corner6_d0 = 3'd0;
    end else begin
        corner6_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state48) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state47) & (exitcond5_fu_448_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state5) & ((exitcond_i_fu_365_p2 == 1'd1) | (tmp_i_reg_560 == 1'd1))))) begin
        corner6_we0 = 1'b1;
    end else begin
        corner6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        cubiecube_0_cp_ce0 = 1'b1;
    end else begin
        cubiecube_0_cp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_391_ap_start = 1'b1;
    end else begin
        grp_fu_391_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_272_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_292_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (tmp_173_fu_309_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & ((exitcond_i_fu_365_p2 == 1'd1) | (tmp_i_reg_560 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state43 : begin
            if (((1'b1 == ap_CS_fsm_state43) & (tmp_174_fu_413_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            if (((1'b1 == ap_CS_fsm_state45) & (tmp_178_fu_430_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            if (((1'b1 == ap_CS_fsm_state47) & (exitcond5_fu_448_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_2_fu_402_p2 = (p_0_i_reg_195 + a_1_fu_68);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_return = tmp_176_fu_490_p2[15:0];

assign b_2_fu_479_p2 = (k_reg_231 + tmp_180_reg_636);

assign corner6_addr_reg_499 = 64'd0;

assign cubiecube_0_cp_address0 = tmp_172_fu_304_p1;

assign exitcond5_fu_448_p2 = ((i_i2_reg_243 == r_assign_reg_207) ? 1'b1 : 1'b0);

assign exitcond_fu_292_p2 = ((i_reg_150 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond_i_fu_365_p2 = ((j_i_reg_162 == tmp_380_i_reg_564) ? 1'b1 : 1'b0);

assign i_26_fu_376_p2 = ($signed(i_i_reg_174) + $signed(32'd4294967295));

assign i_27_fu_454_p2 = (i_i2_reg_243 + 3'd1);

assign j_7_fu_396_p2 = (j_i_reg_162 + 32'd1);

assign j_8_fu_298_p2 = (i_reg_150 + 4'd1);

assign j_fu_484_p2 = ($signed(r_assign_reg_207) + $signed(3'd7));

assign k_2_fu_436_p2 = (k_reg_231 + 32'd1);

assign k_assign_2_fu_346_p2 = (n_assign_cast3_reg_526 - x_3_fu_315_p2);

assign n_assign_cast3_fu_288_p1 = i_reg_150;

assign p_k_i_fu_351_p3 = ((tmp_379_i_fu_340_p2[0:0] === 1'b1) ? k_assign_2_fu_346_p2 : x_3_fu_315_p2);

assign p_lshr_f_i_cast_fu_326_p4 = {{i_reg_150[2:1]}};

assign p_sum_cast_fu_267_p1 = p_sum_fu_261_p2;

assign p_sum_fu_261_p2 = (p_rec_reg_139 + 3'd1);

assign s_fu_370_p2 = ($signed(s_i_reg_183) * $signed(i_i_reg_174));

assign tmp_110_i_fu_465_p1 = i_i2_reg_243;

assign tmp_172_fu_304_p1 = i_reg_150;

assign tmp_173_fu_309_p2 = ((cubiecube_0_cp_q0 < 3'd6) ? 1'b1 : 1'b0);

assign tmp_174_fu_413_p2 = ((r_assign_reg_207 == 3'd0) ? 1'b1 : 1'b0);

assign tmp_175_fu_424_p1 = a_1_fu_68;

assign tmp_175_fu_424_p2 = ($signed({{1'b0}, {32'd720}}) * $signed(tmp_175_fu_424_p1));

assign tmp_176_fu_490_p2 = ($signed(b_reg_219) + $signed(tmp_175_reg_600));

assign tmp_177_fu_419_p1 = r_assign_reg_207;

assign tmp_178_fu_430_p2 = ((corner6_q0 == r_assign_reg_207) ? 1'b1 : 1'b0);

assign tmp_179_fu_442_p2 = (r_assign_reg_207 + 3'd1);

assign tmp_180_fu_473_p0 = tmp_180_fu_473_p00;

assign tmp_180_fu_473_p00 = tmp_179_reg_613;

assign tmp_180_fu_473_p2 = ($signed({{1'b0}, {tmp_180_fu_473_p0}}) * $signed(b_reg_219));

assign tmp_181_fu_382_p0 = x_fu_72;

assign tmp_181_fu_382_p1 = tmp_181_fu_382_p0;

assign tmp_379_i_fu_340_p2 = (($signed(tmp_i_cast_fu_336_p1) < $signed(x_3_fu_315_p2)) ? 1'b1 : 1'b0);

assign tmp_380_i_fu_359_p2 = (p_k_i_fu_351_p3 + 32'd1);

assign tmp_i4_fu_460_p1 = i_27_fu_454_p2;

assign tmp_i_cast_fu_336_p1 = p_lshr_f_i_cast_fu_326_p4;

assign tmp_i_fu_321_p2 = (($signed(n_assign_cast3_reg_526) < $signed(x_3_fu_315_p2)) ? 1'b1 : 1'b0);

assign tmp_s_fu_272_p2 = ((p_rec_reg_139 == 3'd4) ? 1'b1 : 1'b0);

assign x_3_fu_315_p2 = (x_fu_72 + 32'd1);

always @ (posedge ap_clk) begin
    n_assign_cast3_reg_526[31:4] <= 28'b0000000000000000000000000000;
end

endmodule //getURFtoDLF
