// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module convert_edge (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r,
        ap_return
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [3:0] in_r;
output  [3:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] ap_return;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] p_0_reg_34;
wire   [0:0] tmp_fu_96_p2;
wire   [0:0] tmp_s_fu_102_p2;
wire   [0:0] tmp_205_fu_108_p2;
wire   [0:0] tmp_206_fu_114_p2;
wire   [0:0] tmp_207_fu_120_p2;
wire   [0:0] tmp_208_fu_126_p2;
wire   [0:0] tmp_209_fu_132_p2;
wire   [0:0] tmp_210_fu_138_p2;
wire   [0:0] tmp_211_fu_144_p2;
wire   [0:0] tmp_212_fu_150_p2;
wire   [0:0] tmp_213_fu_156_p2;
reg   [3:0] merge_reg_84;
wire    ap_CS_fsm_state2;
reg   [3:0] ap_return_preg;
wire    ap_CS_fsm_state3;
reg   [2:0] ap_NS_fsm;
reg    ap_condition_46;
reg    ap_condition_54;
reg    ap_condition_63;
reg    ap_condition_73;
reg    ap_condition_84;
reg    ap_condition_96;
reg    ap_condition_109;
reg    ap_condition_123;
reg    ap_condition_138;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_return_preg = 4'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 4'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_preg <= merge_reg_84;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (tmp_211_fu_144_p2 == 1'd0) & (tmp_210_fu_138_p2 == 1'd0) & (tmp_209_fu_132_p2 == 1'd0) & (tmp_208_fu_126_p2 == 1'd0) & (tmp_207_fu_120_p2 == 1'd0) & (tmp_206_fu_114_p2 == 1'd0) & (tmp_205_fu_108_p2 == 1'd0) & (tmp_213_fu_156_p2 == 1'd0) & (tmp_212_fu_150_p2 == 1'd0) & (tmp_s_fu_102_p2 == 1'd0) & (tmp_fu_96_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        merge_reg_84 <= 4'd11;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        merge_reg_84 <= p_0_reg_34;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_138)) begin
            p_0_reg_34 <= 4'd10;
        end else if ((1'b1 == ap_condition_123)) begin
            p_0_reg_34 <= 4'd9;
        end else if ((1'b1 == ap_condition_109)) begin
            p_0_reg_34 <= 4'd8;
        end else if ((1'b1 == ap_condition_96)) begin
            p_0_reg_34 <= 4'd7;
        end else if ((1'b1 == ap_condition_84)) begin
            p_0_reg_34 <= 4'd6;
        end else if ((1'b1 == ap_condition_73)) begin
            p_0_reg_34 <= 4'd5;
        end else if ((1'b1 == ap_condition_63)) begin
            p_0_reg_34 <= 4'd4;
        end else if ((1'b1 == ap_condition_54)) begin
            p_0_reg_34 <= 4'd3;
        end else if ((1'b1 == ap_condition_46)) begin
            p_0_reg_34 <= 4'd2;
        end else if (((tmp_s_fu_102_p2 == 1'd1) & (tmp_fu_96_p2 == 1'd0))) begin
            p_0_reg_34 <= 4'd1;
        end else if ((tmp_fu_96_p2 == 1'd1)) begin
            p_0_reg_34 <= 4'd0;
        end
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return = merge_reg_84;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (tmp_211_fu_144_p2 == 1'd0) & (tmp_210_fu_138_p2 == 1'd0) & (tmp_209_fu_132_p2 == 1'd0) & (tmp_208_fu_126_p2 == 1'd0) & (tmp_207_fu_120_p2 == 1'd0) & (tmp_206_fu_114_p2 == 1'd0) & (tmp_205_fu_108_p2 == 1'd0) & (tmp_213_fu_156_p2 == 1'd0) & (tmp_212_fu_150_p2 == 1'd0) & (tmp_s_fu_102_p2 == 1'd0) & (tmp_fu_96_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & ((tmp_211_fu_144_p2 == 1'd1) | (tmp_210_fu_138_p2 == 1'd1) | (tmp_209_fu_132_p2 == 1'd1) | (tmp_208_fu_126_p2 == 1'd1) | (tmp_207_fu_120_p2 == 1'd1) | (tmp_206_fu_114_p2 == 1'd1) | (tmp_205_fu_108_p2 == 1'd1) | (tmp_s_fu_102_p2 == 1'd1) | (tmp_213_fu_156_p2 == 1'd1) | (tmp_212_fu_150_p2 == 1'd1) | (tmp_fu_96_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_condition_109 = ((tmp_210_fu_138_p2 == 1'd0) & (tmp_209_fu_132_p2 == 1'd0) & (tmp_208_fu_126_p2 == 1'd0) & (tmp_207_fu_120_p2 == 1'd0) & (tmp_206_fu_114_p2 == 1'd0) & (tmp_205_fu_108_p2 == 1'd0) & (tmp_s_fu_102_p2 == 1'd0) & (tmp_211_fu_144_p2 == 1'd1) & (tmp_fu_96_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_123 = ((tmp_211_fu_144_p2 == 1'd0) & (tmp_210_fu_138_p2 == 1'd0) & (tmp_209_fu_132_p2 == 1'd0) & (tmp_208_fu_126_p2 == 1'd0) & (tmp_207_fu_120_p2 == 1'd0) & (tmp_206_fu_114_p2 == 1'd0) & (tmp_205_fu_108_p2 == 1'd0) & (tmp_s_fu_102_p2 == 1'd0) & (tmp_212_fu_150_p2 == 1'd1) & (tmp_fu_96_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_138 = ((tmp_211_fu_144_p2 == 1'd0) & (tmp_210_fu_138_p2 == 1'd0) & (tmp_209_fu_132_p2 == 1'd0) & (tmp_208_fu_126_p2 == 1'd0) & (tmp_207_fu_120_p2 == 1'd0) & (tmp_206_fu_114_p2 == 1'd0) & (tmp_205_fu_108_p2 == 1'd0) & (tmp_212_fu_150_p2 == 1'd0) & (tmp_s_fu_102_p2 == 1'd0) & (tmp_213_fu_156_p2 == 1'd1) & (tmp_fu_96_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_46 = ((tmp_s_fu_102_p2 == 1'd0) & (tmp_205_fu_108_p2 == 1'd1) & (tmp_fu_96_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_54 = ((tmp_205_fu_108_p2 == 1'd0) & (tmp_s_fu_102_p2 == 1'd0) & (tmp_206_fu_114_p2 == 1'd1) & (tmp_fu_96_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_63 = ((tmp_206_fu_114_p2 == 1'd0) & (tmp_205_fu_108_p2 == 1'd0) & (tmp_s_fu_102_p2 == 1'd0) & (tmp_207_fu_120_p2 == 1'd1) & (tmp_fu_96_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_73 = ((tmp_207_fu_120_p2 == 1'd0) & (tmp_206_fu_114_p2 == 1'd0) & (tmp_205_fu_108_p2 == 1'd0) & (tmp_s_fu_102_p2 == 1'd0) & (tmp_208_fu_126_p2 == 1'd1) & (tmp_fu_96_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_84 = ((tmp_208_fu_126_p2 == 1'd0) & (tmp_207_fu_120_p2 == 1'd0) & (tmp_206_fu_114_p2 == 1'd0) & (tmp_205_fu_108_p2 == 1'd0) & (tmp_s_fu_102_p2 == 1'd0) & (tmp_209_fu_132_p2 == 1'd1) & (tmp_fu_96_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_96 = ((tmp_209_fu_132_p2 == 1'd0) & (tmp_208_fu_126_p2 == 1'd0) & (tmp_207_fu_120_p2 == 1'd0) & (tmp_206_fu_114_p2 == 1'd0) & (tmp_205_fu_108_p2 == 1'd0) & (tmp_s_fu_102_p2 == 1'd0) & (tmp_210_fu_138_p2 == 1'd1) & (tmp_fu_96_p2 == 1'd0));
end

assign tmp_205_fu_108_p2 = ((in_r == 4'd2) ? 1'b1 : 1'b0);

assign tmp_206_fu_114_p2 = ((in_r == 4'd3) ? 1'b1 : 1'b0);

assign tmp_207_fu_120_p2 = ((in_r == 4'd4) ? 1'b1 : 1'b0);

assign tmp_208_fu_126_p2 = ((in_r == 4'd5) ? 1'b1 : 1'b0);

assign tmp_209_fu_132_p2 = ((in_r == 4'd6) ? 1'b1 : 1'b0);

assign tmp_210_fu_138_p2 = ((in_r == 4'd7) ? 1'b1 : 1'b0);

assign tmp_211_fu_144_p2 = ((in_r == 4'd8) ? 1'b1 : 1'b0);

assign tmp_212_fu_150_p2 = ((in_r == 4'd9) ? 1'b1 : 1'b0);

assign tmp_213_fu_156_p2 = ((in_r == 4'd10) ? 1'b1 : 1'b0);

assign tmp_fu_96_p2 = ((in_r == 4'd0) ? 1'b1 : 1'b0);

assign tmp_s_fu_102_p2 = ((in_r == 4'd1) ? 1'b1 : 1'b0);

endmodule //convert_edge
