// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module toCubieCube (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        facecube_0_f_address0,
        facecube_0_f_ce0,
        facecube_0_f_q0,
        facecube_0_f_address1,
        facecube_0_f_ce1,
        facecube_0_f_q1,
        ccRet_cp_0_address0,
        ccRet_cp_0_ce0,
        ccRet_cp_0_we0,
        ccRet_cp_0_d0,
        ccRet_ep_0_address0,
        ccRet_ep_0_ce0,
        ccRet_ep_0_we0,
        ccRet_ep_0_d0,
        ccRet_co_0_address0,
        ccRet_co_0_ce0,
        ccRet_co_0_we0,
        ccRet_co_0_d0,
        ccRet_eo_0_address0,
        ccRet_eo_0_ce0,
        ccRet_eo_0_we0,
        ccRet_eo_0_d0
);

parameter    ap_ST_fsm_state1 = 22'd1;
parameter    ap_ST_fsm_state2 = 22'd2;
parameter    ap_ST_fsm_state3 = 22'd4;
parameter    ap_ST_fsm_state4 = 22'd8;
parameter    ap_ST_fsm_state5 = 22'd16;
parameter    ap_ST_fsm_state6 = 22'd32;
parameter    ap_ST_fsm_state7 = 22'd64;
parameter    ap_ST_fsm_state8 = 22'd128;
parameter    ap_ST_fsm_state9 = 22'd256;
parameter    ap_ST_fsm_state10 = 22'd512;
parameter    ap_ST_fsm_state11 = 22'd1024;
parameter    ap_ST_fsm_state12 = 22'd2048;
parameter    ap_ST_fsm_state13 = 22'd4096;
parameter    ap_ST_fsm_state14 = 22'd8192;
parameter    ap_ST_fsm_state15 = 22'd16384;
parameter    ap_ST_fsm_state16 = 22'd32768;
parameter    ap_ST_fsm_state17 = 22'd65536;
parameter    ap_ST_fsm_state18 = 22'd131072;
parameter    ap_ST_fsm_state19 = 22'd262144;
parameter    ap_ST_fsm_state20 = 22'd524288;
parameter    ap_ST_fsm_state21 = 22'd1048576;
parameter    ap_ST_fsm_state22 = 22'd2097152;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] facecube_0_f_address0;
output   facecube_0_f_ce0;
input  [2:0] facecube_0_f_q0;
output  [5:0] facecube_0_f_address1;
output   facecube_0_f_ce1;
input  [2:0] facecube_0_f_q1;
output  [2:0] ccRet_cp_0_address0;
output   ccRet_cp_0_ce0;
output   ccRet_cp_0_we0;
output  [2:0] ccRet_cp_0_d0;
output  [3:0] ccRet_ep_0_address0;
output   ccRet_ep_0_ce0;
output   ccRet_ep_0_we0;
output  [3:0] ccRet_ep_0_d0;
output  [2:0] ccRet_co_0_address0;
output   ccRet_co_0_ce0;
output   ccRet_co_0_we0;
output  [1:0] ccRet_co_0_d0;
output  [3:0] ccRet_eo_0_address0;
output   ccRet_eo_0_ce0;
output   ccRet_eo_0_we0;
output  [0:0] ccRet_eo_0_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] facecube_0_f_address0;
reg facecube_0_f_ce0;
reg[5:0] facecube_0_f_address1;
reg facecube_0_f_ce1;
reg[2:0] ccRet_cp_0_address0;
reg ccRet_cp_0_ce0;
reg ccRet_cp_0_we0;
reg[2:0] ccRet_cp_0_d0;
reg[3:0] ccRet_ep_0_address0;
reg ccRet_ep_0_ce0;
reg ccRet_ep_0_we0;
reg[3:0] ccRet_ep_0_d0;
reg ccRet_co_0_ce0;
reg ccRet_co_0_we0;
reg[3:0] ccRet_eo_0_address0;
reg ccRet_eo_0_ce0;
reg ccRet_eo_0_we0;
reg[0:0] ccRet_eo_0_d0;

(* fsm_encoding = "none" *) reg   [21:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] cornerFacelet_address0;
reg    cornerFacelet_ce0;
wire   [5:0] cornerFacelet_q0;
wire   [4:0] cornerFacelet_address1;
reg    cornerFacelet_ce1;
wire   [5:0] cornerFacelet_q1;
wire   [2:0] cornerColor_1_address0;
reg    cornerColor_1_ce0;
wire   [2:0] cornerColor_1_q0;
wire   [2:0] cornerColor_2_address0;
reg    cornerColor_2_ce0;
wire   [2:0] cornerColor_2_q0;
wire   [3:0] edgeFacelet_0_address0;
reg    edgeFacelet_0_ce0;
wire   [5:0] edgeFacelet_0_q0;
wire   [3:0] edgeFacelet_1_address0;
reg    edgeFacelet_1_ce0;
wire   [5:0] edgeFacelet_1_q0;
wire   [3:0] edgeColor_0_address0;
reg    edgeColor_0_ce0;
wire   [2:0] edgeColor_0_q0;
reg   [3:0] edgeColor_1_address0;
reg    edgeColor_1_ce0;
wire   [2:0] edgeColor_1_q0;
reg   [2:0] reg_437;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state16;
reg   [2:0] reg_442;
wire   [3:0] i_8_fu_453_p2;
wire    ap_CS_fsm_state2;
wire   [3:0] i_9_fu_470_p2;
wire    ap_CS_fsm_state3;
wire   [3:0] i_10_fu_487_p2;
reg   [3:0] i_10_reg_1011;
wire    ap_CS_fsm_state4;
wire   [63:0] tmp_20_fu_493_p1;
reg   [63:0] tmp_20_reg_1016;
wire   [0:0] exitcond8_fu_481_p2;
wire   [5:0] tmp_31_fu_509_p2;
reg   [5:0] tmp_31_reg_1022;
wire   [0:0] tmp_21_fu_515_p2;
reg   [0:0] tmp_21_reg_1029;
wire    ap_CS_fsm_state5;
wire   [1:0] ori_1_fu_521_p2;
reg   [1:0] ori_1_reg_1033;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire   [0:0] tmp_49_fu_558_p2;
wire    ap_CS_fsm_state8;
wire   [0:0] tmp_58_fu_662_p3;
reg   [0:0] tmp_58_reg_1072;
wire    ap_CS_fsm_state10;
wire   [3:0] j_2_fu_670_p2;
reg   [3:0] j_2_reg_1076;
wire   [63:0] tmp_43_fu_676_p1;
reg   [63:0] tmp_43_reg_1081;
wire   [0:0] tmp_44_fu_681_p2;
reg   [0:0] tmp_44_reg_1091;
wire    ap_CS_fsm_state11;
wire   [2:0] merge_i_fu_897_p3;
reg   [2:0] merge_i_reg_1103;
wire    ap_CS_fsm_state12;
wire   [0:0] tmp_47_fu_687_p2;
wire   [3:0] i_4_fu_925_p2;
reg   [3:0] i_4_reg_1111;
wire    ap_CS_fsm_state14;
wire   [63:0] tmp_22_fu_931_p1;
reg   [63:0] tmp_22_reg_1116;
wire   [0:0] exitcond_fu_919_p2;
wire    ap_CS_fsm_state15;
wire   [0:0] tmp_28_fu_947_p2;
reg   [0:0] tmp_28_reg_1144;
wire    ap_CS_fsm_state17;
wire   [3:0] j_fu_953_p2;
reg   [3:0] j_reg_1148;
wire   [63:0] tmp_36_fu_959_p1;
reg   [63:0] tmp_36_reg_1153;
reg   [2:0] edgeColor_0_load_reg_1164;
wire    ap_CS_fsm_state18;
wire   [0:0] tmp_37_fu_964_p2;
reg   [0:0] tmp_37_reg_1169;
wire   [0:0] tmp_40_fu_970_p2;
reg   [0:0] tmp_40_reg_1178;
wire    ap_CS_fsm_state19;
wire   [3:0] edgeColor_1_addr_1_gep_fu_303_p3;
wire   [0:0] tmp_42_fu_976_p2;
reg   [0:0] tmp_42_reg_1187;
wire    grp_convert_edge_fu_430_ap_start;
wire    grp_convert_edge_fu_430_ap_done;
wire    grp_convert_edge_fu_430_ap_idle;
wire    grp_convert_edge_fu_430_ap_ready;
wire   [3:0] grp_convert_edge_fu_430_ap_return;
reg   [3:0] i_reg_350;
wire   [0:0] exitcond1_fu_447_p2;
reg   [3:0] i_1_reg_361;
wire   [0:0] exitcond9_fu_464_p2;
reg   [3:0] i_2_reg_372;
wire    ap_CS_fsm_state13;
reg   [1:0] ori_reg_383;
reg   [3:0] in_assign_reg_395;
reg   [3:0] i_3_reg_407;
wire    ap_CS_fsm_state21;
reg    ap_predicate_op213_call_state21;
reg    ap_block_state21_on_subcall_done;
reg   [3:0] j_1_reg_418;
wire    ap_CS_fsm_state20;
wire   [0:0] or_cond_fu_987_p2;
reg    grp_convert_edge_fu_430_ap_start_reg;
wire    ap_CS_fsm_state22;
wire   [63:0] tmp_fu_459_p1;
wire   [63:0] tmp_s_fu_476_p1;
wire  signed [63:0] tmp_50_cast_fu_536_p1;
wire   [63:0] tmp_27_fu_541_p1;
wire  signed [63:0] tmp_53_cast_fu_607_p1;
wire  signed [63:0] tmp_56_cast_fu_647_p1;
wire   [63:0] tmp_32_fu_652_p1;
wire   [63:0] tmp_38_fu_657_p1;
wire   [63:0] tmp_23_fu_937_p1;
wire   [63:0] tmp_24_fu_942_p1;
wire   [3:0] ccRet_ep_0_addr_1_gep_fu_333_p3;
wire   [3:0] ccRet_eo_0_addr_gep_fu_341_p3;
wire   [5:0] tmp_30_fu_501_p3;
wire   [5:0] tmp_20_cast_fu_497_p1;
wire   [5:0] tmp_26_cast_fu_527_p1;
wire   [5:0] tmp_34_fu_531_p2;
wire   [0:0] tmp_48_fu_552_p2;
wire   [0:0] tmp_39_fu_546_p2;
wire   [2:0] tmp_32_cast_fu_564_p1;
wire   [2:0] tmp_29_fu_568_p2;
wire   [1:0] tmp_50_fu_580_p2;
wire   [0:0] tmp_35_fu_574_p2;
wire  signed [2:0] tmp_52_cast_fu_586_p1;
wire   [2:0] tmp_51_fu_590_p3;
wire   [5:0] tmp_31_cast_fu_598_p1;
wire   [5:0] tmp_52_fu_602_p2;
wire   [2:0] tmp_33_fu_612_p2;
wire   [0:0] tmp_53_fu_618_p2;
wire   [2:0] tmp_54_fu_624_p2;
wire   [2:0] tmp_55_fu_630_p3;
wire   [5:0] tmp_35_cast_fu_638_p1;
wire   [5:0] tmp_56_fu_642_p2;
wire   [0:0] tmp_i_fu_693_p2;
wire   [0:0] tmp_i_29_fu_699_p2;
wire   [0:0] sel_tmp1_fu_735_p2;
wire   [0:0] sel_tmp2_fu_741_p2;
wire   [0:0] tmp_17_fu_751_p2;
wire   [1:0] sel_tmp_fu_747_p1;
wire   [1:0] sel_tmp3_fu_757_p3;
wire   [0:0] sel_tmp6_demorgan_fu_769_p2;
wire   [0:0] tmp_297_i_fu_705_p2;
wire   [0:0] sel_tmp6_fu_775_p2;
wire   [0:0] sel_tmp13_demorgan_fu_787_p2;
wire   [0:0] tmp_298_i_fu_711_p2;
wire   [0:0] sel_tmp4_fu_793_p2;
wire   [0:0] sel_tmp5_fu_799_p2;
wire   [0:0] sel_tmp7_fu_781_p2;
wire   [0:0] tmp_18_fu_813_p2;
wire   [2:0] sel_tmp8_cast_fu_805_p3;
wire  signed [2:0] sel_tmp3_cast_fu_765_p1;
wire   [0:0] sel_tmp22_demorgan_fu_827_p2;
wire   [0:0] tmp_299_i_fu_717_p2;
wire   [0:0] sel_tmp8_fu_833_p2;
wire   [0:0] sel_tmp33_demorgan_fu_845_p2;
wire   [0:0] tmp_300_i_fu_723_p2;
wire   [0:0] sel_tmp11_fu_851_p2;
wire   [0:0] sel_tmp12_fu_857_p2;
wire   [0:0] sel_tmp10_fu_839_p2;
wire   [0:0] tmp_19_fu_871_p2;
wire   [2:0] sel_tmp13_fu_863_p3;
wire   [2:0] sel_tmp9_fu_819_p3;
wire   [0:0] tmp_301_i_fu_729_p2;
wire   [0:0] tmp20_fu_885_p2;
wire   [0:0] sel_tmp14_fu_891_p2;
wire   [2:0] p_0_i_fu_877_p3;
wire   [0:0] tmp_57_fu_905_p2;
wire   [0:0] tmp_41_fu_981_p2;
reg   [21:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 22'd1;
#0 grp_convert_edge_fu_430_ap_start_reg = 1'b0;
end

toCubieCube_cornebkb #(
    .DataWidth( 6 ),
    .AddressRange( 24 ),
    .AddressWidth( 5 ))
cornerFacelet_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cornerFacelet_address0),
    .ce0(cornerFacelet_ce0),
    .q0(cornerFacelet_q0),
    .address1(cornerFacelet_address1),
    .ce1(cornerFacelet_ce1),
    .q1(cornerFacelet_q1)
);

toCubieCube_cornecud #(
    .DataWidth( 3 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
cornerColor_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cornerColor_1_address0),
    .ce0(cornerColor_1_ce0),
    .q0(cornerColor_1_q0)
);

toCubieCube_cornedEe #(
    .DataWidth( 3 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
cornerColor_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cornerColor_2_address0),
    .ce0(cornerColor_2_ce0),
    .q0(cornerColor_2_q0)
);

toCubieCube_edgeFeOg #(
    .DataWidth( 6 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
edgeFacelet_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(edgeFacelet_0_address0),
    .ce0(edgeFacelet_0_ce0),
    .q0(edgeFacelet_0_q0)
);

toCubieCube_edgeFfYi #(
    .DataWidth( 6 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
edgeFacelet_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(edgeFacelet_1_address0),
    .ce0(edgeFacelet_1_ce0),
    .q0(edgeFacelet_1_q0)
);

toCubieCube_edgeCg8j #(
    .DataWidth( 3 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
edgeColor_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(edgeColor_0_address0),
    .ce0(edgeColor_0_ce0),
    .q0(edgeColor_0_q0)
);

toCubieCube_edgeChbi #(
    .DataWidth( 3 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
edgeColor_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(edgeColor_1_address0),
    .ce0(edgeColor_1_ce0),
    .q0(edgeColor_1_q0)
);

convert_edge grp_convert_edge_fu_430(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_convert_edge_fu_430_ap_start),
    .ap_done(grp_convert_edge_fu_430_ap_done),
    .ap_idle(grp_convert_edge_fu_430_ap_idle),
    .ap_ready(grp_convert_edge_fu_430_ap_ready),
    .in_r(j_1_reg_418),
    .ap_return(grp_convert_edge_fu_430_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_convert_edge_fu_430_ap_start_reg <= 1'b0;
    end else begin
        if ((((or_cond_fu_987_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20)) | ((tmp_40_fu_970_p2 == 1'd1) & (tmp_37_reg_1169 == 1'd1) & (1'b1 == ap_CS_fsm_state19)))) begin
            grp_convert_edge_fu_430_ap_start_reg <= 1'b1;
        end else if ((grp_convert_edge_fu_430_ap_ready == 1'b1)) begin
            grp_convert_edge_fu_430_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_447_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_361 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond9_fu_464_p2 == 1'd0))) begin
        i_1_reg_361 <= i_9_fu_470_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond9_fu_464_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_2_reg_372 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        i_2_reg_372 <= i_10_reg_1011;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond8_fu_481_p2 == 1'd1))) begin
        i_3_reg_407 <= 4'd0;
    end else if (((1'b0 == ap_block_state21_on_subcall_done) & (1'b1 == ap_CS_fsm_state21))) begin
        i_3_reg_407 <= i_4_reg_1111;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_447_p2 == 1'd0))) begin
        i_reg_350 <= i_8_fu_453_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_350 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & ((tmp_47_fu_687_p2 == 1'd0) | (tmp_44_reg_1091 == 1'd0)))) begin
        in_assign_reg_395 <= j_2_reg_1076;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        in_assign_reg_395 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (or_cond_fu_987_p2 == 1'd0))) begin
        j_1_reg_418 <= j_reg_1148;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        j_1_reg_418 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (tmp_49_fu_558_p2 == 1'd0) & (tmp_21_reg_1029 == 1'd0))) begin
        ori_reg_383 <= ori_1_reg_1033;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond8_fu_481_p2 == 1'd0))) begin
        ori_reg_383 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        reg_437 <= facecube_0_f_q1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        reg_437 <= facecube_0_f_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        reg_442 <= facecube_0_f_q0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        reg_442 <= facecube_0_f_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        edgeColor_0_load_reg_1164 <= edgeColor_0_q0;
        tmp_37_reg_1169 <= tmp_37_fu_964_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_10_reg_1011 <= i_10_fu_487_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i_4_reg_1111 <= i_4_fu_925_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        j_2_reg_1076 <= j_2_fu_670_p2;
        tmp_58_reg_1072 <= in_assign_reg_395[32'd3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        j_reg_1148 <= j_fu_953_p2;
        tmp_28_reg_1144 <= tmp_28_fu_947_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_47_fu_687_p2 == 1'd1) & (tmp_44_reg_1091 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        merge_i_reg_1103 <= merge_i_fu_897_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ori_1_reg_1033 <= ori_1_fu_521_p2;
        tmp_21_reg_1029 <= tmp_21_fu_515_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond8_fu_481_p2 == 1'd0))) begin
        tmp_20_reg_1016[3 : 0] <= tmp_20_fu_493_p1[3 : 0];
        tmp_31_reg_1022 <= tmp_31_fu_509_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (exitcond_fu_919_p2 == 1'd0))) begin
        tmp_22_reg_1116[3 : 0] <= tmp_22_fu_931_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_28_fu_947_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        tmp_36_reg_1153[3 : 0] <= tmp_36_fu_959_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_37_reg_1169 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
        tmp_40_reg_1178 <= tmp_40_fu_970_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & ((tmp_40_fu_970_p2 == 1'd0) | (tmp_37_reg_1169 == 1'd0)))) begin
        tmp_42_reg_1187 <= tmp_42_fu_976_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (tmp_58_fu_662_p3 == 1'd0))) begin
        tmp_43_reg_1081[3 : 0] <= tmp_43_fu_676_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_44_reg_1091 <= tmp_44_fu_681_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((exitcond_fu_919_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_919_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ccRet_co_0_ce0 = 1'b1;
    end else begin
        ccRet_co_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_47_fu_687_p2 == 1'd1) & (tmp_44_reg_1091 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        ccRet_co_0_we0 = 1'b1;
    end else begin
        ccRet_co_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ccRet_cp_0_address0 = tmp_20_reg_1016;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        ccRet_cp_0_address0 = tmp_fu_459_p1;
    end else begin
        ccRet_cp_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state2))) begin
        ccRet_cp_0_ce0 = 1'b1;
    end else begin
        ccRet_cp_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ccRet_cp_0_d0 = merge_i_reg_1103;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        ccRet_cp_0_d0 = 3'd0;
    end else begin
        ccRet_cp_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state13) & (tmp_58_reg_1072 == 1'd0)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_447_p2 == 1'd0)))) begin
        ccRet_cp_0_we0 = 1'b1;
    end else begin
        ccRet_cp_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        ccRet_eo_0_address0 = ccRet_eo_0_addr_gep_fu_341_p3;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        ccRet_eo_0_address0 = tmp_22_reg_1116;
    end else begin
        ccRet_eo_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((grp_convert_edge_fu_430_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((1'b0 == ap_block_state21_on_subcall_done) & (1'b1 == ap_CS_fsm_state21)))) begin
        ccRet_eo_0_ce0 = 1'b1;
    end else begin
        ccRet_eo_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        ccRet_eo_0_d0 = 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        ccRet_eo_0_d0 = 1'd1;
    end else begin
        ccRet_eo_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((grp_convert_edge_fu_430_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((1'b0 == ap_block_state21_on_subcall_done) & (ap_predicate_op213_call_state21 == 1'b1) & (1'b1 == ap_CS_fsm_state21)))) begin
        ccRet_eo_0_we0 = 1'b1;
    end else begin
        ccRet_eo_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        ccRet_ep_0_address0 = ccRet_ep_0_addr_1_gep_fu_333_p3;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        ccRet_ep_0_address0 = tmp_22_reg_1116;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        ccRet_ep_0_address0 = tmp_s_fu_476_p1;
    end else begin
        ccRet_ep_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((grp_convert_edge_fu_430_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((1'b0 == ap_block_state21_on_subcall_done) & (1'b1 == ap_CS_fsm_state21)))) begin
        ccRet_ep_0_ce0 = 1'b1;
    end else begin
        ccRet_ep_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21))) begin
        ccRet_ep_0_d0 = grp_convert_edge_fu_430_ap_return;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        ccRet_ep_0_d0 = 4'd0;
    end else begin
        ccRet_ep_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((grp_convert_edge_fu_430_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((1'b0 == ap_block_state21_on_subcall_done) & (ap_predicate_op213_call_state21 == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((1'b1 == ap_CS_fsm_state3) & (exitcond9_fu_464_p2 == 1'd0)))) begin
        ccRet_ep_0_we0 = 1'b1;
    end else begin
        ccRet_ep_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        cornerColor_1_ce0 = 1'b1;
    end else begin
        cornerColor_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        cornerColor_2_ce0 = 1'b1;
    end else begin
        cornerColor_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        cornerFacelet_address0 = tmp_53_cast_fu_607_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        cornerFacelet_address0 = tmp_50_cast_fu_536_p1;
    end else begin
        cornerFacelet_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        cornerFacelet_ce0 = 1'b1;
    end else begin
        cornerFacelet_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        cornerFacelet_ce1 = 1'b1;
    end else begin
        cornerFacelet_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        edgeColor_0_ce0 = 1'b1;
    end else begin
        edgeColor_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        edgeColor_1_address0 = edgeColor_1_addr_1_gep_fu_303_p3;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        edgeColor_1_address0 = tmp_36_reg_1153;
    end else begin
        edgeColor_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18))) begin
        edgeColor_1_ce0 = 1'b1;
    end else begin
        edgeColor_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        edgeFacelet_0_ce0 = 1'b1;
    end else begin
        edgeFacelet_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        edgeFacelet_1_ce0 = 1'b1;
    end else begin
        edgeFacelet_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        facecube_0_f_address0 = tmp_24_fu_942_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        facecube_0_f_address0 = tmp_32_fu_652_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        facecube_0_f_address0 = tmp_27_fu_541_p1;
    end else begin
        facecube_0_f_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        facecube_0_f_address1 = tmp_23_fu_937_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        facecube_0_f_address1 = tmp_38_fu_657_p1;
    end else begin
        facecube_0_f_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        facecube_0_f_ce0 = 1'b1;
    end else begin
        facecube_0_f_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state8))) begin
        facecube_0_f_ce1 = 1'b1;
    end else begin
        facecube_0_f_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_447_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond9_fu_464_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond8_fu_481_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (tmp_21_fu_515_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & ((tmp_49_fu_558_p2 == 1'd1) | (tmp_21_reg_1029 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((tmp_58_fu_662_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & ((tmp_47_fu_687_p2 == 1'd0) | (tmp_44_reg_1091 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state14 : begin
            if (((exitcond_fu_919_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (tmp_28_fu_947_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((tmp_40_fu_970_p2 == 1'd1) & (tmp_37_reg_1169 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((or_cond_fu_987_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((1'b0 == ap_block_state21_on_subcall_done) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((grp_convert_edge_fu_430_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state21_on_subcall_done = ((ap_predicate_op213_call_state21 == 1'b1) & (grp_convert_edge_fu_430_ap_done == 1'b0));
end

always @ (*) begin
    ap_predicate_op213_call_state21 = (((tmp_28_reg_1144 == 1'd1) & (tmp_40_reg_1178 == 1'd0)) | ((tmp_28_reg_1144 == 1'd1) & (tmp_37_reg_1169 == 1'd0)));
end

assign ccRet_co_0_address0 = tmp_20_reg_1016;

assign ccRet_co_0_d0 = ((tmp_57_fu_905_p2[0:0] === 1'b1) ? ori_reg_383 : ori_1_reg_1033);

assign ccRet_eo_0_addr_gep_fu_341_p3 = tmp_22_reg_1116;

assign ccRet_ep_0_addr_1_gep_fu_333_p3 = tmp_22_reg_1116;

assign cornerColor_1_address0 = tmp_43_fu_676_p1;

assign cornerColor_2_address0 = tmp_43_reg_1081;

assign cornerFacelet_address1 = tmp_56_cast_fu_647_p1;

assign edgeColor_0_address0 = tmp_36_fu_959_p1;

assign edgeColor_1_addr_1_gep_fu_303_p3 = tmp_36_reg_1153;

assign edgeFacelet_0_address0 = tmp_22_fu_931_p1;

assign edgeFacelet_1_address0 = tmp_22_fu_931_p1;

assign exitcond1_fu_447_p2 = ((i_reg_350 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond8_fu_481_p2 = ((i_2_reg_372 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond9_fu_464_p2 = ((i_1_reg_361 == 4'd12) ? 1'b1 : 1'b0);

assign exitcond_fu_919_p2 = ((i_3_reg_407 == 4'd12) ? 1'b1 : 1'b0);

assign grp_convert_edge_fu_430_ap_start = grp_convert_edge_fu_430_ap_start_reg;

assign i_10_fu_487_p2 = (i_2_reg_372 + 4'd1);

assign i_4_fu_925_p2 = (i_3_reg_407 + 4'd1);

assign i_8_fu_453_p2 = (i_reg_350 + 4'd1);

assign i_9_fu_470_p2 = (i_1_reg_361 + 4'd1);

assign j_2_fu_670_p2 = (in_assign_reg_395 + 4'd1);

assign j_fu_953_p2 = (j_1_reg_418 + 4'd1);

assign merge_i_fu_897_p3 = ((sel_tmp14_fu_891_p2[0:0] === 1'b1) ? p_0_i_fu_877_p3 : 3'd7);

assign or_cond_fu_987_p2 = (tmp_42_reg_1187 & tmp_41_fu_981_p2);

assign ori_1_fu_521_p2 = (ori_reg_383 + 2'd1);

assign p_0_i_fu_877_p3 = ((tmp_19_fu_871_p2[0:0] === 1'b1) ? sel_tmp13_fu_863_p3 : sel_tmp9_fu_819_p3);

assign sel_tmp10_fu_839_p2 = (tmp_299_i_fu_717_p2 & sel_tmp8_fu_833_p2);

assign sel_tmp11_fu_851_p2 = (sel_tmp33_demorgan_fu_845_p2 ^ 1'd1);

assign sel_tmp12_fu_857_p2 = (tmp_300_i_fu_723_p2 & sel_tmp11_fu_851_p2);

assign sel_tmp13_demorgan_fu_787_p2 = (tmp_297_i_fu_705_p2 | sel_tmp6_demorgan_fu_769_p2);

assign sel_tmp13_fu_863_p3 = ((sel_tmp12_fu_857_p2[0:0] === 1'b1) ? 3'd5 : 3'd4);

assign sel_tmp14_fu_891_p2 = (tmp20_fu_885_p2 | sel_tmp33_demorgan_fu_845_p2);

assign sel_tmp1_fu_735_p2 = (tmp_i_fu_693_p2 ^ 1'd1);

assign sel_tmp22_demorgan_fu_827_p2 = (tmp_298_i_fu_711_p2 | sel_tmp13_demorgan_fu_787_p2);

assign sel_tmp2_fu_741_p2 = (tmp_i_29_fu_699_p2 & sel_tmp1_fu_735_p2);

assign sel_tmp33_demorgan_fu_845_p2 = (tmp_299_i_fu_717_p2 | sel_tmp22_demorgan_fu_827_p2);

assign sel_tmp3_cast_fu_765_p1 = $signed(sel_tmp3_fu_757_p3);

assign sel_tmp3_fu_757_p3 = ((tmp_17_fu_751_p2[0:0] === 1'b1) ? sel_tmp_fu_747_p1 : 2'd2);

assign sel_tmp4_fu_793_p2 = (sel_tmp13_demorgan_fu_787_p2 ^ 1'd1);

assign sel_tmp5_fu_799_p2 = (tmp_298_i_fu_711_p2 & sel_tmp4_fu_793_p2);

assign sel_tmp6_demorgan_fu_769_p2 = (tmp_i_fu_693_p2 | tmp_i_29_fu_699_p2);

assign sel_tmp6_fu_775_p2 = (sel_tmp6_demorgan_fu_769_p2 ^ 1'd1);

assign sel_tmp7_fu_781_p2 = (tmp_297_i_fu_705_p2 & sel_tmp6_fu_775_p2);

assign sel_tmp8_cast_fu_805_p3 = ((sel_tmp5_fu_799_p2[0:0] === 1'b1) ? 3'd3 : 3'd2);

assign sel_tmp8_fu_833_p2 = (sel_tmp22_demorgan_fu_827_p2 ^ 1'd1);

assign sel_tmp9_fu_819_p3 = ((tmp_18_fu_813_p2[0:0] === 1'b1) ? sel_tmp8_cast_fu_805_p3 : sel_tmp3_cast_fu_765_p1);

assign sel_tmp_fu_747_p1 = sel_tmp2_fu_741_p2;

assign tmp20_fu_885_p2 = (tmp_301_i_fu_729_p2 | tmp_300_i_fu_723_p2);

assign tmp_17_fu_751_p2 = (tmp_i_fu_693_p2 | sel_tmp2_fu_741_p2);

assign tmp_18_fu_813_p2 = (sel_tmp7_fu_781_p2 | sel_tmp5_fu_799_p2);

assign tmp_19_fu_871_p2 = (sel_tmp12_fu_857_p2 | sel_tmp10_fu_839_p2);

assign tmp_20_cast_fu_497_p1 = i_2_reg_372;

assign tmp_20_fu_493_p1 = i_2_reg_372;

assign tmp_21_fu_515_p2 = ((ori_reg_383 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_22_fu_931_p1 = i_3_reg_407;

assign tmp_23_fu_937_p1 = edgeFacelet_0_q0;

assign tmp_24_fu_942_p1 = edgeFacelet_1_q0;

assign tmp_26_cast_fu_527_p1 = ori_reg_383;

assign tmp_27_fu_541_p1 = cornerFacelet_q0;

assign tmp_28_fu_947_p2 = ((j_1_reg_418 < 4'd12) ? 1'b1 : 1'b0);

assign tmp_297_i_fu_705_p2 = ((in_assign_reg_395 == 4'd2) ? 1'b1 : 1'b0);

assign tmp_298_i_fu_711_p2 = ((in_assign_reg_395 == 4'd3) ? 1'b1 : 1'b0);

assign tmp_299_i_fu_717_p2 = ((in_assign_reg_395 == 4'd4) ? 1'b1 : 1'b0);

assign tmp_29_fu_568_p2 = (tmp_32_cast_fu_564_p1 + 3'd1);

assign tmp_300_i_fu_723_p2 = ((in_assign_reg_395 == 4'd5) ? 1'b1 : 1'b0);

assign tmp_301_i_fu_729_p2 = ((in_assign_reg_395 == 4'd6) ? 1'b1 : 1'b0);

assign tmp_30_fu_501_p3 = {{i_2_reg_372}, {2'd0}};

assign tmp_31_cast_fu_598_p1 = tmp_51_fu_590_p3;

assign tmp_31_fu_509_p2 = (tmp_30_fu_501_p3 - tmp_20_cast_fu_497_p1);

assign tmp_32_cast_fu_564_p1 = ori_reg_383;

assign tmp_32_fu_652_p1 = cornerFacelet_q0;

assign tmp_33_fu_612_p2 = (tmp_32_cast_fu_564_p1 + 3'd2);

assign tmp_34_fu_531_p2 = (tmp_31_reg_1022 + tmp_26_cast_fu_527_p1);

assign tmp_35_cast_fu_638_p1 = tmp_55_fu_630_p3;

assign tmp_35_fu_574_p2 = ((tmp_29_fu_568_p2 < 3'd3) ? 1'b1 : 1'b0);

assign tmp_36_fu_959_p1 = j_1_reg_418;

assign tmp_37_fu_964_p2 = ((reg_437 == edgeColor_0_q0) ? 1'b1 : 1'b0);

assign tmp_38_fu_657_p1 = cornerFacelet_q1;

assign tmp_39_fu_546_p2 = ((facecube_0_f_q0 == 3'd3) ? 1'b1 : 1'b0);

assign tmp_40_fu_970_p2 = ((reg_442 == edgeColor_1_q0) ? 1'b1 : 1'b0);

assign tmp_41_fu_981_p2 = ((reg_437 == edgeColor_1_q0) ? 1'b1 : 1'b0);

assign tmp_42_fu_976_p2 = ((reg_442 == edgeColor_0_load_reg_1164) ? 1'b1 : 1'b0);

assign tmp_43_fu_676_p1 = in_assign_reg_395;

assign tmp_44_fu_681_p2 = ((reg_437 == cornerColor_1_q0) ? 1'b1 : 1'b0);

assign tmp_47_fu_687_p2 = ((reg_442 == cornerColor_2_q0) ? 1'b1 : 1'b0);

assign tmp_48_fu_552_p2 = ((facecube_0_f_q0 == 3'd0) ? 1'b1 : 1'b0);

assign tmp_49_fu_558_p2 = (tmp_48_fu_552_p2 | tmp_39_fu_546_p2);

assign tmp_50_cast_fu_536_p1 = $signed(tmp_34_fu_531_p2);

assign tmp_50_fu_580_p2 = (ori_reg_383 ^ 2'd2);

assign tmp_51_fu_590_p3 = ((tmp_35_fu_574_p2[0:0] === 1'b1) ? tmp_29_fu_568_p2 : tmp_52_cast_fu_586_p1);

assign tmp_52_cast_fu_586_p1 = $signed(tmp_50_fu_580_p2);

assign tmp_52_fu_602_p2 = (tmp_31_cast_fu_598_p1 + tmp_31_reg_1022);

assign tmp_53_cast_fu_607_p1 = $signed(tmp_52_fu_602_p2);

assign tmp_53_fu_618_p2 = ((tmp_33_fu_612_p2 < 3'd3) ? 1'b1 : 1'b0);

assign tmp_54_fu_624_p2 = ($signed(tmp_32_cast_fu_564_p1) + $signed(3'd7));

assign tmp_55_fu_630_p3 = ((tmp_53_fu_618_p2[0:0] === 1'b1) ? tmp_33_fu_612_p2 : tmp_54_fu_624_p2);

assign tmp_56_cast_fu_647_p1 = $signed(tmp_56_fu_642_p2);

assign tmp_56_fu_642_p2 = (tmp_35_cast_fu_638_p1 + tmp_31_reg_1022);

assign tmp_57_fu_905_p2 = ((ori_reg_383 != 2'd3) ? 1'b1 : 1'b0);

assign tmp_58_fu_662_p3 = in_assign_reg_395[32'd3];

assign tmp_fu_459_p1 = i_reg_350;

assign tmp_i_29_fu_699_p2 = ((in_assign_reg_395 == 4'd1) ? 1'b1 : 1'b0);

assign tmp_i_fu_693_p2 = ((in_assign_reg_395 == 4'd0) ? 1'b1 : 1'b0);

assign tmp_s_fu_476_p1 = i_1_reg_361;

always @ (posedge ap_clk) begin
    tmp_20_reg_1016[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    tmp_43_reg_1081[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    tmp_22_reg_1116[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    tmp_36_reg_1153[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //toCubieCube
