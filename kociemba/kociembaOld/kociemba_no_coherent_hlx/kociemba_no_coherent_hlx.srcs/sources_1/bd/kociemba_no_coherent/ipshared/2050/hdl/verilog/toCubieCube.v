// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module toCubieCube (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        facecube_0_f_address0,
        facecube_0_f_ce0,
        facecube_0_f_q0,
        facecube_0_f_address1,
        facecube_0_f_ce1,
        facecube_0_f_q1,
        ccRet_cp_0_address0,
        ccRet_cp_0_ce0,
        ccRet_cp_0_we0,
        ccRet_cp_0_d0,
        ccRet_ep_0_address0,
        ccRet_ep_0_ce0,
        ccRet_ep_0_we0,
        ccRet_ep_0_d0,
        ccRet_co_0_address0,
        ccRet_co_0_ce0,
        ccRet_co_0_we0,
        ccRet_co_0_d0,
        ccRet_eo_0_address0,
        ccRet_eo_0_ce0,
        ccRet_eo_0_we0,
        ccRet_eo_0_d0
);

parameter    ap_ST_fsm_state1 = 19'd1;
parameter    ap_ST_fsm_state2 = 19'd2;
parameter    ap_ST_fsm_state3 = 19'd4;
parameter    ap_ST_fsm_state4 = 19'd8;
parameter    ap_ST_fsm_state5 = 19'd16;
parameter    ap_ST_fsm_state6 = 19'd32;
parameter    ap_ST_fsm_state7 = 19'd64;
parameter    ap_ST_fsm_state8 = 19'd128;
parameter    ap_ST_fsm_state9 = 19'd256;
parameter    ap_ST_fsm_state10 = 19'd512;
parameter    ap_ST_fsm_state11 = 19'd1024;
parameter    ap_ST_fsm_state12 = 19'd2048;
parameter    ap_ST_fsm_state13 = 19'd4096;
parameter    ap_ST_fsm_state14 = 19'd8192;
parameter    ap_ST_fsm_state15 = 19'd16384;
parameter    ap_ST_fsm_state16 = 19'd32768;
parameter    ap_ST_fsm_state17 = 19'd65536;
parameter    ap_ST_fsm_state18 = 19'd131072;
parameter    ap_ST_fsm_state19 = 19'd262144;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] facecube_0_f_address0;
output   facecube_0_f_ce0;
input  [2:0] facecube_0_f_q0;
output  [5:0] facecube_0_f_address1;
output   facecube_0_f_ce1;
input  [2:0] facecube_0_f_q1;
output  [2:0] ccRet_cp_0_address0;
output   ccRet_cp_0_ce0;
output   ccRet_cp_0_we0;
output  [2:0] ccRet_cp_0_d0;
output  [3:0] ccRet_ep_0_address0;
output   ccRet_ep_0_ce0;
output   ccRet_ep_0_we0;
output  [3:0] ccRet_ep_0_d0;
output  [2:0] ccRet_co_0_address0;
output   ccRet_co_0_ce0;
output   ccRet_co_0_we0;
output  [1:0] ccRet_co_0_d0;
output  [3:0] ccRet_eo_0_address0;
output   ccRet_eo_0_ce0;
output   ccRet_eo_0_we0;
output  [0:0] ccRet_eo_0_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] facecube_0_f_address0;
reg facecube_0_f_ce0;
reg[5:0] facecube_0_f_address1;
reg facecube_0_f_ce1;
reg[2:0] ccRet_cp_0_address0;
reg ccRet_cp_0_ce0;
reg ccRet_cp_0_we0;
reg[2:0] ccRet_cp_0_d0;
reg[3:0] ccRet_ep_0_address0;
reg ccRet_ep_0_ce0;
reg ccRet_ep_0_we0;
reg[3:0] ccRet_ep_0_d0;
reg ccRet_co_0_ce0;
reg ccRet_co_0_we0;
reg[3:0] ccRet_eo_0_address0;
reg ccRet_eo_0_ce0;
reg ccRet_eo_0_we0;
reg[0:0] ccRet_eo_0_d0;

(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] cornerFacelet_address0;
reg    cornerFacelet_ce0;
wire   [5:0] cornerFacelet_q0;
wire   [4:0] cornerFacelet_address1;
reg    cornerFacelet_ce1;
wire   [5:0] cornerFacelet_q1;
wire   [2:0] cornerColor_1_address0;
reg    cornerColor_1_ce0;
wire   [2:0] cornerColor_1_q0;
wire   [2:0] cornerColor_2_address0;
reg    cornerColor_2_ce0;
wire   [2:0] cornerColor_2_q0;
wire   [3:0] edgeFacelet_0_address0;
reg    edgeFacelet_0_ce0;
wire   [5:0] edgeFacelet_0_q0;
wire   [3:0] edgeFacelet_1_address0;
reg    edgeFacelet_1_ce0;
wire   [5:0] edgeFacelet_1_q0;
wire   [3:0] edgeColor_0_address0;
reg    edgeColor_0_ce0;
wire   [2:0] edgeColor_0_q0;
reg   [3:0] edgeColor_1_address0;
reg    edgeColor_1_ce0;
wire   [2:0] edgeColor_1_q0;
reg   [2:0] reg_415;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state15;
reg   [2:0] reg_420;
wire   [3:0] i_10_fu_431_p2;
wire    ap_CS_fsm_state2;
wire   [3:0] i_11_fu_448_p2;
wire    ap_CS_fsm_state3;
wire   [3:0] i_12_fu_465_p2;
reg   [3:0] i_12_reg_782;
wire    ap_CS_fsm_state4;
wire   [63:0] tmp_120_fu_471_p1;
reg   [63:0] tmp_120_reg_787;
wire   [0:0] exitcond8_fu_459_p2;
wire   [5:0] tmp_147_fu_487_p2;
reg   [5:0] tmp_147_reg_793;
wire   [0:0] tmp_121_fu_493_p2;
reg   [0:0] tmp_121_reg_800;
wire    ap_CS_fsm_state5;
wire   [1:0] ori_1_fu_499_p2;
reg   [1:0] ori_1_reg_804;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire   [0:0] tmp_138_fu_536_p2;
wire    ap_CS_fsm_state8;
wire   [0:0] tmp_158_fu_640_p3;
reg   [0:0] tmp_158_reg_843;
wire    ap_CS_fsm_state10;
wire   [3:0] j_3_fu_648_p2;
reg   [3:0] j_3_reg_847;
wire   [63:0] tmp_142_fu_654_p1;
reg   [63:0] tmp_142_reg_852;
wire   [0:0] tmp_143_fu_659_p2;
reg   [0:0] tmp_143_reg_862;
wire    ap_CS_fsm_state11;
wire   [3:0] i_4_fu_696_p2;
reg   [3:0] i_4_reg_877;
wire    ap_CS_fsm_state13;
wire   [63:0] tmp_122_fu_702_p1;
reg   [63:0] tmp_122_reg_882;
wire   [0:0] exitcond_fu_690_p2;
wire    ap_CS_fsm_state14;
wire   [0:0] tmp_127_fu_718_p2;
reg   [0:0] tmp_127_reg_910;
wire    ap_CS_fsm_state16;
wire   [3:0] j_2_fu_724_p2;
reg   [3:0] j_2_reg_914;
wire   [63:0] tmp_136_fu_730_p1;
reg   [63:0] tmp_136_reg_919;
reg   [2:0] edgeColor_0_load_reg_930;
wire    ap_CS_fsm_state17;
wire   [0:0] tmp_137_fu_735_p2;
reg   [0:0] tmp_137_reg_935;
wire   [0:0] tmp_139_fu_741_p2;
reg   [0:0] tmp_139_reg_944;
wire    ap_CS_fsm_state18;
wire   [3:0] edgeColor_1_addr_1_gep_fu_287_p3;
wire   [0:0] tmp_141_fu_747_p2;
reg   [0:0] tmp_141_reg_953;
reg   [3:0] i_reg_334;
wire   [0:0] exitcond1_fu_425_p2;
reg   [3:0] i_1_reg_345;
wire   [0:0] exitcond9_fu_442_p2;
reg   [3:0] i_2_reg_356;
wire    ap_CS_fsm_state12;
wire   [0:0] tmp_144_fu_665_p2;
reg   [1:0] ori_reg_367;
reg   [3:0] j_reg_379;
reg   [3:0] i_3_reg_391;
wire    ap_CS_fsm_state19;
wire   [0:0] or_cond_fu_758_p2;
reg   [3:0] j_1_reg_402;
wire   [63:0] tmp_fu_437_p1;
wire   [63:0] tmp_s_fu_454_p1;
wire  signed [63:0] tmp_149_cast_fu_514_p1;
wire   [63:0] tmp_126_fu_519_p1;
wire  signed [63:0] tmp_152_cast_fu_585_p1;
wire  signed [63:0] tmp_155_cast_fu_625_p1;
wire   [63:0] tmp_131_fu_630_p1;
wire   [63:0] tmp_135_fu_635_p1;
wire   [63:0] tmp_123_fu_708_p1;
wire   [63:0] tmp_124_fu_713_p1;
wire   [3:0] ccRet_ep_0_addr_2_gep_fu_317_p3;
wire   [3:0] ccRet_eo_0_addr_1_gep_fu_325_p3;
wire   [2:0] tmp_159_fu_671_p1;
wire   [5:0] tmp_145_fu_479_p3;
wire   [5:0] tmp_120_cast_fu_475_p1;
wire   [5:0] tmp_125_cast_fu_505_p1;
wire   [5:0] tmp_148_fu_509_p2;
wire   [0:0] tmp_134_fu_530_p2;
wire   [0:0] tmp_133_fu_524_p2;
wire   [2:0] tmp_148_cast_fu_542_p1;
wire   [2:0] tmp_128_fu_546_p2;
wire   [1:0] tmp_150_fu_558_p2;
wire   [0:0] tmp_149_fu_552_p2;
wire  signed [2:0] tmp_151_cast_fu_564_p1;
wire   [2:0] tmp_151_fu_568_p3;
wire   [5:0] tmp_130_cast_fu_576_p1;
wire   [5:0] tmp_152_fu_580_p2;
wire   [2:0] tmp_132_fu_590_p2;
wire   [0:0] tmp_153_fu_596_p2;
wire   [2:0] tmp_154_fu_602_p2;
wire   [2:0] tmp_157_fu_608_p3;
wire   [5:0] tmp_134_cast_fu_616_p1;
wire   [5:0] tmp_155_fu_620_p2;
wire   [0:0] tmp_156_fu_676_p2;
wire   [0:0] tmp_140_fu_752_p2;
reg   [18:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 19'd1;
end

toCubieCube_cornebkb #(
    .DataWidth( 6 ),
    .AddressRange( 24 ),
    .AddressWidth( 5 ))
cornerFacelet_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cornerFacelet_address0),
    .ce0(cornerFacelet_ce0),
    .q0(cornerFacelet_q0),
    .address1(cornerFacelet_address1),
    .ce1(cornerFacelet_ce1),
    .q1(cornerFacelet_q1)
);

toCubieCube_cornecud #(
    .DataWidth( 3 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
cornerColor_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cornerColor_1_address0),
    .ce0(cornerColor_1_ce0),
    .q0(cornerColor_1_q0)
);

toCubieCube_cornedEe #(
    .DataWidth( 3 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
cornerColor_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cornerColor_2_address0),
    .ce0(cornerColor_2_ce0),
    .q0(cornerColor_2_q0)
);

toCubieCube_edgeFeOg #(
    .DataWidth( 6 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
edgeFacelet_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(edgeFacelet_0_address0),
    .ce0(edgeFacelet_0_ce0),
    .q0(edgeFacelet_0_q0)
);

toCubieCube_edgeFfYi #(
    .DataWidth( 6 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
edgeFacelet_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(edgeFacelet_1_address0),
    .ce0(edgeFacelet_1_ce0),
    .q0(edgeFacelet_1_q0)
);

toCubieCube_edgeCg8j #(
    .DataWidth( 3 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
edgeColor_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(edgeColor_0_address0),
    .ce0(edgeColor_0_ce0),
    .q0(edgeColor_0_q0)
);

toCubieCube_edgeChbi #(
    .DataWidth( 3 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
edgeColor_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(edgeColor_1_address0),
    .ce0(edgeColor_1_ce0),
    .q0(edgeColor_1_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_425_p2 == 1'd1))) begin
        i_1_reg_345 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond9_fu_442_p2 == 1'd0))) begin
        i_1_reg_345 <= i_11_fu_448_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond9_fu_442_p2 == 1'd1))) begin
        i_2_reg_356 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state12) & ((tmp_158_reg_843 == 1'd1) | ((tmp_144_fu_665_p2 == 1'd1) & (tmp_143_reg_862 == 1'd1))))) begin
        i_2_reg_356 <= i_12_reg_782;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond8_fu_459_p2 == 1'd1))) begin
        i_3_reg_391 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state19) & ((or_cond_fu_758_p2 == 1'd1) | (tmp_127_reg_910 == 1'd0) | ((tmp_139_reg_944 == 1'd1) & (tmp_137_reg_935 == 1'd1))))) begin
        i_3_reg_391 <= i_4_reg_877;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_425_p2 == 1'd0))) begin
        i_reg_334 <= i_10_fu_431_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_334 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (((tmp_127_reg_910 == 1'd1) & (or_cond_fu_758_p2 == 1'd0) & (tmp_139_reg_944 == 1'd0)) | ((tmp_127_reg_910 == 1'd1) & (or_cond_fu_758_p2 == 1'd0) & (tmp_137_reg_935 == 1'd0))))) begin
        j_1_reg_402 <= j_2_reg_914;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        j_1_reg_402 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (((tmp_144_fu_665_p2 == 1'd0) & (tmp_158_reg_843 == 1'd0)) | ((tmp_143_reg_862 == 1'd0) & (tmp_158_reg_843 == 1'd0))))) begin
        j_reg_379 <= j_3_reg_847;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        j_reg_379 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (tmp_138_fu_536_p2 == 1'd0) & (tmp_121_reg_800 == 1'd0))) begin
        ori_reg_367 <= ori_1_reg_804;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond8_fu_459_p2 == 1'd0))) begin
        ori_reg_367 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        reg_415 <= facecube_0_f_q1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        reg_415 <= facecube_0_f_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        reg_420 <= facecube_0_f_q0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        reg_420 <= facecube_0_f_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        edgeColor_0_load_reg_930 <= edgeColor_0_q0;
        tmp_137_reg_935 <= tmp_137_fu_735_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_12_reg_782 <= i_12_fu_465_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i_4_reg_877 <= i_4_fu_696_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        j_2_reg_914 <= j_2_fu_724_p2;
        tmp_127_reg_910 <= tmp_127_fu_718_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        j_3_reg_847 <= j_3_fu_648_p2;
        tmp_158_reg_843 <= j_reg_379[32'd3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ori_1_reg_804 <= ori_1_fu_499_p2;
        tmp_121_reg_800 <= tmp_121_fu_493_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond8_fu_459_p2 == 1'd0))) begin
        tmp_120_reg_787[3 : 0] <= tmp_120_fu_471_p1[3 : 0];
        tmp_147_reg_793 <= tmp_147_fu_487_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (exitcond_fu_690_p2 == 1'd0))) begin
        tmp_122_reg_882[3 : 0] <= tmp_122_fu_702_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (tmp_127_fu_718_p2 == 1'd1))) begin
        tmp_136_reg_919[3 : 0] <= tmp_136_fu_730_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (tmp_137_reg_935 == 1'd1))) begin
        tmp_139_reg_944 <= tmp_139_fu_741_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & ((tmp_139_fu_741_p2 == 1'd0) | (tmp_137_reg_935 == 1'd0)))) begin
        tmp_141_reg_953 <= tmp_141_fu_747_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (tmp_158_fu_640_p3 == 1'd0))) begin
        tmp_142_reg_852[3 : 0] <= tmp_142_fu_654_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_143_reg_862 <= tmp_143_fu_659_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state13) & (exitcond_fu_690_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (exitcond_fu_690_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ccRet_co_0_ce0 = 1'b1;
    end else begin
        ccRet_co_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (tmp_144_fu_665_p2 == 1'd1) & (tmp_143_reg_862 == 1'd1) & (tmp_158_reg_843 == 1'd0))) begin
        ccRet_co_0_we0 = 1'b1;
    end else begin
        ccRet_co_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ccRet_cp_0_address0 = tmp_120_reg_787;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        ccRet_cp_0_address0 = tmp_fu_437_p1;
    end else begin
        ccRet_cp_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state2))) begin
        ccRet_cp_0_ce0 = 1'b1;
    end else begin
        ccRet_cp_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ccRet_cp_0_d0 = tmp_159_fu_671_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        ccRet_cp_0_d0 = 3'd0;
    end else begin
        ccRet_cp_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (tmp_144_fu_665_p2 == 1'd1) & (tmp_143_reg_862 == 1'd1) & (tmp_158_reg_843 == 1'd0)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_425_p2 == 1'd0)))) begin
        ccRet_cp_0_we0 = 1'b1;
    end else begin
        ccRet_cp_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ccRet_eo_0_address0 = ccRet_eo_0_addr_1_gep_fu_325_p3;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        ccRet_eo_0_address0 = tmp_122_reg_882;
    end else begin
        ccRet_eo_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18))) begin
        ccRet_eo_0_ce0 = 1'b1;
    end else begin
        ccRet_eo_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ccRet_eo_0_d0 = 1'd1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        ccRet_eo_0_d0 = 1'd0;
    end else begin
        ccRet_eo_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state19) & (((or_cond_fu_758_p2 == 1'd1) & (tmp_127_reg_910 == 1'd1) & (tmp_139_reg_944 == 1'd0)) | ((or_cond_fu_758_p2 == 1'd1) & (tmp_127_reg_910 == 1'd1) & (tmp_137_reg_935 == 1'd0)))) | ((1'b1 == ap_CS_fsm_state18) & (tmp_139_fu_741_p2 == 1'd1) & (tmp_137_reg_935 == 1'd1)))) begin
        ccRet_eo_0_we0 = 1'b1;
    end else begin
        ccRet_eo_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ccRet_ep_0_address0 = ccRet_ep_0_addr_2_gep_fu_317_p3;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        ccRet_ep_0_address0 = tmp_122_reg_882;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        ccRet_ep_0_address0 = tmp_s_fu_454_p1;
    end else begin
        ccRet_ep_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state3))) begin
        ccRet_ep_0_ce0 = 1'b1;
    end else begin
        ccRet_ep_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18))) begin
        ccRet_ep_0_d0 = j_1_reg_402;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        ccRet_ep_0_d0 = 4'd0;
    end else begin
        ccRet_ep_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state19) & (((or_cond_fu_758_p2 == 1'd1) & (tmp_127_reg_910 == 1'd1) & (tmp_139_reg_944 == 1'd0)) | ((or_cond_fu_758_p2 == 1'd1) & (tmp_127_reg_910 == 1'd1) & (tmp_137_reg_935 == 1'd0)))) | ((1'b1 == ap_CS_fsm_state18) & (tmp_139_fu_741_p2 == 1'd1) & (tmp_137_reg_935 == 1'd1)) | ((1'b1 == ap_CS_fsm_state3) & (exitcond9_fu_442_p2 == 1'd0)))) begin
        ccRet_ep_0_we0 = 1'b1;
    end else begin
        ccRet_ep_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        cornerColor_1_ce0 = 1'b1;
    end else begin
        cornerColor_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        cornerColor_2_ce0 = 1'b1;
    end else begin
        cornerColor_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        cornerFacelet_address0 = tmp_152_cast_fu_585_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        cornerFacelet_address0 = tmp_149_cast_fu_514_p1;
    end else begin
        cornerFacelet_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        cornerFacelet_ce0 = 1'b1;
    end else begin
        cornerFacelet_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        cornerFacelet_ce1 = 1'b1;
    end else begin
        cornerFacelet_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        edgeColor_0_ce0 = 1'b1;
    end else begin
        edgeColor_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        edgeColor_1_address0 = edgeColor_1_addr_1_gep_fu_287_p3;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        edgeColor_1_address0 = tmp_136_reg_919;
    end else begin
        edgeColor_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17))) begin
        edgeColor_1_ce0 = 1'b1;
    end else begin
        edgeColor_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        edgeFacelet_0_ce0 = 1'b1;
    end else begin
        edgeFacelet_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        edgeFacelet_1_ce0 = 1'b1;
    end else begin
        edgeFacelet_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        facecube_0_f_address0 = tmp_124_fu_713_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        facecube_0_f_address0 = tmp_131_fu_630_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        facecube_0_f_address0 = tmp_126_fu_519_p1;
    end else begin
        facecube_0_f_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        facecube_0_f_address1 = tmp_123_fu_708_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        facecube_0_f_address1 = tmp_135_fu_635_p1;
    end else begin
        facecube_0_f_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        facecube_0_f_ce0 = 1'b1;
    end else begin
        facecube_0_f_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state8))) begin
        facecube_0_f_ce1 = 1'b1;
    end else begin
        facecube_0_f_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_425_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond9_fu_442_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond8_fu_459_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (tmp_121_fu_493_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & ((tmp_138_fu_536_p2 == 1'd1) | (tmp_121_reg_800 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (tmp_158_fu_640_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & ((tmp_158_reg_843 == 1'd1) | ((tmp_144_fu_665_p2 == 1'd1) & (tmp_143_reg_862 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (exitcond_fu_690_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (tmp_127_fu_718_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & ((or_cond_fu_758_p2 == 1'd1) | (tmp_127_reg_910 == 1'd0) | ((tmp_139_reg_944 == 1'd1) & (tmp_137_reg_935 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ccRet_co_0_address0 = tmp_120_reg_787;

assign ccRet_co_0_d0 = ((tmp_156_fu_676_p2[0:0] === 1'b1) ? ori_reg_367 : ori_1_reg_804);

assign ccRet_eo_0_addr_1_gep_fu_325_p3 = tmp_122_reg_882;

assign ccRet_ep_0_addr_2_gep_fu_317_p3 = tmp_122_reg_882;

assign cornerColor_1_address0 = tmp_142_fu_654_p1;

assign cornerColor_2_address0 = tmp_142_reg_852;

assign cornerFacelet_address1 = tmp_155_cast_fu_625_p1;

assign edgeColor_0_address0 = tmp_136_fu_730_p1;

assign edgeColor_1_addr_1_gep_fu_287_p3 = tmp_136_reg_919;

assign edgeFacelet_0_address0 = tmp_122_fu_702_p1;

assign edgeFacelet_1_address0 = tmp_122_fu_702_p1;

assign exitcond1_fu_425_p2 = ((i_reg_334 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond8_fu_459_p2 = ((i_2_reg_356 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond9_fu_442_p2 = ((i_1_reg_345 == 4'd12) ? 1'b1 : 1'b0);

assign exitcond_fu_690_p2 = ((i_3_reg_391 == 4'd12) ? 1'b1 : 1'b0);

assign i_10_fu_431_p2 = (i_reg_334 + 4'd1);

assign i_11_fu_448_p2 = (i_1_reg_345 + 4'd1);

assign i_12_fu_465_p2 = (i_2_reg_356 + 4'd1);

assign i_4_fu_696_p2 = (i_3_reg_391 + 4'd1);

assign j_2_fu_724_p2 = (j_1_reg_402 + 4'd1);

assign j_3_fu_648_p2 = (j_reg_379 + 4'd1);

assign or_cond_fu_758_p2 = (tmp_141_reg_953 & tmp_140_fu_752_p2);

assign ori_1_fu_499_p2 = (ori_reg_367 + 2'd1);

assign tmp_120_cast_fu_475_p1 = i_2_reg_356;

assign tmp_120_fu_471_p1 = i_2_reg_356;

assign tmp_121_fu_493_p2 = ((ori_reg_367 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_122_fu_702_p1 = i_3_reg_391;

assign tmp_123_fu_708_p1 = edgeFacelet_0_q0;

assign tmp_124_fu_713_p1 = edgeFacelet_1_q0;

assign tmp_125_cast_fu_505_p1 = ori_reg_367;

assign tmp_126_fu_519_p1 = cornerFacelet_q0;

assign tmp_127_fu_718_p2 = ((j_1_reg_402 < 4'd12) ? 1'b1 : 1'b0);

assign tmp_128_fu_546_p2 = (tmp_148_cast_fu_542_p1 + 3'd1);

assign tmp_130_cast_fu_576_p1 = tmp_151_fu_568_p3;

assign tmp_131_fu_630_p1 = cornerFacelet_q0;

assign tmp_132_fu_590_p2 = (tmp_148_cast_fu_542_p1 + 3'd2);

assign tmp_133_fu_524_p2 = ((facecube_0_f_q0 == 3'd3) ? 1'b1 : 1'b0);

assign tmp_134_cast_fu_616_p1 = tmp_157_fu_608_p3;

assign tmp_134_fu_530_p2 = ((facecube_0_f_q0 == 3'd0) ? 1'b1 : 1'b0);

assign tmp_135_fu_635_p1 = cornerFacelet_q1;

assign tmp_136_fu_730_p1 = j_1_reg_402;

assign tmp_137_fu_735_p2 = ((reg_415 == edgeColor_0_q0) ? 1'b1 : 1'b0);

assign tmp_138_fu_536_p2 = (tmp_134_fu_530_p2 | tmp_133_fu_524_p2);

assign tmp_139_fu_741_p2 = ((reg_420 == edgeColor_1_q0) ? 1'b1 : 1'b0);

assign tmp_140_fu_752_p2 = ((reg_415 == edgeColor_1_q0) ? 1'b1 : 1'b0);

assign tmp_141_fu_747_p2 = ((reg_420 == edgeColor_0_load_reg_930) ? 1'b1 : 1'b0);

assign tmp_142_fu_654_p1 = j_reg_379;

assign tmp_143_fu_659_p2 = ((reg_415 == cornerColor_1_q0) ? 1'b1 : 1'b0);

assign tmp_144_fu_665_p2 = ((reg_420 == cornerColor_2_q0) ? 1'b1 : 1'b0);

assign tmp_145_fu_479_p3 = {{i_2_reg_356}, {2'd0}};

assign tmp_147_fu_487_p2 = (tmp_145_fu_479_p3 - tmp_120_cast_fu_475_p1);

assign tmp_148_cast_fu_542_p1 = ori_reg_367;

assign tmp_148_fu_509_p2 = (tmp_147_reg_793 + tmp_125_cast_fu_505_p1);

assign tmp_149_cast_fu_514_p1 = $signed(tmp_148_fu_509_p2);

assign tmp_149_fu_552_p2 = ((tmp_128_fu_546_p2 < 3'd3) ? 1'b1 : 1'b0);

assign tmp_150_fu_558_p2 = (ori_reg_367 ^ 2'd2);

assign tmp_151_cast_fu_564_p1 = $signed(tmp_150_fu_558_p2);

assign tmp_151_fu_568_p3 = ((tmp_149_fu_552_p2[0:0] === 1'b1) ? tmp_128_fu_546_p2 : tmp_151_cast_fu_564_p1);

assign tmp_152_cast_fu_585_p1 = $signed(tmp_152_fu_580_p2);

assign tmp_152_fu_580_p2 = (tmp_130_cast_fu_576_p1 + tmp_147_reg_793);

assign tmp_153_fu_596_p2 = ((tmp_132_fu_590_p2 < 3'd3) ? 1'b1 : 1'b0);

assign tmp_154_fu_602_p2 = ($signed(tmp_148_cast_fu_542_p1) + $signed(3'd7));

assign tmp_155_cast_fu_625_p1 = $signed(tmp_155_fu_620_p2);

assign tmp_155_fu_620_p2 = (tmp_134_cast_fu_616_p1 + tmp_147_reg_793);

assign tmp_156_fu_676_p2 = ((ori_reg_367 != 2'd3) ? 1'b1 : 1'b0);

assign tmp_157_fu_608_p3 = ((tmp_153_fu_596_p2[0:0] === 1'b1) ? tmp_132_fu_590_p2 : tmp_154_fu_602_p2);

assign tmp_158_fu_640_p3 = j_reg_379[32'd3];

assign tmp_159_fu_671_p1 = j_reg_379[2:0];

assign tmp_fu_437_p1 = i_reg_334;

assign tmp_s_fu_454_p1 = i_1_reg_345;

always @ (posedge ap_clk) begin
    tmp_120_reg_787[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    tmp_142_reg_852[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    tmp_122_reg_882[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    tmp_136_reg_919[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //toCubieCube
