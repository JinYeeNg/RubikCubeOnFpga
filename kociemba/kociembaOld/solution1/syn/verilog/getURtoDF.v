// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module getURtoDF (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        cubiecube_0_ep_address0,
        cubiecube_0_ep_ce0,
        cubiecube_0_ep_q0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] cubiecube_0_ep_address0;
output   cubiecube_0_ep_ce0;
input  [3:0] cubiecube_0_ep_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg cubiecube_0_ep_ce0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] indvarinc_fu_154_p2;
wire    ap_CS_fsm_state2;
wire   [3:0] j_6_fu_182_p2;
reg   [3:0] j_6_reg_288;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond_fu_176_p2;
wire   [4:0] r_assign_cast3_fu_218_p1;
reg   [4:0] r_assign_cast3_reg_306;
wire    ap_CS_fsm_state5;
reg   [2:0] edge6_addr_1_reg_314;
wire   [0:0] tmp_253_fu_222_p2;
wire   [2:0] j_7_fu_242_p2;
wire    ap_CS_fsm_state7;
wire   [0:0] tmp_256_fu_237_p2;
wire   [3:0] edge6_q0;
reg   [3:0] temp_reg_327;
wire    ap_CS_fsm_state8;
wire   [2:0] i_fu_254_p2;
reg   [2:0] i_reg_335;
wire    ap_CS_fsm_state9;
wire   [0:0] exitcond1_fu_248_p2;
reg   [2:0] edge6_address0;
reg    edge6_ce0;
reg    edge6_we0;
reg   [3:0] edge6_d0;
reg   [2:0] invdar_reg_108;
wire   [0:0] tmp_s_fu_165_p2;
reg   [3:0] j_reg_119;
wire    ap_CS_fsm_state4;
reg   [2:0] r_assign_reg_130;
reg   [2:0] i_i_reg_142;
wire    ap_CS_fsm_state10;
wire   [63:0] tmp_fu_160_p1;
wire   [63:0] tmp_251_fu_188_p1;
wire  signed [63:0] tmp_254_fu_208_p1;
wire   [0:0] tmp_252_fu_193_p2;
wire   [63:0] tmp_255_fu_228_p1;
wire   [63:0] tmp_i_fu_260_p1;
wire   [63:0] tmp_285_i_fu_265_p1;
reg   [31:0] x_fu_42;
wire   [31:0] x_2_fu_202_p2;
wire    ap_CS_fsm_state6;
wire  signed [31:0] x_2_fu_202_p0;
wire  signed [31:0] tmp_254_fu_208_p0;
wire   [4:0] tmp_293_cast_fu_233_p1;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

getURtoDF_edge6 #(
    .DataWidth( 4 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
edge6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(edge6_address0),
    .ce0(edge6_ce0),
    .we0(edge6_we0),
    .d0(edge6_d0),
    .q0(edge6_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_i_reg_142 <= i_reg_335;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        i_i_reg_142 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_165_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        invdar_reg_108 <= indvarinc_fu_154_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        invdar_reg_108 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_119 <= j_6_reg_288;
    end else if (((tmp_s_fu_165_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_119 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_176_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        r_assign_reg_130 <= 3'd5;
    end else if (((tmp_256_fu_237_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        r_assign_reg_130 <= j_7_fu_242_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_252_fu_193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        x_fu_42 <= x_2_fu_202_p2;
    end else if (((tmp_s_fu_165_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        x_fu_42 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_253_fu_222_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        edge6_addr_1_reg_314 <= tmp_255_fu_228_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_reg_335 <= i_fu_254_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_6_reg_288 <= j_6_fu_182_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        r_assign_cast3_reg_306[2 : 0] <= r_assign_cast3_fu_218_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        temp_reg_327 <= edge6_q0;
    end
end

always @ (*) begin
    if ((((tmp_253_fu_222_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_253_fu_222_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        cubiecube_0_ep_ce0 = 1'b1;
    end else begin
        cubiecube_0_ep_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        edge6_address0 = tmp_285_i_fu_265_p1;
    end else if (((exitcond1_fu_248_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        edge6_address0 = tmp_i_fu_260_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        edge6_address0 = 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) | ((exitcond1_fu_248_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9)))) begin
        edge6_address0 = edge6_addr_1_reg_314;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        edge6_address0 = tmp_254_fu_208_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        edge6_address0 = tmp_fu_160_p1;
    end else begin
        edge6_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state4) | ((exitcond1_fu_248_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9)) | ((exitcond1_fu_248_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9)))) begin
        edge6_ce0 = 1'b1;
    end else begin
        edge6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        edge6_d0 = edge6_q0;
    end else if (((exitcond1_fu_248_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        edge6_d0 = temp_reg_327;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        edge6_d0 = cubiecube_0_ep_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        edge6_d0 = 4'd0;
    end else begin
        edge6_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state10) | ((exitcond1_fu_248_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9)) | ((tmp_252_fu_193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)))) begin
        edge6_we0 = 1'b1;
    end else begin
        edge6_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_s_fu_165_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond_fu_176_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((tmp_253_fu_222_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((tmp_256_fu_237_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((exitcond1_fu_248_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign cubiecube_0_ep_address0 = tmp_251_fu_188_p1;

assign exitcond1_fu_248_p2 = ((i_i_reg_142 == r_assign_reg_130) ? 1'b1 : 1'b0);

assign exitcond_fu_176_p2 = ((j_reg_119 == 4'd12) ? 1'b1 : 1'b0);

assign i_fu_254_p2 = (i_i_reg_142 + 3'd1);

assign indvarinc_fu_154_p2 = (invdar_reg_108 + 3'd1);

assign j_6_fu_182_p2 = (j_reg_119 + 4'd1);

assign j_7_fu_242_p2 = ($signed(r_assign_reg_130) + $signed(3'd7));

assign r_assign_cast3_fu_218_p1 = r_assign_reg_130;

assign tmp_251_fu_188_p1 = j_reg_119;

assign tmp_252_fu_193_p2 = ((cubiecube_0_ep_q0 < 4'd6) ? 1'b1 : 1'b0);

assign tmp_253_fu_222_p2 = ((r_assign_reg_130 == 3'd0) ? 1'b1 : 1'b0);

assign tmp_254_fu_208_p0 = x_fu_42;

assign tmp_254_fu_208_p1 = tmp_254_fu_208_p0;

assign tmp_255_fu_228_p1 = r_assign_reg_130;

assign tmp_256_fu_237_p2 = ((tmp_293_cast_fu_233_p1 == r_assign_cast3_reg_306) ? 1'b1 : 1'b0);

assign tmp_285_i_fu_265_p1 = i_i_reg_142;

assign tmp_293_cast_fu_233_p1 = edge6_q0;

assign tmp_fu_160_p1 = invdar_reg_108;

assign tmp_i_fu_260_p1 = i_fu_254_p2;

assign tmp_s_fu_165_p2 = ((invdar_reg_108 == 3'd5) ? 1'b1 : 1'b0);

assign x_2_fu_202_p0 = x_fu_42;

assign x_2_fu_202_p2 = ($signed(x_2_fu_202_p0) + $signed(32'd1));

always @ (posedge ap_clk) begin
    r_assign_cast3_reg_306[4:3] <= 2'b00;
end

endmodule //getURtoDF
