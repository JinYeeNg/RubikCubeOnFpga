// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _getPruning1314_HH_
#define _getPruning1314_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct getPruning1314 : public sc_module {
    // Port declarations 54
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > m_axi_table_r_AWVALID;
    sc_in< sc_logic > m_axi_table_r_AWREADY;
    sc_out< sc_lv<32> > m_axi_table_r_AWADDR;
    sc_out< sc_lv<1> > m_axi_table_r_AWID;
    sc_out< sc_lv<32> > m_axi_table_r_AWLEN;
    sc_out< sc_lv<3> > m_axi_table_r_AWSIZE;
    sc_out< sc_lv<2> > m_axi_table_r_AWBURST;
    sc_out< sc_lv<2> > m_axi_table_r_AWLOCK;
    sc_out< sc_lv<4> > m_axi_table_r_AWCACHE;
    sc_out< sc_lv<3> > m_axi_table_r_AWPROT;
    sc_out< sc_lv<4> > m_axi_table_r_AWQOS;
    sc_out< sc_lv<4> > m_axi_table_r_AWREGION;
    sc_out< sc_lv<1> > m_axi_table_r_AWUSER;
    sc_out< sc_logic > m_axi_table_r_WVALID;
    sc_in< sc_logic > m_axi_table_r_WREADY;
    sc_out< sc_lv<16> > m_axi_table_r_WDATA;
    sc_out< sc_lv<2> > m_axi_table_r_WSTRB;
    sc_out< sc_logic > m_axi_table_r_WLAST;
    sc_out< sc_lv<1> > m_axi_table_r_WID;
    sc_out< sc_lv<1> > m_axi_table_r_WUSER;
    sc_out< sc_logic > m_axi_table_r_ARVALID;
    sc_in< sc_logic > m_axi_table_r_ARREADY;
    sc_out< sc_lv<32> > m_axi_table_r_ARADDR;
    sc_out< sc_lv<1> > m_axi_table_r_ARID;
    sc_out< sc_lv<32> > m_axi_table_r_ARLEN;
    sc_out< sc_lv<3> > m_axi_table_r_ARSIZE;
    sc_out< sc_lv<2> > m_axi_table_r_ARBURST;
    sc_out< sc_lv<2> > m_axi_table_r_ARLOCK;
    sc_out< sc_lv<4> > m_axi_table_r_ARCACHE;
    sc_out< sc_lv<3> > m_axi_table_r_ARPROT;
    sc_out< sc_lv<4> > m_axi_table_r_ARQOS;
    sc_out< sc_lv<4> > m_axi_table_r_ARREGION;
    sc_out< sc_lv<1> > m_axi_table_r_ARUSER;
    sc_in< sc_logic > m_axi_table_r_RVALID;
    sc_out< sc_logic > m_axi_table_r_RREADY;
    sc_in< sc_lv<16> > m_axi_table_r_RDATA;
    sc_in< sc_logic > m_axi_table_r_RLAST;
    sc_in< sc_lv<1> > m_axi_table_r_RID;
    sc_in< sc_lv<1> > m_axi_table_r_RUSER;
    sc_in< sc_lv<2> > m_axi_table_r_RRESP;
    sc_in< sc_logic > m_axi_table_r_BVALID;
    sc_out< sc_logic > m_axi_table_r_BREADY;
    sc_in< sc_lv<2> > m_axi_table_r_BRESP;
    sc_in< sc_lv<1> > m_axi_table_r_BID;
    sc_in< sc_lv<1> > m_axi_table_r_BUSER;
    sc_in< sc_lv<31> > table_offset;
    sc_in< sc_lv<24> > index;
    sc_out< sc_lv<4> > ap_return;


    // Module declarations
    getPruning1314(sc_module_name name);
    SC_HAS_PROCESS(getPruning1314);

    ~getPruning1314();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<10> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > table_r_blk_n_AR;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > table_r_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<1> > tmp_293_fu_78_p1;
    sc_signal< sc_lv<1> > tmp_293_reg_221;
    sc_signal< sc_lv<1> > tmp_299_fu_164_p1;
    sc_signal< sc_lv<1> > tmp_299_reg_226;
    sc_signal< sc_lv<32> > table_addr_reg_231;
    sc_signal< sc_lv<16> > table_addr_read_reg_237;
    sc_signal< sc_lv<64> > sum_fu_172_p2;
    sc_signal< sc_logic > ap_reg_ioackin_m_axi_table_r_ARREADY;
    sc_signal< sc_logic > ap_sig_ioackin_m_axi_table_r_ARREADY;
    sc_signal< sc_lv<24> > p_neg_fu_90_p2;
    sc_signal< sc_lv<23> > tmp_297_fu_96_p4;
    sc_signal< sc_lv<31> > p_lshr_fu_106_p1;
    sc_signal< sc_lv<32> > tmp_fu_110_p1;
    sc_signal< sc_lv<23> > tmp_298_fu_120_p4;
    sc_signal< sc_lv<31> > p_lshr_f_fu_130_p1;
    sc_signal< sc_lv<1> > tmp_296_fu_82_p3;
    sc_signal< sc_lv<32> > p_neg_t_fu_114_p2;
    sc_signal< sc_lv<32> > tmp_287_fu_134_p1;
    sc_signal< sc_lv<32> > tmp_s_fu_138_p3;
    sc_signal< sc_lv<31> > tmp_288_fu_146_p4;
    sc_signal< sc_lv<63> > tmp_289_fu_156_p1;
    sc_signal< sc_lv<64> > tmp_286_fu_160_p1;
    sc_signal< sc_lv<64> > sext_fu_168_p1;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<4> > tmp_300_fu_184_p3;
    sc_signal< sc_lv<16> > tmp_290_fu_191_p1;
    sc_signal< sc_lv<16> > table_load5_fu_195_p2;
    sc_signal< sc_lv<4> > tmp_291_fu_200_p4;
    sc_signal< sc_lv<4> > tmp_301_fu_210_p1;
    sc_signal< sc_lv<10> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<10> ap_ST_fsm_state1;
    static const sc_lv<10> ap_ST_fsm_state2;
    static const sc_lv<10> ap_ST_fsm_state3;
    static const sc_lv<10> ap_ST_fsm_state4;
    static const sc_lv<10> ap_ST_fsm_state5;
    static const sc_lv<10> ap_ST_fsm_state6;
    static const sc_lv<10> ap_ST_fsm_state7;
    static const sc_lv<10> ap_ST_fsm_state8;
    static const sc_lv<10> ap_ST_fsm_state9;
    static const sc_lv<10> ap_ST_fsm_state10;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<24> ap_const_lv24_0;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_7;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_ap_sig_ioackin_m_axi_table_r_ARREADY();
    void thread_m_axi_table_r_ARADDR();
    void thread_m_axi_table_r_ARBURST();
    void thread_m_axi_table_r_ARCACHE();
    void thread_m_axi_table_r_ARID();
    void thread_m_axi_table_r_ARLEN();
    void thread_m_axi_table_r_ARLOCK();
    void thread_m_axi_table_r_ARPROT();
    void thread_m_axi_table_r_ARQOS();
    void thread_m_axi_table_r_ARREGION();
    void thread_m_axi_table_r_ARSIZE();
    void thread_m_axi_table_r_ARUSER();
    void thread_m_axi_table_r_ARVALID();
    void thread_m_axi_table_r_AWADDR();
    void thread_m_axi_table_r_AWBURST();
    void thread_m_axi_table_r_AWCACHE();
    void thread_m_axi_table_r_AWID();
    void thread_m_axi_table_r_AWLEN();
    void thread_m_axi_table_r_AWLOCK();
    void thread_m_axi_table_r_AWPROT();
    void thread_m_axi_table_r_AWQOS();
    void thread_m_axi_table_r_AWREGION();
    void thread_m_axi_table_r_AWSIZE();
    void thread_m_axi_table_r_AWUSER();
    void thread_m_axi_table_r_AWVALID();
    void thread_m_axi_table_r_BREADY();
    void thread_m_axi_table_r_RREADY();
    void thread_m_axi_table_r_WDATA();
    void thread_m_axi_table_r_WID();
    void thread_m_axi_table_r_WLAST();
    void thread_m_axi_table_r_WSTRB();
    void thread_m_axi_table_r_WUSER();
    void thread_m_axi_table_r_WVALID();
    void thread_p_lshr_f_fu_130_p1();
    void thread_p_lshr_fu_106_p1();
    void thread_p_neg_fu_90_p2();
    void thread_p_neg_t_fu_114_p2();
    void thread_sext_fu_168_p1();
    void thread_sum_fu_172_p2();
    void thread_table_load5_fu_195_p2();
    void thread_table_r_blk_n_AR();
    void thread_table_r_blk_n_R();
    void thread_tmp_286_fu_160_p1();
    void thread_tmp_287_fu_134_p1();
    void thread_tmp_288_fu_146_p4();
    void thread_tmp_289_fu_156_p1();
    void thread_tmp_290_fu_191_p1();
    void thread_tmp_291_fu_200_p4();
    void thread_tmp_293_fu_78_p1();
    void thread_tmp_296_fu_82_p3();
    void thread_tmp_297_fu_96_p4();
    void thread_tmp_298_fu_120_p4();
    void thread_tmp_299_fu_164_p1();
    void thread_tmp_300_fu_184_p3();
    void thread_tmp_301_fu_210_p1();
    void thread_tmp_fu_110_p1();
    void thread_tmp_s_fu_138_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
