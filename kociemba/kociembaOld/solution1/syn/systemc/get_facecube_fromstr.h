// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _get_facecube_fromstr_HH_
#define _get_facecube_fromstr_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct get_facecube_fromstr : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<6> > cubeString_address0;
    sc_out< sc_logic > cubeString_ce0;
    sc_in< sc_lv<8> > cubeString_q0;
    sc_out< sc_lv<6> > res_f_0_address0;
    sc_out< sc_logic > res_f_0_ce0;
    sc_out< sc_logic > res_f_0_we0;
    sc_out< sc_lv<3> > res_f_0_d0;


    // Module declarations
    get_facecube_fromstr(sc_module_name name);
    SC_HAS_PROCESS(get_facecube_fromstr);

    ~get_facecube_fromstr();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<6> > i_16_fu_137_p2;
    sc_signal< sc_lv<6> > i_16_reg_151;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<64> > tmp_fu_143_p1;
    sc_signal< sc_lv<64> > tmp_reg_156;
    sc_signal< sc_lv<1> > exitcond_fu_131_p2;
    sc_signal< sc_lv<6> > i_reg_120;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<6> > res_f_0_addr_4_gep_fu_75_p3;
    sc_signal< sc_lv<6> > res_f_0_addr_3_gep_fu_84_p3;
    sc_signal< sc_lv<6> > res_f_0_addr_2_gep_fu_93_p3;
    sc_signal< sc_lv<6> > res_f_0_addr_1_gep_fu_102_p3;
    sc_signal< sc_lv<6> > res_f_0_addr_gep_fu_111_p3;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<8> ap_const_lv8_42;
    static const sc_lv<8> ap_const_lv8_4C;
    static const sc_lv<8> ap_const_lv8_44;
    static const sc_lv<8> ap_const_lv8_46;
    static const sc_lv<8> ap_const_lv8_52;
    static const sc_lv<8> ap_const_lv8_55;
    static const sc_lv<3> ap_const_lv3_5;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_3;
    static const sc_lv<3> ap_const_lv3_2;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<6> ap_const_lv6_36;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_cubeString_address0();
    void thread_cubeString_ce0();
    void thread_exitcond_fu_131_p2();
    void thread_i_16_fu_137_p2();
    void thread_res_f_0_addr_1_gep_fu_102_p3();
    void thread_res_f_0_addr_2_gep_fu_93_p3();
    void thread_res_f_0_addr_3_gep_fu_84_p3();
    void thread_res_f_0_addr_4_gep_fu_75_p3();
    void thread_res_f_0_addr_gep_fu_111_p3();
    void thread_res_f_0_address0();
    void thread_res_f_0_ce0();
    void thread_res_f_0_d0();
    void thread_res_f_0_we0();
    void thread_tmp_fu_143_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
