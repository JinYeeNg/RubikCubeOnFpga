// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _solutionToString_HH_
#define _solutionToString_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct solutionToString : public sc_module {
    // Port declarations 17
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<5> > search_0_ax_address0;
    sc_out< sc_logic > search_0_ax_ce0;
    sc_in< sc_lv<32> > search_0_ax_q0;
    sc_out< sc_lv<5> > search_0_po_address0;
    sc_out< sc_logic > search_0_po_ce0;
    sc_in< sc_lv<32> > search_0_po_q0;
    sc_in< sc_lv<32> > length_r;
    sc_out< sc_lv<5> > encode_array_address0;
    sc_out< sc_logic > encode_array_ce0;
    sc_out< sc_logic > encode_array_we0;
    sc_out< sc_lv<8> > encode_array_d0;


    // Module declarations
    solutionToString(sc_module_name name);
    SC_HAS_PROCESS(solutionToString);

    ~solutionToString();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<31> > i_13_fu_151_p2;
    sc_signal< sc_lv<31> > i_13_reg_189;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<64> > tmp_s_fu_157_p1;
    sc_signal< sc_lv<64> > tmp_s_reg_194;
    sc_signal< sc_lv<1> > tmp_fu_146_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > encode_reg_85;
    sc_signal< sc_lv<32> > ap_phi_mux_encode_2_phi_fu_132_p6;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<31> > i_reg_97;
    sc_signal< sc_lv<32> > encode_1_reg_108;
    sc_signal< sc_lv<32> > encode_3_fu_169_p2;
    sc_signal< sc_lv<32> > encode_4_fu_162_p2;
    sc_signal< sc_lv<32> > i_cast_fu_142_p1;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<31> ap_const_lv31_1;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<1> ap_const_lv1_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_phi_mux_encode_2_phi_fu_132_p6();
    void thread_ap_ready();
    void thread_encode_3_fu_169_p2();
    void thread_encode_4_fu_162_p2();
    void thread_encode_array_address0();
    void thread_encode_array_ce0();
    void thread_encode_array_d0();
    void thread_encode_array_we0();
    void thread_i_13_fu_151_p2();
    void thread_i_cast_fu_142_p1();
    void thread_search_0_ax_address0();
    void thread_search_0_ax_ce0();
    void thread_search_0_po_address0();
    void thread_search_0_po_ce0();
    void thread_tmp_fu_146_p2();
    void thread_tmp_s_fu_157_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
