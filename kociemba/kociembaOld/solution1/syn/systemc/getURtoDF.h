// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _getURtoDF_HH_
#define _getURtoDF_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "getURtoDF_edge6.h"

namespace ap_rtl {

struct getURtoDF : public sc_module {
    // Port declarations 9
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > cubiecube_0_ep_address0;
    sc_out< sc_logic > cubiecube_0_ep_ce0;
    sc_in< sc_lv<4> > cubiecube_0_ep_q0;


    // Module declarations
    getURtoDF(sc_module_name name);
    SC_HAS_PROCESS(getURtoDF);

    ~getURtoDF();

    sc_trace_file* mVcdFile;

    getURtoDF_edge6* edge6_U;
    sc_signal< sc_lv<10> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<3> > indvarinc_fu_154_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<4> > j_6_fu_182_p2;
    sc_signal< sc_lv<4> > j_6_reg_288;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > exitcond_fu_176_p2;
    sc_signal< sc_lv<5> > r_assign_cast3_fu_218_p1;
    sc_signal< sc_lv<5> > r_assign_cast3_reg_306;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<3> > edge6_addr_1_reg_314;
    sc_signal< sc_lv<1> > tmp_253_fu_222_p2;
    sc_signal< sc_lv<3> > j_7_fu_242_p2;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<1> > tmp_256_fu_237_p2;
    sc_signal< sc_lv<4> > edge6_q0;
    sc_signal< sc_lv<4> > temp_reg_327;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<3> > i_fu_254_p2;
    sc_signal< sc_lv<3> > i_reg_335;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<1> > exitcond1_fu_248_p2;
    sc_signal< sc_lv<3> > edge6_address0;
    sc_signal< sc_logic > edge6_ce0;
    sc_signal< sc_logic > edge6_we0;
    sc_signal< sc_lv<4> > edge6_d0;
    sc_signal< sc_lv<3> > invdar_reg_108;
    sc_signal< sc_lv<1> > tmp_s_fu_165_p2;
    sc_signal< sc_lv<4> > j_reg_119;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > r_assign_reg_130;
    sc_signal< sc_lv<3> > i_i_reg_142;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<64> > tmp_fu_160_p1;
    sc_signal< sc_lv<64> > tmp_251_fu_188_p1;
    sc_signal< sc_lv<64> > tmp_254_fu_208_p1;
    sc_signal< sc_lv<1> > tmp_252_fu_193_p2;
    sc_signal< sc_lv<64> > tmp_255_fu_228_p1;
    sc_signal< sc_lv<64> > tmp_i_fu_260_p1;
    sc_signal< sc_lv<64> > tmp_285_i_fu_265_p1;
    sc_signal< sc_lv<32> > x_fu_42;
    sc_signal< sc_lv<32> > x_2_fu_202_p2;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<32> > x_2_fu_202_p0;
    sc_signal< sc_lv<32> > tmp_254_fu_208_p0;
    sc_signal< sc_lv<5> > tmp_293_cast_fu_233_p1;
    sc_signal< sc_lv<10> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<10> ap_ST_fsm_state1;
    static const sc_lv<10> ap_ST_fsm_state2;
    static const sc_lv<10> ap_ST_fsm_state3;
    static const sc_lv<10> ap_ST_fsm_state4;
    static const sc_lv<10> ap_ST_fsm_state5;
    static const sc_lv<10> ap_ST_fsm_state6;
    static const sc_lv<10> ap_ST_fsm_state7;
    static const sc_lv<10> ap_ST_fsm_state8;
    static const sc_lv<10> ap_ST_fsm_state9;
    static const sc_lv<10> ap_ST_fsm_state10;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<3> ap_const_lv3_5;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<4> ap_const_lv4_C;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<4> ap_const_lv4_6;
    static const sc_lv<3> ap_const_lv3_7;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_cubiecube_0_ep_address0();
    void thread_cubiecube_0_ep_ce0();
    void thread_edge6_address0();
    void thread_edge6_ce0();
    void thread_edge6_d0();
    void thread_edge6_we0();
    void thread_exitcond1_fu_248_p2();
    void thread_exitcond_fu_176_p2();
    void thread_i_fu_254_p2();
    void thread_indvarinc_fu_154_p2();
    void thread_j_6_fu_182_p2();
    void thread_j_7_fu_242_p2();
    void thread_r_assign_cast3_fu_218_p1();
    void thread_tmp_251_fu_188_p1();
    void thread_tmp_252_fu_193_p2();
    void thread_tmp_253_fu_222_p2();
    void thread_tmp_254_fu_208_p0();
    void thread_tmp_254_fu_208_p1();
    void thread_tmp_255_fu_228_p1();
    void thread_tmp_256_fu_237_p2();
    void thread_tmp_285_i_fu_265_p1();
    void thread_tmp_293_cast_fu_233_p1();
    void thread_tmp_fu_160_p1();
    void thread_tmp_i_fu_260_p1();
    void thread_tmp_s_fu_165_p2();
    void thread_x_2_fu_202_p0();
    void thread_x_2_fu_202_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
