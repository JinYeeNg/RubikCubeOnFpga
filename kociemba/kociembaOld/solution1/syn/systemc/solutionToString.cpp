// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "solutionToString.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic solutionToString::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic solutionToString::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> solutionToString::ap_ST_fsm_state1 = "1";
const sc_lv<4> solutionToString::ap_ST_fsm_state2 = "10";
const sc_lv<4> solutionToString::ap_ST_fsm_state3 = "100";
const sc_lv<4> solutionToString::ap_ST_fsm_state4 = "1000";
const sc_lv<32> solutionToString::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> solutionToString::ap_const_lv32_1 = "1";
const sc_lv<1> solutionToString::ap_const_lv1_1 = "1";
const sc_lv<32> solutionToString::ap_const_lv32_2 = "10";
const sc_lv<32> solutionToString::ap_const_lv32_3 = "11";
const sc_lv<31> solutionToString::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<32> solutionToString::ap_const_lv32_5 = "101";
const sc_lv<32> solutionToString::ap_const_lv32_4 = "100";
const sc_lv<31> solutionToString::ap_const_lv31_1 = "1";
const sc_lv<32> solutionToString::ap_const_lv32_C = "1100";
const sc_lv<32> solutionToString::ap_const_lv32_6 = "110";
const sc_lv<1> solutionToString::ap_const_lv1_0 = "0";
const bool solutionToString::ap_const_boolean_1 = true;

solutionToString::solutionToString(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_146_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_mux_encode_2_phi_fu_132_p6);
    sensitive << ( search_0_po_q0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( encode_1_reg_108 );
    sensitive << ( encode_3_fu_169_p2 );
    sensitive << ( encode_4_fu_162_p2 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_146_p2 );

    SC_METHOD(thread_encode_3_fu_169_p2);
    sensitive << ( encode_1_reg_108 );

    SC_METHOD(thread_encode_4_fu_162_p2);
    sensitive << ( encode_1_reg_108 );

    SC_METHOD(thread_encode_array_address0);
    sensitive << ( tmp_s_reg_194 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_encode_array_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_encode_array_d0);
    sensitive << ( ap_phi_mux_encode_2_phi_fu_132_p6 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_encode_array_we0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_i_13_fu_151_p2);
    sensitive << ( i_reg_97 );

    SC_METHOD(thread_i_cast_fu_142_p1);
    sensitive << ( i_reg_97 );

    SC_METHOD(thread_search_0_ax_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_s_fu_157_p1 );

    SC_METHOD(thread_search_0_ax_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_search_0_po_address0);
    sensitive << ( tmp_s_reg_194 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_search_0_po_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tmp_fu_146_p2);
    sensitive << ( length_r );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_cast_fu_142_p1 );

    SC_METHOD(thread_tmp_s_fu_157_p1);
    sensitive << ( i_reg_97 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_146_p2 );

    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "solutionToString_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, search_0_ax_address0, "(port)search_0_ax_address0");
    sc_trace(mVcdFile, search_0_ax_ce0, "(port)search_0_ax_ce0");
    sc_trace(mVcdFile, search_0_ax_q0, "(port)search_0_ax_q0");
    sc_trace(mVcdFile, search_0_po_address0, "(port)search_0_po_address0");
    sc_trace(mVcdFile, search_0_po_ce0, "(port)search_0_po_ce0");
    sc_trace(mVcdFile, search_0_po_q0, "(port)search_0_po_q0");
    sc_trace(mVcdFile, length_r, "(port)length_r");
    sc_trace(mVcdFile, encode_array_address0, "(port)encode_array_address0");
    sc_trace(mVcdFile, encode_array_ce0, "(port)encode_array_ce0");
    sc_trace(mVcdFile, encode_array_we0, "(port)encode_array_we0");
    sc_trace(mVcdFile, encode_array_d0, "(port)encode_array_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_13_fu_151_p2, "i_13_fu_151_p2");
    sc_trace(mVcdFile, i_13_reg_189, "i_13_reg_189");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_s_fu_157_p1, "tmp_s_fu_157_p1");
    sc_trace(mVcdFile, tmp_s_reg_194, "tmp_s_reg_194");
    sc_trace(mVcdFile, tmp_fu_146_p2, "tmp_fu_146_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, encode_reg_85, "encode_reg_85");
    sc_trace(mVcdFile, ap_phi_mux_encode_2_phi_fu_132_p6, "ap_phi_mux_encode_2_phi_fu_132_p6");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, i_reg_97, "i_reg_97");
    sc_trace(mVcdFile, encode_1_reg_108, "encode_1_reg_108");
    sc_trace(mVcdFile, encode_3_fu_169_p2, "encode_3_fu_169_p2");
    sc_trace(mVcdFile, encode_4_fu_162_p2, "encode_4_fu_162_p2");
    sc_trace(mVcdFile, i_cast_fu_142_p1, "i_cast_fu_142_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

solutionToString::~solutionToString() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void solutionToString::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         !esl_seteq<1,32,32>(search_0_ax_q0.read(), ap_const_lv32_5) && 
         !esl_seteq<1,32,32>(search_0_ax_q0.read(), ap_const_lv32_4) && 
         !esl_seteq<1,32,32>(search_0_ax_q0.read(), ap_const_lv32_3) && 
         !esl_seteq<1,32,32>(search_0_ax_q0.read(), ap_const_lv32_2) && 
         !esl_seteq<1,32,32>(search_0_ax_q0.read(), ap_const_lv32_1) && 
         !esl_seteq<1,32,32>(ap_const_lv32_0, search_0_ax_q0.read()))) {
        encode_1_reg_108 = encode_reg_85.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                 esl_seteq<1,32,32>(search_0_ax_q0.read(), ap_const_lv32_5)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                 esl_seteq<1,32,32>(search_0_ax_q0.read(), ap_const_lv32_4)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                 esl_seteq<1,32,32>(search_0_ax_q0.read(), ap_const_lv32_3)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                 esl_seteq<1,32,32>(search_0_ax_q0.read(), ap_const_lv32_2)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                 esl_seteq<1,32,32>(search_0_ax_q0.read(), ap_const_lv32_1)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                 esl_seteq<1,32,32>(ap_const_lv32_0, search_0_ax_q0.read())))) {
        encode_1_reg_108 = search_0_ax_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        encode_reg_85 = ap_phi_mux_encode_2_phi_fu_132_p6.read();
    } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        encode_reg_85 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_reg_97 = i_13_reg_189.read();
    } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        i_reg_97 = ap_const_lv31_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_13_reg_189 = i_13_fu_151_p2.read();
    }
    if ((esl_seteq<1,1,1>(tmp_fu_146_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        tmp_s_reg_194 = tmp_s_fu_157_p1.read();
    }
}

void solutionToString::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void solutionToString::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void solutionToString::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void solutionToString::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void solutionToString::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(tmp_fu_146_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void solutionToString::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void solutionToString::thread_ap_phi_mux_encode_2_phi_fu_132_p6() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        if ((!esl_seteq<1,32,32>(search_0_po_q0.read(), ap_const_lv32_2) && 
             !esl_seteq<1,32,32>(search_0_po_q0.read(), ap_const_lv32_3))) {
            ap_phi_mux_encode_2_phi_fu_132_p6 = encode_1_reg_108.read();
        } else if (esl_seteq<1,32,32>(search_0_po_q0.read(), ap_const_lv32_2)) {
            ap_phi_mux_encode_2_phi_fu_132_p6 = encode_4_fu_162_p2.read();
        } else if (esl_seteq<1,32,32>(search_0_po_q0.read(), ap_const_lv32_3)) {
            ap_phi_mux_encode_2_phi_fu_132_p6 = encode_3_fu_169_p2.read();
        } else {
            ap_phi_mux_encode_2_phi_fu_132_p6 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        ap_phi_mux_encode_2_phi_fu_132_p6 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void solutionToString::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(tmp_fu_146_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void solutionToString::thread_encode_3_fu_169_p2() {
    encode_3_fu_169_p2 = (!encode_1_reg_108.read().is_01() || !ap_const_lv32_6.is_01())? sc_lv<32>(): (sc_biguint<32>(encode_1_reg_108.read()) + sc_biguint<32>(ap_const_lv32_6));
}

void solutionToString::thread_encode_4_fu_162_p2() {
    encode_4_fu_162_p2 = (!encode_1_reg_108.read().is_01() || !ap_const_lv32_C.is_01())? sc_lv<32>(): (sc_biguint<32>(encode_1_reg_108.read()) + sc_biguint<32>(ap_const_lv32_C));
}

void solutionToString::thread_encode_array_address0() {
    encode_array_address0 =  (sc_lv<5>) (tmp_s_reg_194.read());
}

void solutionToString::thread_encode_array_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        encode_array_ce0 = ap_const_logic_1;
    } else {
        encode_array_ce0 = ap_const_logic_0;
    }
}

void solutionToString::thread_encode_array_d0() {
    encode_array_d0 = ap_phi_mux_encode_2_phi_fu_132_p6.read().range(8-1, 0);
}

void solutionToString::thread_encode_array_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        encode_array_we0 = ap_const_logic_1;
    } else {
        encode_array_we0 = ap_const_logic_0;
    }
}

void solutionToString::thread_i_13_fu_151_p2() {
    i_13_fu_151_p2 = (!i_reg_97.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(i_reg_97.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void solutionToString::thread_i_cast_fu_142_p1() {
    i_cast_fu_142_p1 = esl_zext<32,31>(i_reg_97.read());
}

void solutionToString::thread_search_0_ax_address0() {
    search_0_ax_address0 =  (sc_lv<5>) (tmp_s_fu_157_p1.read());
}

void solutionToString::thread_search_0_ax_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        search_0_ax_ce0 = ap_const_logic_1;
    } else {
        search_0_ax_ce0 = ap_const_logic_0;
    }
}

void solutionToString::thread_search_0_po_address0() {
    search_0_po_address0 =  (sc_lv<5>) (tmp_s_reg_194.read());
}

void solutionToString::thread_search_0_po_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        search_0_po_ce0 = ap_const_logic_1;
    } else {
        search_0_po_ce0 = ap_const_logic_0;
    }
}

void solutionToString::thread_tmp_fu_146_p2() {
    tmp_fu_146_p2 = (!i_cast_fu_142_p1.read().is_01() || !length_r.read().is_01())? sc_lv<1>(): (sc_bigint<32>(i_cast_fu_142_p1.read()) < sc_bigint<32>(length_r.read()));
}

void solutionToString::thread_tmp_s_fu_157_p1() {
    tmp_s_fu_157_p1 = esl_zext<64,31>(i_reg_97.read());
}

void solutionToString::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(tmp_fu_146_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<4>) ("XXXX");
            break;
    }
}

}

