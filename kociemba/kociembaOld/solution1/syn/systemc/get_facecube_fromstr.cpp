// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "get_facecube_fromstr.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic get_facecube_fromstr::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic get_facecube_fromstr::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> get_facecube_fromstr::ap_ST_fsm_state1 = "1";
const sc_lv<3> get_facecube_fromstr::ap_ST_fsm_state2 = "10";
const sc_lv<3> get_facecube_fromstr::ap_ST_fsm_state3 = "100";
const sc_lv<32> get_facecube_fromstr::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> get_facecube_fromstr::ap_const_lv32_1 = "1";
const sc_lv<1> get_facecube_fromstr::ap_const_lv1_0 = "0";
const sc_lv<6> get_facecube_fromstr::ap_const_lv6_0 = "000000";
const sc_lv<32> get_facecube_fromstr::ap_const_lv32_2 = "10";
const sc_lv<8> get_facecube_fromstr::ap_const_lv8_42 = "1000010";
const sc_lv<8> get_facecube_fromstr::ap_const_lv8_4C = "1001100";
const sc_lv<8> get_facecube_fromstr::ap_const_lv8_44 = "1000100";
const sc_lv<8> get_facecube_fromstr::ap_const_lv8_46 = "1000110";
const sc_lv<8> get_facecube_fromstr::ap_const_lv8_52 = "1010010";
const sc_lv<8> get_facecube_fromstr::ap_const_lv8_55 = "1010101";
const sc_lv<3> get_facecube_fromstr::ap_const_lv3_5 = "101";
const sc_lv<3> get_facecube_fromstr::ap_const_lv3_4 = "100";
const sc_lv<3> get_facecube_fromstr::ap_const_lv3_3 = "11";
const sc_lv<3> get_facecube_fromstr::ap_const_lv3_2 = "10";
const sc_lv<3> get_facecube_fromstr::ap_const_lv3_1 = "1";
const sc_lv<3> get_facecube_fromstr::ap_const_lv3_0 = "000";
const sc_lv<6> get_facecube_fromstr::ap_const_lv6_36 = "110110";
const sc_lv<6> get_facecube_fromstr::ap_const_lv6_1 = "1";
const sc_lv<1> get_facecube_fromstr::ap_const_lv1_1 = "1";
const bool get_facecube_fromstr::ap_const_boolean_1 = true;

get_facecube_fromstr::get_facecube_fromstr(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_131_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_131_p2 );

    SC_METHOD(thread_cubeString_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_143_p1 );

    SC_METHOD(thread_cubeString_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_exitcond_fu_131_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_120 );

    SC_METHOD(thread_i_16_fu_137_p2);
    sensitive << ( i_reg_120 );

    SC_METHOD(thread_res_f_0_addr_1_gep_fu_102_p3);
    sensitive << ( cubeString_q0 );
    sensitive << ( tmp_reg_156 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_res_f_0_addr_2_gep_fu_93_p3);
    sensitive << ( cubeString_q0 );
    sensitive << ( tmp_reg_156 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_res_f_0_addr_3_gep_fu_84_p3);
    sensitive << ( cubeString_q0 );
    sensitive << ( tmp_reg_156 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_res_f_0_addr_4_gep_fu_75_p3);
    sensitive << ( cubeString_q0 );
    sensitive << ( tmp_reg_156 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_res_f_0_addr_gep_fu_111_p3);
    sensitive << ( cubeString_q0 );
    sensitive << ( tmp_reg_156 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_res_f_0_address0);
    sensitive << ( cubeString_q0 );
    sensitive << ( tmp_reg_156 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( res_f_0_addr_4_gep_fu_75_p3 );
    sensitive << ( res_f_0_addr_3_gep_fu_84_p3 );
    sensitive << ( res_f_0_addr_2_gep_fu_93_p3 );
    sensitive << ( res_f_0_addr_1_gep_fu_102_p3 );
    sensitive << ( res_f_0_addr_gep_fu_111_p3 );

    SC_METHOD(thread_res_f_0_ce0);
    sensitive << ( cubeString_q0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_res_f_0_d0);
    sensitive << ( cubeString_q0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_res_f_0_we0);
    sensitive << ( cubeString_q0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tmp_fu_143_p1);
    sensitive << ( i_reg_120 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_131_p2 );

    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "get_facecube_fromstr_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, cubeString_address0, "(port)cubeString_address0");
    sc_trace(mVcdFile, cubeString_ce0, "(port)cubeString_ce0");
    sc_trace(mVcdFile, cubeString_q0, "(port)cubeString_q0");
    sc_trace(mVcdFile, res_f_0_address0, "(port)res_f_0_address0");
    sc_trace(mVcdFile, res_f_0_ce0, "(port)res_f_0_ce0");
    sc_trace(mVcdFile, res_f_0_we0, "(port)res_f_0_we0");
    sc_trace(mVcdFile, res_f_0_d0, "(port)res_f_0_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_16_fu_137_p2, "i_16_fu_137_p2");
    sc_trace(mVcdFile, i_16_reg_151, "i_16_reg_151");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_fu_143_p1, "tmp_fu_143_p1");
    sc_trace(mVcdFile, tmp_reg_156, "tmp_reg_156");
    sc_trace(mVcdFile, exitcond_fu_131_p2, "exitcond_fu_131_p2");
    sc_trace(mVcdFile, i_reg_120, "i_reg_120");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, res_f_0_addr_4_gep_fu_75_p3, "res_f_0_addr_4_gep_fu_75_p3");
    sc_trace(mVcdFile, res_f_0_addr_3_gep_fu_84_p3, "res_f_0_addr_3_gep_fu_84_p3");
    sc_trace(mVcdFile, res_f_0_addr_2_gep_fu_93_p3, "res_f_0_addr_2_gep_fu_93_p3");
    sc_trace(mVcdFile, res_f_0_addr_1_gep_fu_102_p3, "res_f_0_addr_1_gep_fu_102_p3");
    sc_trace(mVcdFile, res_f_0_addr_gep_fu_111_p3, "res_f_0_addr_gep_fu_111_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

get_facecube_fromstr::~get_facecube_fromstr() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void get_facecube_fromstr::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_reg_120 = i_16_reg_151.read();
    } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        i_reg_120 = ap_const_lv6_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_16_reg_151 = i_16_fu_137_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond_fu_131_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        tmp_reg_156 = tmp_fu_143_p1.read();
    }
}

void get_facecube_fromstr::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void get_facecube_fromstr::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void get_facecube_fromstr::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void get_facecube_fromstr::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(exitcond_fu_131_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void get_facecube_fromstr::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void get_facecube_fromstr::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(exitcond_fu_131_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void get_facecube_fromstr::thread_cubeString_address0() {
    cubeString_address0 =  (sc_lv<6>) (tmp_fu_143_p1.read());
}

void get_facecube_fromstr::thread_cubeString_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        cubeString_ce0 = ap_const_logic_1;
    } else {
        cubeString_ce0 = ap_const_logic_0;
    }
}

void get_facecube_fromstr::thread_exitcond_fu_131_p2() {
    exitcond_fu_131_p2 = (!i_reg_120.read().is_01() || !ap_const_lv6_36.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_120.read() == ap_const_lv6_36);
}

void get_facecube_fromstr::thread_i_16_fu_137_p2() {
    i_16_fu_137_p2 = (!i_reg_120.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i_reg_120.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void get_facecube_fromstr::thread_res_f_0_addr_1_gep_fu_102_p3() {
    res_f_0_addr_1_gep_fu_102_p3 =  (sc_lv<6>) (tmp_reg_156.read());
}

void get_facecube_fromstr::thread_res_f_0_addr_2_gep_fu_93_p3() {
    res_f_0_addr_2_gep_fu_93_p3 =  (sc_lv<6>) (tmp_reg_156.read());
}

void get_facecube_fromstr::thread_res_f_0_addr_3_gep_fu_84_p3() {
    res_f_0_addr_3_gep_fu_84_p3 =  (sc_lv<6>) (tmp_reg_156.read());
}

void get_facecube_fromstr::thread_res_f_0_addr_4_gep_fu_75_p3() {
    res_f_0_addr_4_gep_fu_75_p3 =  (sc_lv<6>) (tmp_reg_156.read());
}

void get_facecube_fromstr::thread_res_f_0_addr_gep_fu_111_p3() {
    res_f_0_addr_gep_fu_111_p3 =  (sc_lv<6>) (tmp_reg_156.read());
}

void get_facecube_fromstr::thread_res_f_0_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        if (esl_seteq<1,8,8>(cubeString_q0.read(), ap_const_lv8_55)) {
            res_f_0_address0 = res_f_0_addr_gep_fu_111_p3.read();
        } else if (esl_seteq<1,8,8>(cubeString_q0.read(), ap_const_lv8_52)) {
            res_f_0_address0 = res_f_0_addr_1_gep_fu_102_p3.read();
        } else if (esl_seteq<1,8,8>(cubeString_q0.read(), ap_const_lv8_46)) {
            res_f_0_address0 = res_f_0_addr_2_gep_fu_93_p3.read();
        } else if (esl_seteq<1,8,8>(cubeString_q0.read(), ap_const_lv8_44)) {
            res_f_0_address0 = res_f_0_addr_3_gep_fu_84_p3.read();
        } else if (esl_seteq<1,8,8>(cubeString_q0.read(), ap_const_lv8_4C)) {
            res_f_0_address0 = res_f_0_addr_4_gep_fu_75_p3.read();
        } else if (esl_seteq<1,8,8>(cubeString_q0.read(), ap_const_lv8_42)) {
            res_f_0_address0 =  (sc_lv<6>) (tmp_reg_156.read());
        } else {
            res_f_0_address0 = "XXXXXX";
        }
    } else {
        res_f_0_address0 = "XXXXXX";
    }
}

void get_facecube_fromstr::thread_res_f_0_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,8,8>(cubeString_q0.read(), ap_const_lv8_42)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,8,8>(cubeString_q0.read(), ap_const_lv8_4C)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,8,8>(cubeString_q0.read(), ap_const_lv8_44)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,8,8>(cubeString_q0.read(), ap_const_lv8_46)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,8,8>(cubeString_q0.read(), ap_const_lv8_52)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,8,8>(cubeString_q0.read(), ap_const_lv8_55)))) {
        res_f_0_ce0 = ap_const_logic_1;
    } else {
        res_f_0_ce0 = ap_const_logic_0;
    }
}

void get_facecube_fromstr::thread_res_f_0_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        if (esl_seteq<1,8,8>(cubeString_q0.read(), ap_const_lv8_55)) {
            res_f_0_d0 = ap_const_lv3_0;
        } else if (esl_seteq<1,8,8>(cubeString_q0.read(), ap_const_lv8_52)) {
            res_f_0_d0 = ap_const_lv3_1;
        } else if (esl_seteq<1,8,8>(cubeString_q0.read(), ap_const_lv8_46)) {
            res_f_0_d0 = ap_const_lv3_2;
        } else if (esl_seteq<1,8,8>(cubeString_q0.read(), ap_const_lv8_44)) {
            res_f_0_d0 = ap_const_lv3_3;
        } else if (esl_seteq<1,8,8>(cubeString_q0.read(), ap_const_lv8_4C)) {
            res_f_0_d0 = ap_const_lv3_4;
        } else if (esl_seteq<1,8,8>(cubeString_q0.read(), ap_const_lv8_42)) {
            res_f_0_d0 = ap_const_lv3_5;
        } else {
            res_f_0_d0 =  (sc_lv<3>) ("XXX");
        }
    } else {
        res_f_0_d0 =  (sc_lv<3>) ("XXX");
    }
}

void get_facecube_fromstr::thread_res_f_0_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,8,8>(cubeString_q0.read(), ap_const_lv8_42)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,8,8>(cubeString_q0.read(), ap_const_lv8_4C)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,8,8>(cubeString_q0.read(), ap_const_lv8_44)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,8,8>(cubeString_q0.read(), ap_const_lv8_46)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,8,8>(cubeString_q0.read(), ap_const_lv8_52)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,8,8>(cubeString_q0.read(), ap_const_lv8_55)))) {
        res_f_0_we0 = ap_const_logic_1;
    } else {
        res_f_0_we0 = ap_const_logic_0;
    }
}

void get_facecube_fromstr::thread_tmp_fu_143_p1() {
    tmp_fu_143_p1 = esl_zext<64,6>(i_reg_120.read());
}

void get_facecube_fromstr::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(exitcond_fu_131_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<3>) ("XXX");
            break;
    }
}

}

