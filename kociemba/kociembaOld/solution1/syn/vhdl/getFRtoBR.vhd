-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity getFRtoBR is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cubiecube_0_ep_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    cubiecube_0_ep_ce0 : OUT STD_LOGIC;
    cubiecube_0_ep_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of getFRtoBR is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (46 downto 0) := "00000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (46 downto 0) := "00000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (46 downto 0) := "00000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (46 downto 0) := "00000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (46 downto 0) := "00000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (46 downto 0) := "00000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (46 downto 0) := "00001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (46 downto 0) := "00010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (46 downto 0) := "00100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (46 downto 0) := "01000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (46 downto 0) := "10000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvarinc_fu_344_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_fu_478_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal edge4_0_2_reg_1159 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_350_fu_643_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_350_reg_1167 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_assign_cast_fu_655_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_5_fu_659_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_5_reg_1176 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_364_i_fu_705_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_364_i_reg_1184 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_fu_665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_fu_716_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_reg_1192 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond_i_fu_711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_25_fu_722_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_25_reg_1197 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_15_fu_733_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_15_reg_1202 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_728_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal j_16_fu_772_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal tmp_288_fu_784_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_288_reg_1223 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal tmp_284_fu_778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_i_fu_792_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_i_reg_1228 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_i_fu_798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_i_reg_1234 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal k_4_fu_858_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_4_reg_1249 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_292_fu_878_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_292_reg_1254 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_289_fu_853_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal edge4_2_5_load_1_reg_1259 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal edge4_3_5_load_1_reg_1267 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_26_fu_890_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_26_reg_1278 : STD_LOGIC_VECTOR (1 downto 0);
    signal write_flag_be_i_fu_896_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag_be_i_reg_1283 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_884_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal arr_be_i_fu_976_p6 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal arr12_be_i_fu_990_p6 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_4_fu_1036_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal j_13_fu_1041_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal invdar_reg_151 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_162 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_i_reg_174 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i_reg_186 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_i_reg_195 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0_i_reg_207 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv_reg_219 : STD_LOGIC_VECTOR (1 downto 0);
    signal b_reg_231 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_243 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_flag_i_reg_255 : STD_LOGIC_VECTOR (0 downto 0);
    signal arr4_i_reg_266 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr_i_reg_276 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_i_i1_phi_fu_292_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_i1_reg_288 : STD_LOGIC_VECTOR (1 downto 0);
    signal arr_load_phi_i_reg_300 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_283_fu_486_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal edge4_fu_82 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge4_0_1_fu_350_p6 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge4_1_fu_86 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge4_1_1_fu_364_p6 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge4_2_fu_90 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge4_2_1_fu_378_p6 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge4_3_fu_94 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge4_3_1_fu_392_p6 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge4_3_1_74_fu_98 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_369_t_fu_750_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal edge4_3_2_fu_102 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge4_3_3_fu_106 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge4_3_4_fu_110 : STD_LOGIC_VECTOR (3 downto 0);
    signal a_fu_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_4_fu_739_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_fu_118 : STD_LOGIC_VECTOR (31 downto 0);
    signal edge4_0_5_fu_122 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge4_0_fu_948_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge4_1_5_fu_126 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge4_1_80_fu_941_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge4_2_5_fu_130 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge4_2_78_fu_920_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr2_be_i_fu_1015_p6 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge4_3_5_fu_134 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge4_3_79_fu_934_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_be_i_fu_1004_p6 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_cast_fu_474_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_329_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_328_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_331_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_330_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_333_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_332_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_335_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_334_fu_547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_337_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_336_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_339_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_338_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_341_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_340_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_343_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_342_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_345_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_344_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_347_fu_625_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_346_fu_619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_349_fu_637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_348_fu_631_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_649_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_lshr_f_i_cast_fu_671_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_i_cast_fu_681_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_363_i_fu_685_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_assign_4_fu_691_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_k_i_fu_697_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_355_fu_746_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_351_fu_804_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_352_fu_810_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_285_fu_816_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_354_fu_826_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_353_fu_822_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal edge4_load_phi_fu_839_p6 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_cast3_fu_864_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_291_fu_868_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_292_fu_878_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal newSel4_fu_913_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal newSel_fu_927_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_728_ap_start : STD_LOGIC;
    signal grp_fu_728_ap_done : STD_LOGIC;
    signal tmp_287_fu_830_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_292_fu_878_p00 : STD_LOGIC_VECTOR (31 downto 0);

    component solution_mux_42_4jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        din3 : IN STD_LOGIC_VECTOR (3 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component solution_sdiv_32nkbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component solution_mux_42_1lbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    solution_mux_42_4jbC_U23 : component solution_mux_42_4jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        din3_WIDTH => 4,
        din4_WIDTH => 2,
        dout_WIDTH => 4)
    port map (
        din0 => ap_const_lv4_0,
        din1 => edge4_fu_82,
        din2 => edge4_fu_82,
        din3 => edge4_fu_82,
        din4 => invdar_reg_151,
        dout => edge4_0_1_fu_350_p6);

    solution_mux_42_4jbC_U24 : component solution_mux_42_4jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        din3_WIDTH => 4,
        din4_WIDTH => 2,
        dout_WIDTH => 4)
    port map (
        din0 => edge4_1_fu_86,
        din1 => ap_const_lv4_0,
        din2 => edge4_1_fu_86,
        din3 => edge4_1_fu_86,
        din4 => invdar_reg_151,
        dout => edge4_1_1_fu_364_p6);

    solution_mux_42_4jbC_U25 : component solution_mux_42_4jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        din3_WIDTH => 4,
        din4_WIDTH => 2,
        dout_WIDTH => 4)
    port map (
        din0 => edge4_2_fu_90,
        din1 => edge4_2_fu_90,
        din2 => ap_const_lv4_0,
        din3 => edge4_2_fu_90,
        din4 => invdar_reg_151,
        dout => edge4_2_1_fu_378_p6);

    solution_mux_42_4jbC_U26 : component solution_mux_42_4jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        din3_WIDTH => 4,
        din4_WIDTH => 2,
        dout_WIDTH => 4)
    port map (
        din0 => edge4_3_fu_94,
        din1 => edge4_3_fu_94,
        din2 => edge4_3_fu_94,
        din3 => ap_const_lv4_0,
        din4 => invdar_reg_151,
        dout => edge4_3_1_fu_392_p6);

    solution_sdiv_32nkbM_U27 : component solution_sdiv_32nkbM
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_728_ap_start,
        done => grp_fu_728_ap_done,
        din0 => s_reg_1192,
        din1 => j_i_reg_174,
        ce => ap_const_logic_1,
        dout => grp_fu_728_p2);

    solution_mux_42_4jbC_U28 : component solution_mux_42_4jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        din3_WIDTH => 4,
        din4_WIDTH => 2,
        dout_WIDTH => 4)
    port map (
        din0 => edge4_3_5_fu_134,
        din1 => edge4_1_5_fu_126,
        din2 => edge4_2_5_fu_130,
        din3 => edge4_3_5_fu_134,
        din4 => indvars_iv_reg_219,
        dout => edge4_load_phi_fu_839_p6);

    solution_mux_42_1lbW_U29 : component solution_mux_42_1lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_1,
        din1 => write_flag_i_reg_255,
        din2 => write_flag_i_reg_255,
        din3 => write_flag_i_reg_255,
        din4 => i_i1_reg_288,
        dout => write_flag_be_i_fu_896_p6);

    solution_mux_42_4jbC_U30 : component solution_mux_42_4jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        din3_WIDTH => 4,
        din4_WIDTH => 2,
        dout_WIDTH => 4)
    port map (
        din0 => arr_load_phi_i_reg_300,
        din1 => arr_i_reg_276,
        din2 => arr_i_reg_276,
        din3 => arr_i_reg_276,
        din4 => i_i1_reg_288,
        dout => arr_be_i_fu_976_p6);

    solution_mux_42_4jbC_U31 : component solution_mux_42_4jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        din3_WIDTH => 4,
        din4_WIDTH => 2,
        dout_WIDTH => 4)
    port map (
        din0 => arr4_i_reg_266,
        din1 => arr_load_phi_i_reg_300,
        din2 => arr4_i_reg_266,
        din3 => arr4_i_reg_266,
        din4 => i_i1_reg_288,
        dout => arr12_be_i_fu_990_p6);

    solution_mux_42_4jbC_U32 : component solution_mux_42_4jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        din3_WIDTH => 4,
        din4_WIDTH => 2,
        dout_WIDTH => 4)
    port map (
        din0 => edge4_3_5_load_1_reg_1267,
        din1 => edge4_3_5_load_1_reg_1267,
        din2 => edge4_3_5_load_1_reg_1267,
        din3 => arr_load_phi_i_reg_300,
        din4 => i_i1_reg_288,
        dout => arr3_be_i_fu_1004_p6);

    solution_mux_42_4jbC_U33 : component solution_mux_42_4jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        din3_WIDTH => 4,
        din4_WIDTH => 2,
        dout_WIDTH => 4)
    port map (
        din0 => edge4_2_5_load_1_reg_1259,
        din1 => edge4_2_5_load_1_reg_1259,
        din2 => arr_load_phi_i_reg_300,
        din3 => edge4_2_5_load_1_reg_1259,
        din4 => i_i1_reg_288,
        dout => arr2_be_i_fu_1015_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv16_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state43) and (tmp_284_fu_778_p2 = ap_const_lv1_1))) then 
                    ap_return_preg <= tmp_287_fu_830_p2;
                end if; 
            end if;
        end if;
    end process;


    a_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((tmp_350_reg_1167 = ap_const_lv1_0) and (tmp_369_t_fu_750_p2 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((tmp_350_reg_1167 = ap_const_lv1_0) and (tmp_369_t_fu_750_p2 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((tmp_350_reg_1167 = ap_const_lv1_0) and (tmp_369_t_fu_750_p2 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((tmp_350_reg_1167 = ap_const_lv1_0) and (tmp_369_t_fu_750_p2 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state42)))) then 
                a_fu_114 <= a_4_fu_739_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_406_p2 = ap_const_lv1_1))) then 
                a_fu_114 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    arr4_i_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_289_fu_853_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                arr4_i_reg_266 <= edge4_1_5_fu_126;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                arr4_i_reg_266 <= arr12_be_i_fu_990_p6;
            end if; 
        end if;
    end process;

    arr_load_phi_i_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_884_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                if ((ap_phi_mux_i_i1_phi_fu_292_p4 = ap_const_lv2_0)) then 
                    arr_load_phi_i_reg_300 <= arr4_i_reg_266;
                elsif ((not((ap_phi_mux_i_i1_phi_fu_292_p4 = ap_const_lv2_0)) and not((ap_phi_mux_i_i1_phi_fu_292_p4 = ap_const_lv2_1)))) then 
                    arr_load_phi_i_reg_300 <= edge4_3_5_fu_134;
                elsif ((ap_phi_mux_i_i1_phi_fu_292_p4 = ap_const_lv2_1)) then 
                    arr_load_phi_i_reg_300 <= edge4_2_5_fu_130;
                end if;
            end if; 
        end if;
    end process;

    b_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_478_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                b_reg_231 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                b_reg_231 <= b_4_fu_1036_p2;
            end if; 
        end if;
    end process;

    edge4_0_5_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state45) and (exitcond_fu_884_p2 = ap_const_lv1_1))) then 
                edge4_0_5_fu_122 <= edge4_0_fu_948_p3;
            elsif (((tmp_fu_478_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                edge4_0_5_fu_122 <= edge4_3_1_74_fu_98;
            end if; 
        end if;
    end process;

    edge4_1_5_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state45) and (exitcond_fu_884_p2 = ap_const_lv1_1))) then 
                edge4_1_5_fu_126 <= edge4_1_80_fu_941_p3;
            elsif (((tmp_fu_478_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                edge4_1_5_fu_126 <= edge4_3_2_fu_102;
            end if; 
        end if;
    end process;

    edge4_2_5_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                edge4_2_5_fu_130 <= arr2_be_i_fu_1015_p6;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state45) and (exitcond_fu_884_p2 = ap_const_lv1_1))) then 
                edge4_2_5_fu_130 <= edge4_2_78_fu_920_p3;
            elsif (((tmp_fu_478_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                edge4_2_5_fu_130 <= edge4_3_3_fu_106;
            end if; 
        end if;
    end process;

    edge4_3_1_74_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_350_reg_1167 = ap_const_lv1_0) and (tmp_369_t_fu_750_p2 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                edge4_3_1_74_fu_98 <= edge4_0_2_reg_1159;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_406_p2 = ap_const_lv1_1))) then 
                edge4_3_1_74_fu_98 <= edge4_0_1_fu_350_p6;
            end if; 
        end if;
    end process;

    edge4_3_2_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_350_reg_1167 = ap_const_lv1_0) and (tmp_369_t_fu_750_p2 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                edge4_3_2_fu_102 <= edge4_0_2_reg_1159;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_406_p2 = ap_const_lv1_1))) then 
                edge4_3_2_fu_102 <= edge4_1_1_fu_364_p6;
            end if; 
        end if;
    end process;

    edge4_3_3_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_350_reg_1167 = ap_const_lv1_0) and (tmp_369_t_fu_750_p2 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                edge4_3_3_fu_106 <= edge4_0_2_reg_1159;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_406_p2 = ap_const_lv1_1))) then 
                edge4_3_3_fu_106 <= edge4_2_1_fu_378_p6;
            end if; 
        end if;
    end process;

    edge4_3_4_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_350_reg_1167 = ap_const_lv1_0) and (tmp_369_t_fu_750_p2 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                edge4_3_4_fu_110 <= edge4_0_2_reg_1159;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_406_p2 = ap_const_lv1_1))) then 
                edge4_3_4_fu_110 <= edge4_3_1_fu_392_p6;
            end if; 
        end if;
    end process;

    edge4_3_5_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                edge4_3_5_fu_134 <= arr3_be_i_fu_1004_p6;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state45) and (exitcond_fu_884_p2 = ap_const_lv1_1))) then 
                edge4_3_5_fu_134 <= edge4_3_79_fu_934_p3;
            elsif (((tmp_fu_478_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                edge4_3_5_fu_134 <= edge4_3_4_fu_110;
            end if; 
        end if;
    end process;

    i_i1_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_289_fu_853_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                i_i1_reg_288 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                i_i1_reg_288 <= i_26_reg_1278;
            end if; 
        end if;
    end process;

    i_i_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                i_i_reg_186 <= i_25_reg_1197;
            elsif (((tmp_350_fu_643_p2 = ap_const_lv1_0) and (tmp_i_fu_665_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_i_reg_186 <= n_assign_cast_fu_655_p1;
            end if; 
        end if;
    end process;

    indvars_iv_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_478_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                indvars_iv_reg_219 <= ap_const_lv2_3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                indvars_iv_reg_219 <= j_13_fu_1041_p2;
            end if; 
        end if;
    end process;

    invdar_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_406_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                invdar_reg_151 <= indvarinc_fu_344_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                invdar_reg_151 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_i_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                j_i_reg_174 <= j_15_reg_1202;
            elsif (((tmp_350_fu_643_p2 = ap_const_lv1_0) and (tmp_i_fu_665_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_i_reg_174 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    j_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_406_p2 = ap_const_lv1_1))) then 
                j_reg_162 <= ap_const_lv5_B;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                j_reg_162 <= j_16_fu_772_p2;
            end if; 
        end if;
    end process;

    k_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state45) and (exitcond_fu_884_p2 = ap_const_lv1_1))) then 
                k_reg_243 <= k_4_reg_1249;
            elsif (((tmp_284_fu_778_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                k_reg_243 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_0_i_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_i_fu_711_p2 = ap_const_lv1_1))) then 
                p_0_i_reg_207 <= s_i_reg_195;
            elsif (((tmp_350_fu_643_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_i_fu_665_p2 = ap_const_lv1_1))) then 
                p_0_i_reg_207 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    s_i_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                s_i_reg_195 <= grp_fu_728_p2;
            elsif (((tmp_350_fu_643_p2 = ap_const_lv1_0) and (tmp_i_fu_665_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                s_i_reg_195 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    write_flag_i_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_289_fu_853_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                write_flag_i_reg_255 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                write_flag_i_reg_255 <= write_flag_be_i_reg_1283;
            end if; 
        end if;
    end process;

    x_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((tmp_350_reg_1167 = ap_const_lv1_0) and (tmp_369_t_fu_750_p2 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((tmp_350_reg_1167 = ap_const_lv1_0) and (tmp_369_t_fu_750_p2 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((tmp_350_reg_1167 = ap_const_lv1_0) and (tmp_369_t_fu_750_p2 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((tmp_350_reg_1167 = ap_const_lv1_0) and (tmp_369_t_fu_750_p2 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state42)))) then 
                x_fu_118 <= x_5_reg_1176;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_406_p2 = ap_const_lv1_1))) then 
                x_fu_118 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                arr_i_reg_276 <= arr_be_i_fu_976_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                edge4_0_2_reg_1159 <= cubiecube_0_ep_q0;
                tmp_350_reg_1167 <= tmp_350_fu_643_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                edge4_1_fu_86 <= edge4_1_1_fu_364_p6;
                edge4_2_fu_90 <= edge4_2_1_fu_378_p6;
                edge4_3_fu_94 <= edge4_3_1_fu_392_p6;
                edge4_fu_82 <= edge4_0_1_fu_350_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                edge4_2_5_load_1_reg_1259 <= edge4_2_5_fu_130;
                edge4_3_5_load_1_reg_1267 <= edge4_3_5_fu_134;
                i_26_reg_1278 <= i_26_fu_890_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_711_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                i_25_reg_1197 <= i_25_fu_722_p2;
                s_reg_1192 <= s_fu_716_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                j_15_reg_1202 <= j_15_fu_733_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                k_4_reg_1249 <= k_4_fu_858_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_284_fu_778_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                sel_tmp2_i_reg_1234 <= sel_tmp2_i_fu_798_p2;
                sel_tmp_i_reg_1228 <= sel_tmp_i_fu_792_p2;
                    tmp_288_reg_1223(1 downto 0) <= tmp_288_fu_784_p3(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) and (tmp_289_fu_853_p2 = ap_const_lv1_1))) then
                tmp_292_reg_1254 <= tmp_292_fu_878_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_350_fu_643_p2 = ap_const_lv1_0) and (tmp_i_fu_665_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_364_i_reg_1184 <= tmp_364_i_fu_705_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_884_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                write_flag_be_i_reg_1283 <= write_flag_be_i_fu_896_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_350_fu_643_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                x_5_reg_1176 <= x_5_fu_659_p2;
            end if;
        end if;
    end process;
    tmp_288_reg_1223(3 downto 2) <= "10";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_fu_478_p3, ap_CS_fsm_state4, tmp_350_fu_643_p2, tmp_i_fu_665_p2, ap_CS_fsm_state5, exitcond_i_fu_711_p2, ap_CS_fsm_state43, tmp_284_fu_778_p2, ap_CS_fsm_state44, tmp_289_fu_853_p2, ap_CS_fsm_state45, exitcond_fu_884_p2, tmp_s_fu_406_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_406_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_fu_478_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((tmp_350_fu_643_p2 = ap_const_lv1_0) and (tmp_i_fu_665_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_i_fu_711_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state43 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state43) and (tmp_284_fu_778_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state44 => 
                if (((tmp_289_fu_853_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state45 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state45) and (exitcond_fu_884_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_4_fu_739_p2 <= std_logic_vector(unsigned(p_0_i_reg_207) + unsigned(a_fu_114));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state43, tmp_284_fu_778_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state43) and (tmp_284_fu_778_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_i_i1_phi_fu_292_p4 <= i_i1_reg_288;

    ap_ready_assign_proc : process(ap_CS_fsm_state43, tmp_284_fu_778_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) and (tmp_284_fu_778_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state43, tmp_284_fu_778_p2, tmp_287_fu_830_p2, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) and (tmp_284_fu_778_p2 = ap_const_lv1_1))) then 
            ap_return <= tmp_287_fu_830_p2;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    b_4_fu_1036_p2 <= std_logic_vector(unsigned(k_reg_243) + unsigned(tmp_292_reg_1254));
    cubiecube_0_ep_address0 <= tmp_283_fu_486_p1(4 - 1 downto 0);

    cubiecube_0_ep_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cubiecube_0_ep_ce0 <= ap_const_logic_1;
        else 
            cubiecube_0_ep_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    edge4_0_fu_948_p3 <= 
        arr_i_reg_276 when (write_flag_i_reg_255(0) = '1') else 
        edge4_0_5_fu_122;
    edge4_1_80_fu_941_p3 <= 
        edge4_0_5_fu_122 when (sel_tmp2_i_reg_1234(0) = '1') else 
        arr4_i_reg_266;
    edge4_2_78_fu_920_p3 <= 
        edge4_2_5_fu_130 when (sel_tmp2_i_reg_1234(0) = '1') else 
        newSel4_fu_913_p3;
    edge4_3_79_fu_934_p3 <= 
        edge4_3_5_fu_134 when (sel_tmp2_i_reg_1234(0) = '1') else 
        newSel_fu_927_p3;
    exitcond_fu_884_p2 <= "1" when (i_i1_reg_288 = indvars_iv_reg_219) else "0";
    exitcond_i_fu_711_p2 <= "1" when (j_i_reg_174 = tmp_364_i_reg_1184) else "0";

    grp_fu_728_ap_start_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_728_ap_start <= ap_const_logic_1;
        else 
            grp_fu_728_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    i_25_fu_722_p2 <= std_logic_vector(signed(i_i_reg_186) + signed(ap_const_lv32_FFFFFFFF));
    i_26_fu_890_p2 <= std_logic_vector(unsigned(i_i1_reg_288) + unsigned(ap_const_lv2_1));
    i_fu_649_p2 <= std_logic_vector(unsigned(ap_const_lv5_B) - unsigned(j_reg_162));
    indvarinc_fu_344_p2 <= std_logic_vector(unsigned(invdar_reg_151) + unsigned(ap_const_lv2_1));
    j_13_fu_1041_p2 <= std_logic_vector(unsigned(indvars_iv_reg_219) + unsigned(ap_const_lv2_3));
    j_15_fu_733_p2 <= std_logic_vector(unsigned(j_i_reg_174) + unsigned(ap_const_lv32_1));
    j_16_fu_772_p2 <= std_logic_vector(signed(j_reg_162) + signed(ap_const_lv5_1F));
    j_1_cast3_fu_864_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_reg_219),3));
        j_cast_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j_reg_162),32));

    k_4_fu_858_p2 <= std_logic_vector(unsigned(k_reg_243) + unsigned(ap_const_lv32_1));
    k_assign_4_fu_691_p2 <= std_logic_vector(unsigned(n_assign_cast_fu_655_p1) - unsigned(x_5_fu_659_p2));
    n_assign_cast_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_649_p2),32));
    newSel4_fu_913_p3 <= 
        edge4_0_5_fu_122 when (sel_tmp_i_reg_1228(0) = '1') else 
        edge4_2_5_fu_130;
    newSel_fu_927_p3 <= 
        edge4_3_5_fu_134 when (sel_tmp_i_reg_1228(0) = '1') else 
        edge4_0_5_fu_122;
    p_k_i_fu_697_p3 <= 
        k_assign_4_fu_691_p2 when (tmp_363_i_fu_685_p2(0) = '1') else 
        x_5_fu_659_p2;
    p_lshr_f_i_cast_fu_671_p4 <= i_fu_649_p2(3 downto 1);
    s_fu_716_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(s_i_reg_195) * signed(i_i_reg_186))), 32));
    sel_tmp2_i_fu_798_p2 <= "1" when (indvars_iv_reg_219 = ap_const_lv2_1) else "0";
    sel_tmp_i_fu_792_p2 <= "1" when (indvars_iv_reg_219 = ap_const_lv2_2) else "0";
    tmp_283_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_cast_fu_474_p1),64));
    tmp_284_fu_778_p2 <= "1" when (indvars_iv_reg_219 = ap_const_lv2_0) else "0";
    tmp_285_fu_816_p2 <= std_logic_vector(unsigned(tmp_351_fu_804_p2) - unsigned(tmp_352_fu_810_p2));
    tmp_287_fu_830_p2 <= std_logic_vector(unsigned(tmp_354_fu_826_p1) + unsigned(tmp_353_fu_822_p1));
    tmp_288_fu_784_p3 <= (ap_const_lv2_2 & indvars_iv_reg_219);
    tmp_289_fu_853_p2 <= "1" when (edge4_load_phi_fu_839_p6 = tmp_288_reg_1223) else "0";
    tmp_291_fu_868_p2 <= std_logic_vector(unsigned(j_1_cast3_fu_864_p1) + unsigned(ap_const_lv3_1));
    tmp_292_fu_878_p0 <= tmp_292_fu_878_p00(3 - 1 downto 0);
    tmp_292_fu_878_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_291_fu_868_p2),32));
    tmp_292_fu_878_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &tmp_292_fu_878_p0) * signed(b_reg_231))), 32));
    tmp_328_fu_511_p2 <= "1" when (cubiecube_0_ep_q0 = ap_const_lv4_F) else "0";
    tmp_329_fu_517_p2 <= "1" when (cubiecube_0_ep_q0 = ap_const_lv4_E) else "0";
    tmp_330_fu_523_p2 <= (tmp_329_fu_517_p2 or tmp_328_fu_511_p2);
    tmp_331_fu_529_p2 <= "1" when (cubiecube_0_ep_q0 = ap_const_lv4_D) else "0";
    tmp_332_fu_535_p2 <= (tmp_331_fu_529_p2 or tmp_330_fu_523_p2);
    tmp_333_fu_541_p2 <= "1" when (cubiecube_0_ep_q0 = ap_const_lv4_C) else "0";
    tmp_334_fu_547_p2 <= (tmp_333_fu_541_p2 or tmp_332_fu_535_p2);
    tmp_335_fu_553_p2 <= "1" when (cubiecube_0_ep_q0 = ap_const_lv4_7) else "0";
    tmp_336_fu_559_p2 <= (tmp_335_fu_553_p2 or tmp_334_fu_547_p2);
    tmp_337_fu_565_p2 <= "1" when (cubiecube_0_ep_q0 = ap_const_lv4_6) else "0";
    tmp_338_fu_571_p2 <= (tmp_337_fu_565_p2 or tmp_336_fu_559_p2);
    tmp_339_fu_577_p2 <= "1" when (cubiecube_0_ep_q0 = ap_const_lv4_5) else "0";
    tmp_340_fu_583_p2 <= (tmp_339_fu_577_p2 or tmp_338_fu_571_p2);
    tmp_341_fu_589_p2 <= "1" when (cubiecube_0_ep_q0 = ap_const_lv4_4) else "0";
    tmp_342_fu_595_p2 <= (tmp_341_fu_589_p2 or tmp_340_fu_583_p2);
    tmp_343_fu_601_p2 <= "1" when (cubiecube_0_ep_q0 = ap_const_lv4_3) else "0";
    tmp_344_fu_607_p2 <= (tmp_343_fu_601_p2 or tmp_342_fu_595_p2);
    tmp_345_fu_613_p2 <= "1" when (cubiecube_0_ep_q0 = ap_const_lv4_2) else "0";
    tmp_346_fu_619_p2 <= (tmp_345_fu_613_p2 or tmp_344_fu_607_p2);
    tmp_347_fu_625_p2 <= "1" when (cubiecube_0_ep_q0 = ap_const_lv4_1) else "0";
    tmp_348_fu_631_p2 <= (tmp_347_fu_625_p2 or tmp_346_fu_619_p2);
    tmp_349_fu_637_p2 <= "1" when (cubiecube_0_ep_q0 = ap_const_lv4_0) else "0";
    tmp_350_fu_643_p2 <= (tmp_349_fu_637_p2 or tmp_348_fu_631_p2);
    tmp_351_fu_804_p2 <= std_logic_vector(shift_left(unsigned(a_fu_114),to_integer(unsigned('0' & ap_const_lv32_5(31-1 downto 0)))));
    tmp_352_fu_810_p2 <= std_logic_vector(shift_left(unsigned(a_fu_114),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    tmp_353_fu_822_p1 <= b_reg_231(16 - 1 downto 0);
    tmp_354_fu_826_p1 <= tmp_285_fu_816_p2(16 - 1 downto 0);
    tmp_355_fu_746_p1 <= x_fu_118(2 - 1 downto 0);
    tmp_363_i_fu_685_p2 <= "1" when (signed(tmp_i_cast_fu_681_p1) < signed(x_5_fu_659_p2)) else "0";
    tmp_364_i_fu_705_p2 <= std_logic_vector(unsigned(p_k_i_fu_697_p3) + unsigned(ap_const_lv32_1));
    tmp_369_t_fu_750_p2 <= (tmp_355_fu_746_p1 xor ap_const_lv2_3);
    tmp_fu_478_p3 <= j_reg_162(4 downto 4);
    tmp_i_cast_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lshr_f_i_cast_fu_671_p4),32));
    tmp_i_fu_665_p2 <= "1" when (signed(n_assign_cast_fu_655_p1) < signed(x_5_fu_659_p2)) else "0";
    tmp_s_fu_406_p2 <= "1" when (invdar_reg_151 = ap_const_lv2_3) else "0";
    x_5_fu_659_p2 <= std_logic_vector(unsigned(x_fu_118) + unsigned(ap_const_lv32_1));
end behav;
