-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity toCubieCube is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    facecube_0_f_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    facecube_0_f_ce0 : OUT STD_LOGIC;
    facecube_0_f_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
    facecube_0_f_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    facecube_0_f_ce1 : OUT STD_LOGIC;
    facecube_0_f_q1 : IN STD_LOGIC_VECTOR (2 downto 0);
    ccRet_cp_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ccRet_cp_0_ce0 : OUT STD_LOGIC;
    ccRet_cp_0_we0 : OUT STD_LOGIC;
    ccRet_cp_0_d0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ccRet_ep_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    ccRet_ep_0_ce0 : OUT STD_LOGIC;
    ccRet_ep_0_we0 : OUT STD_LOGIC;
    ccRet_ep_0_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    ccRet_co_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ccRet_co_0_ce0 : OUT STD_LOGIC;
    ccRet_co_0_we0 : OUT STD_LOGIC;
    ccRet_co_0_d0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    ccRet_eo_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    ccRet_eo_0_ce0 : OUT STD_LOGIC;
    ccRet_eo_0_we0 : OUT STD_LOGIC;
    ccRet_eo_0_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of toCubieCube is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cornerFacelet_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal cornerFacelet_ce0 : STD_LOGIC;
    signal cornerFacelet_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal cornerFacelet_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal cornerFacelet_ce1 : STD_LOGIC;
    signal cornerFacelet_q1 : STD_LOGIC_VECTOR (5 downto 0);
    signal cornerColor_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal cornerColor_1_ce0 : STD_LOGIC;
    signal cornerColor_1_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal cornerColor_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal cornerColor_2_ce0 : STD_LOGIC;
    signal cornerColor_2_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal edgeFacelet_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal edgeFacelet_0_ce0 : STD_LOGIC;
    signal edgeFacelet_0_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal edgeFacelet_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal edgeFacelet_1_ce0 : STD_LOGIC;
    signal edgeFacelet_1_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal edgeColor_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal edgeColor_0_ce0 : STD_LOGIC;
    signal edgeColor_0_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal edgeColor_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal edgeColor_1_ce0 : STD_LOGIC;
    signal edgeColor_1_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal reg_415 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal reg_420 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_10_fu_431_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_11_fu_448_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_12_fu_465_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_12_reg_782 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_120_fu_471_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_120_reg_787 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond8_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_147_fu_487_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_147_reg_793 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_121_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_121_reg_800 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ori_1_fu_499_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ori_1_reg_804 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_138_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_158_fu_640_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_158_reg_843 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal j_3_fu_648_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_3_reg_847 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_142_fu_654_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_142_reg_852 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_143_fu_659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_143_reg_862 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i_4_fu_696_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_reg_877 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_122_fu_702_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_122_reg_882 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_127_fu_718_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_127_reg_910 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal j_2_fu_724_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_2_reg_914 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_136_fu_730_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_136_reg_919 : STD_LOGIC_VECTOR (63 downto 0);
    signal edgeColor_0_load_reg_930 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_137_fu_735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_137_reg_935 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_139_fu_741_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_139_reg_944 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal edgeColor_1_addr_1_gep_fu_287_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_141_fu_747_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_141_reg_953 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_334 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond1_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_345 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond9_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_reg_356 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_144_fu_665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ori_reg_367 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_379 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_reg_391 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal or_cond_fu_758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_reg_402 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_437_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_454_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_149_cast_fu_514_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_126_fu_519_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_152_cast_fu_585_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_155_cast_fu_625_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_131_fu_630_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_135_fu_635_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_123_fu_708_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_124_fu_713_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ccRet_ep_0_addr_2_gep_fu_317_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ccRet_eo_0_addr_1_gep_fu_325_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_159_fu_671_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_145_fu_479_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_120_cast_fu_475_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_125_cast_fu_505_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_148_fu_509_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_134_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_133_fu_524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_148_cast_fu_542_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_128_fu_546_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_150_fu_558_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_149_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_151_cast_fu_564_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_151_fu_568_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_130_cast_fu_576_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_152_fu_580_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_132_fu_590_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_153_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_154_fu_602_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_157_fu_608_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_134_cast_fu_616_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_155_fu_620_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_156_fu_676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_140_fu_752_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);

    component toCubieCube_cornebkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component toCubieCube_cornecud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component toCubieCube_cornedEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component toCubieCube_edgeFeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component toCubieCube_edgeFfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component toCubieCube_edgeCg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component toCubieCube_edgeChbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;



begin
    cornerFacelet_U : component toCubieCube_cornebkb
    generic map (
        DataWidth => 6,
        AddressRange => 24,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cornerFacelet_address0,
        ce0 => cornerFacelet_ce0,
        q0 => cornerFacelet_q0,
        address1 => cornerFacelet_address1,
        ce1 => cornerFacelet_ce1,
        q1 => cornerFacelet_q1);

    cornerColor_1_U : component toCubieCube_cornecud
    generic map (
        DataWidth => 3,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cornerColor_1_address0,
        ce0 => cornerColor_1_ce0,
        q0 => cornerColor_1_q0);

    cornerColor_2_U : component toCubieCube_cornedEe
    generic map (
        DataWidth => 3,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cornerColor_2_address0,
        ce0 => cornerColor_2_ce0,
        q0 => cornerColor_2_q0);

    edgeFacelet_0_U : component toCubieCube_edgeFeOg
    generic map (
        DataWidth => 6,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => edgeFacelet_0_address0,
        ce0 => edgeFacelet_0_ce0,
        q0 => edgeFacelet_0_q0);

    edgeFacelet_1_U : component toCubieCube_edgeFfYi
    generic map (
        DataWidth => 6,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => edgeFacelet_1_address0,
        ce0 => edgeFacelet_1_ce0,
        q0 => edgeFacelet_1_q0);

    edgeColor_0_U : component toCubieCube_edgeCg8j
    generic map (
        DataWidth => 3,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => edgeColor_0_address0,
        ce0 => edgeColor_0_ce0,
        q0 => edgeColor_0_q0);

    edgeColor_1_U : component toCubieCube_edgeChbi
    generic map (
        DataWidth => 3,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => edgeColor_1_address0,
        ce0 => edgeColor_1_ce0,
        q0 => edgeColor_1_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_1_reg_345_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_425_p2 = ap_const_lv1_1))) then 
                i_1_reg_345 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond9_fu_442_p2 = ap_const_lv1_0))) then 
                i_1_reg_345 <= i_11_fu_448_p2;
            end if; 
        end if;
    end process;

    i_2_reg_356_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond9_fu_442_p2 = ap_const_lv1_1))) then 
                i_2_reg_356 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and ((tmp_158_reg_843 = ap_const_lv1_1) or ((tmp_144_fu_665_p2 = ap_const_lv1_1) and (tmp_143_reg_862 = ap_const_lv1_1))))) then 
                i_2_reg_356 <= i_12_reg_782;
            end if; 
        end if;
    end process;

    i_3_reg_391_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond8_fu_459_p2 = ap_const_lv1_1))) then 
                i_3_reg_391 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and ((or_cond_fu_758_p2 = ap_const_lv1_1) or (tmp_127_reg_910 = ap_const_lv1_0) or ((tmp_139_reg_944 = ap_const_lv1_1) and (tmp_137_reg_935 = ap_const_lv1_1))))) then 
                i_3_reg_391 <= i_4_reg_877;
            end if; 
        end if;
    end process;

    i_reg_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_425_p2 = ap_const_lv1_0))) then 
                i_reg_334 <= i_10_fu_431_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_334 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_1_reg_402_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (((tmp_127_reg_910 = ap_const_lv1_1) and (or_cond_fu_758_p2 = ap_const_lv1_0) and (tmp_139_reg_944 = ap_const_lv1_0)) or ((tmp_127_reg_910 = ap_const_lv1_1) and (or_cond_fu_758_p2 = ap_const_lv1_0) and (tmp_137_reg_935 = ap_const_lv1_0))))) then 
                j_1_reg_402 <= j_2_reg_914;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                j_1_reg_402 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_reg_379_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (((tmp_144_fu_665_p2 = ap_const_lv1_0) and (tmp_158_reg_843 = ap_const_lv1_0)) or ((tmp_143_reg_862 = ap_const_lv1_0) and (tmp_158_reg_843 = ap_const_lv1_0))))) then 
                j_reg_379 <= j_3_reg_847;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                j_reg_379 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    ori_reg_367_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_138_fu_536_p2 = ap_const_lv1_0) and (tmp_121_reg_800 = ap_const_lv1_0))) then 
                ori_reg_367 <= ori_1_reg_804;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond8_fu_459_p2 = ap_const_lv1_0))) then 
                ori_reg_367 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    reg_415_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                reg_415 <= facecube_0_f_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                reg_415 <= facecube_0_f_q0;
            end if; 
        end if;
    end process;

    reg_420_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                reg_420 <= facecube_0_f_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                reg_420 <= facecube_0_f_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                edgeColor_0_load_reg_930 <= edgeColor_0_q0;
                tmp_137_reg_935 <= tmp_137_fu_735_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_12_reg_782 <= i_12_fu_465_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                i_4_reg_877 <= i_4_fu_696_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                j_2_reg_914 <= j_2_fu_724_p2;
                tmp_127_reg_910 <= tmp_127_fu_718_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                j_3_reg_847 <= j_3_fu_648_p2;
                tmp_158_reg_843 <= j_reg_379(3 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                ori_1_reg_804 <= ori_1_fu_499_p2;
                tmp_121_reg_800 <= tmp_121_fu_493_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond8_fu_459_p2 = ap_const_lv1_0))) then
                    tmp_120_reg_787(3 downto 0) <= tmp_120_fu_471_p1(3 downto 0);
                tmp_147_reg_793 <= tmp_147_fu_487_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond_fu_690_p2 = ap_const_lv1_0))) then
                    tmp_122_reg_882(3 downto 0) <= tmp_122_fu_702_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (tmp_127_fu_718_p2 = ap_const_lv1_1))) then
                    tmp_136_reg_919(3 downto 0) <= tmp_136_fu_730_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (tmp_137_reg_935 = ap_const_lv1_1))) then
                tmp_139_reg_944 <= tmp_139_fu_741_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and ((tmp_139_fu_741_p2 = ap_const_lv1_0) or (tmp_137_reg_935 = ap_const_lv1_0)))) then
                tmp_141_reg_953 <= tmp_141_fu_747_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_158_fu_640_p3 = ap_const_lv1_0))) then
                    tmp_142_reg_852(3 downto 0) <= tmp_142_fu_654_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_143_reg_862 <= tmp_143_fu_659_p2;
            end if;
        end if;
    end process;
    tmp_120_reg_787(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    tmp_142_reg_852(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    tmp_122_reg_882(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    tmp_136_reg_919(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond8_fu_459_p2, tmp_121_fu_493_p2, tmp_121_reg_800, ap_CS_fsm_state5, ap_CS_fsm_state7, tmp_138_fu_536_p2, tmp_158_fu_640_p3, tmp_158_reg_843, ap_CS_fsm_state10, tmp_143_reg_862, ap_CS_fsm_state13, exitcond_fu_690_p2, tmp_127_fu_718_p2, tmp_127_reg_910, ap_CS_fsm_state16, tmp_137_reg_935, tmp_139_reg_944, exitcond1_fu_425_p2, exitcond9_fu_442_p2, ap_CS_fsm_state12, tmp_144_fu_665_p2, ap_CS_fsm_state19, or_cond_fu_758_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_425_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond9_fu_442_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond8_fu_459_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_121_fu_493_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and ((tmp_138_fu_536_p2 = ap_const_lv1_1) or (tmp_121_reg_800 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_158_fu_640_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and ((tmp_158_reg_843 = ap_const_lv1_1) or ((tmp_144_fu_665_p2 = ap_const_lv1_1) and (tmp_143_reg_862 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond_fu_690_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (tmp_127_fu_718_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and ((or_cond_fu_758_p2 = ap_const_lv1_1) or (tmp_127_reg_910 = ap_const_lv1_0) or ((tmp_139_reg_944 = ap_const_lv1_1) and (tmp_137_reg_935 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state13, exitcond_fu_690_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond_fu_690_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13, exitcond_fu_690_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond_fu_690_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ccRet_co_0_address0 <= tmp_120_reg_787(3 - 1 downto 0);

    ccRet_co_0_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ccRet_co_0_ce0 <= ap_const_logic_1;
        else 
            ccRet_co_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ccRet_co_0_d0 <= 
        ori_reg_367 when (tmp_156_fu_676_p2(0) = '1') else 
        ori_1_reg_804;

    ccRet_co_0_we0_assign_proc : process(tmp_158_reg_843, tmp_143_reg_862, ap_CS_fsm_state12, tmp_144_fu_665_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (tmp_144_fu_665_p2 = ap_const_lv1_1) and (tmp_143_reg_862 = ap_const_lv1_1) and (tmp_158_reg_843 = ap_const_lv1_0))) then 
            ccRet_co_0_we0 <= ap_const_logic_1;
        else 
            ccRet_co_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ccRet_cp_0_address0_assign_proc : process(ap_CS_fsm_state2, tmp_120_reg_787, ap_CS_fsm_state12, tmp_fu_437_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ccRet_cp_0_address0 <= tmp_120_reg_787(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ccRet_cp_0_address0 <= tmp_fu_437_p1(3 - 1 downto 0);
        else 
            ccRet_cp_0_address0 <= "XXX";
        end if; 
    end process;


    ccRet_cp_0_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ccRet_cp_0_ce0 <= ap_const_logic_1;
        else 
            ccRet_cp_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ccRet_cp_0_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state12, tmp_159_fu_671_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ccRet_cp_0_d0 <= tmp_159_fu_671_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ccRet_cp_0_d0 <= ap_const_lv3_0;
        else 
            ccRet_cp_0_d0 <= "XXX";
        end if; 
    end process;


    ccRet_cp_0_we0_assign_proc : process(ap_CS_fsm_state2, tmp_158_reg_843, tmp_143_reg_862, exitcond1_fu_425_p2, ap_CS_fsm_state12, tmp_144_fu_665_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (tmp_144_fu_665_p2 = ap_const_lv1_1) and (tmp_143_reg_862 = ap_const_lv1_1) and (tmp_158_reg_843 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_425_p2 = ap_const_lv1_0)))) then 
            ccRet_cp_0_we0 <= ap_const_logic_1;
        else 
            ccRet_cp_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ccRet_eo_0_addr_1_gep_fu_325_p3 <= tmp_122_reg_882(4 - 1 downto 0);

    ccRet_eo_0_address0_assign_proc : process(tmp_122_reg_882, ap_CS_fsm_state18, ap_CS_fsm_state19, ccRet_eo_0_addr_1_gep_fu_325_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ccRet_eo_0_address0 <= ccRet_eo_0_addr_1_gep_fu_325_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            ccRet_eo_0_address0 <= tmp_122_reg_882(4 - 1 downto 0);
        else 
            ccRet_eo_0_address0 <= "XXXX";
        end if; 
    end process;


    ccRet_eo_0_ce0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ccRet_eo_0_ce0 <= ap_const_logic_1;
        else 
            ccRet_eo_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ccRet_eo_0_d0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ccRet_eo_0_d0 <= ap_const_lv1_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            ccRet_eo_0_d0 <= ap_const_lv1_0;
        else 
            ccRet_eo_0_d0 <= "X";
        end if; 
    end process;


    ccRet_eo_0_we0_assign_proc : process(tmp_127_reg_910, tmp_137_reg_935, tmp_139_fu_741_p2, tmp_139_reg_944, ap_CS_fsm_state18, ap_CS_fsm_state19, or_cond_fu_758_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state19) and (((or_cond_fu_758_p2 = ap_const_lv1_1) and (tmp_127_reg_910 = ap_const_lv1_1) and (tmp_139_reg_944 = ap_const_lv1_0)) or ((or_cond_fu_758_p2 = ap_const_lv1_1) and (tmp_127_reg_910 = ap_const_lv1_1) and (tmp_137_reg_935 = ap_const_lv1_0)))) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (tmp_139_fu_741_p2 = ap_const_lv1_1) and (tmp_137_reg_935 = ap_const_lv1_1)))) then 
            ccRet_eo_0_we0 <= ap_const_logic_1;
        else 
            ccRet_eo_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ccRet_ep_0_addr_2_gep_fu_317_p3 <= tmp_122_reg_882(4 - 1 downto 0);

    ccRet_ep_0_address0_assign_proc : process(ap_CS_fsm_state3, tmp_122_reg_882, ap_CS_fsm_state18, ap_CS_fsm_state19, tmp_s_fu_454_p1, ccRet_ep_0_addr_2_gep_fu_317_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ccRet_ep_0_address0 <= ccRet_ep_0_addr_2_gep_fu_317_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            ccRet_ep_0_address0 <= tmp_122_reg_882(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ccRet_ep_0_address0 <= tmp_s_fu_454_p1(4 - 1 downto 0);
        else 
            ccRet_ep_0_address0 <= "XXXX";
        end if; 
    end process;


    ccRet_ep_0_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ccRet_ep_0_ce0 <= ap_const_logic_1;
        else 
            ccRet_ep_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ccRet_ep_0_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state18, ap_CS_fsm_state19, j_1_reg_402)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ccRet_ep_0_d0 <= j_1_reg_402;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ccRet_ep_0_d0 <= ap_const_lv4_0;
        else 
            ccRet_ep_0_d0 <= "XXXX";
        end if; 
    end process;


    ccRet_ep_0_we0_assign_proc : process(ap_CS_fsm_state3, tmp_127_reg_910, tmp_137_reg_935, tmp_139_fu_741_p2, tmp_139_reg_944, ap_CS_fsm_state18, exitcond9_fu_442_p2, ap_CS_fsm_state19, or_cond_fu_758_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state19) and (((or_cond_fu_758_p2 = ap_const_lv1_1) and (tmp_127_reg_910 = ap_const_lv1_1) and (tmp_139_reg_944 = ap_const_lv1_0)) or ((or_cond_fu_758_p2 = ap_const_lv1_1) and (tmp_127_reg_910 = ap_const_lv1_1) and (tmp_137_reg_935 = ap_const_lv1_0)))) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (tmp_139_fu_741_p2 = ap_const_lv1_1) and (tmp_137_reg_935 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond9_fu_442_p2 = ap_const_lv1_0)))) then 
            ccRet_ep_0_we0 <= ap_const_logic_1;
        else 
            ccRet_ep_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cornerColor_1_address0 <= tmp_142_fu_654_p1(3 - 1 downto 0);

    cornerColor_1_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            cornerColor_1_ce0 <= ap_const_logic_1;
        else 
            cornerColor_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cornerColor_2_address0 <= tmp_142_reg_852(3 - 1 downto 0);

    cornerColor_2_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            cornerColor_2_ce0 <= ap_const_logic_1;
        else 
            cornerColor_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cornerFacelet_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, tmp_149_cast_fu_514_p1, tmp_152_cast_fu_585_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            cornerFacelet_address0 <= tmp_152_cast_fu_585_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            cornerFacelet_address0 <= tmp_149_cast_fu_514_p1(5 - 1 downto 0);
        else 
            cornerFacelet_address0 <= "XXXXX";
        end if; 
    end process;

    cornerFacelet_address1 <= tmp_155_cast_fu_625_p1(5 - 1 downto 0);

    cornerFacelet_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            cornerFacelet_ce0 <= ap_const_logic_1;
        else 
            cornerFacelet_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cornerFacelet_ce1_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            cornerFacelet_ce1 <= ap_const_logic_1;
        else 
            cornerFacelet_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    edgeColor_0_address0 <= tmp_136_fu_730_p1(4 - 1 downto 0);

    edgeColor_0_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            edgeColor_0_ce0 <= ap_const_logic_1;
        else 
            edgeColor_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    edgeColor_1_addr_1_gep_fu_287_p3 <= tmp_136_reg_919(4 - 1 downto 0);

    edgeColor_1_address0_assign_proc : process(tmp_136_reg_919, ap_CS_fsm_state17, ap_CS_fsm_state18, edgeColor_1_addr_1_gep_fu_287_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            edgeColor_1_address0 <= edgeColor_1_addr_1_gep_fu_287_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            edgeColor_1_address0 <= tmp_136_reg_919(4 - 1 downto 0);
        else 
            edgeColor_1_address0 <= "XXXX";
        end if; 
    end process;


    edgeColor_1_ce0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            edgeColor_1_ce0 <= ap_const_logic_1;
        else 
            edgeColor_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    edgeFacelet_0_address0 <= tmp_122_fu_702_p1(4 - 1 downto 0);

    edgeFacelet_0_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            edgeFacelet_0_ce0 <= ap_const_logic_1;
        else 
            edgeFacelet_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    edgeFacelet_1_address0 <= tmp_122_fu_702_p1(4 - 1 downto 0);

    edgeFacelet_1_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            edgeFacelet_1_ce0 <= ap_const_logic_1;
        else 
            edgeFacelet_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_425_p2 <= "1" when (i_reg_334 = ap_const_lv4_8) else "0";
    exitcond8_fu_459_p2 <= "1" when (i_2_reg_356 = ap_const_lv4_8) else "0";
    exitcond9_fu_442_p2 <= "1" when (i_1_reg_345 = ap_const_lv4_C) else "0";
    exitcond_fu_690_p2 <= "1" when (i_3_reg_391 = ap_const_lv4_C) else "0";

    facecube_0_f_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state14, tmp_126_fu_519_p1, tmp_131_fu_630_p1, tmp_124_fu_713_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            facecube_0_f_address0 <= tmp_124_fu_713_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            facecube_0_f_address0 <= tmp_131_fu_630_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            facecube_0_f_address0 <= tmp_126_fu_519_p1(6 - 1 downto 0);
        else 
            facecube_0_f_address0 <= "XXXXXX";
        end if; 
    end process;


    facecube_0_f_address1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state14, tmp_135_fu_635_p1, tmp_123_fu_708_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            facecube_0_f_address1 <= tmp_123_fu_708_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            facecube_0_f_address1 <= tmp_135_fu_635_p1(6 - 1 downto 0);
        else 
            facecube_0_f_address1 <= "XXXXXX";
        end if; 
    end process;


    facecube_0_f_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            facecube_0_f_ce0 <= ap_const_logic_1;
        else 
            facecube_0_f_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    facecube_0_f_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            facecube_0_f_ce1 <= ap_const_logic_1;
        else 
            facecube_0_f_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    i_10_fu_431_p2 <= std_logic_vector(unsigned(i_reg_334) + unsigned(ap_const_lv4_1));
    i_11_fu_448_p2 <= std_logic_vector(unsigned(i_1_reg_345) + unsigned(ap_const_lv4_1));
    i_12_fu_465_p2 <= std_logic_vector(unsigned(i_2_reg_356) + unsigned(ap_const_lv4_1));
    i_4_fu_696_p2 <= std_logic_vector(unsigned(i_3_reg_391) + unsigned(ap_const_lv4_1));
    j_2_fu_724_p2 <= std_logic_vector(unsigned(j_1_reg_402) + unsigned(ap_const_lv4_1));
    j_3_fu_648_p2 <= std_logic_vector(unsigned(j_reg_379) + unsigned(ap_const_lv4_1));
    or_cond_fu_758_p2 <= (tmp_141_reg_953 and tmp_140_fu_752_p2);
    ori_1_fu_499_p2 <= std_logic_vector(unsigned(ori_reg_367) + unsigned(ap_const_lv2_1));
    tmp_120_cast_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_356),6));
    tmp_120_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_356),64));
    tmp_121_fu_493_p2 <= "1" when (ori_reg_367 = ap_const_lv2_3) else "0";
    tmp_122_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_391),64));
    tmp_123_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(edgeFacelet_0_q0),64));
    tmp_124_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(edgeFacelet_1_q0),64));
    tmp_125_cast_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ori_reg_367),6));
    tmp_126_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cornerFacelet_q0),64));
    tmp_127_fu_718_p2 <= "1" when (unsigned(j_1_reg_402) < unsigned(ap_const_lv4_C)) else "0";
    tmp_128_fu_546_p2 <= std_logic_vector(unsigned(tmp_148_cast_fu_542_p1) + unsigned(ap_const_lv3_1));
    tmp_130_cast_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_151_fu_568_p3),6));
    tmp_131_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cornerFacelet_q0),64));
    tmp_132_fu_590_p2 <= std_logic_vector(unsigned(tmp_148_cast_fu_542_p1) + unsigned(ap_const_lv3_2));
    tmp_133_fu_524_p2 <= "1" when (facecube_0_f_q0 = ap_const_lv3_3) else "0";
    tmp_134_cast_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_157_fu_608_p3),6));
    tmp_134_fu_530_p2 <= "1" when (facecube_0_f_q0 = ap_const_lv3_0) else "0";
    tmp_135_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cornerFacelet_q1),64));
    tmp_136_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_402),64));
    tmp_137_fu_735_p2 <= "1" when (reg_415 = edgeColor_0_q0) else "0";
    tmp_138_fu_536_p2 <= (tmp_134_fu_530_p2 or tmp_133_fu_524_p2);
    tmp_139_fu_741_p2 <= "1" when (reg_420 = edgeColor_1_q0) else "0";
    tmp_140_fu_752_p2 <= "1" when (reg_415 = edgeColor_1_q0) else "0";
    tmp_141_fu_747_p2 <= "1" when (reg_420 = edgeColor_0_load_reg_930) else "0";
    tmp_142_fu_654_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_379),64));
    tmp_143_fu_659_p2 <= "1" when (reg_415 = cornerColor_1_q0) else "0";
    tmp_144_fu_665_p2 <= "1" when (reg_420 = cornerColor_2_q0) else "0";
    tmp_145_fu_479_p3 <= (i_2_reg_356 & ap_const_lv2_0);
    tmp_147_fu_487_p2 <= std_logic_vector(unsigned(tmp_145_fu_479_p3) - unsigned(tmp_120_cast_fu_475_p1));
    tmp_148_cast_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ori_reg_367),3));
    tmp_148_fu_509_p2 <= std_logic_vector(unsigned(tmp_147_reg_793) + unsigned(tmp_125_cast_fu_505_p1));
        tmp_149_cast_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_148_fu_509_p2),64));

    tmp_149_fu_552_p2 <= "1" when (unsigned(tmp_128_fu_546_p2) < unsigned(ap_const_lv3_3)) else "0";
    tmp_150_fu_558_p2 <= (ori_reg_367 xor ap_const_lv2_2);
        tmp_151_cast_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_150_fu_558_p2),3));

    tmp_151_fu_568_p3 <= 
        tmp_128_fu_546_p2 when (tmp_149_fu_552_p2(0) = '1') else 
        tmp_151_cast_fu_564_p1;
        tmp_152_cast_fu_585_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_152_fu_580_p2),64));

    tmp_152_fu_580_p2 <= std_logic_vector(unsigned(tmp_130_cast_fu_576_p1) + unsigned(tmp_147_reg_793));
    tmp_153_fu_596_p2 <= "1" when (unsigned(tmp_132_fu_590_p2) < unsigned(ap_const_lv3_3)) else "0";
    tmp_154_fu_602_p2 <= std_logic_vector(unsigned(tmp_148_cast_fu_542_p1) + unsigned(ap_const_lv3_7));
        tmp_155_cast_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_155_fu_620_p2),64));

    tmp_155_fu_620_p2 <= std_logic_vector(unsigned(tmp_134_cast_fu_616_p1) + unsigned(tmp_147_reg_793));
    tmp_156_fu_676_p2 <= "0" when (ori_reg_367 = ap_const_lv2_3) else "1";
    tmp_157_fu_608_p3 <= 
        tmp_132_fu_590_p2 when (tmp_153_fu_596_p2(0) = '1') else 
        tmp_154_fu_602_p2;
    tmp_158_fu_640_p3 <= j_reg_379(3 downto 3);
    tmp_159_fu_671_p1 <= j_reg_379(3 - 1 downto 0);
    tmp_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_334),64));
    tmp_s_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_345),64));
end behav;
