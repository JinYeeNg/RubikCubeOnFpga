-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity getURtoDF is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cubiecube_0_ep_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    cubiecube_0_ep_ce0 : OUT STD_LOGIC;
    cubiecube_0_ep_q0 : IN STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of getURtoDF is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvarinc_fu_154_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal j_6_fu_182_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_6_reg_288 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_assign_cast3_fu_218_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_assign_cast3_reg_306 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal edge6_addr_1_reg_314 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_253_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_7_fu_242_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_256_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal edge6_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal temp_reg_327 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_fu_254_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_335 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal exitcond1_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal edge6_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal edge6_ce0 : STD_LOGIC;
    signal edge6_we0 : STD_LOGIC;
    signal edge6_d0 : STD_LOGIC_VECTOR (3 downto 0);
    signal invdar_reg_108 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_119 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal r_assign_reg_130 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_i_reg_142 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_fu_160_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_251_fu_188_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_254_fu_208_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_252_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_255_fu_228_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_fu_260_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_285_i_fu_265_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_fu_42 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_2_fu_202_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal x_2_fu_202_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_254_fu_208_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_293_cast_fu_233_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component getURtoDF_edge6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (3 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;



begin
    edge6_U : component getURtoDF_edge6
    generic map (
        DataWidth => 4,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => edge6_address0,
        ce0 => edge6_ce0,
        we0 => edge6_we0,
        d0 => edge6_d0,
        q0 => edge6_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_i_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_i_reg_142 <= i_reg_335;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_i_reg_142 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    invdar_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_165_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                invdar_reg_108 <= indvarinc_fu_154_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                invdar_reg_108 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_reg_119 <= j_6_reg_288;
            elsif (((tmp_s_fu_165_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_119 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    r_assign_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_176_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                r_assign_reg_130 <= ap_const_lv3_5;
            elsif (((tmp_256_fu_237_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                r_assign_reg_130 <= j_7_fu_242_p2;
            end if; 
        end if;
    end process;

    x_fu_42_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_252_fu_193_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                x_fu_42 <= x_2_fu_202_p2;
            elsif (((tmp_s_fu_165_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                x_fu_42 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_253_fu_222_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                edge6_addr_1_reg_314 <= tmp_255_fu_228_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_reg_335 <= i_fu_254_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_6_reg_288 <= j_6_fu_182_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    r_assign_cast3_reg_306(2 downto 0) <= r_assign_cast3_fu_218_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                temp_reg_327 <= edge6_q0;
            end if;
        end if;
    end process;
    r_assign_cast3_reg_306(4 downto 3) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond_fu_176_p2, ap_CS_fsm_state5, tmp_253_fu_222_p2, ap_CS_fsm_state7, tmp_256_fu_237_p2, ap_CS_fsm_state9, exitcond1_fu_248_p2, tmp_s_fu_165_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_s_fu_165_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond_fu_176_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((tmp_253_fu_222_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((tmp_256_fu_237_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((exitcond1_fu_248_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, tmp_253_fu_222_p2)
    begin
        if ((((tmp_253_fu_222_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, tmp_253_fu_222_p2)
    begin
        if (((tmp_253_fu_222_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cubiecube_0_ep_address0 <= tmp_251_fu_188_p1(4 - 1 downto 0);

    cubiecube_0_ep_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cubiecube_0_ep_ce0 <= ap_const_logic_1;
        else 
            cubiecube_0_ep_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    edge6_address0_assign_proc : process(ap_CS_fsm_state2, edge6_addr_1_reg_314, ap_CS_fsm_state7, ap_CS_fsm_state9, exitcond1_fu_248_p2, ap_CS_fsm_state4, ap_CS_fsm_state10, tmp_fu_160_p1, tmp_254_fu_208_p1, tmp_i_fu_260_p1, tmp_285_i_fu_265_p1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            edge6_address0 <= tmp_285_i_fu_265_p1(3 - 1 downto 0);
        elsif (((exitcond1_fu_248_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            edge6_address0 <= tmp_i_fu_260_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            edge6_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or ((exitcond1_fu_248_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            edge6_address0 <= edge6_addr_1_reg_314;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            edge6_address0 <= tmp_254_fu_208_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            edge6_address0 <= tmp_fu_160_p1(3 - 1 downto 0);
        else 
            edge6_address0 <= "XXX";
        end if; 
    end process;


    edge6_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7, ap_CS_fsm_state9, exitcond1_fu_248_p2, ap_CS_fsm_state4, ap_CS_fsm_state10, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((exitcond1_fu_248_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((exitcond1_fu_248_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            edge6_ce0 <= ap_const_logic_1;
        else 
            edge6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    edge6_d0_assign_proc : process(cubiecube_0_ep_q0, ap_CS_fsm_state2, edge6_q0, temp_reg_327, ap_CS_fsm_state9, exitcond1_fu_248_p2, ap_CS_fsm_state4, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            edge6_d0 <= edge6_q0;
        elsif (((exitcond1_fu_248_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            edge6_d0 <= temp_reg_327;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            edge6_d0 <= cubiecube_0_ep_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            edge6_d0 <= ap_const_lv4_0;
        else 
            edge6_d0 <= "XXXX";
        end if; 
    end process;


    edge6_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state9, exitcond1_fu_248_p2, ap_CS_fsm_state4, ap_CS_fsm_state10, tmp_252_fu_193_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((exitcond1_fu_248_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((tmp_252_fu_193_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            edge6_we0 <= ap_const_logic_1;
        else 
            edge6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_248_p2 <= "1" when (i_i_reg_142 = r_assign_reg_130) else "0";
    exitcond_fu_176_p2 <= "1" when (j_reg_119 = ap_const_lv4_C) else "0";
    i_fu_254_p2 <= std_logic_vector(unsigned(i_i_reg_142) + unsigned(ap_const_lv3_1));
    indvarinc_fu_154_p2 <= std_logic_vector(unsigned(invdar_reg_108) + unsigned(ap_const_lv3_1));
    j_6_fu_182_p2 <= std_logic_vector(unsigned(j_reg_119) + unsigned(ap_const_lv4_1));
    j_7_fu_242_p2 <= std_logic_vector(unsigned(r_assign_reg_130) + unsigned(ap_const_lv3_7));
    r_assign_cast3_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_assign_reg_130),5));
    tmp_251_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_119),64));
    tmp_252_fu_193_p2 <= "1" when (unsigned(cubiecube_0_ep_q0) < unsigned(ap_const_lv4_6)) else "0";
    tmp_253_fu_222_p2 <= "1" when (r_assign_reg_130 = ap_const_lv3_0) else "0";
    tmp_254_fu_208_p0 <= x_fu_42;
        tmp_254_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_254_fu_208_p0),64));

    tmp_255_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_assign_reg_130),64));
    tmp_256_fu_237_p2 <= "1" when (tmp_293_cast_fu_233_p1 = r_assign_cast3_reg_306) else "0";
    tmp_285_i_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_142),64));
    tmp_293_cast_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(edge6_q0),5));
    tmp_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar_reg_108),64));
    tmp_i_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_254_p2),64));
    tmp_s_fu_165_p2 <= "1" when (invdar_reg_108 = ap_const_lv3_5) else "0";
    x_2_fu_202_p0 <= x_fu_42;
    x_2_fu_202_p2 <= std_logic_vector(signed(x_2_fu_202_p0) + signed(ap_const_lv32_1));
end behav;
