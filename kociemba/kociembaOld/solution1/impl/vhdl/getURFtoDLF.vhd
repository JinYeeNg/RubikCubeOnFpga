-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity getURFtoDLF is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cubiecube_0_cp_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    cubiecube_0_cp_ce0 : OUT STD_LOGIC;
    cubiecube_0_cp_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of getURFtoDLF is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (49 downto 0) := "00000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (49 downto 0) := "00000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (49 downto 0) := "00000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (49 downto 0) := "00000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (49 downto 0) := "00000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (49 downto 0) := "00000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (49 downto 0) := "00001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (49 downto 0) := "00010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (49 downto 0) := "00100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (49 downto 0) := "01000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (49 downto 0) := "10000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_2D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011010000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvarinc_fu_241_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal n_assign_cast3_fu_268_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_assign_cast3_reg_502 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_8_fu_278_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_8_reg_512 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cubiecube_0_cp_load_reg_527 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_258_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_258_reg_532 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_3_fu_295_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_3_reg_536 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_reg_541 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_364_i_fu_339_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_364_i_reg_545 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_fu_350_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_reg_553 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond_i_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_21_fu_356_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_21_reg_558 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_9_fu_376_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_9_reg_563 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_371_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal corner6_addr_1_reg_576 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal tmp_259_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_260_fu_404_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_260_reg_581 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_2_fu_416_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_2_reg_589 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal tmp_265_fu_432_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_265_reg_594 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_263_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal corner6_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp_reg_599 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal i_22_fu_444_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_22_reg_607 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal exitcond5_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_2_fu_460_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal j_fu_465_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal corner6_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal corner6_ce0 : STD_LOGIC;
    signal corner6_we0 : STD_LOGIC;
    signal corner6_d0 : STD_LOGIC_VECTOR (2 downto 0);
    signal invdar_reg_119 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_130 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal j_i_reg_142 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i_reg_154 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_i_reg_163 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0_i_reg_175 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_assign_reg_187 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_reg_199 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_211 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i2_reg_223 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal tmp_fu_247_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_257_fu_284_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_266_fu_362_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_262_fu_399_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i4_fu_450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_287_i_fu_455_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_fu_50 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_2_fu_382_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_fu_54 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal p_lshr_f_i_cast_fu_306_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_i_cast_fu_316_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_363_i_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_assign_2_fu_326_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_k_i_fu_331_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_266_fu_362_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_260_fu_404_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_264_fu_422_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_265_fu_432_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal tmp_261_fu_471_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_371_ap_start : STD_LOGIC;
    signal grp_fu_371_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_265_fu_432_p00 : STD_LOGIC_VECTOR (31 downto 0);

    component solution_sdiv_32nkbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component getURFtoDLF_corner6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (2 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;



begin
    corner6_U : component getURFtoDLF_corner6
    generic map (
        DataWidth => 3,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => corner6_address0,
        ce0 => corner6_ce0,
        we0 => corner6_we0,
        d0 => corner6_d0,
        q0 => corner6_q0);

    solution_sdiv_32nkbM_U38 : component solution_sdiv_32nkbM
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_371_ap_start,
        done => grp_fu_371_ap_done,
        din0 => s_reg_553,
        din1 => j_i_reg_142,
        ce => ap_const_logic_1,
        dout => grp_fu_371_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    a_fu_50_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state42) and (tmp_258_reg_532 = ap_const_lv1_1))) then 
                a_fu_50 <= a_2_fu_382_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_252_p2 = ap_const_lv1_1))) then 
                a_fu_50 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    b_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_272_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                b_reg_199 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                b_reg_199 <= b_2_fu_460_p2;
            end if; 
        end if;
    end process;

    i_i2_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                i_i2_reg_223 <= i_22_reg_607;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                i_i2_reg_223 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_i_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                i_i_reg_154 <= i_21_reg_558;
            elsif (((tmp_i_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_258_fu_289_p2 = ap_const_lv1_1))) then 
                i_i_reg_154 <= n_assign_cast3_reg_502;
            end if; 
        end if;
    end process;

    i_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                i_reg_130 <= j_8_reg_512;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_252_p2 = ap_const_lv1_1))) then 
                i_reg_130 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    invdar_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_252_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                invdar_reg_119 <= indvarinc_fu_241_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                invdar_reg_119 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_i_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                j_i_reg_142 <= j_9_reg_563;
            elsif (((tmp_i_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_258_fu_289_p2 = ap_const_lv1_1))) then 
                j_i_reg_142 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    k_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_259_fu_393_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                k_reg_211 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state47) and (exitcond5_fu_438_p2 = ap_const_lv1_1))) then 
                k_reg_211 <= k_2_reg_589;
            end if; 
        end if;
    end process;

    p_0_i_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_reg_541 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_i_fu_345_p2 = ap_const_lv1_1))) then 
                p_0_i_reg_175 <= s_i_reg_163;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_i_fu_301_p2 = ap_const_lv1_1) and (tmp_258_fu_289_p2 = ap_const_lv1_1))) then 
                p_0_i_reg_175 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    r_assign_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_272_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                r_assign_reg_187 <= ap_const_lv3_5;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                r_assign_reg_187 <= j_fu_465_p2;
            end if; 
        end if;
    end process;

    s_i_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                s_i_reg_163 <= grp_fu_371_p2;
            elsif (((tmp_i_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_258_fu_289_p2 = ap_const_lv1_1))) then 
                s_i_reg_163 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    x_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and ((exitcond_i_fu_345_p2 = ap_const_lv1_1) or (tmp_i_reg_541 = ap_const_lv1_1)))) then 
                x_fu_54 <= x_3_reg_536;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_252_p2 = ap_const_lv1_1))) then 
                x_fu_54 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_259_fu_393_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                corner6_addr_1_reg_576 <= tmp_262_fu_399_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                cubiecube_0_cp_load_reg_527 <= cubiecube_0_cp_q0;
                tmp_258_reg_532 <= tmp_258_fu_289_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_345_p2 = ap_const_lv1_0) and (tmp_i_reg_541 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                i_21_reg_558 <= i_21_fu_356_p2;
                s_reg_553 <= s_fu_350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                i_22_reg_607 <= i_22_fu_444_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_8_reg_512 <= j_8_fu_278_p2;
                    n_assign_cast3_reg_502(3 downto 0) <= n_assign_cast3_fu_268_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                j_9_reg_563 <= j_9_fu_376_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                k_2_reg_589 <= k_2_fu_416_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                temp_reg_599 <= corner6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state43) and (tmp_259_fu_393_p2 = ap_const_lv1_1))) then
                tmp_260_reg_581 <= tmp_260_fu_404_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state45) and (tmp_263_fu_410_p2 = ap_const_lv1_1))) then
                tmp_265_reg_594 <= tmp_265_fu_432_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_258_fu_289_p2 = ap_const_lv1_1))) then
                tmp_364_i_reg_545 <= tmp_364_i_fu_339_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_258_fu_289_p2 = ap_const_lv1_1))) then
                tmp_i_reg_541 <= tmp_i_fu_301_p2;
                x_3_reg_536 <= x_3_fu_295_p2;
            end if;
        end if;
    end process;
    n_assign_cast3_reg_502(31 downto 4) <= "0000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond_fu_272_p2, ap_CS_fsm_state4, tmp_258_fu_289_p2, tmp_i_reg_541, ap_CS_fsm_state5, exitcond_i_fu_345_p2, ap_CS_fsm_state43, tmp_259_fu_393_p2, ap_CS_fsm_state45, tmp_263_fu_410_p2, ap_CS_fsm_state47, exitcond5_fu_438_p2, tmp_s_fu_252_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_252_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond_fu_272_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_258_fu_289_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and ((exitcond_i_fu_345_p2 = ap_const_lv1_1) or (tmp_i_reg_541 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state43 => 
                if (((tmp_259_fu_393_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state45) and (tmp_263_fu_410_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state47) and (exitcond5_fu_438_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_2_fu_382_p2 <= std_logic_vector(unsigned(p_0_i_reg_175) + unsigned(a_fu_50));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= tmp_261_fu_471_p2(16 - 1 downto 0);
    b_2_fu_460_p2 <= std_logic_vector(unsigned(k_reg_211) + unsigned(tmp_265_reg_594));

    corner6_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, corner6_addr_1_reg_576, ap_CS_fsm_state45, ap_CS_fsm_state47, exitcond5_fu_438_p2, ap_CS_fsm_state48, tmp_fu_247_p1, tmp_266_fu_362_p1, tmp_i4_fu_450_p1, tmp_287_i_fu_455_p1, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            corner6_address0 <= tmp_287_i_fu_455_p1(3 - 1 downto 0);
        elsif (((exitcond5_fu_438_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            corner6_address0 <= tmp_i4_fu_450_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            corner6_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state44) or ((ap_const_logic_1 = ap_CS_fsm_state47) and (exitcond5_fu_438_p2 = ap_const_lv1_1)))) then 
            corner6_address0 <= corner6_addr_1_reg_576;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            corner6_address0 <= tmp_266_fu_362_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            corner6_address0 <= tmp_fu_247_p1(3 - 1 downto 0);
        else 
            corner6_address0 <= "XXX";
        end if; 
    end process;


    corner6_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state45, ap_CS_fsm_state47, exitcond5_fu_438_p2, ap_CS_fsm_state48, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state47) and (exitcond5_fu_438_p2 = ap_const_lv1_1)) or ((exitcond5_fu_438_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47)))) then 
            corner6_ce0 <= ap_const_logic_1;
        else 
            corner6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    corner6_d0_assign_proc : process(ap_CS_fsm_state2, cubiecube_0_cp_load_reg_527, ap_CS_fsm_state5, corner6_q0, temp_reg_599, ap_CS_fsm_state47, exitcond5_fu_438_p2, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            corner6_d0 <= corner6_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) and (exitcond5_fu_438_p2 = ap_const_lv1_1))) then 
            corner6_d0 <= temp_reg_599;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            corner6_d0 <= cubiecube_0_cp_load_reg_527;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            corner6_d0 <= ap_const_lv3_0;
        else 
            corner6_d0 <= "XXX";
        end if; 
    end process;


    corner6_we0_assign_proc : process(ap_CS_fsm_state2, tmp_i_reg_541, ap_CS_fsm_state5, exitcond_i_fu_345_p2, ap_CS_fsm_state47, exitcond5_fu_438_p2, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state48) or ((ap_const_logic_1 = ap_CS_fsm_state47) and (exitcond5_fu_438_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and ((exitcond_i_fu_345_p2 = ap_const_lv1_1) or (tmp_i_reg_541 = ap_const_lv1_1))))) then 
            corner6_we0 <= ap_const_logic_1;
        else 
            corner6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cubiecube_0_cp_address0 <= tmp_257_fu_284_p1(3 - 1 downto 0);

    cubiecube_0_cp_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cubiecube_0_cp_ce0 <= ap_const_logic_1;
        else 
            cubiecube_0_cp_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond5_fu_438_p2 <= "1" when (i_i2_reg_223 = r_assign_reg_187) else "0";
    exitcond_fu_272_p2 <= "1" when (i_reg_130 = ap_const_lv4_8) else "0";
    exitcond_i_fu_345_p2 <= "1" when (j_i_reg_142 = tmp_364_i_reg_545) else "0";

    grp_fu_371_ap_start_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_371_ap_start <= ap_const_logic_1;
        else 
            grp_fu_371_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    i_21_fu_356_p2 <= std_logic_vector(signed(i_i_reg_154) + signed(ap_const_lv32_FFFFFFFF));
    i_22_fu_444_p2 <= std_logic_vector(unsigned(i_i2_reg_223) + unsigned(ap_const_lv3_1));
    indvarinc_fu_241_p2 <= std_logic_vector(unsigned(invdar_reg_119) + unsigned(ap_const_lv3_1));
    j_8_fu_278_p2 <= std_logic_vector(unsigned(i_reg_130) + unsigned(ap_const_lv4_1));
    j_9_fu_376_p2 <= std_logic_vector(unsigned(j_i_reg_142) + unsigned(ap_const_lv32_1));
    j_fu_465_p2 <= std_logic_vector(unsigned(r_assign_reg_187) + unsigned(ap_const_lv3_7));
    k_2_fu_416_p2 <= std_logic_vector(unsigned(k_reg_211) + unsigned(ap_const_lv32_1));
    k_assign_2_fu_326_p2 <= std_logic_vector(unsigned(n_assign_cast3_reg_502) - unsigned(x_3_fu_295_p2));
    n_assign_cast3_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_130),32));
    p_k_i_fu_331_p3 <= 
        k_assign_2_fu_326_p2 when (tmp_363_i_fu_320_p2(0) = '1') else 
        x_3_fu_295_p2;
    p_lshr_f_i_cast_fu_306_p4 <= i_reg_130(2 downto 1);
    s_fu_350_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(s_i_reg_163) * signed(i_i_reg_154))), 32));
    tmp_257_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_130),64));
    tmp_258_fu_289_p2 <= "1" when (unsigned(cubiecube_0_cp_q0) < unsigned(ap_const_lv3_6)) else "0";
    tmp_259_fu_393_p2 <= "1" when (r_assign_reg_187 = ap_const_lv3_0) else "0";
    tmp_260_fu_404_p1 <= a_fu_50;
    tmp_260_fu_404_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_2D0) * signed(tmp_260_fu_404_p1))), 32));
    tmp_261_fu_471_p2 <= std_logic_vector(signed(b_reg_199) + signed(tmp_260_reg_581));
    tmp_262_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_assign_reg_187),64));
    tmp_263_fu_410_p2 <= "1" when (corner6_q0 = r_assign_reg_187) else "0";
    tmp_264_fu_422_p2 <= std_logic_vector(unsigned(r_assign_reg_187) + unsigned(ap_const_lv3_1));
    tmp_265_fu_432_p0 <= tmp_265_fu_432_p00(3 - 1 downto 0);
    tmp_265_fu_432_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_264_fu_422_p2),32));
    tmp_265_fu_432_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &tmp_265_fu_432_p0) * signed(b_reg_199))), 32));
    tmp_266_fu_362_p0 <= x_fu_54;
        tmp_266_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_266_fu_362_p0),64));

    tmp_287_i_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i2_reg_223),64));
    tmp_363_i_fu_320_p2 <= "1" when (signed(tmp_i_cast_fu_316_p1) < signed(x_3_fu_295_p2)) else "0";
    tmp_364_i_fu_339_p2 <= std_logic_vector(unsigned(p_k_i_fu_331_p3) + unsigned(ap_const_lv32_1));
    tmp_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar_reg_119),64));
    tmp_i4_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_22_fu_444_p2),64));
    tmp_i_cast_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lshr_f_i_cast_fu_306_p4),32));
    tmp_i_fu_301_p2 <= "1" when (signed(n_assign_cast3_reg_502) < signed(x_3_fu_295_p2)) else "0";
    tmp_s_fu_252_p2 <= "1" when (invdar_reg_119 = ap_const_lv3_5) else "0";
    x_3_fu_295_p2 <= std_logic_vector(unsigned(x_fu_54) + unsigned(ap_const_lv32_1));
end behav;
