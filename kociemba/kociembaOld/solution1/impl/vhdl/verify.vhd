-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity verify is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cubiecube_0_cp_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    cubiecube_0_cp_ce0 : OUT STD_LOGIC;
    cubiecube_0_cp_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
    cubiecube_0_co_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    cubiecube_0_co_ce0 : OUT STD_LOGIC;
    cubiecube_0_co_q0 : IN STD_LOGIC_VECTOR (1 downto 0);
    cubiecube_0_ep_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    cubiecube_0_ep_ce0 : OUT STD_LOGIC;
    cubiecube_0_ep_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
    cubiecube_0_eo_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    cubiecube_0_eo_ce0 : OUT STD_LOGIC;
    cubiecube_0_eo_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of verify is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (33 downto 0) := "0000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (33 downto 0) := "0000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (33 downto 0) := "0000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (33 downto 0) := "0000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (33 downto 0) := "0000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (33 downto 0) := "0000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (33 downto 0) := "0001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (33 downto 0) := "0010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (33 downto 0) := "0100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (33 downto 0) := "1000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvarinc_fu_417_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal indvarinc1_fu_434_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal e_1_fu_457_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal e_1_reg_897 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond3_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal edgeCount_addr_1_reg_907 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_4_fu_486_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_reg_915 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_8_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_fu_509_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_5_reg_931 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal exitcond2_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_2_fu_528_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal c_1_fu_540_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_1_reg_952 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal exitcond1_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cornerCount_addr_1_reg_962 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i_6_fu_571_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_6_reg_970 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_20_fu_563_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_7_fu_594_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_7_reg_986 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal exitcond_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_3_fu_615_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal i_i_cast_fu_636_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_i_cast_reg_1011 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_i_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_689_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_24_reg_1031 : STD_LOGIC_VECTOR (1 downto 0);
    signal cubiecube_0_ep_load_1_reg_1036 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal j_fu_702_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_1041 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal tmp_355_i_fu_712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_8_fu_723_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_i7_cast_fu_753_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_i7_cast_reg_1059 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal tmp_i9_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_fu_819_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal cubiecube_0_cp_load_1_reg_1077 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal j_1_fu_827_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_reg_1082 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal tmp_360_i_fu_837_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_9_fu_848_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal edgeCount_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal edgeCount_ce0 : STD_LOGIC;
    signal edgeCount_we0 : STD_LOGIC;
    signal edgeCount_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal edgeCount_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cornerCount_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal cornerCount_ce0 : STD_LOGIC;
    signal cornerCount_we0 : STD_LOGIC;
    signal cornerCount_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cornerCount_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal invdar_reg_234 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar1_reg_245 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal e_reg_256 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_reg_267 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_s_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_278 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum_reg_289 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_reg_301 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_13_fu_520_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_reg_312 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_15_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_reg_323 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum_1_reg_334 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_i_reg_346 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal tmp_17_fu_625_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_0_in_i_reg_358 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal i_i7_reg_367 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_0_in_i1_reg_379 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal UnifiedRetVal_reg_388 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_423_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_440_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_463_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_468_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_492_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_515_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_546_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_551_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_577_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_600_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_29_fu_646_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_356_i_fu_718_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i1_fu_763_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_361_i_fu_843_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_i_fu_88 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_s_1_i_fu_740_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_i8_fu_92 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_s_1_i1_fu_865_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_473_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_556_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_cast_cast_fu_524_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_605_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_22_cast_cast_cas_fu_611_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_605_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_21_fu_621_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_26_fu_663_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_667_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_25_fu_659_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_651_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_675_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_23_fu_681_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_cast_fu_708_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_357_i_fu_729_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_fu_734_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_780_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_784_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_32_fu_776_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_768_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_792_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_28_fu_798_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_29_fu_806_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_19_fu_814_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_cast_fu_833_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_362_i_fu_854_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_1_fu_859_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_605_ap_start : STD_LOGIC;
    signal grp_fu_605_ap_done : STD_LOGIC;
    signal ap_return_preg : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (33 downto 0);

    component solution_urem_5nsibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component verify_edgeCount IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component verify_cornerCount IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    edgeCount_U : component verify_edgeCount
    generic map (
        DataWidth => 32,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => edgeCount_address0,
        ce0 => edgeCount_ce0,
        we0 => edgeCount_we0,
        d0 => edgeCount_d0,
        q0 => edgeCount_q0);

    cornerCount_U : component verify_cornerCount
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cornerCount_address0,
        ce0 => cornerCount_ce0,
        we0 => cornerCount_we0,
        d0 => cornerCount_d0,
        q0 => cornerCount_q0);

    solution_urem_5nsibs_U15 : component solution_urem_5nsibs
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 5,
        din1_WIDTH => 3,
        dout_WIDTH => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_605_ap_start,
        done => grp_fu_605_ap_done,
        din0 => sum_1_reg_334,
        din1 => grp_fu_605_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_605_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv4_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                    ap_return_preg <= UnifiedRetVal_reg_388;
                end if; 
            end if;
        end if;
    end process;


    UnifiedRetVal_reg_388_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_s_fu_497_p2 = ap_const_lv1_0))) then 
                UnifiedRetVal_reg_388 <= ap_const_lv4_E;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_15_fu_582_p2 = ap_const_lv1_0))) then 
                UnifiedRetVal_reg_388 <= ap_const_lv4_C;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state25) and (tmp_17_fu_625_p2 = ap_const_lv1_0))) then 
                UnifiedRetVal_reg_388 <= ap_const_lv4_B;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_13_fu_520_p1 = ap_const_lv1_1) and (exitcond2_fu_503_p2 = ap_const_lv1_1))) then 
                UnifiedRetVal_reg_388 <= ap_const_lv4_D;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state30) and (tmp_i9_fu_757_p2 = ap_const_lv1_1))) then 
                UnifiedRetVal_reg_388 <= p_s_fu_819_p3;
            end if; 
        end if;
    end process;

    c_reg_301_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond2_fu_503_p2 = ap_const_lv1_1) and (tmp_13_fu_520_p1 = ap_const_lv1_0))) then 
                c_reg_301 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                c_reg_301 <= c_1_reg_952;
            end if; 
        end if;
    end process;

    e_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_3_fu_445_p2 = ap_const_lv1_1))) then 
                e_reg_256 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                e_reg_256 <= e_1_reg_897;
            end if; 
        end if;
    end process;

    i_1_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_8_fu_480_p2 = ap_const_lv1_0))) then 
                i_1_reg_278 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_1_reg_278 <= i_5_reg_931;
            end if; 
        end if;
    end process;

    i_2_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond1_fu_534_p2 = ap_const_lv1_1))) then 
                i_2_reg_312 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_15_fu_582_p2 = ap_const_lv1_1))) then 
                i_2_reg_312 <= i_6_reg_970;
            end if; 
        end if;
    end process;

    i_3_reg_323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (tmp_20_fu_563_p3 = ap_const_lv1_1))) then 
                i_3_reg_323 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                i_3_reg_323 <= i_7_reg_986;
            end if; 
        end if;
    end process;

    i_i7_reg_367_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) and (tmp_360_i_fu_837_p2 = ap_const_lv1_0))) then 
                i_i7_reg_367 <= i_9_fu_848_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state26) and (tmp_i_fu_640_p2 = ap_const_lv1_1))) then 
                i_i7_reg_367 <= ap_const_lv3_7;
            end if; 
        end if;
    end process;

    i_i_reg_346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (tmp_17_fu_625_p2 = ap_const_lv1_1))) then 
                i_i_reg_346 <= ap_const_lv4_B;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state28) and (tmp_355_i_fu_712_p2 = ap_const_lv1_0))) then 
                i_i_reg_346 <= i_8_fu_723_p2;
            end if; 
        end if;
    end process;

    i_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_451_p2 = ap_const_lv1_1))) then 
                i_reg_267 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_s_fu_497_p2 = ap_const_lv1_1))) then 
                i_reg_267 <= i_4_reg_915;
            end if; 
        end if;
    end process;

    invdar1_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_1_fu_428_p2 = ap_const_lv1_1))) then 
                invdar1_reg_245 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_3_fu_445_p2 = ap_const_lv1_0))) then 
                invdar1_reg_245 <= indvarinc1_fu_434_p2;
            end if; 
        end if;
    end process;

    invdar_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_1_fu_428_p2 = ap_const_lv1_0))) then 
                invdar_reg_234 <= indvarinc_fu_417_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                invdar_reg_234 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_0_in_i1_reg_379_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                j_0_in_i1_reg_379 <= i_i7_cast_reg_1059;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                j_0_in_i1_reg_379 <= j_1_reg_1082;
            end if; 
        end if;
    end process;

    j_0_in_i_reg_358_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                j_0_in_i_reg_358 <= i_i_cast_reg_1011;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                j_0_in_i_reg_358 <= j_reg_1041;
            end if; 
        end if;
    end process;

    s_i8_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                s_i8_fu_92 <= p_s_1_i1_fu_865_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state26) and (tmp_i_fu_640_p2 = ap_const_lv1_1))) then 
                s_i8_fu_92 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    s_i_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                s_i_fu_88 <= p_s_1_i_fu_740_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state25) and (tmp_17_fu_625_p2 = ap_const_lv1_1))) then 
                s_i_fu_88 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum_1_reg_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (tmp_20_fu_563_p3 = ap_const_lv1_1))) then 
                sum_1_reg_334 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                sum_1_reg_334 <= sum_3_fu_615_p2;
            end if; 
        end if;
    end process;

    sum_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_8_fu_480_p2 = ap_const_lv1_0))) then 
                sum_reg_289 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                sum_reg_289 <= sum_2_fu_528_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                c_1_reg_952 <= c_1_fu_540_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                cornerCount_addr_1_reg_962 <= tmp_11_fu_551_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                cubiecube_0_cp_load_1_reg_1077 <= cubiecube_0_cp_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                cubiecube_0_ep_load_1_reg_1036 <= cubiecube_0_ep_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                e_1_reg_897 <= e_1_fu_457_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                edgeCount_addr_1_reg_907 <= tmp_5_fu_468_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_4_reg_915 <= i_4_fu_486_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_5_reg_931 <= i_5_fu_509_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                i_6_reg_970 <= i_6_fu_571_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                i_7_reg_986 <= i_7_fu_594_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                    i_i7_cast_reg_1059(2 downto 0) <= i_i7_cast_fu_753_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                    i_i_cast_reg_1011(3 downto 0) <= i_i_cast_fu_636_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                j_1_reg_1082 <= j_1_fu_827_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                j_reg_1041 <= j_fu_702_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (tmp_i_fu_640_p2 = ap_const_lv1_1))) then
                tmp_24_reg_1031 <= tmp_24_fu_689_p3;
            end if;
        end if;
    end process;
    i_i_cast_reg_1011(4) <= '0';
    i_i7_cast_reg_1059(3) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond3_fu_451_p2, ap_CS_fsm_state7, tmp_8_fu_480_p2, ap_CS_fsm_state9, exitcond2_fu_503_p2, ap_CS_fsm_state11, exitcond1_fu_534_p2, ap_CS_fsm_state14, tmp_20_fu_563_p3, ap_CS_fsm_state16, exitcond_fu_588_p2, ap_CS_fsm_state26, tmp_i_fu_640_p2, ap_CS_fsm_state28, tmp_355_i_fu_712_p2, ap_CS_fsm_state30, tmp_i9_fu_757_p2, ap_CS_fsm_state32, tmp_360_i_fu_837_p2, tmp_1_fu_428_p2, tmp_3_fu_445_p2, ap_CS_fsm_state8, tmp_s_fu_497_p2, tmp_13_fu_520_p1, ap_CS_fsm_state15, tmp_15_fu_582_p2, ap_CS_fsm_state25, tmp_17_fu_625_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_1_fu_428_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_3_fu_445_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_451_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_8_fu_480_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_s_fu_497_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond2_fu_503_p2 = ap_const_lv1_1) and (tmp_13_fu_520_p1 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_13_fu_520_p1 = ap_const_lv1_1) and (exitcond2_fu_503_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond1_fu_534_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (tmp_20_fu_563_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_15_fu_582_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_fu_588_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (tmp_17_fu_625_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (tmp_i_fu_640_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (tmp_355_i_fu_712_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (tmp_i9_fu_757_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state32) and (tmp_360_i_fu_837_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(UnifiedRetVal_reg_388, ap_return_preg, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            ap_return <= UnifiedRetVal_reg_388;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    c_1_fu_540_p2 <= std_logic_vector(unsigned(c_reg_301) + unsigned(ap_const_lv4_1));

    cornerCount_address0_assign_proc : process(ap_CS_fsm_state3, cornerCount_addr_1_reg_962, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state13, tmp_2_fu_440_p1, tmp_11_fu_551_p1, tmp_14_fu_577_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            cornerCount_address0 <= tmp_14_fu_577_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            cornerCount_address0 <= cornerCount_addr_1_reg_962;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            cornerCount_address0 <= tmp_11_fu_551_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cornerCount_address0 <= tmp_2_fu_440_p1(3 - 1 downto 0);
        else 
            cornerCount_address0 <= "XXX";
        end if; 
    end process;


    cornerCount_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            cornerCount_ce0 <= ap_const_logic_1;
        else 
            cornerCount_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cornerCount_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state13, tmp_12_fu_556_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            cornerCount_d0 <= tmp_12_fu_556_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cornerCount_d0 <= ap_const_lv32_0;
        else 
            cornerCount_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    cornerCount_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            cornerCount_we0 <= ap_const_logic_1;
        else 
            cornerCount_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cubiecube_0_co_address0 <= tmp_18_fu_600_p1(3 - 1 downto 0);

    cubiecube_0_co_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            cubiecube_0_co_ce0 <= ap_const_logic_1;
        else 
            cubiecube_0_co_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cubiecube_0_cp_address0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state30, ap_CS_fsm_state32, tmp_10_fu_546_p1, tmp_i1_fu_763_p1, tmp_361_i_fu_843_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            cubiecube_0_cp_address0 <= tmp_361_i_fu_843_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            cubiecube_0_cp_address0 <= tmp_i1_fu_763_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            cubiecube_0_cp_address0 <= tmp_10_fu_546_p1(3 - 1 downto 0);
        else 
            cubiecube_0_cp_address0 <= "XXX";
        end if; 
    end process;


    cubiecube_0_cp_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state30, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            cubiecube_0_cp_ce0 <= ap_const_logic_1;
        else 
            cubiecube_0_cp_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cubiecube_0_eo_address0 <= tmp_7_fu_515_p1(4 - 1 downto 0);

    cubiecube_0_eo_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cubiecube_0_eo_ce0 <= ap_const_logic_1;
        else 
            cubiecube_0_eo_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cubiecube_0_ep_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state26, ap_CS_fsm_state28, tmp_4_fu_463_p1, tmp_i_29_fu_646_p1, tmp_356_i_fu_718_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            cubiecube_0_ep_address0 <= tmp_356_i_fu_718_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            cubiecube_0_ep_address0 <= tmp_i_29_fu_646_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cubiecube_0_ep_address0 <= tmp_4_fu_463_p1(4 - 1 downto 0);
        else 
            cubiecube_0_ep_address0 <= "XXXX";
        end if; 
    end process;


    cubiecube_0_ep_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state26, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            cubiecube_0_ep_ce0 <= ap_const_logic_1;
        else 
            cubiecube_0_ep_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    e_1_fu_457_p2 <= std_logic_vector(unsigned(e_reg_256) + unsigned(ap_const_lv4_1));

    edgeCount_address0_assign_proc : process(ap_CS_fsm_state2, edgeCount_addr_1_reg_907, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state6, tmp_fu_423_p1, tmp_5_fu_468_p1, tmp_9_fu_492_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            edgeCount_address0 <= tmp_9_fu_492_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            edgeCount_address0 <= edgeCount_addr_1_reg_907;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            edgeCount_address0 <= tmp_5_fu_468_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            edgeCount_address0 <= tmp_fu_423_p1(4 - 1 downto 0);
        else 
            edgeCount_address0 <= "XXXX";
        end if; 
    end process;


    edgeCount_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            edgeCount_ce0 <= ap_const_logic_1;
        else 
            edgeCount_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    edgeCount_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, tmp_6_fu_473_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            edgeCount_d0 <= tmp_6_fu_473_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            edgeCount_d0 <= ap_const_lv32_0;
        else 
            edgeCount_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    edgeCount_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            edgeCount_we0 <= ap_const_logic_1;
        else 
            edgeCount_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_534_p2 <= "1" when (c_reg_301 = ap_const_lv4_8) else "0";
    exitcond2_fu_503_p2 <= "1" when (i_1_reg_278 = ap_const_lv4_C) else "0";
    exitcond3_fu_451_p2 <= "1" when (e_reg_256 = ap_const_lv4_C) else "0";
    exitcond_fu_588_p2 <= "1" when (i_3_reg_323 = ap_const_lv4_8) else "0";

    grp_fu_605_ap_start_assign_proc : process(ap_CS_fsm_state16, exitcond_fu_588_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_fu_588_p2 = ap_const_lv1_1))) then 
            grp_fu_605_ap_start <= ap_const_logic_1;
        else 
            grp_fu_605_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_605_p1 <= ap_const_lv5_3(3 - 1 downto 0);
    i_4_fu_486_p2 <= std_logic_vector(unsigned(i_reg_267) + unsigned(ap_const_lv4_1));
    i_5_fu_509_p2 <= std_logic_vector(unsigned(i_1_reg_278) + unsigned(ap_const_lv4_1));
    i_6_fu_571_p2 <= std_logic_vector(unsigned(i_2_reg_312) + unsigned(ap_const_lv4_1));
    i_7_fu_594_p2 <= std_logic_vector(unsigned(i_3_reg_323) + unsigned(ap_const_lv4_1));
    i_8_fu_723_p2 <= std_logic_vector(unsigned(i_i_reg_346) + unsigned(ap_const_lv4_F));
    i_9_fu_848_p2 <= std_logic_vector(unsigned(i_i7_reg_367) + unsigned(ap_const_lv3_7));
    i_i7_cast_fu_753_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i7_reg_367),4));
    i_i_cast_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_346),5));
    indvarinc1_fu_434_p2 <= std_logic_vector(unsigned(invdar1_reg_245) + unsigned(ap_const_lv3_1));
    indvarinc_fu_417_p2 <= std_logic_vector(unsigned(invdar_reg_234) + unsigned(ap_const_lv4_1));
        j_1_cast_fu_833_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j_1_fu_827_p2),32));

    j_1_fu_827_p2 <= std_logic_vector(unsigned(j_0_in_i1_reg_379) + unsigned(ap_const_lv4_F));
        j_cast_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j_fu_702_p2),32));

    j_fu_702_p2 <= std_logic_vector(unsigned(j_0_in_i_reg_358) + unsigned(ap_const_lv5_1F));
    p_s_1_i1_fu_865_p3 <= 
        s_1_fu_859_p2 when (tmp_362_i_fu_854_p2(0) = '1') else 
        s_i8_fu_92;
    p_s_1_i_fu_740_p3 <= 
        s_fu_734_p2 when (tmp_357_i_fu_729_p2(0) = '1') else 
        s_i_fu_88;
    p_s_fu_819_p3 <= 
        ap_const_lv4_0 when (tmp_19_fu_814_p2(0) = '1') else 
        ap_const_lv4_A;
    s_1_fu_859_p2 <= std_logic_vector(unsigned(s_i8_fu_92) + unsigned(ap_const_lv32_1));
    s_fu_734_p2 <= std_logic_vector(unsigned(s_i_fu_88) + unsigned(ap_const_lv32_1));
    sum_2_fu_528_p2 <= std_logic_vector(unsigned(tmp_12_cast_cast_fu_524_p1) + unsigned(sum_reg_289));
    sum_3_fu_615_p2 <= std_logic_vector(unsigned(sum_1_reg_334) + unsigned(tmp_22_cast_cast_cas_fu_611_p1));
    tmp_10_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_reg_301),64));
    tmp_11_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cubiecube_0_cp_q0),64));
    tmp_12_cast_cast_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cubiecube_0_eo_q0),4));
    tmp_12_fu_556_p2 <= std_logic_vector(unsigned(cornerCount_q0) + unsigned(ap_const_lv32_1));
    tmp_13_fu_520_p1 <= sum_reg_289(1 - 1 downto 0);
    tmp_14_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_312),64));
    tmp_15_fu_582_p2 <= "1" when (cornerCount_q0 = ap_const_lv32_1) else "0";
    tmp_17_fu_625_p2 <= "1" when (tmp_21_fu_621_p1 = ap_const_lv3_0) else "0";
    tmp_18_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_323),64));
    tmp_19_fu_814_p2 <= "1" when (tmp_24_reg_1031 = tmp_29_fu_806_p3) else "0";
    tmp_1_fu_428_p2 <= "1" when (invdar_reg_234 = ap_const_lv4_B) else "0";
    tmp_20_fu_563_p3 <= i_2_reg_312(3 downto 3);
    tmp_21_fu_621_p1 <= grp_fu_605_p2(3 - 1 downto 0);
    tmp_22_cast_cast_cas_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cubiecube_0_co_q0),5));
    tmp_22_fu_651_p3 <= s_i_fu_88(31 downto 31);
    tmp_23_fu_681_p3 <= (ap_const_lv1_0 & tmp_25_fu_659_p1);
    tmp_24_fu_689_p3 <= 
        tmp_30_fu_675_p2 when (tmp_22_fu_651_p3(0) = '1') else 
        tmp_23_fu_681_p3;
    tmp_25_fu_659_p1 <= s_i_fu_88(1 - 1 downto 0);
    tmp_26_fu_663_p1 <= s_i_fu_88(1 - 1 downto 0);
    tmp_27_fu_667_p3 <= (ap_const_lv1_0 & tmp_26_fu_663_p1);
    tmp_28_fu_798_p3 <= (ap_const_lv1_0 & tmp_32_fu_776_p1);
    tmp_29_fu_806_p3 <= 
        tmp_35_fu_792_p2 when (tmp_31_fu_768_p3(0) = '1') else 
        tmp_28_fu_798_p3;
    tmp_2_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar1_reg_245),64));
    tmp_30_fu_675_p2 <= std_logic_vector(unsigned(ap_const_lv2_0) - unsigned(tmp_27_fu_667_p3));
    tmp_31_fu_768_p3 <= s_i8_fu_92(31 downto 31);
    tmp_32_fu_776_p1 <= s_i8_fu_92(1 - 1 downto 0);
    tmp_33_fu_780_p1 <= s_i8_fu_92(1 - 1 downto 0);
    tmp_34_fu_784_p3 <= (ap_const_lv1_0 & tmp_33_fu_780_p1);
    tmp_355_i_fu_712_p2 <= "1" when (signed(j_0_in_i_reg_358) > signed(ap_const_lv5_0)) else "0";
    tmp_356_i_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_cast_fu_708_p1),64));
    tmp_357_i_fu_729_p2 <= "1" when (unsigned(cubiecube_0_ep_q0) > unsigned(cubiecube_0_ep_load_1_reg_1036)) else "0";
    tmp_35_fu_792_p2 <= std_logic_vector(unsigned(ap_const_lv2_0) - unsigned(tmp_34_fu_784_p3));
    tmp_360_i_fu_837_p2 <= "1" when (signed(j_0_in_i1_reg_379) > signed(ap_const_lv4_0)) else "0";
    tmp_361_i_fu_843_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_cast_fu_833_p1),64));
    tmp_362_i_fu_854_p2 <= "1" when (unsigned(cubiecube_0_cp_q0) > unsigned(cubiecube_0_cp_load_1_reg_1077)) else "0";
    tmp_3_fu_445_p2 <= "1" when (invdar1_reg_245 = ap_const_lv3_7) else "0";
    tmp_4_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(e_reg_256),64));
    tmp_5_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cubiecube_0_ep_q0),64));
    tmp_6_fu_473_p2 <= std_logic_vector(unsigned(edgeCount_q0) + unsigned(ap_const_lv32_1));
    tmp_7_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_278),64));
    tmp_8_fu_480_p2 <= "1" when (unsigned(i_reg_267) < unsigned(ap_const_lv4_C)) else "0";
    tmp_9_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_267),64));
    tmp_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar_reg_234),64));
    tmp_i1_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i7_reg_367),64));
    tmp_i9_fu_757_p2 <= "1" when (i_i7_reg_367 = ap_const_lv3_0) else "0";
    tmp_i_29_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_346),64));
    tmp_i_fu_640_p2 <= "1" when (i_i_reg_346 = ap_const_lv4_0) else "0";
    tmp_s_fu_497_p2 <= "1" when (edgeCount_q0 = ap_const_lv32_1) else "0";
end behav;
