-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity getURtoUL is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cubiecube_0_ep_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    cubiecube_0_ep_ce0 : OUT STD_LOGIC;
    cubiecube_0_ep_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of getURtoUL is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (46 downto 0) := "00000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (46 downto 0) := "00000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (46 downto 0) := "00000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (46 downto 0) := "00000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (46 downto 0) := "00000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (46 downto 0) := "00000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (46 downto 0) := "00001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (46 downto 0) := "00010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (46 downto 0) := "00100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (46 downto 0) := "01000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (46 downto 0) := "10000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvarinc_fu_363_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal n_assign_cast6_fu_466_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_assign_cast6_reg_845 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_4_fu_476_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_4_reg_855 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal edge3_0_reg_886 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_243_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_243_reg_893 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_1_fu_508_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_1_reg_897 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_364_i_fu_552_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_364_i_reg_905 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_fu_563_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_reg_913 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond_i_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_19_fu_569_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_19_reg_918 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_5_fu_580_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_5_reg_923 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_575_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal j_1_cast5_fu_609_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_cast5_reg_936 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal cond_fu_619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cond_reg_944 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_244_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal k_1_fu_679_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_reg_964 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_250_fu_695_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_250_reg_969 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_248_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_701_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_974 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_20_fu_713_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_20_reg_982 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal arr_load_phi_i_fu_725_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond1_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_1_fu_773_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal indvars_iv_next_fu_778_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal invdar_reg_107 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_118 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal j_i_reg_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i_reg_142 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_i_reg_151 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0_i_reg_163 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv_reg_175 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_assign_reg_187 : STD_LOGIC_VECTOR (1 downto 0);
    signal b_reg_199 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_211 : STD_LOGIC_VECTOR (31 downto 0);
    signal arr2_i_reg_223 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal write_flag_i_reg_233 : STD_LOGIC_VECTOR (0 downto 0);
    signal arr1_i_reg_245 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr_i_reg_255 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_i_i1_phi_fu_271_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_i1_reg_267 : STD_LOGIC_VECTOR (1 downto 0);
    signal arr2_i_be_reg_278 : STD_LOGIC_VECTOR (3 downto 0);
    signal write_flag_i_be_reg_293 : STD_LOGIC_VECTOR (0 downto 0);
    signal arr1_i_be_reg_310 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr_i_be_reg_325 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_242_fu_482_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal edge3_fu_50 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge3_0_1_fu_369_p6 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge3_1_fu_54 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge3_1_1_fu_383_p6 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge3_2_fu_58 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge3_2_1_fu_397_p6 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge3_2_1_51_fu_62 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_265_fu_593_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal edge3_2_2_fu_66 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge3_2_3_fu_70 : STD_LOGIC_VECTOR (3 downto 0);
    signal a_fu_74 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_1_fu_586_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_fu_82 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge3_0_1_58_fu_750_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge3_1_1_53_fu_86 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge3_1_57_fu_743_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge3_2_4_fu_90 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge3_2_56_fu_736_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_lshr_f_i_cast_fu_519_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_i_cast_fu_529_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_363_i_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_assign_1_fu_539_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_k_i_fu_544_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_625_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_262_fu_631_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_245_fu_637_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_264_fu_647_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_263_fu_643_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal edge3_load_phi_fu_663_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_284_cast_fu_670_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_249_fu_685_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_250_fu_695_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal cond_i_fu_719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_575_ap_start : STD_LOGIC;
    signal grp_fu_575_ap_done : STD_LOGIC;
    signal tmp_247_fu_651_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_250_fu_695_p00 : STD_LOGIC_VECTOR (31 downto 0);

    component solution_mux_42_4jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        din3 : IN STD_LOGIC_VECTOR (3 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component solution_sdiv_32nkbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    solution_mux_42_4jbC_U41 : component solution_mux_42_4jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        din3_WIDTH => 4,
        din4_WIDTH => 2,
        dout_WIDTH => 4)
    port map (
        din0 => ap_const_lv4_0,
        din1 => edge3_fu_50,
        din2 => edge3_fu_50,
        din3 => edge3_fu_50,
        din4 => invdar_reg_107,
        dout => edge3_0_1_fu_369_p6);

    solution_mux_42_4jbC_U42 : component solution_mux_42_4jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        din3_WIDTH => 4,
        din4_WIDTH => 2,
        dout_WIDTH => 4)
    port map (
        din0 => edge3_1_fu_54,
        din1 => ap_const_lv4_0,
        din2 => edge3_1_fu_54,
        din3 => edge3_1_fu_54,
        din4 => invdar_reg_107,
        dout => edge3_1_1_fu_383_p6);

    solution_mux_42_4jbC_U43 : component solution_mux_42_4jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        din3_WIDTH => 4,
        din4_WIDTH => 2,
        dout_WIDTH => 4)
    port map (
        din0 => edge3_2_fu_58,
        din1 => edge3_2_fu_58,
        din2 => ap_const_lv4_0,
        din3 => ap_const_lv4_0,
        din4 => invdar_reg_107,
        dout => edge3_2_1_fu_397_p6);

    solution_sdiv_32nkbM_U44 : component solution_sdiv_32nkbM
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_575_ap_start,
        done => grp_fu_575_ap_done,
        din0 => s_reg_913,
        din1 => j_i_reg_130,
        ce => ap_const_logic_1,
        dout => grp_fu_575_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv16_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state43) and (tmp_244_fu_613_p2 = ap_const_lv1_1))) then 
                    ap_return_preg <= tmp_247_fu_651_p2;
                end if; 
            end if;
        end if;
    end process;


    a_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not((tmp_265_fu_593_p1 = ap_const_lv2_1)) and not((tmp_265_fu_593_p1 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state42) and (tmp_243_reg_893 = ap_const_lv1_1)) or ((tmp_265_fu_593_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state42) and (tmp_243_reg_893 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state42) and (tmp_265_fu_593_p1 = ap_const_lv2_0) and (tmp_243_reg_893 = ap_const_lv1_1)))) then 
                a_fu_74 <= a_1_fu_586_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_411_p2 = ap_const_lv1_1))) then 
                a_fu_74 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    arr1_i_be_reg_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_707_p2 = ap_const_lv1_0) and (ap_phi_mux_i_i1_phi_fu_271_p4 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                arr1_i_be_reg_310 <= arr_load_phi_i_fu_725_p3;
            elsif (((not((ap_phi_mux_i_i1_phi_fu_271_p4 = ap_const_lv2_1)) and not((ap_phi_mux_i_i1_phi_fu_271_p4 = ap_const_lv2_0)) and (exitcond1_fu_707_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45)) or ((exitcond1_fu_707_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45) and (ap_phi_mux_i_i1_phi_fu_271_p4 = ap_const_lv2_0)))) then 
                arr1_i_be_reg_310 <= arr1_i_reg_245;
            end if; 
        end if;
    end process;

    arr1_i_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                arr1_i_reg_245 <= arr1_i_be_reg_310;
            elsif (((tmp_248_fu_674_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                arr1_i_reg_245 <= edge3_1_1_53_fu_86;
            end if; 
        end if;
    end process;

    arr2_i_be_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((exitcond1_fu_707_p2 = ap_const_lv1_0) and (ap_phi_mux_i_i1_phi_fu_271_p4 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state45)) or ((exitcond1_fu_707_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45) and (ap_phi_mux_i_i1_phi_fu_271_p4 = ap_const_lv2_0)))) then 
                arr2_i_be_reg_278 <= arr2_i_reg_223;
            elsif ((not((ap_phi_mux_i_i1_phi_fu_271_p4 = ap_const_lv2_1)) and not((ap_phi_mux_i_i1_phi_fu_271_p4 = ap_const_lv2_0)) and (exitcond1_fu_707_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                arr2_i_be_reg_278 <= arr_load_phi_i_fu_725_p3;
            end if; 
        end if;
    end process;

    arr2_i_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                arr2_i_reg_223 <= arr2_i_be_reg_278;
            elsif (((tmp_248_fu_674_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                arr2_i_reg_223 <= edge3_2_4_fu_90;
            end if; 
        end if;
    end process;

    arr_i_be_reg_325_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_707_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45) and (ap_phi_mux_i_i1_phi_fu_271_p4 = ap_const_lv2_0))) then 
                arr_i_be_reg_325 <= arr_load_phi_i_fu_725_p3;
            elsif ((((exitcond1_fu_707_p2 = ap_const_lv1_0) and (ap_phi_mux_i_i1_phi_fu_271_p4 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state45)) or (not((ap_phi_mux_i_i1_phi_fu_271_p4 = ap_const_lv2_1)) and not((ap_phi_mux_i_i1_phi_fu_271_p4 = ap_const_lv2_0)) and (exitcond1_fu_707_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45)))) then 
                arr_i_be_reg_325 <= arr_i_reg_255;
            end if; 
        end if;
    end process;

    b_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_470_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                b_reg_199 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                b_reg_199 <= b_1_fu_773_p2;
            end if; 
        end if;
    end process;

    edge3_1_1_53_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state45) and (exitcond1_fu_707_p2 = ap_const_lv1_1))) then 
                edge3_1_1_53_fu_86 <= edge3_1_57_fu_743_p3;
            elsif (((exitcond_fu_470_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                edge3_1_1_53_fu_86 <= edge3_2_2_fu_66;
            end if; 
        end if;
    end process;

    edge3_2_1_51_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state42) and (tmp_265_fu_593_p1 = ap_const_lv2_0) and (tmp_243_reg_893 = ap_const_lv1_1))) then 
                edge3_2_1_51_fu_62 <= edge3_0_reg_886;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_411_p2 = ap_const_lv1_1))) then 
                edge3_2_1_51_fu_62 <= edge3_0_1_fu_369_p6;
            end if; 
        end if;
    end process;

    edge3_2_2_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_265_fu_593_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state42) and (tmp_243_reg_893 = ap_const_lv1_1))) then 
                edge3_2_2_fu_66 <= edge3_0_reg_886;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_411_p2 = ap_const_lv1_1))) then 
                edge3_2_2_fu_66 <= edge3_1_1_fu_383_p6;
            end if; 
        end if;
    end process;

    edge3_2_3_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((tmp_265_fu_593_p1 = ap_const_lv2_1)) and not((tmp_265_fu_593_p1 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state42) and (tmp_243_reg_893 = ap_const_lv1_1))) then 
                edge3_2_3_fu_70 <= edge3_0_reg_886;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_411_p2 = ap_const_lv1_1))) then 
                edge3_2_3_fu_70 <= edge3_2_1_fu_397_p6;
            end if; 
        end if;
    end process;

    edge3_2_4_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state45) and (exitcond1_fu_707_p2 = ap_const_lv1_1))) then 
                edge3_2_4_fu_90 <= edge3_2_56_fu_736_p3;
            elsif (((exitcond_fu_470_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                edge3_2_4_fu_90 <= edge3_2_3_fu_70;
            end if; 
        end if;
    end process;

    i_i1_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                i_i1_reg_267 <= i_20_reg_982;
            elsif (((tmp_248_fu_674_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                i_i1_reg_267 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i_i_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                i_i_reg_142 <= i_19_reg_918;
            elsif (((tmp_i_fu_514_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_243_fu_502_p2 = ap_const_lv1_1))) then 
                i_i_reg_142 <= n_assign_cast6_reg_845;
            end if; 
        end if;
    end process;

    i_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                i_reg_118 <= j_4_reg_855;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_411_p2 = ap_const_lv1_1))) then 
                i_reg_118 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvars_iv_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_470_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                indvars_iv_reg_175 <= ap_const_lv2_2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                indvars_iv_reg_175 <= indvars_iv_next_fu_778_p2;
            end if; 
        end if;
    end process;

    invdar_reg_107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_411_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                invdar_reg_107 <= indvarinc_fu_363_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                invdar_reg_107 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_i_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                j_i_reg_130 <= j_5_reg_923;
            elsif (((tmp_i_fu_514_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_243_fu_502_p2 = ap_const_lv1_1))) then 
                j_i_reg_130 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    k_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state45) and (exitcond1_fu_707_p2 = ap_const_lv1_1))) then 
                k_reg_211 <= k_1_reg_964;
            elsif (((tmp_244_fu_613_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                k_reg_211 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_0_i_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_i_fu_558_p2 = ap_const_lv1_1))) then 
                p_0_i_reg_163 <= s_i_reg_151;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_i_fu_514_p2 = ap_const_lv1_1) and (tmp_243_fu_502_p2 = ap_const_lv1_1))) then 
                p_0_i_reg_163 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    r_assign_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_470_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                r_assign_reg_187 <= ap_const_lv2_2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                r_assign_reg_187 <= j_reg_974;
            end if; 
        end if;
    end process;

    s_i_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                s_i_reg_151 <= grp_fu_575_p2;
            elsif (((tmp_i_fu_514_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_243_fu_502_p2 = ap_const_lv1_1))) then 
                s_i_reg_151 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    temp_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state45) and (exitcond1_fu_707_p2 = ap_const_lv1_1))) then 
                temp_fu_82 <= edge3_0_1_58_fu_750_p3;
            elsif (((exitcond_fu_470_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                temp_fu_82 <= edge3_2_1_51_fu_62;
            end if; 
        end if;
    end process;

    write_flag_i_be_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_707_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45) and (ap_phi_mux_i_i1_phi_fu_271_p4 = ap_const_lv2_0))) then 
                write_flag_i_be_reg_293 <= ap_const_lv1_1;
            elsif ((((exitcond1_fu_707_p2 = ap_const_lv1_0) and (ap_phi_mux_i_i1_phi_fu_271_p4 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state45)) or (not((ap_phi_mux_i_i1_phi_fu_271_p4 = ap_const_lv2_1)) and not((ap_phi_mux_i_i1_phi_fu_271_p4 = ap_const_lv2_0)) and (exitcond1_fu_707_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45)))) then 
                write_flag_i_be_reg_293 <= write_flag_i_reg_233;
            end if; 
        end if;
    end process;

    write_flag_i_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                write_flag_i_reg_233 <= write_flag_i_be_reg_293;
            elsif (((tmp_248_fu_674_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                write_flag_i_reg_233 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    x_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not((tmp_265_fu_593_p1 = ap_const_lv2_1)) and not((tmp_265_fu_593_p1 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state42) and (tmp_243_reg_893 = ap_const_lv1_1)) or ((tmp_265_fu_593_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state42) and (tmp_243_reg_893 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state42) and (tmp_265_fu_593_p1 = ap_const_lv2_0) and (tmp_243_reg_893 = ap_const_lv1_1)))) then 
                x_fu_78 <= x_1_reg_897;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_411_p2 = ap_const_lv1_1))) then 
                x_fu_78 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                arr_i_reg_255 <= arr_i_be_reg_325;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_244_fu_613_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                cond_reg_944 <= cond_fu_619_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                edge3_0_reg_886 <= cubiecube_0_ep_q0;
                tmp_243_reg_893 <= tmp_243_fu_502_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                edge3_1_fu_54 <= edge3_1_1_fu_383_p6;
                edge3_2_fu_58 <= edge3_2_1_fu_397_p6;
                edge3_fu_50 <= edge3_0_1_fu_369_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_558_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                i_19_reg_918 <= i_19_fu_569_p2;
                s_reg_913 <= s_fu_563_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                i_20_reg_982 <= i_20_fu_713_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                    j_1_cast5_reg_936(1 downto 0) <= j_1_cast5_fu_609_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_4_reg_855 <= j_4_fu_476_p2;
                    n_assign_cast6_reg_845(3 downto 0) <= n_assign_cast6_fu_466_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                j_5_reg_923 <= j_5_fu_580_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) and (tmp_248_fu_674_p2 = ap_const_lv1_1))) then
                j_reg_974 <= j_fu_701_p2;
                tmp_250_reg_969 <= tmp_250_fu_695_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                k_1_reg_964 <= k_1_fu_679_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_fu_514_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_243_fu_502_p2 = ap_const_lv1_1))) then
                tmp_364_i_reg_905 <= tmp_364_i_fu_552_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_243_fu_502_p2 = ap_const_lv1_1))) then
                x_1_reg_897 <= x_1_fu_508_p2;
            end if;
        end if;
    end process;
    n_assign_cast6_reg_845(31 downto 4) <= "0000000000000000000000000000";
    j_1_cast5_reg_936(4 downto 2) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond_fu_470_p2, ap_CS_fsm_state4, tmp_243_fu_502_p2, tmp_i_fu_514_p2, ap_CS_fsm_state5, exitcond_i_fu_558_p2, ap_CS_fsm_state43, tmp_244_fu_613_p2, ap_CS_fsm_state44, tmp_248_fu_674_p2, ap_CS_fsm_state45, exitcond1_fu_707_p2, tmp_s_fu_411_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_411_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond_fu_470_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((tmp_i_fu_514_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_243_fu_502_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_i_fu_558_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state43 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state43) and (tmp_244_fu_613_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state44 => 
                if (((tmp_248_fu_674_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state45 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state45) and (exitcond1_fu_707_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_1_fu_586_p2 <= std_logic_vector(unsigned(p_0_i_reg_163) + unsigned(a_fu_74));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state43, tmp_244_fu_613_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state43) and (tmp_244_fu_613_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_i_i1_phi_fu_271_p4 <= i_i1_reg_267;

    ap_ready_assign_proc : process(ap_CS_fsm_state43, tmp_244_fu_613_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) and (tmp_244_fu_613_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state43, tmp_244_fu_613_p2, tmp_247_fu_651_p2, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) and (tmp_244_fu_613_p2 = ap_const_lv1_1))) then 
            ap_return <= tmp_247_fu_651_p2;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    arr_load_phi_i_fu_725_p3 <= 
        arr1_i_reg_245 when (cond_i_fu_719_p2(0) = '1') else 
        arr2_i_reg_223;
    b_1_fu_773_p2 <= std_logic_vector(unsigned(k_reg_211) + unsigned(tmp_250_reg_969));
    cond_fu_619_p2 <= "1" when (r_assign_reg_187 = ap_const_lv2_1) else "0";
    cond_i_fu_719_p2 <= "1" when (i_i1_reg_267 = ap_const_lv2_0) else "0";
    cubiecube_0_ep_address0 <= tmp_242_fu_482_p1(4 - 1 downto 0);

    cubiecube_0_ep_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cubiecube_0_ep_ce0 <= ap_const_logic_1;
        else 
            cubiecube_0_ep_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    edge3_0_1_58_fu_750_p3 <= 
        arr_i_reg_255 when (write_flag_i_reg_233(0) = '1') else 
        temp_fu_82;
    edge3_1_57_fu_743_p3 <= 
        temp_fu_82 when (cond_reg_944(0) = '1') else 
        arr1_i_reg_245;
    edge3_2_56_fu_736_p3 <= 
        arr2_i_reg_223 when (cond_reg_944(0) = '1') else 
        temp_fu_82;
    edge3_load_phi_fu_663_p3 <= 
        edge3_1_1_53_fu_86 when (cond_reg_944(0) = '1') else 
        edge3_2_4_fu_90;
    exitcond1_fu_707_p2 <= "1" when (i_i1_reg_267 = indvars_iv_reg_175) else "0";
    exitcond_fu_470_p2 <= "1" when (i_reg_118 = ap_const_lv4_C) else "0";
    exitcond_i_fu_558_p2 <= "1" when (j_i_reg_130 = tmp_364_i_reg_905) else "0";

    grp_fu_575_ap_start_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_575_ap_start <= ap_const_logic_1;
        else 
            grp_fu_575_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    i_19_fu_569_p2 <= std_logic_vector(signed(i_i_reg_142) + signed(ap_const_lv32_FFFFFFFF));
    i_20_fu_713_p2 <= std_logic_vector(unsigned(i_i1_reg_267) + unsigned(ap_const_lv2_1));
    indvarinc_fu_363_p2 <= std_logic_vector(unsigned(invdar_reg_107) + unsigned(ap_const_lv2_1));
    indvars_iv_next_fu_778_p2 <= std_logic_vector(unsigned(indvars_iv_reg_175) + unsigned(ap_const_lv2_3));
    j_1_cast5_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_assign_reg_187),5));
    j_4_fu_476_p2 <= std_logic_vector(unsigned(i_reg_118) + unsigned(ap_const_lv4_1));
    j_5_fu_580_p2 <= std_logic_vector(unsigned(j_i_reg_130) + unsigned(ap_const_lv32_1));
    j_fu_701_p2 <= std_logic_vector(unsigned(r_assign_reg_187) + unsigned(ap_const_lv2_3));
    k_1_fu_679_p2 <= std_logic_vector(unsigned(k_reg_211) + unsigned(ap_const_lv32_1));
    k_assign_1_fu_539_p2 <= std_logic_vector(unsigned(n_assign_cast6_reg_845) - unsigned(x_1_fu_508_p2));
    n_assign_cast6_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_118),32));
    p_k_i_fu_544_p3 <= 
        k_assign_1_fu_539_p2 when (tmp_363_i_fu_533_p2(0) = '1') else 
        x_1_fu_508_p2;
    p_lshr_f_i_cast_fu_519_p4 <= i_reg_118(3 downto 1);
    s_fu_563_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(s_i_reg_151) * signed(i_i_reg_142))), 32));
    tmp_242_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_118),64));
    tmp_243_fu_502_p2 <= "1" when (unsigned(cubiecube_0_ep_q0) < unsigned(ap_const_lv4_3)) else "0";
    tmp_244_fu_613_p2 <= "1" when (r_assign_reg_187 = ap_const_lv2_0) else "0";
    tmp_245_fu_637_p2 <= std_logic_vector(unsigned(tmp_fu_625_p2) - unsigned(tmp_262_fu_631_p2));
    tmp_247_fu_651_p2 <= std_logic_vector(unsigned(tmp_264_fu_647_p1) + unsigned(tmp_263_fu_643_p1));
    tmp_248_fu_674_p2 <= "1" when (tmp_284_cast_fu_670_p1 = j_1_cast5_reg_936) else "0";
    tmp_249_fu_685_p2 <= std_logic_vector(unsigned(r_assign_reg_187) + unsigned(ap_const_lv2_1));
    tmp_250_fu_695_p0 <= tmp_250_fu_695_p00(2 - 1 downto 0);
    tmp_250_fu_695_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_249_fu_685_p2),32));
    tmp_250_fu_695_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &tmp_250_fu_695_p0) * signed(b_reg_199))), 32));
    tmp_262_fu_631_p2 <= std_logic_vector(shift_left(unsigned(a_fu_74),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    tmp_263_fu_643_p1 <= b_reg_199(16 - 1 downto 0);
    tmp_264_fu_647_p1 <= tmp_245_fu_637_p2(16 - 1 downto 0);
    tmp_265_fu_593_p1 <= x_fu_78(2 - 1 downto 0);
    tmp_284_cast_fu_670_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(edge3_load_phi_fu_663_p3),5));
    tmp_363_i_fu_533_p2 <= "1" when (signed(tmp_i_cast_fu_529_p1) < signed(x_1_fu_508_p2)) else "0";
    tmp_364_i_fu_552_p2 <= std_logic_vector(unsigned(p_k_i_fu_544_p3) + unsigned(ap_const_lv32_1));
    tmp_fu_625_p2 <= std_logic_vector(shift_left(unsigned(a_fu_74),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    tmp_i_cast_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lshr_f_i_cast_fu_519_p4),32));
    tmp_i_fu_514_p2 <= "1" when (signed(n_assign_cast6_reg_845) < signed(x_1_fu_508_p2)) else "0";
    tmp_s_fu_411_p2 <= "1" when (invdar_reg_107 = ap_const_lv2_2) else "0";
    x_1_fu_508_p2 <= std_logic_vector(unsigned(x_fu_78) + unsigned(ap_const_lv32_1));
end behav;
