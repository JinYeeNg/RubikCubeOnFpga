-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.NUMERIC_STD.all;

entity solution_CTRL_BUS_s_axi is
generic (
    C_S_AXI_ADDR_WIDTH    : INTEGER := 8;
    C_S_AXI_DATA_WIDTH    : INTEGER := 32);
port (
    -- axi4 lite slave signals
    ACLK                  :in   STD_LOGIC;
    ARESET                :in   STD_LOGIC;
    ACLK_EN               :in   STD_LOGIC;
    AWADDR                :in   STD_LOGIC_VECTOR(C_S_AXI_ADDR_WIDTH-1 downto 0);
    AWVALID               :in   STD_LOGIC;
    AWREADY               :out  STD_LOGIC;
    WDATA                 :in   STD_LOGIC_VECTOR(C_S_AXI_DATA_WIDTH-1 downto 0);
    WSTRB                 :in   STD_LOGIC_VECTOR(C_S_AXI_DATA_WIDTH/8-1 downto 0);
    WVALID                :in   STD_LOGIC;
    WREADY                :out  STD_LOGIC;
    BRESP                 :out  STD_LOGIC_VECTOR(1 downto 0);
    BVALID                :out  STD_LOGIC;
    BREADY                :in   STD_LOGIC;
    ARADDR                :in   STD_LOGIC_VECTOR(C_S_AXI_ADDR_WIDTH-1 downto 0);
    ARVALID               :in   STD_LOGIC;
    ARREADY               :out  STD_LOGIC;
    RDATA                 :out  STD_LOGIC_VECTOR(C_S_AXI_DATA_WIDTH-1 downto 0);
    RRESP                 :out  STD_LOGIC_VECTOR(1 downto 0);
    RVALID                :out  STD_LOGIC;
    RREADY                :in   STD_LOGIC;
    interrupt             :out  STD_LOGIC;
    -- user signals
    ap_start              :out  STD_LOGIC;
    ap_done               :in   STD_LOGIC;
    ap_ready              :in   STD_LOGIC;
    ap_idle               :in   STD_LOGIC;
    facelets_address0     :in   STD_LOGIC_VECTOR(5 downto 0);
    facelets_ce0          :in   STD_LOGIC;
    facelets_q0           :out  STD_LOGIC_VECTOR(7 downto 0);
    maxDepth              :out  STD_LOGIC_VECTOR(7 downto 0);
    unsolvable            :in   STD_LOGIC_VECTOR(0 downto 0);
    unsolvable_ap_vld     :in   STD_LOGIC;
    encode_length         :in   STD_LOGIC_VECTOR(7 downto 0);
    encode_length_ap_vld  :in   STD_LOGIC;
    encode_array_address0 :in   STD_LOGIC_VECTOR(4 downto 0);
    encode_array_ce0      :in   STD_LOGIC;
    encode_array_we0      :in   STD_LOGIC;
    encode_array_d0       :in   STD_LOGIC_VECTOR(7 downto 0);
    twistMove2            :out  STD_LOGIC_VECTOR(31 downto 0);
    flipMove2             :out  STD_LOGIC_VECTOR(31 downto 0);
    FRtoBR_Move2          :out  STD_LOGIC_VECTOR(31 downto 0);
    URFtoDLF_Move2        :out  STD_LOGIC_VECTOR(31 downto 0);
    URtoDF_Move2          :out  STD_LOGIC_VECTOR(31 downto 0);
    URtoUL_Move2          :out  STD_LOGIC_VECTOR(31 downto 0);
    UBtoDF_Move2          :out  STD_LOGIC_VECTOR(31 downto 0);
    MergeURtoULandUBtoDF2 :out  STD_LOGIC_VECTOR(31 downto 0);
    Slice_URFtoDLF_Parity_Prun2 :out  STD_LOGIC_VECTOR(31 downto 0);
    Slice_URtoDF_Parity_Prun2 :out  STD_LOGIC_VECTOR(31 downto 0);
    Slice_Twist_Prun2     :out  STD_LOGIC_VECTOR(31 downto 0);
    Slice_Flip_Prun2      :out  STD_LOGIC_VECTOR(31 downto 0)
);
end entity solution_CTRL_BUS_s_axi;

-- ------------------------Address Info-------------------
-- 0x00 : Control signals
--        bit 0  - ap_start (Read/Write/COH)
--        bit 1  - ap_done (Read/COR)
--        bit 2  - ap_idle (Read)
--        bit 3  - ap_ready (Read)
--        bit 7  - auto_restart (Read/Write)
--        others - reserved
-- 0x04 : Global Interrupt Enable Register
--        bit 0  - Global Interrupt Enable (Read/Write)
--        others - reserved
-- 0x08 : IP Interrupt Enable Register (Read/Write)
--        bit 0  - Channel 0 (ap_done)
--        bit 1  - Channel 1 (ap_ready)
--        others - reserved
-- 0x0c : IP Interrupt Status Register (Read/TOW)
--        bit 0  - Channel 0 (ap_done)
--        bit 1  - Channel 1 (ap_ready)
--        others - reserved
-- 0x80 : Data signal of maxDepth
--        bit 7~0 - maxDepth[7:0] (Read/Write)
--        others  - reserved
-- 0x84 : reserved
-- 0x88 : Data signal of unsolvable
--        bit 0  - unsolvable[0] (Read)
--        others - reserved
-- 0x8c : Control signal of unsolvable
--        bit 0  - unsolvable_ap_vld (Read/COR)
--        others - reserved
-- 0x90 : Data signal of encode_length
--        bit 7~0 - encode_length[7:0] (Read)
--        others  - reserved
-- 0x94 : Control signal of encode_length
--        bit 0  - encode_length_ap_vld (Read/COR)
--        others - reserved
-- 0x10 : Data signal of twistMove2
--        bit 31~0 - twistMove2[31:0] (Read/Write)
-- 0x14 : reserved
-- 0x18 : Data signal of flipMove2
--        bit 31~0 - flipMove2[31:0] (Read/Write)
-- 0x1c : reserved
-- 0x20 : Data signal of FRtoBR_Move2
--        bit 31~0 - FRtoBR_Move2[31:0] (Read/Write)
-- 0x24 : reserved
-- 0x28 : Data signal of URFtoDLF_Move2
--        bit 31~0 - URFtoDLF_Move2[31:0] (Read/Write)
-- 0x2c : reserved
-- 0x30 : Data signal of URtoDF_Move2
--        bit 31~0 - URtoDF_Move2[31:0] (Read/Write)
-- 0x34 : reserved
-- 0x38 : Data signal of URtoUL_Move2
--        bit 31~0 - URtoUL_Move2[31:0] (Read/Write)
-- 0x3c : reserved
-- 0x98 : Data signal of UBtoDF_Move2
--        bit 31~0 - UBtoDF_Move2[31:0] (Read/Write)
-- 0x9c : reserved
-- 0xc0 : Data signal of MergeURtoULandUBtoDF2
--        bit 31~0 - MergeURtoULandUBtoDF2[31:0] (Read/Write)
-- 0xc4 : reserved
-- 0xc8 : Data signal of Slice_URFtoDLF_Parity_Prun2
--        bit 31~0 - Slice_URFtoDLF_Parity_Prun2[31:0] (Read/Write)
-- 0xcc : reserved
-- 0xd0 : Data signal of Slice_URtoDF_Parity_Prun2
--        bit 31~0 - Slice_URtoDF_Parity_Prun2[31:0] (Read/Write)
-- 0xd4 : reserved
-- 0xd8 : Data signal of Slice_Twist_Prun2
--        bit 31~0 - Slice_Twist_Prun2[31:0] (Read/Write)
-- 0xdc : reserved
-- 0xe0 : Data signal of Slice_Flip_Prun2
--        bit 31~0 - Slice_Flip_Prun2[31:0] (Read/Write)
-- 0xe4 : reserved
-- 0x40 ~
-- 0x7f : Memory 'facelets' (54 * 8b)
--        Word n : bit [ 7: 0] - facelets[4n]
--                 bit [15: 8] - facelets[4n+1]
--                 bit [23:16] - facelets[4n+2]
--                 bit [31:24] - facelets[4n+3]
-- 0xa0 ~
-- 0xbf : Memory 'encode_array' (30 * 8b)
--        Word n : bit [ 7: 0] - encode_array[4n]
--                 bit [15: 8] - encode_array[4n+1]
--                 bit [23:16] - encode_array[4n+2]
--                 bit [31:24] - encode_array[4n+3]
-- (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

architecture behave of solution_CTRL_BUS_s_axi is
    type states is (wridle, wrdata, wrresp, wrreset, rdidle, rddata, rdreset);  -- read and write fsm states
    signal wstate  : states := wrreset;
    signal rstate  : states := rdreset;
    signal wnext, rnext: states;
    constant ADDR_AP_CTRL                            : INTEGER := 16#00#;
    constant ADDR_GIE                                : INTEGER := 16#04#;
    constant ADDR_IER                                : INTEGER := 16#08#;
    constant ADDR_ISR                                : INTEGER := 16#0c#;
    constant ADDR_MAXDEPTH_DATA_0                    : INTEGER := 16#80#;
    constant ADDR_MAXDEPTH_CTRL                      : INTEGER := 16#84#;
    constant ADDR_UNSOLVABLE_DATA_0                  : INTEGER := 16#88#;
    constant ADDR_UNSOLVABLE_CTRL                    : INTEGER := 16#8c#;
    constant ADDR_ENCODE_LENGTH_DATA_0               : INTEGER := 16#90#;
    constant ADDR_ENCODE_LENGTH_CTRL                 : INTEGER := 16#94#;
    constant ADDR_TWISTMOVE2_DATA_0                  : INTEGER := 16#10#;
    constant ADDR_TWISTMOVE2_CTRL                    : INTEGER := 16#14#;
    constant ADDR_FLIPMOVE2_DATA_0                   : INTEGER := 16#18#;
    constant ADDR_FLIPMOVE2_CTRL                     : INTEGER := 16#1c#;
    constant ADDR_FRTOBR_MOVE2_DATA_0                : INTEGER := 16#20#;
    constant ADDR_FRTOBR_MOVE2_CTRL                  : INTEGER := 16#24#;
    constant ADDR_URFTODLF_MOVE2_DATA_0              : INTEGER := 16#28#;
    constant ADDR_URFTODLF_MOVE2_CTRL                : INTEGER := 16#2c#;
    constant ADDR_URTODF_MOVE2_DATA_0                : INTEGER := 16#30#;
    constant ADDR_URTODF_MOVE2_CTRL                  : INTEGER := 16#34#;
    constant ADDR_URTOUL_MOVE2_DATA_0                : INTEGER := 16#38#;
    constant ADDR_URTOUL_MOVE2_CTRL                  : INTEGER := 16#3c#;
    constant ADDR_UBTODF_MOVE2_DATA_0                : INTEGER := 16#98#;
    constant ADDR_UBTODF_MOVE2_CTRL                  : INTEGER := 16#9c#;
    constant ADDR_MERGEURTOULANDUBTODF2_DATA_0       : INTEGER := 16#c0#;
    constant ADDR_MERGEURTOULANDUBTODF2_CTRL         : INTEGER := 16#c4#;
    constant ADDR_SLICE_URFTODLF_PARITY_PRUN2_DATA_0 : INTEGER := 16#c8#;
    constant ADDR_SLICE_URFTODLF_PARITY_PRUN2_CTRL   : INTEGER := 16#cc#;
    constant ADDR_SLICE_URTODF_PARITY_PRUN2_DATA_0   : INTEGER := 16#d0#;
    constant ADDR_SLICE_URTODF_PARITY_PRUN2_CTRL     : INTEGER := 16#d4#;
    constant ADDR_SLICE_TWIST_PRUN2_DATA_0           : INTEGER := 16#d8#;
    constant ADDR_SLICE_TWIST_PRUN2_CTRL             : INTEGER := 16#dc#;
    constant ADDR_SLICE_FLIP_PRUN2_DATA_0            : INTEGER := 16#e0#;
    constant ADDR_SLICE_FLIP_PRUN2_CTRL              : INTEGER := 16#e4#;
    constant ADDR_FACELETS_BASE                      : INTEGER := 16#40#;
    constant ADDR_FACELETS_HIGH                      : INTEGER := 16#7f#;
    constant ADDR_ENCODE_ARRAY_BASE                  : INTEGER := 16#a0#;
    constant ADDR_ENCODE_ARRAY_HIGH                  : INTEGER := 16#bf#;
    constant ADDR_BITS         : INTEGER := 8;

    signal waddr               : UNSIGNED(ADDR_BITS-1 downto 0);
    signal wmask               : UNSIGNED(31 downto 0);
    signal aw_hs               : STD_LOGIC;
    signal w_hs                : STD_LOGIC;
    signal rdata_data          : UNSIGNED(31 downto 0);
    signal ar_hs               : STD_LOGIC;
    signal raddr               : UNSIGNED(ADDR_BITS-1 downto 0);
    signal AWREADY_t           : STD_LOGIC;
    signal WREADY_t            : STD_LOGIC;
    signal ARREADY_t           : STD_LOGIC;
    signal RVALID_t            : STD_LOGIC;
    -- internal registers
    signal int_ap_idle         : STD_LOGIC;
    signal int_ap_ready        : STD_LOGIC;
    signal int_ap_done         : STD_LOGIC := '0';
    signal int_ap_start        : STD_LOGIC := '0';
    signal int_auto_restart    : STD_LOGIC := '0';
    signal int_gie             : STD_LOGIC := '0';
    signal int_ier             : UNSIGNED(1 downto 0) := (others => '0');
    signal int_isr             : UNSIGNED(1 downto 0) := (others => '0');
    signal int_maxDepth        : UNSIGNED(7 downto 0) := (others => '0');
    signal int_unsolvable      : UNSIGNED(0 downto 0) := (others => '0');
    signal int_unsolvable_ap_vld : STD_LOGIC;
    signal int_encode_length   : UNSIGNED(7 downto 0) := (others => '0');
    signal int_encode_length_ap_vld : STD_LOGIC;
    signal int_twistMove2      : UNSIGNED(31 downto 0) := (others => '0');
    signal int_flipMove2       : UNSIGNED(31 downto 0) := (others => '0');
    signal int_FRtoBR_Move2    : UNSIGNED(31 downto 0) := (others => '0');
    signal int_URFtoDLF_Move2  : UNSIGNED(31 downto 0) := (others => '0');
    signal int_URtoDF_Move2    : UNSIGNED(31 downto 0) := (others => '0');
    signal int_URtoUL_Move2    : UNSIGNED(31 downto 0) := (others => '0');
    signal int_UBtoDF_Move2    : UNSIGNED(31 downto 0) := (others => '0');
    signal int_MergeURtoULandUBtoDF2 : UNSIGNED(31 downto 0) := (others => '0');
    signal int_Slice_URFtoDLF_Parity_Prun2 : UNSIGNED(31 downto 0) := (others => '0');
    signal int_Slice_URtoDF_Parity_Prun2 : UNSIGNED(31 downto 0) := (others => '0');
    signal int_Slice_Twist_Prun2 : UNSIGNED(31 downto 0) := (others => '0');
    signal int_Slice_Flip_Prun2 : UNSIGNED(31 downto 0) := (others => '0');
    -- memory signals
    signal int_facelets_address0 : UNSIGNED(3 downto 0);
    signal int_facelets_ce0    : STD_LOGIC;
    signal int_facelets_we0    : STD_LOGIC;
    signal int_facelets_be0    : UNSIGNED(3 downto 0);
    signal int_facelets_d0     : UNSIGNED(31 downto 0);
    signal int_facelets_q0     : UNSIGNED(31 downto 0);
    signal int_facelets_address1 : UNSIGNED(3 downto 0);
    signal int_facelets_ce1    : STD_LOGIC;
    signal int_facelets_we1    : STD_LOGIC;
    signal int_facelets_be1    : UNSIGNED(3 downto 0);
    signal int_facelets_d1     : UNSIGNED(31 downto 0);
    signal int_facelets_q1     : UNSIGNED(31 downto 0);
    signal int_facelets_read   : STD_LOGIC;
    signal int_facelets_write  : STD_LOGIC;
    signal int_facelets_shift  : UNSIGNED(1 downto 0);
    signal int_encode_array_address0 : UNSIGNED(2 downto 0);
    signal int_encode_array_ce0 : STD_LOGIC;
    signal int_encode_array_we0 : STD_LOGIC;
    signal int_encode_array_be0 : UNSIGNED(3 downto 0);
    signal int_encode_array_d0 : UNSIGNED(31 downto 0);
    signal int_encode_array_q0 : UNSIGNED(31 downto 0);
    signal int_encode_array_address1 : UNSIGNED(2 downto 0);
    signal int_encode_array_ce1 : STD_LOGIC;
    signal int_encode_array_we1 : STD_LOGIC;
    signal int_encode_array_be1 : UNSIGNED(3 downto 0);
    signal int_encode_array_d1 : UNSIGNED(31 downto 0);
    signal int_encode_array_q1 : UNSIGNED(31 downto 0);
    signal int_encode_array_read : STD_LOGIC;
    signal int_encode_array_write : STD_LOGIC;
    signal int_encode_array_shift : UNSIGNED(1 downto 0);

    component solution_CTRL_BUS_s_axi_ram is
        generic (
            BYTES   : INTEGER :=4;
            DEPTH   : INTEGER :=256;
            AWIDTH  : INTEGER :=8);
        port (
            clk0    : in  STD_LOGIC;
            address0: in  UNSIGNED(AWIDTH-1 downto 0);
            ce0     : in  STD_LOGIC;
            we0     : in  STD_LOGIC;
            be0     : in  UNSIGNED(BYTES-1 downto 0);
            d0      : in  UNSIGNED(BYTES*8-1 downto 0);
            q0      : out UNSIGNED(BYTES*8-1 downto 0);
            clk1    : in  STD_LOGIC;
            address1: in  UNSIGNED(AWIDTH-1 downto 0);
            ce1     : in  STD_LOGIC;
            we1     : in  STD_LOGIC;
            be1     : in  UNSIGNED(BYTES-1 downto 0);
            d1      : in  UNSIGNED(BYTES*8-1 downto 0);
            q1      : out UNSIGNED(BYTES*8-1 downto 0));
    end component solution_CTRL_BUS_s_axi_ram;

    function log2 (x : INTEGER) return INTEGER is
        variable n, m : INTEGER;
    begin
        n := 1;
        m := 2;
        while m < x loop
            n := n + 1;
            m := m * 2;
        end loop;
        return n;
    end function log2;

begin
-- ----------------------- Instantiation------------------
-- int_facelets
int_facelets : solution_CTRL_BUS_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 14,
     AWIDTH   => log2(14))
port map (
     clk0     => ACLK,
     address0 => int_facelets_address0,
     ce0      => int_facelets_ce0,
     we0      => int_facelets_we0,
     be0      => int_facelets_be0,
     d0       => int_facelets_d0,
     q0       => int_facelets_q0,
     clk1     => ACLK,
     address1 => int_facelets_address1,
     ce1      => int_facelets_ce1,
     we1      => int_facelets_we1,
     be1      => int_facelets_be1,
     d1       => int_facelets_d1,
     q1       => int_facelets_q1);
-- int_encode_array
int_encode_array : solution_CTRL_BUS_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 8,
     AWIDTH   => log2(8))
port map (
     clk0     => ACLK,
     address0 => int_encode_array_address0,
     ce0      => int_encode_array_ce0,
     we0      => int_encode_array_we0,
     be0      => int_encode_array_be0,
     d0       => int_encode_array_d0,
     q0       => int_encode_array_q0,
     clk1     => ACLK,
     address1 => int_encode_array_address1,
     ce1      => int_encode_array_ce1,
     we1      => int_encode_array_we1,
     be1      => int_encode_array_be1,
     d1       => int_encode_array_d1,
     q1       => int_encode_array_q1);

-- ----------------------- AXI WRITE ---------------------
    AWREADY_t <=  '1' when wstate = wridle else '0';
    AWREADY   <=  AWREADY_t;
    WREADY_t  <=  '1' when wstate = wrdata else '0';
    WREADY    <=  WREADY_t;
    BRESP     <=  "00";  -- OKAY
    BVALID    <=  '1' when wstate = wrresp else '0';
    wmask     <=  (31 downto 24 => WSTRB(3), 23 downto 16 => WSTRB(2), 15 downto 8 => WSTRB(1), 7 downto 0 => WSTRB(0));
    aw_hs     <=  AWVALID and AWREADY_t;
    w_hs      <=  WVALID and WREADY_t;

    -- write FSM
    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                wstate <= wrreset;
            elsif (ACLK_EN = '1') then
                wstate <= wnext;
            end if;
        end if;
    end process;

    process (wstate, AWVALID, WVALID, BREADY)
    begin
        case (wstate) is
        when wridle =>
            if (AWVALID = '1') then
                wnext <= wrdata;
            else
                wnext <= wridle;
            end if;
        when wrdata =>
            if (WVALID = '1') then
                wnext <= wrresp;
            else
                wnext <= wrdata;
            end if;
        when wrresp =>
            if (BREADY = '1') then
                wnext <= wridle;
            else
                wnext <= wrresp;
            end if;
        when others =>
            wnext <= wridle;
        end case;
    end process;

    waddr_proc : process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (aw_hs = '1') then
                    waddr <= UNSIGNED(AWADDR(ADDR_BITS-1 downto 0));
                end if;
            end if;
        end if;
    end process;

-- ----------------------- AXI READ ----------------------
    ARREADY_t <= '1' when (rstate = rdidle) else '0';
    ARREADY <= ARREADY_t;
    RDATA   <= STD_LOGIC_VECTOR(rdata_data);
    RRESP   <= "00";  -- OKAY
    RVALID_t  <= '1' when (rstate = rddata) and (int_facelets_read = '0') and (int_encode_array_read = '0') else '0';
    RVALID    <= RVALID_t;
    ar_hs   <= ARVALID and ARREADY_t;
    raddr   <= UNSIGNED(ARADDR(ADDR_BITS-1 downto 0));

    -- read FSM
    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                rstate <= rdreset;
            elsif (ACLK_EN = '1') then
                rstate <= rnext;
            end if;
        end if;
    end process;

    process (rstate, ARVALID, RREADY, RVALID_t)
    begin
        case (rstate) is
        when rdidle =>
            if (ARVALID = '1') then
                rnext <= rddata;
            else
                rnext <= rdidle;
            end if;
        when rddata =>
            if (RREADY = '1' and RVALID_t = '1') then
                rnext <= rdidle;
            else
                rnext <= rddata;
            end if;
        when others =>
            rnext <= rdidle;
        end case;
    end process;

    rdata_proc : process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (ar_hs = '1') then
                    case (TO_INTEGER(raddr)) is
                    when ADDR_AP_CTRL =>
                        rdata_data <= (7 => int_auto_restart, 3 => int_ap_ready, 2 => int_ap_idle, 1 => int_ap_done, 0 => int_ap_start, others => '0');
                    when ADDR_GIE =>
                        rdata_data <= (0 => int_gie, others => '0');
                    when ADDR_IER =>
                        rdata_data <= (1 => int_ier(1), 0 => int_ier(0), others => '0');
                    when ADDR_ISR =>
                        rdata_data <= (1 => int_isr(1), 0 => int_isr(0), others => '0');
                    when ADDR_MAXDEPTH_DATA_0 =>
                        rdata_data <= RESIZE(int_maxDepth(7 downto 0), 32);
                    when ADDR_UNSOLVABLE_DATA_0 =>
                        rdata_data <= RESIZE(int_unsolvable(0 downto 0), 32);
                    when ADDR_UNSOLVABLE_CTRL =>
                        rdata_data <= (0 => int_unsolvable_ap_vld, others => '0');
                    when ADDR_ENCODE_LENGTH_DATA_0 =>
                        rdata_data <= RESIZE(int_encode_length(7 downto 0), 32);
                    when ADDR_ENCODE_LENGTH_CTRL =>
                        rdata_data <= (0 => int_encode_length_ap_vld, others => '0');
                    when ADDR_TWISTMOVE2_DATA_0 =>
                        rdata_data <= RESIZE(int_twistMove2(31 downto 0), 32);
                    when ADDR_FLIPMOVE2_DATA_0 =>
                        rdata_data <= RESIZE(int_flipMove2(31 downto 0), 32);
                    when ADDR_FRTOBR_MOVE2_DATA_0 =>
                        rdata_data <= RESIZE(int_FRtoBR_Move2(31 downto 0), 32);
                    when ADDR_URFTODLF_MOVE2_DATA_0 =>
                        rdata_data <= RESIZE(int_URFtoDLF_Move2(31 downto 0), 32);
                    when ADDR_URTODF_MOVE2_DATA_0 =>
                        rdata_data <= RESIZE(int_URtoDF_Move2(31 downto 0), 32);
                    when ADDR_URTOUL_MOVE2_DATA_0 =>
                        rdata_data <= RESIZE(int_URtoUL_Move2(31 downto 0), 32);
                    when ADDR_UBTODF_MOVE2_DATA_0 =>
                        rdata_data <= RESIZE(int_UBtoDF_Move2(31 downto 0), 32);
                    when ADDR_MERGEURTOULANDUBTODF2_DATA_0 =>
                        rdata_data <= RESIZE(int_MergeURtoULandUBtoDF2(31 downto 0), 32);
                    when ADDR_SLICE_URFTODLF_PARITY_PRUN2_DATA_0 =>
                        rdata_data <= RESIZE(int_Slice_URFtoDLF_Parity_Prun2(31 downto 0), 32);
                    when ADDR_SLICE_URTODF_PARITY_PRUN2_DATA_0 =>
                        rdata_data <= RESIZE(int_Slice_URtoDF_Parity_Prun2(31 downto 0), 32);
                    when ADDR_SLICE_TWIST_PRUN2_DATA_0 =>
                        rdata_data <= RESIZE(int_Slice_Twist_Prun2(31 downto 0), 32);
                    when ADDR_SLICE_FLIP_PRUN2_DATA_0 =>
                        rdata_data <= RESIZE(int_Slice_Flip_Prun2(31 downto 0), 32);
                    when others =>
                        rdata_data <= (others => '0');
                    end case;
                elsif (int_facelets_read = '1') then
                    rdata_data <= int_facelets_q1;
                elsif (int_encode_array_read = '1') then
                    rdata_data <= int_encode_array_q1;
                end if;
            end if;
        end if;
    end process;

-- ----------------------- Register logic ----------------
    interrupt            <= int_gie and (int_isr(0) or int_isr(1));
    ap_start             <= int_ap_start;
    maxDepth             <= STD_LOGIC_VECTOR(int_maxDepth);
    twistMove2           <= STD_LOGIC_VECTOR(int_twistMove2);
    flipMove2            <= STD_LOGIC_VECTOR(int_flipMove2);
    FRtoBR_Move2         <= STD_LOGIC_VECTOR(int_FRtoBR_Move2);
    URFtoDLF_Move2       <= STD_LOGIC_VECTOR(int_URFtoDLF_Move2);
    URtoDF_Move2         <= STD_LOGIC_VECTOR(int_URtoDF_Move2);
    URtoUL_Move2         <= STD_LOGIC_VECTOR(int_URtoUL_Move2);
    UBtoDF_Move2         <= STD_LOGIC_VECTOR(int_UBtoDF_Move2);
    MergeURtoULandUBtoDF2 <= STD_LOGIC_VECTOR(int_MergeURtoULandUBtoDF2);
    Slice_URFtoDLF_Parity_Prun2 <= STD_LOGIC_VECTOR(int_Slice_URFtoDLF_Parity_Prun2);
    Slice_URtoDF_Parity_Prun2 <= STD_LOGIC_VECTOR(int_Slice_URtoDF_Parity_Prun2);
    Slice_Twist_Prun2    <= STD_LOGIC_VECTOR(int_Slice_Twist_Prun2);
    Slice_Flip_Prun2     <= STD_LOGIC_VECTOR(int_Slice_Flip_Prun2);

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ap_start <= '0';
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_AP_CTRL and WSTRB(0) = '1' and WDATA(0) = '1') then
                    int_ap_start <= '1';
                elsif (ap_ready = '1') then
                    int_ap_start <= int_auto_restart; -- clear on handshake/auto restart
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ap_done <= '0';
            elsif (ACLK_EN = '1') then
                if (ap_done = '1') then
                    int_ap_done <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_AP_CTRL) then
                    int_ap_done <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ap_idle <= '0';
            elsif (ACLK_EN = '1') then
                if (true) then
                    int_ap_idle <= ap_idle;
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ap_ready <= '0';
            elsif (ACLK_EN = '1') then
                if (true) then
                    int_ap_ready <= ap_ready;
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_auto_restart <= '0';
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_AP_CTRL and WSTRB(0) = '1') then
                    int_auto_restart <= WDATA(7);
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_gie <= '0';
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_GIE and WSTRB(0) = '1') then
                    int_gie <= WDATA(0);
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ier <= "00";
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_IER and WSTRB(0) = '1') then
                    int_ier <= UNSIGNED(WDATA(1 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_isr(0) <= '0';
            elsif (ACLK_EN = '1') then
                if (int_ier(0) = '1' and ap_done = '1') then
                    int_isr(0) <= '1';
                elsif (w_hs = '1' and waddr = ADDR_ISR and WSTRB(0) = '1') then
                    int_isr(0) <= int_isr(0) xor WDATA(0); -- toggle on write
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_isr(1) <= '0';
            elsif (ACLK_EN = '1') then
                if (int_ier(1) = '1' and ap_ready = '1') then
                    int_isr(1) <= '1';
                elsif (w_hs = '1' and waddr = ADDR_ISR and WSTRB(0) = '1') then
                    int_isr(1) <= int_isr(1) xor WDATA(1); -- toggle on write
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_MAXDEPTH_DATA_0) then
                    int_maxDepth(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_maxDepth(7 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_unsolvable <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (unsolvable_ap_vld = '1') then
                    int_unsolvable <= UNSIGNED(unsolvable); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_unsolvable_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (unsolvable_ap_vld = '1') then
                    int_unsolvable_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_UNSOLVABLE_CTRL) then
                    int_unsolvable_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_encode_length <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (encode_length_ap_vld = '1') then
                    int_encode_length <= UNSIGNED(encode_length); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_encode_length_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (encode_length_ap_vld = '1') then
                    int_encode_length_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_ENCODE_LENGTH_CTRL) then
                    int_encode_length_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_TWISTMOVE2_DATA_0) then
                    int_twistMove2(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_twistMove2(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_FLIPMOVE2_DATA_0) then
                    int_flipMove2(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_flipMove2(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_FRTOBR_MOVE2_DATA_0) then
                    int_FRtoBR_Move2(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_FRtoBR_Move2(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_URFTODLF_MOVE2_DATA_0) then
                    int_URFtoDLF_Move2(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_URFtoDLF_Move2(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_URTODF_MOVE2_DATA_0) then
                    int_URtoDF_Move2(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_URtoDF_Move2(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_URTOUL_MOVE2_DATA_0) then
                    int_URtoUL_Move2(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_URtoUL_Move2(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_UBTODF_MOVE2_DATA_0) then
                    int_UBtoDF_Move2(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_UBtoDF_Move2(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_MERGEURTOULANDUBTODF2_DATA_0) then
                    int_MergeURtoULandUBtoDF2(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_MergeURtoULandUBtoDF2(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_SLICE_URFTODLF_PARITY_PRUN2_DATA_0) then
                    int_Slice_URFtoDLF_Parity_Prun2(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_Slice_URFtoDLF_Parity_Prun2(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_SLICE_URTODF_PARITY_PRUN2_DATA_0) then
                    int_Slice_URtoDF_Parity_Prun2(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_Slice_URtoDF_Parity_Prun2(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_SLICE_TWIST_PRUN2_DATA_0) then
                    int_Slice_Twist_Prun2(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_Slice_Twist_Prun2(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_SLICE_FLIP_PRUN2_DATA_0) then
                    int_Slice_Flip_Prun2(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_Slice_Flip_Prun2(31 downto 0));
                end if;
            end if;
        end if;
    end process;


-- ----------------------- Memory logic ------------------
    -- facelets
    int_facelets_address0 <= SHIFT_RIGHT(UNSIGNED(facelets_address0), 2)(3 downto 0);
    int_facelets_ce0     <= facelets_ce0;
    int_facelets_we0     <= '0';
    int_facelets_be0     <= (others => '0');
    int_facelets_d0      <= (others => '0');
    facelets_q0          <= STD_LOGIC_VECTOR(SHIFT_RIGHT(int_facelets_q0, TO_INTEGER(int_facelets_shift) * 8)(7 downto 0));
    int_facelets_address1 <= raddr(5 downto 2) when ar_hs = '1' else waddr(5 downto 2);
    int_facelets_ce1     <= '1' when ar_hs = '1' or (int_facelets_write = '1' and WVALID  = '1') else '0';
    int_facelets_we1     <= '1' when int_facelets_write = '1' and WVALID = '1' else '0';
    int_facelets_be1     <= UNSIGNED(WSTRB);
    int_facelets_d1      <= UNSIGNED(WDATA);
    -- encode_array
    int_encode_array_address0 <= SHIFT_RIGHT(UNSIGNED(encode_array_address0), 2)(2 downto 0);
    int_encode_array_ce0 <= encode_array_ce0;
    int_encode_array_we0 <= encode_array_we0;
    int_encode_array_be0 <= SHIFT_LEFT(TO_UNSIGNED(1, 4), TO_INTEGER(UNSIGNED(encode_array_address0(1 downto 0))));
    int_encode_array_d0  <= UNSIGNED(encode_array_d0) & UNSIGNED(encode_array_d0) & UNSIGNED(encode_array_d0) & UNSIGNED(encode_array_d0);
    int_encode_array_address1 <= raddr(4 downto 2) when ar_hs = '1' else waddr(4 downto 2);
    int_encode_array_ce1 <= '1' when ar_hs = '1' or (int_encode_array_write = '1' and WVALID  = '1') else '0';
    int_encode_array_we1 <= '1' when int_encode_array_write = '1' and WVALID = '1' else '0';
    int_encode_array_be1 <= UNSIGNED(WSTRB);
    int_encode_array_d1  <= UNSIGNED(WDATA);

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_facelets_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_FACELETS_BASE and raddr <= ADDR_FACELETS_HIGH) then
                    int_facelets_read <= '1';
                else
                    int_facelets_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_facelets_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_FACELETS_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_FACELETS_HIGH) then
                    int_facelets_write <= '1';
                elsif (WVALID = '1') then
                    int_facelets_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (facelets_ce0 = '1') then
                    int_facelets_shift <= UNSIGNED(facelets_address0(1 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_encode_array_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_ENCODE_ARRAY_BASE and raddr <= ADDR_ENCODE_ARRAY_HIGH) then
                    int_encode_array_read <= '1';
                else
                    int_encode_array_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_encode_array_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_ENCODE_ARRAY_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_ENCODE_ARRAY_HIGH) then
                    int_encode_array_write <= '1';
                elsif (WVALID = '1') then
                    int_encode_array_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (encode_array_ce0 = '1') then
                    int_encode_array_shift <= UNSIGNED(encode_array_address0(1 downto 0));
                end if;
            end if;
        end if;
    end process;


end architecture behave;

library IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.all;

entity solution_CTRL_BUS_s_axi_ram is
    generic (
        BYTES   : INTEGER :=4;
        DEPTH   : INTEGER :=256;
        AWIDTH  : INTEGER :=8);
    port (
        clk0    : in  STD_LOGIC;
        address0: in  UNSIGNED(AWIDTH-1 downto 0);
        ce0     : in  STD_LOGIC;
        we0     : in  STD_LOGIC;
        be0     : in  UNSIGNED(BYTES-1 downto 0);
        d0      : in  UNSIGNED(BYTES*8-1 downto 0);
        q0      : out UNSIGNED(BYTES*8-1 downto 0);
        clk1    : in  STD_LOGIC;
        address1: in  UNSIGNED(AWIDTH-1 downto 0);
        ce1     : in  STD_LOGIC;
        we1     : in  STD_LOGIC;
        be1     : in  UNSIGNED(BYTES-1 downto 0);
        d1      : in  UNSIGNED(BYTES*8-1 downto 0);
        q1      : out UNSIGNED(BYTES*8-1 downto 0));

end entity solution_CTRL_BUS_s_axi_ram;

architecture behave of solution_CTRL_BUS_s_axi_ram is
    signal address0_tmp : UNSIGNED(AWIDTH-1 downto 0);
    signal address1_tmp : UNSIGNED(AWIDTH-1 downto 0);
    type RAM_T is array (0 to DEPTH - 1) of UNSIGNED(BYTES*8 - 1 downto 0);
    shared variable mem : RAM_T := (others => (others => '0'));
begin

    process (address0)
    begin
    address0_tmp <= address0;
    --synthesis translate_off
          if (address0 > DEPTH-1) then
              address0_tmp <= (others => '0');
          else
              address0_tmp <= address0;
          end if;
    --synthesis translate_on
    end process;

    process (address1)
    begin
    address1_tmp <= address1;
    --synthesis translate_off
          if (address1 > DEPTH-1) then
              address1_tmp <= (others => '0');
          else
              address1_tmp <= address1;
          end if;
    --synthesis translate_on
    end process;

    --read port 0
    process (clk0) begin
        if (clk0'event and clk0 = '1') then
            if (ce0 = '1') then
                q0 <= mem(to_integer(address0_tmp));
            end if;
        end if;
    end process;

    --read port 1
    process (clk1) begin
        if (clk1'event and clk1 = '1') then
            if (ce1 = '1') then
                q1 <= mem(to_integer(address1_tmp));
            end if;
        end if;
    end process;

    gen_write : for i in 0 to BYTES - 1 generate
    begin
        --write port 0
        process (clk0)
        begin
            if (clk0'event and clk0 = '1') then
                if (ce0 = '1' and we0 = '1' and be0(i) = '1') then
                    mem(to_integer(address0_tmp))(8*i+7 downto 8*i) := d0(8*i+7 downto 8*i);
                end if;
            end if;
        end process;

        --write port 1
        process (clk1)
        begin
            if (clk1'event and clk1 = '1') then
                if (ce1 = '1' and we1 = '1' and be1(i) = '1') then
                    mem(to_integer(address1_tmp))(8*i+7 downto 8*i) := d1(8*i+7 downto 8*i);
                end if;
            end if;
        end process;

    end generate;

end architecture behave;


