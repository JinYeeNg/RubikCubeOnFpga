// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module getURFtoDLF (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        cubiecube_0_cp_address0,
        cubiecube_0_cp_ce0,
        cubiecube_0_cp_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 50'd1;
parameter    ap_ST_fsm_state2 = 50'd2;
parameter    ap_ST_fsm_state3 = 50'd4;
parameter    ap_ST_fsm_state4 = 50'd8;
parameter    ap_ST_fsm_state5 = 50'd16;
parameter    ap_ST_fsm_state6 = 50'd32;
parameter    ap_ST_fsm_state7 = 50'd64;
parameter    ap_ST_fsm_state8 = 50'd128;
parameter    ap_ST_fsm_state9 = 50'd256;
parameter    ap_ST_fsm_state10 = 50'd512;
parameter    ap_ST_fsm_state11 = 50'd1024;
parameter    ap_ST_fsm_state12 = 50'd2048;
parameter    ap_ST_fsm_state13 = 50'd4096;
parameter    ap_ST_fsm_state14 = 50'd8192;
parameter    ap_ST_fsm_state15 = 50'd16384;
parameter    ap_ST_fsm_state16 = 50'd32768;
parameter    ap_ST_fsm_state17 = 50'd65536;
parameter    ap_ST_fsm_state18 = 50'd131072;
parameter    ap_ST_fsm_state19 = 50'd262144;
parameter    ap_ST_fsm_state20 = 50'd524288;
parameter    ap_ST_fsm_state21 = 50'd1048576;
parameter    ap_ST_fsm_state22 = 50'd2097152;
parameter    ap_ST_fsm_state23 = 50'd4194304;
parameter    ap_ST_fsm_state24 = 50'd8388608;
parameter    ap_ST_fsm_state25 = 50'd16777216;
parameter    ap_ST_fsm_state26 = 50'd33554432;
parameter    ap_ST_fsm_state27 = 50'd67108864;
parameter    ap_ST_fsm_state28 = 50'd134217728;
parameter    ap_ST_fsm_state29 = 50'd268435456;
parameter    ap_ST_fsm_state30 = 50'd536870912;
parameter    ap_ST_fsm_state31 = 50'd1073741824;
parameter    ap_ST_fsm_state32 = 50'd2147483648;
parameter    ap_ST_fsm_state33 = 50'd4294967296;
parameter    ap_ST_fsm_state34 = 50'd8589934592;
parameter    ap_ST_fsm_state35 = 50'd17179869184;
parameter    ap_ST_fsm_state36 = 50'd34359738368;
parameter    ap_ST_fsm_state37 = 50'd68719476736;
parameter    ap_ST_fsm_state38 = 50'd137438953472;
parameter    ap_ST_fsm_state39 = 50'd274877906944;
parameter    ap_ST_fsm_state40 = 50'd549755813888;
parameter    ap_ST_fsm_state41 = 50'd1099511627776;
parameter    ap_ST_fsm_state42 = 50'd2199023255552;
parameter    ap_ST_fsm_state43 = 50'd4398046511104;
parameter    ap_ST_fsm_state44 = 50'd8796093022208;
parameter    ap_ST_fsm_state45 = 50'd17592186044416;
parameter    ap_ST_fsm_state46 = 50'd35184372088832;
parameter    ap_ST_fsm_state47 = 50'd70368744177664;
parameter    ap_ST_fsm_state48 = 50'd140737488355328;
parameter    ap_ST_fsm_state49 = 50'd281474976710656;
parameter    ap_ST_fsm_state50 = 50'd562949953421312;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] cubiecube_0_cp_address0;
output   cubiecube_0_cp_ce0;
input  [2:0] cubiecube_0_cp_q0;
output  [15:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg cubiecube_0_cp_ce0;

(* fsm_encoding = "none" *) reg   [49:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] indvarinc_fu_241_p2;
wire    ap_CS_fsm_state2;
wire   [31:0] n_assign_cast3_fu_268_p1;
reg   [31:0] n_assign_cast3_reg_502;
wire    ap_CS_fsm_state3;
wire   [3:0] j_8_fu_278_p2;
reg   [3:0] j_8_reg_512;
wire   [0:0] exitcond_fu_272_p2;
reg   [2:0] cubiecube_0_cp_load_reg_527;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_258_fu_289_p2;
reg   [0:0] tmp_258_reg_532;
wire   [31:0] x_3_fu_295_p2;
reg   [31:0] x_3_reg_536;
wire   [0:0] tmp_i_fu_301_p2;
reg   [0:0] tmp_i_reg_541;
wire   [31:0] tmp_364_i_fu_339_p2;
reg   [31:0] tmp_364_i_reg_545;
wire   [31:0] s_fu_350_p2;
reg   [31:0] s_reg_553;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond_i_fu_345_p2;
wire   [31:0] i_21_fu_356_p2;
reg   [31:0] i_21_reg_558;
wire   [31:0] j_9_fu_376_p2;
reg   [31:0] j_9_reg_563;
wire    ap_CS_fsm_state6;
wire   [31:0] grp_fu_371_p2;
wire    ap_CS_fsm_state41;
reg   [2:0] corner6_addr_1_reg_576;
wire    ap_CS_fsm_state43;
wire   [0:0] tmp_259_fu_393_p2;
wire   [31:0] tmp_260_fu_404_p2;
reg   [31:0] tmp_260_reg_581;
wire   [31:0] k_2_fu_416_p2;
reg   [31:0] k_2_reg_589;
wire    ap_CS_fsm_state45;
wire   [31:0] tmp_265_fu_432_p2;
reg   [31:0] tmp_265_reg_594;
wire   [0:0] tmp_263_fu_410_p2;
wire   [2:0] corner6_q0;
reg   [2:0] temp_reg_599;
wire    ap_CS_fsm_state46;
wire   [2:0] i_22_fu_444_p2;
reg   [2:0] i_22_reg_607;
wire    ap_CS_fsm_state47;
wire   [0:0] exitcond5_fu_438_p2;
wire   [31:0] b_2_fu_460_p2;
wire    ap_CS_fsm_state49;
wire   [2:0] j_fu_465_p2;
reg   [2:0] corner6_address0;
reg    corner6_ce0;
reg    corner6_we0;
reg   [2:0] corner6_d0;
reg   [2:0] invdar_reg_119;
wire   [0:0] tmp_s_fu_252_p2;
reg   [3:0] i_reg_130;
wire    ap_CS_fsm_state42;
reg   [31:0] j_i_reg_142;
reg  signed [31:0] i_i_reg_154;
reg  signed [31:0] s_i_reg_163;
reg   [31:0] p_0_i_reg_175;
reg   [2:0] r_assign_reg_187;
reg  signed [31:0] b_reg_199;
reg   [31:0] k_reg_211;
reg   [2:0] i_i2_reg_223;
wire    ap_CS_fsm_state48;
wire   [63:0] tmp_fu_247_p1;
wire   [63:0] tmp_257_fu_284_p1;
wire  signed [63:0] tmp_266_fu_362_p1;
wire   [63:0] tmp_262_fu_399_p1;
wire   [63:0] tmp_i4_fu_450_p1;
wire   [63:0] tmp_287_i_fu_455_p1;
reg   [31:0] a_fu_50;
wire   [31:0] a_2_fu_382_p2;
reg   [31:0] x_fu_54;
wire    ap_CS_fsm_state44;
wire   [1:0] p_lshr_f_i_cast_fu_306_p4;
wire   [31:0] tmp_i_cast_fu_316_p1;
wire   [0:0] tmp_363_i_fu_320_p2;
wire   [31:0] k_assign_2_fu_326_p2;
wire   [31:0] p_k_i_fu_331_p3;
wire  signed [31:0] tmp_266_fu_362_p0;
wire  signed [31:0] tmp_260_fu_404_p1;
wire   [2:0] tmp_264_fu_422_p2;
wire   [2:0] tmp_265_fu_432_p0;
wire    ap_CS_fsm_state50;
wire   [31:0] tmp_261_fu_471_p2;
reg    grp_fu_371_ap_start;
wire    grp_fu_371_ap_done;
reg   [49:0] ap_NS_fsm;
wire   [31:0] tmp_265_fu_432_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 50'd1;
end

getURFtoDLF_corner6 #(
    .DataWidth( 3 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
corner6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(corner6_address0),
    .ce0(corner6_ce0),
    .we0(corner6_we0),
    .d0(corner6_d0),
    .q0(corner6_q0)
);

solution_sdiv_32nkbM #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
solution_sdiv_32nkbM_U38(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_371_ap_start),
    .done(grp_fu_371_ap_done),
    .din0(s_reg_553),
    .din1(j_i_reg_142),
    .ce(1'b1),
    .dout(grp_fu_371_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) & (tmp_258_reg_532 == 1'd1))) begin
        a_fu_50 <= a_2_fu_382_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_252_p2 == 1'd1))) begin
        a_fu_50 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_272_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        b_reg_199 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        b_reg_199 <= b_2_fu_460_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        i_i2_reg_223 <= i_22_reg_607;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        i_i2_reg_223 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        i_i_reg_154 <= i_21_reg_558;
    end else if (((tmp_i_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (tmp_258_fu_289_p2 == 1'd1))) begin
        i_i_reg_154 <= n_assign_cast3_reg_502;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        i_reg_130 <= j_8_reg_512;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_252_p2 == 1'd1))) begin
        i_reg_130 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_252_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        invdar_reg_119 <= indvarinc_fu_241_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        invdar_reg_119 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        j_i_reg_142 <= j_9_reg_563;
    end else if (((tmp_i_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (tmp_258_fu_289_p2 == 1'd1))) begin
        j_i_reg_142 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_259_fu_393_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state43))) begin
        k_reg_211 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state47) & (exitcond5_fu_438_p2 == 1'd1))) begin
        k_reg_211 <= k_2_reg_589;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_reg_541 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (exitcond_i_fu_345_p2 == 1'd1))) begin
        p_0_i_reg_175 <= s_i_reg_163;
    end else if (((1'b1 == ap_CS_fsm_state4) & (tmp_i_fu_301_p2 == 1'd1) & (tmp_258_fu_289_p2 == 1'd1))) begin
        p_0_i_reg_175 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_272_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        r_assign_reg_187 <= 3'd5;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        r_assign_reg_187 <= j_fu_465_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        s_i_reg_163 <= grp_fu_371_p2;
    end else if (((tmp_i_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (tmp_258_fu_289_p2 == 1'd1))) begin
        s_i_reg_163 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & ((exitcond_i_fu_345_p2 == 1'd1) | (tmp_i_reg_541 == 1'd1)))) begin
        x_fu_54 <= x_3_reg_536;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_252_p2 == 1'd1))) begin
        x_fu_54 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_259_fu_393_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state43))) begin
        corner6_addr_1_reg_576 <= tmp_262_fu_399_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cubiecube_0_cp_load_reg_527 <= cubiecube_0_cp_q0;
        tmp_258_reg_532 <= tmp_258_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_345_p2 == 1'd0) & (tmp_i_reg_541 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        i_21_reg_558 <= i_21_fu_356_p2;
        s_reg_553 <= s_fu_350_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        i_22_reg_607 <= i_22_fu_444_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_8_reg_512 <= j_8_fu_278_p2;
        n_assign_cast3_reg_502[3 : 0] <= n_assign_cast3_fu_268_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_9_reg_563 <= j_9_fu_376_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        k_2_reg_589 <= k_2_fu_416_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        temp_reg_599 <= corner6_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state43) & (tmp_259_fu_393_p2 == 1'd1))) begin
        tmp_260_reg_581 <= tmp_260_fu_404_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state45) & (tmp_263_fu_410_p2 == 1'd1))) begin
        tmp_265_reg_594 <= tmp_265_fu_432_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (tmp_258_fu_289_p2 == 1'd1))) begin
        tmp_364_i_reg_545 <= tmp_364_i_fu_339_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_258_fu_289_p2 == 1'd1))) begin
        tmp_i_reg_541 <= tmp_i_fu_301_p2;
        x_3_reg_536 <= x_3_fu_295_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        corner6_address0 = tmp_287_i_fu_455_p1;
    end else if (((exitcond5_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state47))) begin
        corner6_address0 = tmp_i4_fu_450_p1;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        corner6_address0 = 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state44) | ((1'b1 == ap_CS_fsm_state47) & (exitcond5_fu_438_p2 == 1'd1)))) begin
        corner6_address0 = corner6_addr_1_reg_576;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        corner6_address0 = tmp_266_fu_362_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        corner6_address0 = tmp_fu_247_p1;
    end else begin
        corner6_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state47) & (exitcond5_fu_438_p2 == 1'd1)) | ((exitcond5_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state47)))) begin
        corner6_ce0 = 1'b1;
    end else begin
        corner6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        corner6_d0 = corner6_q0;
    end else if (((1'b1 == ap_CS_fsm_state47) & (exitcond5_fu_438_p2 == 1'd1))) begin
        corner6_d0 = temp_reg_599;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        corner6_d0 = cubiecube_0_cp_load_reg_527;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        corner6_d0 = 3'd0;
    end else begin
        corner6_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state48) | ((1'b1 == ap_CS_fsm_state47) & (exitcond5_fu_438_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state5) & ((exitcond_i_fu_345_p2 == 1'd1) | (tmp_i_reg_541 == 1'd1))))) begin
        corner6_we0 = 1'b1;
    end else begin
        corner6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        cubiecube_0_cp_ce0 = 1'b1;
    end else begin
        cubiecube_0_cp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_371_ap_start = 1'b1;
    end else begin
        grp_fu_371_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_252_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond_fu_272_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (tmp_258_fu_289_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & ((exitcond_i_fu_345_p2 == 1'd1) | (tmp_i_reg_541 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state43 : begin
            if (((tmp_259_fu_393_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            if (((1'b1 == ap_CS_fsm_state45) & (tmp_263_fu_410_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            if (((1'b1 == ap_CS_fsm_state47) & (exitcond5_fu_438_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_2_fu_382_p2 = (p_0_i_reg_175 + a_fu_50);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_return = tmp_261_fu_471_p2[15:0];

assign b_2_fu_460_p2 = (k_reg_211 + tmp_265_reg_594);

assign cubiecube_0_cp_address0 = tmp_257_fu_284_p1;

assign exitcond5_fu_438_p2 = ((i_i2_reg_223 == r_assign_reg_187) ? 1'b1 : 1'b0);

assign exitcond_fu_272_p2 = ((i_reg_130 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond_i_fu_345_p2 = ((j_i_reg_142 == tmp_364_i_reg_545) ? 1'b1 : 1'b0);

assign i_21_fu_356_p2 = ($signed(i_i_reg_154) + $signed(32'd4294967295));

assign i_22_fu_444_p2 = (i_i2_reg_223 + 3'd1);

assign indvarinc_fu_241_p2 = (invdar_reg_119 + 3'd1);

assign j_8_fu_278_p2 = (i_reg_130 + 4'd1);

assign j_9_fu_376_p2 = (j_i_reg_142 + 32'd1);

assign j_fu_465_p2 = ($signed(r_assign_reg_187) + $signed(3'd7));

assign k_2_fu_416_p2 = (k_reg_211 + 32'd1);

assign k_assign_2_fu_326_p2 = (n_assign_cast3_reg_502 - x_3_fu_295_p2);

assign n_assign_cast3_fu_268_p1 = i_reg_130;

assign p_k_i_fu_331_p3 = ((tmp_363_i_fu_320_p2[0:0] === 1'b1) ? k_assign_2_fu_326_p2 : x_3_fu_295_p2);

assign p_lshr_f_i_cast_fu_306_p4 = {{i_reg_130[2:1]}};

assign s_fu_350_p2 = ($signed(s_i_reg_163) * $signed(i_i_reg_154));

assign tmp_257_fu_284_p1 = i_reg_130;

assign tmp_258_fu_289_p2 = ((cubiecube_0_cp_q0 < 3'd6) ? 1'b1 : 1'b0);

assign tmp_259_fu_393_p2 = ((r_assign_reg_187 == 3'd0) ? 1'b1 : 1'b0);

assign tmp_260_fu_404_p1 = a_fu_50;

assign tmp_260_fu_404_p2 = ($signed({{1'b0}, {32'd720}}) * $signed(tmp_260_fu_404_p1));

assign tmp_261_fu_471_p2 = ($signed(b_reg_199) + $signed(tmp_260_reg_581));

assign tmp_262_fu_399_p1 = r_assign_reg_187;

assign tmp_263_fu_410_p2 = ((corner6_q0 == r_assign_reg_187) ? 1'b1 : 1'b0);

assign tmp_264_fu_422_p2 = (r_assign_reg_187 + 3'd1);

assign tmp_265_fu_432_p0 = tmp_265_fu_432_p00;

assign tmp_265_fu_432_p00 = tmp_264_fu_422_p2;

assign tmp_265_fu_432_p2 = ($signed({{1'b0}, {tmp_265_fu_432_p0}}) * $signed(b_reg_199));

assign tmp_266_fu_362_p0 = x_fu_54;

assign tmp_266_fu_362_p1 = tmp_266_fu_362_p0;

assign tmp_287_i_fu_455_p1 = i_i2_reg_223;

assign tmp_363_i_fu_320_p2 = (($signed(tmp_i_cast_fu_316_p1) < $signed(x_3_fu_295_p2)) ? 1'b1 : 1'b0);

assign tmp_364_i_fu_339_p2 = (p_k_i_fu_331_p3 + 32'd1);

assign tmp_fu_247_p1 = invdar_reg_119;

assign tmp_i4_fu_450_p1 = i_22_fu_444_p2;

assign tmp_i_cast_fu_316_p1 = p_lshr_f_i_cast_fu_306_p4;

assign tmp_i_fu_301_p2 = (($signed(n_assign_cast3_reg_502) < $signed(x_3_fu_295_p2)) ? 1'b1 : 1'b0);

assign tmp_s_fu_252_p2 = ((invdar_reg_119 == 3'd5) ? 1'b1 : 1'b0);

assign x_3_fu_295_p2 = (x_fu_54 + 32'd1);

always @ (posedge ap_clk) begin
    n_assign_cast3_reg_502[31:4] <= 28'b0000000000000000000000000000;
end

endmodule //getURFtoDLF
