// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module solutionToString (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        search_0_ax_address0,
        search_0_ax_ce0,
        search_0_ax_q0,
        search_0_po_address0,
        search_0_po_ce0,
        search_0_po_q0,
        length_r,
        encode_array_address0,
        encode_array_ce0,
        encode_array_we0,
        encode_array_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] search_0_ax_address0;
output   search_0_ax_ce0;
input  [31:0] search_0_ax_q0;
output  [4:0] search_0_po_address0;
output   search_0_po_ce0;
input  [31:0] search_0_po_q0;
input  [31:0] length_r;
output  [4:0] encode_array_address0;
output   encode_array_ce0;
output   encode_array_we0;
output  [7:0] encode_array_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg search_0_ax_ce0;
reg search_0_po_ce0;
reg encode_array_ce0;
reg encode_array_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [30:0] i_13_fu_151_p2;
reg   [30:0] i_13_reg_189;
wire    ap_CS_fsm_state2;
wire   [63:0] tmp_s_fu_157_p1;
reg   [63:0] tmp_s_reg_194;
wire   [0:0] tmp_fu_146_p2;
wire    ap_CS_fsm_state3;
reg   [31:0] encode_reg_85;
reg   [31:0] ap_phi_mux_encode_2_phi_fu_132_p6;
wire    ap_CS_fsm_state4;
reg   [30:0] i_reg_97;
reg   [31:0] encode_1_reg_108;
wire   [31:0] encode_3_fu_169_p2;
wire   [31:0] encode_4_fu_162_p2;
wire   [31:0] i_cast_fu_142_p1;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~(search_0_ax_q0 == 32'd0) & ~(search_0_ax_q0 == 32'd1) & ~(search_0_ax_q0 == 32'd2) & ~(search_0_ax_q0 == 32'd3) & ~(search_0_ax_q0 == 32'd4) & ~(search_0_ax_q0 == 32'd5) & (1'b1 == ap_CS_fsm_state3))) begin
        encode_1_reg_108 <= encode_reg_85;
    end else if ((((1'b1 == ap_CS_fsm_state3) & (search_0_ax_q0 == 32'd0)) | ((search_0_ax_q0 == 32'd1) & (1'b1 == ap_CS_fsm_state3)) | ((search_0_ax_q0 == 32'd2) & (1'b1 == ap_CS_fsm_state3)) | ((search_0_ax_q0 == 32'd3) & (1'b1 == ap_CS_fsm_state3)) | ((search_0_ax_q0 == 32'd4) & (1'b1 == ap_CS_fsm_state3)) | ((search_0_ax_q0 == 32'd5) & (1'b1 == ap_CS_fsm_state3)))) begin
        encode_1_reg_108 <= search_0_ax_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        encode_reg_85 <= ap_phi_mux_encode_2_phi_fu_132_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        encode_reg_85 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_97 <= i_13_reg_189;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_97 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_13_reg_189 <= i_13_fu_151_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_146_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_s_reg_194[30 : 0] <= tmp_s_fu_157_p1[30 : 0];
    end
end

always @ (*) begin
    if ((((tmp_fu_146_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        if ((~(search_0_po_q0 == 32'd2) & ~(search_0_po_q0 == 32'd3))) begin
            ap_phi_mux_encode_2_phi_fu_132_p6 = encode_1_reg_108;
        end else if ((search_0_po_q0 == 32'd2)) begin
            ap_phi_mux_encode_2_phi_fu_132_p6 = encode_4_fu_162_p2;
        end else if ((search_0_po_q0 == 32'd3)) begin
            ap_phi_mux_encode_2_phi_fu_132_p6 = encode_3_fu_169_p2;
        end else begin
            ap_phi_mux_encode_2_phi_fu_132_p6 = 'bx;
        end
    end else begin
        ap_phi_mux_encode_2_phi_fu_132_p6 = 'bx;
    end
end

always @ (*) begin
    if (((tmp_fu_146_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        encode_array_ce0 = 1'b1;
    end else begin
        encode_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        encode_array_we0 = 1'b1;
    end else begin
        encode_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        search_0_ax_ce0 = 1'b1;
    end else begin
        search_0_ax_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        search_0_po_ce0 = 1'b1;
    end else begin
        search_0_po_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_146_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign encode_3_fu_169_p2 = (encode_1_reg_108 + 32'd6);

assign encode_4_fu_162_p2 = (encode_1_reg_108 + 32'd12);

assign encode_array_address0 = tmp_s_reg_194;

assign encode_array_d0 = ap_phi_mux_encode_2_phi_fu_132_p6[7:0];

assign i_13_fu_151_p2 = (i_reg_97 + 31'd1);

assign i_cast_fu_142_p1 = i_reg_97;

assign search_0_ax_address0 = tmp_s_fu_157_p1;

assign search_0_po_address0 = tmp_s_reg_194;

assign tmp_fu_146_p2 = (($signed(i_cast_fu_142_p1) < $signed(length_r)) ? 1'b1 : 1'b0);

assign tmp_s_fu_157_p1 = i_reg_97;

always @ (posedge ap_clk) begin
    tmp_s_reg_194[63:31] <= 33'b000000000000000000000000000000000;
end

endmodule //solutionToString
