-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity solutionToString is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    search_0_ax_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    search_0_ax_ce0 : OUT STD_LOGIC;
    search_0_ax_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    search_0_po_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    search_0_po_ce0 : OUT STD_LOGIC;
    search_0_po_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    length_r : IN STD_LOGIC_VECTOR (31 downto 0);
    encode_array_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    encode_array_ce0 : OUT STD_LOGIC;
    encode_array_we0 : OUT STD_LOGIC;
    encode_array_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of solutionToString is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_13_fu_151_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_13_reg_189 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_s_fu_157_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_194 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal encode_reg_85 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_encode_2_phi_fu_132_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_reg_97 : STD_LOGIC_VECTOR (30 downto 0);
    signal encode_1_reg_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal encode_3_fu_169_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal encode_4_fu_162_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast_fu_142_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    encode_1_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((search_0_ax_q0 = ap_const_lv32_0)) and not((search_0_ax_q0 = ap_const_lv32_1)) and not((search_0_ax_q0 = ap_const_lv32_2)) and not((search_0_ax_q0 = ap_const_lv32_3)) and not((search_0_ax_q0 = ap_const_lv32_4)) and not((search_0_ax_q0 = ap_const_lv32_5)) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                encode_1_reg_108 <= encode_reg_85;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state3) and (search_0_ax_q0 = ap_const_lv32_0)) or ((search_0_ax_q0 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((search_0_ax_q0 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((search_0_ax_q0 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((search_0_ax_q0 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((search_0_ax_q0 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                encode_1_reg_108 <= search_0_ax_q0;
            end if; 
        end if;
    end process;

    encode_reg_85_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                encode_reg_85 <= ap_phi_mux_encode_2_phi_fu_132_p6;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                encode_reg_85 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_reg_97_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_reg_97 <= i_13_reg_189;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_97 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_13_reg_189 <= i_13_fu_151_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_146_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_s_reg_194(30 downto 0) <= tmp_s_fu_157_p1(30 downto 0);
            end if;
        end if;
    end process;
    tmp_s_reg_194(63 downto 31) <= "000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_146_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_146_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_146_p2)
    begin
        if ((((tmp_fu_146_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_encode_2_phi_fu_132_p6_assign_proc : process(search_0_po_q0, ap_CS_fsm_state4, encode_1_reg_108, encode_3_fu_169_p2, encode_4_fu_162_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
            if ((not((search_0_po_q0 = ap_const_lv32_2)) and not((search_0_po_q0 = ap_const_lv32_3)))) then 
                ap_phi_mux_encode_2_phi_fu_132_p6 <= encode_1_reg_108;
            elsif ((search_0_po_q0 = ap_const_lv32_2)) then 
                ap_phi_mux_encode_2_phi_fu_132_p6 <= encode_4_fu_162_p2;
            elsif ((search_0_po_q0 = ap_const_lv32_3)) then 
                ap_phi_mux_encode_2_phi_fu_132_p6 <= encode_3_fu_169_p2;
            else 
                ap_phi_mux_encode_2_phi_fu_132_p6 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_encode_2_phi_fu_132_p6 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_146_p2)
    begin
        if (((tmp_fu_146_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    encode_3_fu_169_p2 <= std_logic_vector(unsigned(encode_1_reg_108) + unsigned(ap_const_lv32_6));
    encode_4_fu_162_p2 <= std_logic_vector(unsigned(encode_1_reg_108) + unsigned(ap_const_lv32_C));
    encode_array_address0 <= tmp_s_reg_194(5 - 1 downto 0);

    encode_array_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            encode_array_ce0 <= ap_const_logic_1;
        else 
            encode_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    encode_array_d0 <= ap_phi_mux_encode_2_phi_fu_132_p6(8 - 1 downto 0);

    encode_array_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            encode_array_we0 <= ap_const_logic_1;
        else 
            encode_array_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_13_fu_151_p2 <= std_logic_vector(unsigned(i_reg_97) + unsigned(ap_const_lv31_1));
    i_cast_fu_142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_97),32));
    search_0_ax_address0 <= tmp_s_fu_157_p1(5 - 1 downto 0);

    search_0_ax_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            search_0_ax_ce0 <= ap_const_logic_1;
        else 
            search_0_ax_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    search_0_po_address0 <= tmp_s_reg_194(5 - 1 downto 0);

    search_0_po_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            search_0_po_ce0 <= ap_const_logic_1;
        else 
            search_0_po_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_146_p2 <= "1" when (signed(i_cast_fu_142_p1) < signed(length_r)) else "0";
    tmp_s_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_97),64));
end behav;
