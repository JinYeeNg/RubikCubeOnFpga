-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity getPruning_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_table_r_AWVALID : OUT STD_LOGIC;
    m_axi_table_r_AWREADY : IN STD_LOGIC;
    m_axi_table_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_table_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_table_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_table_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_table_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_table_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_table_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_table_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_table_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_table_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_table_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_table_r_WVALID : OUT STD_LOGIC;
    m_axi_table_r_WREADY : IN STD_LOGIC;
    m_axi_table_r_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_table_r_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_table_r_WLAST : OUT STD_LOGIC;
    m_axi_table_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_table_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_table_r_ARVALID : OUT STD_LOGIC;
    m_axi_table_r_ARREADY : IN STD_LOGIC;
    m_axi_table_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_table_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_table_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_table_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_table_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_table_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_table_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_table_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_table_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_table_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_table_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_table_r_RVALID : IN STD_LOGIC;
    m_axi_table_r_RREADY : OUT STD_LOGIC;
    m_axi_table_r_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_table_r_RLAST : IN STD_LOGIC;
    m_axi_table_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_table_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_table_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_table_r_BVALID : IN STD_LOGIC;
    m_axi_table_r_BREADY : OUT STD_LOGIC;
    m_axi_table_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_table_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_table_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    table_offset : IN STD_LOGIC_VECTOR (30 downto 0);
    index : IN STD_LOGIC_VECTOR (24 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of getPruning_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal table_r_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal table_r_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_316_fu_78_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_316_reg_221 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_318_fu_164_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_318_reg_226 : STD_LOGIC_VECTOR (0 downto 0);
    signal table_addr_reg_231 : STD_LOGIC_VECTOR (31 downto 0);
    signal table_addr_read_reg_237 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_fu_172_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_table_r_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_table_r_ARREADY : STD_LOGIC;
    signal p_neg_fu_90_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_28_fu_96_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_29_fu_106_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_lshr_fu_110_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_120_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_32_fu_130_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_317_fu_82_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t_fu_114_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_f_fu_134_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_138_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_146_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_300_fu_156_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_295_fu_160_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_fu_168_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_319_fu_184_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_301_fu_191_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal table_load5_fu_195_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_302_fu_200_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_320_fu_210_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_table_r_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_table_r_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    if ((ap_sig_ioackin_m_axi_table_r_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_table_r_ARREADY <= ap_const_logic_0;
                    elsif ((m_axi_table_r_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_table_r_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_table_r_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                table_addr_read_reg_237 <= m_axi_table_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                table_addr_reg_231 <= sum_fu_172_p2(32 - 1 downto 0);
                tmp_316_reg_221 <= tmp_316_fu_78_p1;
                tmp_318_reg_226 <= tmp_318_fu_164_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_table_r_RVALID, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_sig_ioackin_m_axi_table_r_ARREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_sig_ioackin_m_axi_table_r_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((m_axi_table_r_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        tmp_302_fu_200_p4 when (tmp_316_reg_221(0) = '1') else 
        tmp_320_fu_210_p1;

    ap_sig_ioackin_m_axi_table_r_ARREADY_assign_proc : process(m_axi_table_r_ARREADY, ap_reg_ioackin_m_axi_table_r_ARREADY)
    begin
        if ((ap_reg_ioackin_m_axi_table_r_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_table_r_ARREADY <= m_axi_table_r_ARREADY;
        else 
            ap_sig_ioackin_m_axi_table_r_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    m_axi_table_r_ARADDR <= table_addr_reg_231;
    m_axi_table_r_ARBURST <= ap_const_lv2_0;
    m_axi_table_r_ARCACHE <= ap_const_lv4_0;
    m_axi_table_r_ARID <= ap_const_lv1_0;
    m_axi_table_r_ARLEN <= ap_const_lv32_1;
    m_axi_table_r_ARLOCK <= ap_const_lv2_0;
    m_axi_table_r_ARPROT <= ap_const_lv3_0;
    m_axi_table_r_ARQOS <= ap_const_lv4_0;
    m_axi_table_r_ARREGION <= ap_const_lv4_0;
    m_axi_table_r_ARSIZE <= ap_const_lv3_0;
    m_axi_table_r_ARUSER <= ap_const_lv1_0;

    m_axi_table_r_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_reg_ioackin_m_axi_table_r_ARREADY)
    begin
        if (((ap_reg_ioackin_m_axi_table_r_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_table_r_ARVALID <= ap_const_logic_1;
        else 
            m_axi_table_r_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_table_r_AWADDR <= ap_const_lv32_0;
    m_axi_table_r_AWBURST <= ap_const_lv2_0;
    m_axi_table_r_AWCACHE <= ap_const_lv4_0;
    m_axi_table_r_AWID <= ap_const_lv1_0;
    m_axi_table_r_AWLEN <= ap_const_lv32_0;
    m_axi_table_r_AWLOCK <= ap_const_lv2_0;
    m_axi_table_r_AWPROT <= ap_const_lv3_0;
    m_axi_table_r_AWQOS <= ap_const_lv4_0;
    m_axi_table_r_AWREGION <= ap_const_lv4_0;
    m_axi_table_r_AWSIZE <= ap_const_lv3_0;
    m_axi_table_r_AWUSER <= ap_const_lv1_0;
    m_axi_table_r_AWVALID <= ap_const_logic_0;
    m_axi_table_r_BREADY <= ap_const_logic_0;

    m_axi_table_r_RREADY_assign_proc : process(m_axi_table_r_RVALID, ap_CS_fsm_state9)
    begin
        if (((m_axi_table_r_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_table_r_RREADY <= ap_const_logic_1;
        else 
            m_axi_table_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_table_r_WDATA <= ap_const_lv16_0;
    m_axi_table_r_WID <= ap_const_lv1_0;
    m_axi_table_r_WLAST <= ap_const_logic_0;
    m_axi_table_r_WSTRB <= ap_const_lv2_0;
    m_axi_table_r_WUSER <= ap_const_lv1_0;
    m_axi_table_r_WVALID <= ap_const_logic_0;
    p_lshr_f_fu_134_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_fu_130_p1),32));
    p_lshr_fu_110_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_fu_106_p1),32));
    p_neg_fu_90_p2 <= std_logic_vector(unsigned(ap_const_lv25_0) - unsigned(index));
    p_neg_t_fu_114_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_lshr_fu_110_p1));
    sext_fu_168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(table_offset),64));
    sum_fu_172_p2 <= std_logic_vector(unsigned(tmp_295_fu_160_p1) + unsigned(sext_fu_168_p1));
    table_load5_fu_195_p2 <= std_logic_vector(shift_right(unsigned(table_addr_read_reg_237),to_integer(unsigned('0' & tmp_301_fu_191_p1(16-1 downto 0)))));

    table_r_blk_n_AR_assign_proc : process(m_axi_table_r_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            table_r_blk_n_AR <= m_axi_table_r_ARREADY;
        else 
            table_r_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    table_r_blk_n_R_assign_proc : process(m_axi_table_r_RVALID, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            table_r_blk_n_R <= m_axi_table_r_RVALID;
        else 
            table_r_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    tmp_28_fu_96_p4 <= p_neg_fu_90_p2(24 downto 1);
    tmp_295_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_300_fu_156_p1),64));
        tmp_29_fu_106_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_28_fu_96_p4),31));

        tmp_300_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_146_p4),63));

    tmp_301_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_319_fu_184_p3),16));
    tmp_302_fu_200_p4 <= table_load5_fu_195_p2(7 downto 4);
    tmp_316_fu_78_p1 <= index(1 - 1 downto 0);
    tmp_317_fu_82_p3 <= index(24 downto 24);
    tmp_318_fu_164_p1 <= tmp_s_fu_138_p3(1 - 1 downto 0);
    tmp_319_fu_184_p3 <= (tmp_318_reg_226 & ap_const_lv3_0);
    tmp_31_fu_120_p4 <= index(24 downto 1);
    tmp_320_fu_210_p1 <= table_load5_fu_195_p2(4 - 1 downto 0);
        tmp_32_fu_130_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_31_fu_120_p4),31));

    tmp_fu_146_p4 <= tmp_s_fu_138_p3(31 downto 1);
    tmp_s_fu_138_p3 <= 
        p_neg_t_fu_114_p2 when (tmp_317_fu_82_p3(0) = '1') else 
        p_lshr_f_fu_134_p1;
end behav;
