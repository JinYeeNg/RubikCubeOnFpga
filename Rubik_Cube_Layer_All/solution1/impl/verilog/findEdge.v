// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module findEdge (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        fEC_V,
        sEC_V,
        cubieColor_V_address0,
        cubieColor_V_ce0,
        cubieColor_V_q0,
        cubieColor_V_address1,
        cubieColor_V_ce1,
        cubieColor_V_q1,
        ap_return
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [2:0] fEC_V;
input  [2:0] sEC_V;
output  [5:0] cubieColor_V_address0;
output   cubieColor_V_ce0;
input  [2:0] cubieColor_V_q0;
output  [5:0] cubieColor_V_address1;
output   cubieColor_V_ce1;
input  [2:0] cubieColor_V_q1;
output  [3:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] cubieColor_V_address0;
reg cubieColor_V_ce0;
reg[5:0] cubieColor_V_address1;
reg cubieColor_V_ce1;
reg[3:0] ap_return;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] cubieColor_V_load_reg_502;
wire    ap_CS_fsm_state2;
reg   [2:0] cubieColor_V_load_85_reg_508;
wire    ap_CS_fsm_state3;
wire   [1:0] newSel4_fu_207_p3;
reg   [1:0] newSel4_reg_526;
wire   [0:0] grp_fu_123_p2;
reg   [0:0] tmp_91_reg_531;
wire    ap_CS_fsm_state4;
wire   [0:0] grp_fu_129_p2;
reg   [0:0] tmp_92_reg_536;
wire   [0:0] grp_fu_135_p2;
reg   [0:0] tmp_93_reg_541;
wire   [0:0] grp_fu_141_p2;
reg   [0:0] tmp_94_reg_546;
wire   [2:0] newSel7_fu_264_p3;
reg   [2:0] newSel7_reg_551;
wire    ap_CS_fsm_state5;
reg   [0:0] tmp_99_reg_556;
wire    ap_CS_fsm_state6;
reg   [0:0] tmp_100_reg_561;
reg   [0:0] tmp_101_reg_566;
reg   [0:0] tmp_102_reg_571;
wire   [0:0] sel_tmp1_fu_284_p2;
reg   [0:0] sel_tmp1_reg_576;
wire    ap_CS_fsm_state7;
reg   [0:0] tmp_107_reg_582;
wire    ap_CS_fsm_state8;
reg   [0:0] tmp_108_reg_587;
reg   [0:0] tmp_109_reg_592;
reg   [0:0] tmp_110_reg_597;
wire   [0:0] sel_tmp5_fu_330_p2;
reg   [0:0] sel_tmp5_reg_602;
wire    ap_CS_fsm_state9;
wire   [0:0] or_cond2_fu_336_p2;
reg   [0:0] or_cond2_reg_607;
wire   [0:0] or_cond6_fu_347_p2;
reg   [0:0] or_cond6_reg_612;
reg   [0:0] tmp_115_reg_617;
wire    ap_CS_fsm_state10;
reg   [0:0] tmp_116_reg_622;
reg   [0:0] tmp_117_reg_627;
reg   [0:0] tmp_118_reg_632;
wire   [0:0] sel_tmp9_fu_365_p2;
reg   [0:0] sel_tmp9_reg_637;
wire    ap_CS_fsm_state11;
reg   [0:0] tmp_123_reg_643;
wire    ap_CS_fsm_state12;
reg   [0:0] tmp_124_reg_648;
reg   [0:0] tmp_125_reg_653;
reg   [0:0] tmp_126_reg_658;
wire    ap_CS_fsm_state13;
wire   [0:0] tmp_fu_147_p2;
wire   [0:0] tmp_s_fu_152_p2;
wire   [0:0] tmp_85_fu_163_p2;
wire   [0:0] tmp_86_fu_168_p2;
wire   [0:0] or_cond_11_fu_157_p2;
wire   [0:0] or_cond2_12_fu_173_p2;
wire   [0:0] sel_tmp_fu_179_p2;
wire   [0:0] or_cond3_13_fu_189_p2;
wire   [0:0] or_cond4_14_fu_195_p2;
wire   [0:0] sel_tmp2_fu_201_p2;
wire   [1:0] agg_result_V_cast_fu_185_p1;
wire   [0:0] or_cond5_15_fu_215_p2;
wire   [0:0] or_cond6_16_fu_219_p2;
wire   [0:0] or_cond7_17_fu_229_p2;
wire   [0:0] or_cond8_fu_235_p2;
wire   [0:0] sel_tmp6_fu_241_p2;
wire   [0:0] sel_tmp4_fu_223_p2;
wire   [0:0] or_cond4_fu_255_p2;
wire   [2:0] newSel3_fu_247_p3;
wire   [2:0] newSel32_cast_fu_261_p1;
wire   [0:0] or_cond10_fu_272_p2;
wire   [0:0] or_cond11_fu_278_p2;
wire   [0:0] or_cond9_fu_290_p2;
wire   [0:0] or_cond1_18_fu_294_p2;
wire   [0:0] or_cond12_fu_304_p2;
wire   [0:0] or_cond13_fu_308_p2;
wire   [0:0] or_cond14_fu_318_p2;
wire   [0:0] or_cond15_fu_324_p2;
wire   [0:0] sel_tmp3_fu_312_p2;
wire   [0:0] sel_tmp8_fu_298_p2;
wire   [0:0] or_cond3_fu_342_p2;
wire   [0:0] or_cond18_fu_353_p2;
wire   [0:0] or_cond19_fu_359_p2;
wire   [0:0] or_cond16_fu_371_p2;
wire   [0:0] or_cond17_fu_375_p2;
wire   [0:0] or_cond20_fu_385_p2;
wire   [0:0] or_cond21_fu_389_p2;
wire   [0:0] or_cond22_fu_399_p2;
wire   [0:0] or_cond23_fu_405_p2;
wire   [0:0] sel_tmp11_fu_411_p2;
wire   [0:0] sel_tmp10_fu_393_p2;
wire   [0:0] sel_tmp7_fu_379_p2;
wire   [0:0] or_cond_fu_425_p2;
wire   [3:0] newSel_fu_417_p3;
wire   [3:0] newSel1_fu_431_p3;
wire   [0:0] or_cond1_fu_438_p2;
wire   [3:0] newSel2_fu_443_p3;
wire   [3:0] newSel28_cast_cast_fu_450_p3;
wire   [0:0] or_cond5_fu_465_p2;
wire   [3:0] newSel5_fu_457_p3;
wire   [3:0] newSel6_fu_471_p3;
wire   [0:0] or_cond7_fu_489_p2;
wire   [3:0] newSel8_fu_481_p3;
wire   [3:0] newSel38_cast_fu_478_p1;
wire   [3:0] newSel9_fu_494_p3;
reg   [3:0] ap_return_preg;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 ap_return_preg = 4'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 4'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_return_preg <= newSel9_fu_494_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cubieColor_V_load_85_reg_508 <= cubieColor_V_q1;
        cubieColor_V_load_reg_502 <= cubieColor_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        newSel4_reg_526 <= newSel4_fu_207_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        newSel7_reg_551 <= newSel7_fu_264_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        or_cond2_reg_607 <= or_cond2_fu_336_p2;
        or_cond6_reg_612 <= or_cond6_fu_347_p2;
        sel_tmp5_reg_602 <= sel_tmp5_fu_330_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sel_tmp1_reg_576 <= sel_tmp1_fu_284_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        sel_tmp9_reg_637 <= sel_tmp9_fu_365_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_100_reg_561 <= grp_fu_129_p2;
        tmp_101_reg_566 <= grp_fu_135_p2;
        tmp_102_reg_571 <= grp_fu_141_p2;
        tmp_99_reg_556 <= grp_fu_123_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_107_reg_582 <= grp_fu_123_p2;
        tmp_108_reg_587 <= grp_fu_129_p2;
        tmp_109_reg_592 <= grp_fu_135_p2;
        tmp_110_reg_597 <= grp_fu_141_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_115_reg_617 <= grp_fu_123_p2;
        tmp_116_reg_622 <= grp_fu_129_p2;
        tmp_117_reg_627 <= grp_fu_135_p2;
        tmp_118_reg_632 <= grp_fu_141_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_123_reg_643 <= grp_fu_123_p2;
        tmp_124_reg_648 <= grp_fu_129_p2;
        tmp_125_reg_653 <= grp_fu_135_p2;
        tmp_126_reg_658 <= grp_fu_141_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_91_reg_531 <= grp_fu_123_p2;
        tmp_92_reg_536 <= grp_fu_129_p2;
        tmp_93_reg_541 <= grp_fu_135_p2;
        tmp_94_reg_546 <= grp_fu_141_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_return = newSel9_fu_494_p3;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        cubieColor_V_address0 = 6'd14;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cubieColor_V_address0 = 6'd16;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        cubieColor_V_address0 = 6'd12;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        cubieColor_V_address0 = 6'd10;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        cubieColor_V_address0 = 6'd32;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        cubieColor_V_address0 = 6'd50;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        cubieColor_V_address0 = 6'd39;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        cubieColor_V_address0 = 6'd30;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        cubieColor_V_address0 = 6'd5;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cubieColor_V_address0 = 6'd1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        cubieColor_V_address0 = 6'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        cubieColor_V_address0 = 6'd7;
    end else begin
        cubieColor_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        cubieColor_V_address1 = 6'd52;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cubieColor_V_address1 = 6'd25;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        cubieColor_V_address1 = 6'd43;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        cubieColor_V_address1 = 6'd34;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        cubieColor_V_address1 = 6'd48;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        cubieColor_V_address1 = 6'd21;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        cubieColor_V_address1 = 6'd23;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        cubieColor_V_address1 = 6'd41;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        cubieColor_V_address1 = 6'd46;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cubieColor_V_address1 = 6'd19;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        cubieColor_V_address1 = 6'd37;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        cubieColor_V_address1 = 6'd28;
    end else begin
        cubieColor_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        cubieColor_V_ce0 = 1'b1;
    end else begin
        cubieColor_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        cubieColor_V_ce1 = 1'b1;
    end else begin
        cubieColor_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_V_cast_fu_185_p1 = sel_tmp_fu_179_p2;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_fu_123_p2 = ((cubieColor_V_q0 == fEC_V) ? 1'b1 : 1'b0);

assign grp_fu_129_p2 = ((cubieColor_V_q1 == sEC_V) ? 1'b1 : 1'b0);

assign grp_fu_135_p2 = ((cubieColor_V_q0 == sEC_V) ? 1'b1 : 1'b0);

assign grp_fu_141_p2 = ((cubieColor_V_q1 == fEC_V) ? 1'b1 : 1'b0);

assign newSel1_fu_431_p3 = ((sel_tmp9_reg_637[0:0] === 1'b1) ? 4'd10 : 4'd9);

assign newSel28_cast_cast_fu_450_p3 = ((sel_tmp1_reg_576[0:0] === 1'b1) ? 4'd6 : 4'd5);

assign newSel2_fu_443_p3 = ((sel_tmp5_reg_602[0:0] === 1'b1) ? 4'd8 : 4'd7);

assign newSel32_cast_fu_261_p1 = newSel4_reg_526;

assign newSel38_cast_fu_478_p1 = newSel7_reg_551;

assign newSel3_fu_247_p3 = ((sel_tmp6_fu_241_p2[0:0] === 1'b1) ? 3'd4 : 3'd3);

assign newSel4_fu_207_p3 = ((sel_tmp2_fu_201_p2[0:0] === 1'b1) ? 2'd2 : agg_result_V_cast_fu_185_p1);

assign newSel5_fu_457_p3 = ((or_cond_fu_425_p2[0:0] === 1'b1) ? newSel_fu_417_p3 : newSel1_fu_431_p3);

assign newSel6_fu_471_p3 = ((or_cond2_reg_607[0:0] === 1'b1) ? newSel2_fu_443_p3 : newSel28_cast_cast_fu_450_p3);

assign newSel7_fu_264_p3 = ((or_cond4_fu_255_p2[0:0] === 1'b1) ? newSel3_fu_247_p3 : newSel32_cast_fu_261_p1);

assign newSel8_fu_481_p3 = ((or_cond5_fu_465_p2[0:0] === 1'b1) ? newSel5_fu_457_p3 : newSel6_fu_471_p3);

assign newSel9_fu_494_p3 = ((or_cond7_fu_489_p2[0:0] === 1'b1) ? newSel8_fu_481_p3 : newSel38_cast_fu_478_p1);

assign newSel_fu_417_p3 = ((sel_tmp11_fu_411_p2[0:0] === 1'b1) ? 4'd12 : 4'd11);

assign or_cond10_fu_272_p2 = (grp_fu_129_p2 & grp_fu_123_p2);

assign or_cond11_fu_278_p2 = (grp_fu_141_p2 & grp_fu_135_p2);

assign or_cond12_fu_304_p2 = (tmp_108_reg_587 & tmp_107_reg_582);

assign or_cond13_fu_308_p2 = (tmp_110_reg_597 & tmp_109_reg_592);

assign or_cond14_fu_318_p2 = (grp_fu_129_p2 & grp_fu_123_p2);

assign or_cond15_fu_324_p2 = (grp_fu_141_p2 & grp_fu_135_p2);

assign or_cond16_fu_371_p2 = (tmp_116_reg_622 & tmp_115_reg_617);

assign or_cond17_fu_375_p2 = (tmp_118_reg_632 & tmp_117_reg_627);

assign or_cond18_fu_353_p2 = (grp_fu_129_p2 & grp_fu_123_p2);

assign or_cond19_fu_359_p2 = (grp_fu_141_p2 & grp_fu_135_p2);

assign or_cond1_18_fu_294_p2 = (tmp_102_reg_571 & tmp_101_reg_566);

assign or_cond1_fu_438_p2 = (sel_tmp9_reg_637 | sel_tmp7_fu_379_p2);

assign or_cond20_fu_385_p2 = (tmp_124_reg_648 & tmp_123_reg_643);

assign or_cond21_fu_389_p2 = (tmp_126_reg_658 & tmp_125_reg_653);

assign or_cond22_fu_399_p2 = (grp_fu_129_p2 & grp_fu_123_p2);

assign or_cond23_fu_405_p2 = (grp_fu_141_p2 & grp_fu_135_p2);

assign or_cond2_12_fu_173_p2 = (tmp_86_fu_168_p2 & tmp_85_fu_163_p2);

assign or_cond2_fu_336_p2 = (sel_tmp5_fu_330_p2 | sel_tmp3_fu_312_p2);

assign or_cond3_13_fu_189_p2 = (grp_fu_129_p2 & grp_fu_123_p2);

assign or_cond3_fu_342_p2 = (sel_tmp8_fu_298_p2 | sel_tmp1_reg_576);

assign or_cond4_14_fu_195_p2 = (grp_fu_141_p2 & grp_fu_135_p2);

assign or_cond4_fu_255_p2 = (sel_tmp6_fu_241_p2 | sel_tmp4_fu_223_p2);

assign or_cond5_15_fu_215_p2 = (tmp_92_reg_536 & tmp_91_reg_531);

assign or_cond5_fu_465_p2 = (or_cond_fu_425_p2 | or_cond1_fu_438_p2);

assign or_cond6_16_fu_219_p2 = (tmp_94_reg_546 & tmp_93_reg_541);

assign or_cond6_fu_347_p2 = (or_cond3_fu_342_p2 | or_cond2_fu_336_p2);

assign or_cond7_17_fu_229_p2 = (grp_fu_129_p2 & grp_fu_123_p2);

assign or_cond7_fu_489_p2 = (or_cond6_reg_612 | or_cond5_fu_465_p2);

assign or_cond8_fu_235_p2 = (grp_fu_141_p2 & grp_fu_135_p2);

assign or_cond9_fu_290_p2 = (tmp_99_reg_556 & tmp_100_reg_561);

assign or_cond_11_fu_157_p2 = (tmp_s_fu_152_p2 & tmp_fu_147_p2);

assign or_cond_fu_425_p2 = (sel_tmp11_fu_411_p2 | sel_tmp10_fu_393_p2);

assign sel_tmp10_fu_393_p2 = (or_cond21_fu_389_p2 | or_cond20_fu_385_p2);

assign sel_tmp11_fu_411_p2 = (or_cond23_fu_405_p2 | or_cond22_fu_399_p2);

assign sel_tmp1_fu_284_p2 = (or_cond11_fu_278_p2 | or_cond10_fu_272_p2);

assign sel_tmp2_fu_201_p2 = (or_cond4_14_fu_195_p2 | or_cond3_13_fu_189_p2);

assign sel_tmp3_fu_312_p2 = (or_cond13_fu_308_p2 | or_cond12_fu_304_p2);

assign sel_tmp4_fu_223_p2 = (or_cond6_16_fu_219_p2 | or_cond5_15_fu_215_p2);

assign sel_tmp5_fu_330_p2 = (or_cond15_fu_324_p2 | or_cond14_fu_318_p2);

assign sel_tmp6_fu_241_p2 = (or_cond8_fu_235_p2 | or_cond7_17_fu_229_p2);

assign sel_tmp7_fu_379_p2 = (or_cond17_fu_375_p2 | or_cond16_fu_371_p2);

assign sel_tmp8_fu_298_p2 = (or_cond9_fu_290_p2 | or_cond1_18_fu_294_p2);

assign sel_tmp9_fu_365_p2 = (or_cond19_fu_359_p2 | or_cond18_fu_353_p2);

assign sel_tmp_fu_179_p2 = (or_cond_11_fu_157_p2 | or_cond2_12_fu_173_p2);

assign tmp_85_fu_163_p2 = ((cubieColor_V_load_reg_502 == sEC_V) ? 1'b1 : 1'b0);

assign tmp_86_fu_168_p2 = ((cubieColor_V_load_85_reg_508 == fEC_V) ? 1'b1 : 1'b0);

assign tmp_fu_147_p2 = ((cubieColor_V_load_reg_502 == fEC_V) ? 1'b1 : 1'b0);

assign tmp_s_fu_152_p2 = ((cubieColor_V_load_85_reg_508 == sEC_V) ? 1'b1 : 1'b0);

endmodule //findEdge
