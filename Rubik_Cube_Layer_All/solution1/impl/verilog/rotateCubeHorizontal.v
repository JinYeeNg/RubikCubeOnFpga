// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rotateCubeHorizontal (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        moveCounter_V_i,
        moveCounter_V_o,
        moveCounter_V_o_ap_vld,
        moves_V_address0,
        moves_V_ce0,
        moves_V_we0,
        moves_V_d0,
        cubieColor_V_address0,
        cubieColor_V_ce0,
        cubieColor_V_we0,
        cubieColor_V_d0,
        cubieColor_V_q0,
        cubieColor_V_address1,
        cubieColor_V_ce1,
        cubieColor_V_we1,
        cubieColor_V_d1
);

parameter    ap_ST_fsm_state1 = 31'd1;
parameter    ap_ST_fsm_state2 = 31'd2;
parameter    ap_ST_fsm_state3 = 31'd4;
parameter    ap_ST_fsm_state4 = 31'd8;
parameter    ap_ST_fsm_state5 = 31'd16;
parameter    ap_ST_fsm_state6 = 31'd32;
parameter    ap_ST_fsm_state7 = 31'd64;
parameter    ap_ST_fsm_state8 = 31'd128;
parameter    ap_ST_fsm_state9 = 31'd256;
parameter    ap_ST_fsm_state10 = 31'd512;
parameter    ap_ST_fsm_state11 = 31'd1024;
parameter    ap_ST_fsm_state12 = 31'd2048;
parameter    ap_ST_fsm_state13 = 31'd4096;
parameter    ap_ST_fsm_state14 = 31'd8192;
parameter    ap_ST_fsm_state15 = 31'd16384;
parameter    ap_ST_fsm_state16 = 31'd32768;
parameter    ap_ST_fsm_state17 = 31'd65536;
parameter    ap_ST_fsm_state18 = 31'd131072;
parameter    ap_ST_fsm_state19 = 31'd262144;
parameter    ap_ST_fsm_state20 = 31'd524288;
parameter    ap_ST_fsm_state21 = 31'd1048576;
parameter    ap_ST_fsm_state22 = 31'd2097152;
parameter    ap_ST_fsm_state23 = 31'd4194304;
parameter    ap_ST_fsm_state24 = 31'd8388608;
parameter    ap_ST_fsm_state25 = 31'd16777216;
parameter    ap_ST_fsm_state26 = 31'd33554432;
parameter    ap_ST_fsm_state27 = 31'd67108864;
parameter    ap_ST_fsm_state28 = 31'd134217728;
parameter    ap_ST_fsm_state29 = 31'd268435456;
parameter    ap_ST_fsm_state30 = 31'd536870912;
parameter    ap_ST_fsm_state31 = 31'd1073741824;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] moveCounter_V_i;
output  [7:0] moveCounter_V_o;
output   moveCounter_V_o_ap_vld;
output  [7:0] moves_V_address0;
output   moves_V_ce0;
output   moves_V_we0;
output  [3:0] moves_V_d0;
output  [5:0] cubieColor_V_address0;
output   cubieColor_V_ce0;
output   cubieColor_V_we0;
output  [2:0] cubieColor_V_d0;
input  [2:0] cubieColor_V_q0;
output  [5:0] cubieColor_V_address1;
output   cubieColor_V_ce1;
output   cubieColor_V_we1;
output  [2:0] cubieColor_V_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] moveCounter_V_o;
reg moveCounter_V_o_ap_vld;
reg moves_V_ce0;
reg moves_V_we0;
reg[5:0] cubieColor_V_address0;
reg cubieColor_V_ce0;
reg cubieColor_V_we0;
reg[5:0] cubieColor_V_address1;
reg cubieColor_V_ce1;
reg cubieColor_V_we1;

(* fsm_encoding = "none" *) reg   [30:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] i_V_fu_851_p2;
reg   [2:0] i_V_reg_1178;
wire    ap_CS_fsm_state2;
wire   [6:0] tmp_12_fu_873_p2;
reg   [6:0] tmp_12_reg_1183;
wire   [0:0] tmp_64_fu_845_p2;
wire   [3:0] j_V_fu_885_p2;
reg   [3:0] j_V_reg_1191;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_13_cast_fu_900_p1;
reg   [63:0] tmp_13_cast_reg_1196;
wire   [0:0] tmp_65_fu_879_p2;
reg   [5:0] cubieTemp_V_address0;
reg    cubieTemp_V_ce0;
reg    cubieTemp_V_we0;
wire   [2:0] cubieTemp_V_q0;
reg   [5:0] cubieTemp_V_address1;
reg    cubieTemp_V_ce1;
wire   [2:0] cubieTemp_V_q1;
reg   [2:0] p_s_reg_792;
reg   [3:0] p_4_reg_803;
wire    ap_CS_fsm_state4;
wire  signed [63:0] tmp_s_fu_840_p1;
wire   [7:0] moveCounter_V_assign_fu_818_p2;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire   [8:0] lhs_V_cast_fu_830_p1;
wire   [8:0] r_V_fu_834_p2;
wire   [5:0] tmp_11_fu_861_p3;
wire   [6:0] tmp_69_cast_fu_857_p1;
wire   [6:0] p_shl_cast_fu_869_p1;
wire   [6:0] tmp_71_cast_fu_891_p1;
wire   [6:0] tmp_13_fu_895_p2;
reg   [30:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 31'd1;
end

turnCube_cubieTembkb #(
    .DataWidth( 3 ),
    .AddressRange( 54 ),
    .AddressWidth( 6 ))
cubieTemp_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cubieTemp_V_address0),
    .ce0(cubieTemp_V_ce0),
    .we0(cubieTemp_V_we0),
    .d0(cubieColor_V_q0),
    .q0(cubieTemp_V_q0),
    .address1(cubieTemp_V_address1),
    .ce1(cubieTemp_V_ce1),
    .q1(cubieTemp_V_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_4_reg_803 <= j_V_reg_1191;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_64_fu_845_p2 == 1'd0))) begin
        p_4_reg_803 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_s_reg_792 <= 3'd0;
    end else if (((tmp_65_fu_879_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        p_s_reg_792 <= i_V_reg_1178;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_reg_1178 <= i_V_fu_851_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_V_reg_1191 <= j_V_fu_885_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_64_fu_845_p2 == 1'd0))) begin
        tmp_12_reg_1183 <= tmp_12_fu_873_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_65_fu_879_p2 == 1'd0))) begin
        tmp_13_cast_reg_1196[6 : 0] <= tmp_13_cast_fu_900_p1[6 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        cubieColor_V_address0 = 6'd53;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        cubieColor_V_address0 = 6'd51;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        cubieColor_V_address0 = 6'd49;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        cubieColor_V_address0 = 6'd47;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        cubieColor_V_address0 = 6'd45;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        cubieColor_V_address0 = 6'd43;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        cubieColor_V_address0 = 6'd41;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        cubieColor_V_address0 = 6'd39;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        cubieColor_V_address0 = 6'd37;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        cubieColor_V_address0 = 6'd35;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        cubieColor_V_address0 = 6'd33;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        cubieColor_V_address0 = 6'd31;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        cubieColor_V_address0 = 6'd29;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        cubieColor_V_address0 = 6'd27;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        cubieColor_V_address0 = 6'd25;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        cubieColor_V_address0 = 6'd23;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        cubieColor_V_address0 = 6'd21;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        cubieColor_V_address0 = 6'd19;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        cubieColor_V_address0 = 6'd17;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        cubieColor_V_address0 = 6'd15;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cubieColor_V_address0 = 6'd13;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        cubieColor_V_address0 = 6'd11;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        cubieColor_V_address0 = 6'd9;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        cubieColor_V_address0 = 6'd7;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        cubieColor_V_address0 = 6'd5;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        cubieColor_V_address0 = 6'd3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        cubieColor_V_address0 = 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cubieColor_V_address0 = tmp_13_cast_fu_900_p1;
    end else begin
        cubieColor_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        cubieColor_V_address1 = 6'd52;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        cubieColor_V_address1 = 6'd50;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        cubieColor_V_address1 = 6'd48;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        cubieColor_V_address1 = 6'd46;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        cubieColor_V_address1 = 6'd44;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        cubieColor_V_address1 = 6'd42;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        cubieColor_V_address1 = 6'd40;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        cubieColor_V_address1 = 6'd38;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        cubieColor_V_address1 = 6'd36;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        cubieColor_V_address1 = 6'd34;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        cubieColor_V_address1 = 6'd32;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        cubieColor_V_address1 = 6'd30;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        cubieColor_V_address1 = 6'd28;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        cubieColor_V_address1 = 6'd26;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        cubieColor_V_address1 = 6'd24;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        cubieColor_V_address1 = 6'd22;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        cubieColor_V_address1 = 6'd20;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        cubieColor_V_address1 = 6'd18;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        cubieColor_V_address1 = 6'd16;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        cubieColor_V_address1 = 6'd14;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cubieColor_V_address1 = 6'd12;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        cubieColor_V_address1 = 6'd10;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        cubieColor_V_address1 = 6'd8;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        cubieColor_V_address1 = 6'd6;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        cubieColor_V_address1 = 6'd4;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        cubieColor_V_address1 = 6'd2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        cubieColor_V_address1 = 6'd1;
    end else begin
        cubieColor_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3))) begin
        cubieColor_V_ce0 = 1'b1;
    end else begin
        cubieColor_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        cubieColor_V_ce1 = 1'b1;
    end else begin
        cubieColor_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        cubieColor_V_we0 = 1'b1;
    end else begin
        cubieColor_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        cubieColor_V_we1 = 1'b1;
    end else begin
        cubieColor_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        cubieTemp_V_address0 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        cubieTemp_V_address0 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        cubieTemp_V_address0 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        cubieTemp_V_address0 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        cubieTemp_V_address0 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        cubieTemp_V_address0 = 64'd34;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        cubieTemp_V_address0 = 64'd32;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        cubieTemp_V_address0 = 64'd30;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        cubieTemp_V_address0 = 64'd28;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        cubieTemp_V_address0 = 64'd53;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        cubieTemp_V_address0 = 64'd51;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        cubieTemp_V_address0 = 64'd49;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        cubieTemp_V_address0 = 64'd47;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        cubieTemp_V_address0 = 64'd45;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        cubieTemp_V_address0 = 64'd43;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        cubieTemp_V_address0 = 64'd41;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        cubieTemp_V_address0 = 64'd39;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        cubieTemp_V_address0 = 64'd37;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        cubieTemp_V_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cubieTemp_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        cubieTemp_V_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        cubieTemp_V_address0 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        cubieTemp_V_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        cubieTemp_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        cubieTemp_V_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        cubieTemp_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        cubieTemp_V_address0 = tmp_13_cast_reg_1196;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        cubieTemp_V_address0 = 64'd6;
    end else begin
        cubieTemp_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        cubieTemp_V_address1 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        cubieTemp_V_address1 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        cubieTemp_V_address1 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        cubieTemp_V_address1 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        cubieTemp_V_address1 = 64'd35;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        cubieTemp_V_address1 = 64'd33;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        cubieTemp_V_address1 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        cubieTemp_V_address1 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        cubieTemp_V_address1 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        cubieTemp_V_address1 = 64'd52;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        cubieTemp_V_address1 = 64'd50;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        cubieTemp_V_address1 = 64'd48;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        cubieTemp_V_address1 = 64'd46;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        cubieTemp_V_address1 = 64'd44;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        cubieTemp_V_address1 = 64'd42;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        cubieTemp_V_address1 = 64'd40;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        cubieTemp_V_address1 = 64'd38;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        cubieTemp_V_address1 = 64'd36;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        cubieTemp_V_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cubieTemp_V_address1 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        cubieTemp_V_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        cubieTemp_V_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        cubieTemp_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        cubieTemp_V_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        cubieTemp_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        cubieTemp_V_address1 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        cubieTemp_V_address1 = 64'd3;
    end else begin
        cubieTemp_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        cubieTemp_V_ce0 = 1'b1;
    end else begin
        cubieTemp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2))) begin
        cubieTemp_V_ce1 = 1'b1;
    end else begin
        cubieTemp_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cubieTemp_V_we0 = 1'b1;
    end else begin
        cubieTemp_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        moveCounter_V_o = moveCounter_V_assign_fu_818_p2;
    end else begin
        moveCounter_V_o = moveCounter_V_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        moveCounter_V_o_ap_vld = 1'b1;
    end else begin
        moveCounter_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        moves_V_ce0 = 1'b1;
    end else begin
        moves_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        moves_V_we0 = 1'b1;
    end else begin
        moves_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_64_fu_845_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_65_fu_879_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign cubieColor_V_d0 = cubieTemp_V_q0;

assign cubieColor_V_d1 = cubieTemp_V_q1;

assign i_V_fu_851_p2 = (p_s_reg_792 + 3'd1);

assign j_V_fu_885_p2 = (p_4_reg_803 + 4'd1);

assign lhs_V_cast_fu_830_p1 = moveCounter_V_assign_fu_818_p2;

assign moveCounter_V_assign_fu_818_p2 = (moveCounter_V_i + 8'd1);

assign moves_V_address0 = tmp_s_fu_840_p1;

assign moves_V_d0 = 4'd12;

assign p_shl_cast_fu_869_p1 = tmp_11_fu_861_p3;

assign r_V_fu_834_p2 = ($signed(lhs_V_cast_fu_830_p1) + $signed(9'd511));

assign tmp_11_fu_861_p3 = {{p_s_reg_792}, {3'd0}};

assign tmp_12_fu_873_p2 = (tmp_69_cast_fu_857_p1 + p_shl_cast_fu_869_p1);

assign tmp_13_cast_fu_900_p1 = tmp_13_fu_895_p2;

assign tmp_13_fu_895_p2 = (tmp_12_reg_1183 + tmp_71_cast_fu_891_p1);

assign tmp_64_fu_845_p2 = ((p_s_reg_792 == 3'd6) ? 1'b1 : 1'b0);

assign tmp_65_fu_879_p2 = ((p_4_reg_803 == 4'd9) ? 1'b1 : 1'b0);

assign tmp_69_cast_fu_857_p1 = p_s_reg_792;

assign tmp_71_cast_fu_891_p1 = p_4_reg_803;

assign tmp_s_fu_840_p1 = $signed(r_V_fu_834_p2);

always @ (posedge ap_clk) begin
    tmp_13_cast_reg_1196[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //rotateCubeHorizontal
