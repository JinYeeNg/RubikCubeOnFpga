// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module edgeCorrect (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        edge_V,
        cubieColor_V_address0,
        cubieColor_V_ce0,
        cubieColor_V_q0,
        cubieColor_V_address1,
        cubieColor_V_ce1,
        cubieColor_V_q1,
        ap_return
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [3:0] edge_V;
output  [5:0] cubieColor_V_address0;
output   cubieColor_V_ce0;
input  [2:0] cubieColor_V_q0;
output  [5:0] cubieColor_V_address1;
output   cubieColor_V_ce1;
input  [2:0] cubieColor_V_q1;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] cubieColor_V_address0;
reg cubieColor_V_ce0;
reg[5:0] cubieColor_V_address1;
reg cubieColor_V_ce1;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] reg_131;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state9;
wire   [0:0] grp_fu_100_p2;
reg   [0:0] tmp_s_reg_319;
wire    ap_CS_fsm_state3;
wire   [0:0] grp_fu_105_p2;
reg   [0:0] tmp_201_reg_324;
reg   [0:0] tmp_202_reg_329;
wire    ap_CS_fsm_state4;
reg   [0:0] tmp_203_reg_334;
wire   [0:0] grp_fu_110_p2;
reg   [0:0] tmp_204_reg_339;
reg   [2:0] cubieColor_V_load_137_reg_344;
wire    ap_CS_fsm_state6;
reg   [0:0] tmp_205_reg_349;
reg   [2:0] cubieColor_V_load_139_reg_354;
wire    ap_CS_fsm_state7;
reg   [0:0] tmp_206_reg_359;
wire   [0:0] tmp_207_fu_140_p2;
reg   [0:0] tmp_207_reg_364;
wire    ap_CS_fsm_state8;
reg   [0:0] tmp_208_reg_369;
wire   [0:0] grp_fu_116_p2;
reg   [0:0] tmp_209_reg_374;
wire    ap_CS_fsm_state10;
wire   [0:0] tmp32_fu_212_p2;
reg   [0:0] tmp32_reg_387;
wire   [0:0] tmp33_fu_218_p2;
reg   [0:0] tmp33_reg_392;
wire   [0:0] sel_tmp20_fu_262_p2;
reg   [0:0] sel_tmp20_reg_397;
wire    ap_CS_fsm_state11;
wire   [0:0] sel_tmp22_fu_267_p2;
reg   [0:0] sel_tmp22_reg_402;
wire   [0:0] tmp35_fu_272_p2;
reg   [0:0] tmp35_reg_407;
reg   [2:0] grp_fu_110_p0;
wire    ap_CS_fsm_state12;
wire   [0:0] tmp_fu_152_p2;
wire   [0:0] sel_tmp_fu_146_p2;
wire   [0:0] tmp25_fu_168_p2;
wire   [0:0] sel_tmp4_fu_162_p2;
wire   [0:0] grp_fu_121_p2;
wire   [0:0] tmp26_fu_184_p2;
wire   [0:0] sel_tmp8_fu_178_p2;
wire   [0:0] grp_fu_126_p2;
wire   [0:0] tmp27_fu_201_p2;
wire   [0:0] sel_tmp12_fu_195_p2;
wire   [0:0] sel_tmp6_fu_172_p2;
wire   [0:0] sel_tmp2_fu_156_p2;
wire   [0:0] sel_tmp10_fu_189_p2;
wire   [0:0] sel_tmp14_fu_206_p2;
wire   [0:0] tmp28_fu_235_p2;
wire   [0:0] sel_tmp16_fu_230_p2;
wire   [0:0] tmp_213_fu_224_p2;
wire   [0:0] tmp29_fu_251_p2;
wire   [0:0] sel_tmp18_fu_246_p2;
wire   [0:0] sel_tmp17_fu_240_p2;
wire   [0:0] sel_tmp19_fu_256_p2;
wire   [0:0] tmp30_fu_278_p2;
wire   [0:0] tmp31_fu_288_p2;
wire   [0:0] sel_tmp21_fu_283_p2;
wire   [0:0] sel_tmp23_fu_293_p2;
wire   [0:0] tmp36_fu_302_p2;
wire   [0:0] tmp37_fu_308_p2;
wire   [0:0] tmp34_fu_298_p2;
wire   [0:0] agg_result_V_fu_313_p2;
reg   [0:0] ap_return_preg;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 ap_return_preg = 1'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_return_preg <= agg_result_V_fu_313_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        reg_131 <= cubieColor_V_q1;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_131 <= cubieColor_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        cubieColor_V_load_137_reg_344 <= cubieColor_V_q1;
        tmp_205_reg_349 <= grp_fu_110_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        cubieColor_V_load_139_reg_354 <= cubieColor_V_q1;
        tmp_206_reg_359 <= grp_fu_110_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        sel_tmp20_reg_397 <= sel_tmp20_fu_262_p2;
        sel_tmp22_reg_402 <= sel_tmp22_fu_267_p2;
        tmp35_reg_407 <= tmp35_fu_272_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp32_reg_387 <= tmp32_fu_212_p2;
        tmp33_reg_392 <= tmp33_fu_218_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_201_reg_324 <= grp_fu_105_p2;
        tmp_s_reg_319 <= grp_fu_100_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_202_reg_329 <= grp_fu_105_p2;
        tmp_203_reg_334 <= grp_fu_100_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_204_reg_339 <= grp_fu_110_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_207_reg_364 <= tmp_207_fu_140_p2;
        tmp_208_reg_369 <= grp_fu_110_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_209_reg_374 <= grp_fu_116_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_return = agg_result_V_fu_313_p2;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        cubieColor_V_address0 = 6'd48;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        cubieColor_V_address0 = 6'd23;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        cubieColor_V_address0 = 6'd46;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        cubieColor_V_address0 = 6'd22;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        cubieColor_V_address0 = 6'd28;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        cubieColor_V_address0 = 6'd50;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        cubieColor_V_address0 = 6'd39;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        cubieColor_V_address0 = 6'd30;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cubieColor_V_address0 = 6'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        cubieColor_V_address0 = 6'd7;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        cubieColor_V_address0 = 6'd4;
    end else begin
        cubieColor_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        cubieColor_V_address1 = 6'd21;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        cubieColor_V_address1 = 6'd41;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        cubieColor_V_address1 = 6'd19;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        cubieColor_V_address1 = 6'd37;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        cubieColor_V_address1 = 6'd32;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        cubieColor_V_address1 = 6'd49;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        cubieColor_V_address1 = 6'd40;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        cubieColor_V_address1 = 6'd31;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cubieColor_V_address1 = 6'd1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        cubieColor_V_address1 = 6'd3;
    end else begin
        cubieColor_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        cubieColor_V_ce0 = 1'b1;
    end else begin
        cubieColor_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        cubieColor_V_ce1 = 1'b1;
    end else begin
        cubieColor_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_110_p0 = reg_131;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_110_p0 = cubieColor_V_q1;
    end else begin
        grp_fu_110_p0 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_V_fu_313_p2 = (tmp37_fu_308_p2 | tmp34_fu_298_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_fu_100_p2 = ((reg_131 == cubieColor_V_q0) ? 1'b1 : 1'b0);

assign grp_fu_105_p2 = ((reg_131 == cubieColor_V_q1) ? 1'b1 : 1'b0);

assign grp_fu_110_p2 = ((grp_fu_110_p0 == cubieColor_V_q0) ? 1'b1 : 1'b0);

assign grp_fu_116_p2 = ((cubieColor_V_load_137_reg_344 == cubieColor_V_q1) ? 1'b1 : 1'b0);

assign grp_fu_121_p2 = ((reg_131 == cubieColor_V_q1) ? 1'b1 : 1'b0);

assign grp_fu_126_p2 = ((cubieColor_V_load_139_reg_354 == cubieColor_V_q0) ? 1'b1 : 1'b0);

assign sel_tmp10_fu_189_p2 = (tmp26_fu_184_p2 & sel_tmp8_fu_178_p2);

assign sel_tmp12_fu_195_p2 = ((edge_V == 4'd4) ? 1'b1 : 1'b0);

assign sel_tmp14_fu_206_p2 = (tmp27_fu_201_p2 & sel_tmp12_fu_195_p2);

assign sel_tmp16_fu_230_p2 = ((edge_V == 4'd5) ? 1'b1 : 1'b0);

assign sel_tmp17_fu_240_p2 = (tmp28_fu_235_p2 & sel_tmp16_fu_230_p2);

assign sel_tmp18_fu_246_p2 = ((edge_V == 4'd6) ? 1'b1 : 1'b0);

assign sel_tmp19_fu_256_p2 = (tmp29_fu_251_p2 & sel_tmp18_fu_246_p2);

assign sel_tmp20_fu_262_p2 = ((edge_V == 4'd7) ? 1'b1 : 1'b0);

assign sel_tmp21_fu_283_p2 = (tmp30_fu_278_p2 & sel_tmp20_reg_397);

assign sel_tmp22_fu_267_p2 = ((edge_V == 4'd8) ? 1'b1 : 1'b0);

assign sel_tmp23_fu_293_p2 = (tmp31_fu_288_p2 & sel_tmp22_reg_402);

assign sel_tmp2_fu_156_p2 = (tmp_fu_152_p2 & sel_tmp_fu_146_p2);

assign sel_tmp4_fu_162_p2 = ((edge_V == 4'd2) ? 1'b1 : 1'b0);

assign sel_tmp6_fu_172_p2 = (tmp25_fu_168_p2 & sel_tmp4_fu_162_p2);

assign sel_tmp8_fu_178_p2 = ((edge_V == 4'd3) ? 1'b1 : 1'b0);

assign sel_tmp_fu_146_p2 = ((edge_V == 4'd1) ? 1'b1 : 1'b0);

assign tmp25_fu_168_p2 = (tmp_209_reg_374 & tmp_201_reg_324);

assign tmp26_fu_184_p2 = (tmp_202_reg_329 & grp_fu_121_p2);

assign tmp27_fu_201_p2 = (tmp_203_reg_334 & grp_fu_126_p2);

assign tmp28_fu_235_p2 = (tmp_204_reg_339 & grp_fu_116_p2);

assign tmp29_fu_251_p2 = (tmp_213_fu_224_p2 & tmp_205_reg_349);

assign tmp30_fu_278_p2 = (tmp_206_reg_359 & grp_fu_121_p2);

assign tmp31_fu_288_p2 = (tmp_207_reg_364 & grp_fu_126_p2);

assign tmp32_fu_212_p2 = (sel_tmp6_fu_172_p2 | sel_tmp2_fu_156_p2);

assign tmp33_fu_218_p2 = (sel_tmp14_fu_206_p2 | sel_tmp10_fu_189_p2);

assign tmp34_fu_298_p2 = (tmp33_reg_392 | tmp32_reg_387);

assign tmp35_fu_272_p2 = (sel_tmp19_fu_256_p2 | sel_tmp17_fu_240_p2);

assign tmp36_fu_302_p2 = (sel_tmp23_fu_293_p2 | sel_tmp21_fu_283_p2);

assign tmp37_fu_308_p2 = (tmp36_fu_302_p2 | tmp35_reg_407);

assign tmp_207_fu_140_p2 = ((reg_131 == cubieColor_V_q1) ? 1'b1 : 1'b0);

assign tmp_213_fu_224_p2 = ((reg_131 == cubieColor_V_q0) ? 1'b1 : 1'b0);

assign tmp_fu_152_p2 = (tmp_s_reg_319 & tmp_208_reg_369);

endmodule //edgeCorrect
