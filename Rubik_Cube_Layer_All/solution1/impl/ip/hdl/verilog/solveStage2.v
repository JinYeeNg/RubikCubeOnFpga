// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module solveStage2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sC_V,
        tC_V,
        cubieColor_V_address0,
        cubieColor_V_ce0,
        cubieColor_V_we0,
        cubieColor_V_d0,
        cubieColor_V_q0,
        cubieColor_V_address1,
        cubieColor_V_ce1,
        cubieColor_V_we1,
        cubieColor_V_d1,
        cubieColor_V_q1,
        moveCounter_V_i,
        moveCounter_V_o,
        moveCounter_V_o_ap_vld,
        moves_V_address0,
        moves_V_ce0,
        moves_V_we0,
        moves_V_d0
);

parameter    ap_ST_fsm_state1 = 44'd1;
parameter    ap_ST_fsm_state2 = 44'd2;
parameter    ap_ST_fsm_state3 = 44'd4;
parameter    ap_ST_fsm_state4 = 44'd8;
parameter    ap_ST_fsm_state5 = 44'd16;
parameter    ap_ST_fsm_state6 = 44'd32;
parameter    ap_ST_fsm_state7 = 44'd64;
parameter    ap_ST_fsm_state8 = 44'd128;
parameter    ap_ST_fsm_state9 = 44'd256;
parameter    ap_ST_fsm_state10 = 44'd512;
parameter    ap_ST_fsm_state11 = 44'd1024;
parameter    ap_ST_fsm_state12 = 44'd2048;
parameter    ap_ST_fsm_state13 = 44'd4096;
parameter    ap_ST_fsm_state14 = 44'd8192;
parameter    ap_ST_fsm_state15 = 44'd16384;
parameter    ap_ST_fsm_state16 = 44'd32768;
parameter    ap_ST_fsm_state17 = 44'd65536;
parameter    ap_ST_fsm_state18 = 44'd131072;
parameter    ap_ST_fsm_state19 = 44'd262144;
parameter    ap_ST_fsm_state20 = 44'd524288;
parameter    ap_ST_fsm_state21 = 44'd1048576;
parameter    ap_ST_fsm_state22 = 44'd2097152;
parameter    ap_ST_fsm_state23 = 44'd4194304;
parameter    ap_ST_fsm_state24 = 44'd8388608;
parameter    ap_ST_fsm_state25 = 44'd16777216;
parameter    ap_ST_fsm_state26 = 44'd33554432;
parameter    ap_ST_fsm_state27 = 44'd67108864;
parameter    ap_ST_fsm_state28 = 44'd134217728;
parameter    ap_ST_fsm_state29 = 44'd268435456;
parameter    ap_ST_fsm_state30 = 44'd536870912;
parameter    ap_ST_fsm_state31 = 44'd1073741824;
parameter    ap_ST_fsm_state32 = 44'd2147483648;
parameter    ap_ST_fsm_state33 = 44'd4294967296;
parameter    ap_ST_fsm_state34 = 44'd8589934592;
parameter    ap_ST_fsm_state35 = 44'd17179869184;
parameter    ap_ST_fsm_state36 = 44'd34359738368;
parameter    ap_ST_fsm_state37 = 44'd68719476736;
parameter    ap_ST_fsm_state38 = 44'd137438953472;
parameter    ap_ST_fsm_state39 = 44'd274877906944;
parameter    ap_ST_fsm_state40 = 44'd549755813888;
parameter    ap_ST_fsm_state41 = 44'd1099511627776;
parameter    ap_ST_fsm_state42 = 44'd2199023255552;
parameter    ap_ST_fsm_state43 = 44'd4398046511104;
parameter    ap_ST_fsm_state44 = 44'd8796093022208;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [2:0] sC_V;
input  [2:0] tC_V;
output  [5:0] cubieColor_V_address0;
output   cubieColor_V_ce0;
output   cubieColor_V_we0;
output  [2:0] cubieColor_V_d0;
input  [2:0] cubieColor_V_q0;
output  [5:0] cubieColor_V_address1;
output   cubieColor_V_ce1;
output   cubieColor_V_we1;
output  [2:0] cubieColor_V_d1;
input  [2:0] cubieColor_V_q1;
input  [7:0] moveCounter_V_i;
output  [7:0] moveCounter_V_o;
output   moveCounter_V_o_ap_vld;
output  [7:0] moves_V_address0;
output   moves_V_ce0;
output   moves_V_we0;
output  [3:0] moves_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] cubieColor_V_address0;
reg cubieColor_V_ce0;
reg cubieColor_V_we0;
reg[2:0] cubieColor_V_d0;
reg[5:0] cubieColor_V_address1;
reg cubieColor_V_ce1;
reg cubieColor_V_we1;
reg[2:0] cubieColor_V_d1;
reg[7:0] moveCounter_V_o;
reg moveCounter_V_o_ap_vld;
reg[7:0] moves_V_address0;
reg moves_V_ce0;
reg moves_V_we0;
reg[3:0] moves_V_d0;

(* fsm_encoding = "none" *) reg   [43:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] grp_findCorner_fu_100_ap_return;
reg   [3:0] reg_116;
wire    ap_CS_fsm_state2;
wire    grp_findCorner_fu_100_ap_idle;
wire    grp_findCorner_fu_100_ap_ready;
wire    grp_findCorner_fu_100_ap_done;
wire    ap_CS_fsm_state24;
wire    grp_turnCube_fu_75_ap_start;
wire    grp_turnCube_fu_75_ap_done;
wire    grp_turnCube_fu_75_ap_idle;
wire    grp_turnCube_fu_75_ap_ready;
reg   [3:0] grp_turnCube_fu_75_turn_V;
wire   [7:0] grp_turnCube_fu_75_moveCounter_V_o;
wire    grp_turnCube_fu_75_moveCounter_V_o_ap_vld;
wire   [7:0] grp_turnCube_fu_75_moves_V_address0;
wire    grp_turnCube_fu_75_moves_V_ce0;
wire    grp_turnCube_fu_75_moves_V_we0;
wire   [3:0] grp_turnCube_fu_75_moves_V_d0;
wire   [5:0] grp_turnCube_fu_75_cubieColor_V_address0;
wire    grp_turnCube_fu_75_cubieColor_V_ce0;
wire    grp_turnCube_fu_75_cubieColor_V_we0;
wire   [2:0] grp_turnCube_fu_75_cubieColor_V_d0;
wire   [5:0] grp_turnCube_fu_75_cubieColor_V_address1;
wire    grp_turnCube_fu_75_cubieColor_V_ce1;
wire    grp_turnCube_fu_75_cubieColor_V_we1;
wire   [2:0] grp_turnCube_fu_75_cubieColor_V_d1;
wire    grp_rotateCubeHorizontal_fu_90_ap_start;
wire    grp_rotateCubeHorizontal_fu_90_ap_done;
wire    grp_rotateCubeHorizontal_fu_90_ap_idle;
wire    grp_rotateCubeHorizontal_fu_90_ap_ready;
wire   [7:0] grp_rotateCubeHorizontal_fu_90_moveCounter_V_o;
wire    grp_rotateCubeHorizontal_fu_90_moveCounter_V_o_ap_vld;
wire   [7:0] grp_rotateCubeHorizontal_fu_90_moves_V_address0;
wire    grp_rotateCubeHorizontal_fu_90_moves_V_ce0;
wire    grp_rotateCubeHorizontal_fu_90_moves_V_we0;
wire   [3:0] grp_rotateCubeHorizontal_fu_90_moves_V_d0;
wire   [5:0] grp_rotateCubeHorizontal_fu_90_cubieColor_V_address0;
wire    grp_rotateCubeHorizontal_fu_90_cubieColor_V_ce0;
wire    grp_rotateCubeHorizontal_fu_90_cubieColor_V_we0;
wire   [2:0] grp_rotateCubeHorizontal_fu_90_cubieColor_V_d0;
wire   [5:0] grp_rotateCubeHorizontal_fu_90_cubieColor_V_address1;
wire    grp_rotateCubeHorizontal_fu_90_cubieColor_V_ce1;
wire    grp_rotateCubeHorizontal_fu_90_cubieColor_V_we1;
wire   [2:0] grp_rotateCubeHorizontal_fu_90_cubieColor_V_d1;
wire    grp_findCorner_fu_100_ap_start;
wire   [5:0] grp_findCorner_fu_100_cubieColor_V_address0;
wire    grp_findCorner_fu_100_cubieColor_V_ce0;
wire   [5:0] grp_findCorner_fu_100_cubieColor_V_address1;
wire    grp_findCorner_fu_100_cubieColor_V_ce1;
reg    grp_turnCube_fu_75_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state44;
reg    grp_rotateCubeHorizontal_fu_90_ap_start_reg;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state22;
reg    grp_findCorner_fu_100_ap_start_reg;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire   [0:0] grp_fu_110_p2;
wire   [0:0] tmp_fu_120_p2;
reg   [43:0] ap_NS_fsm;
reg    ap_block_state10_on_subcall_done;
reg    ap_block_state12_on_subcall_done;
reg    ap_block_state14_on_subcall_done;
reg    ap_block_state16_on_subcall_done;
reg    ap_block_state18_on_subcall_done;
reg    ap_block_state20_on_subcall_done;
reg    ap_block_state22_on_subcall_done;
reg    ap_block_state30_on_subcall_done;

// power-on initialization
initial begin
#0 ap_CS_fsm = 44'd1;
#0 grp_turnCube_fu_75_ap_start_reg = 1'b0;
#0 grp_rotateCubeHorizontal_fu_90_ap_start_reg = 1'b0;
#0 grp_findCorner_fu_100_ap_start_reg = 1'b0;
end

turnCube grp_turnCube_fu_75(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_turnCube_fu_75_ap_start),
    .ap_done(grp_turnCube_fu_75_ap_done),
    .ap_idle(grp_turnCube_fu_75_ap_idle),
    .ap_ready(grp_turnCube_fu_75_ap_ready),
    .turn_V(grp_turnCube_fu_75_turn_V),
    .moveCounter_V_i(moveCounter_V_i),
    .moveCounter_V_o(grp_turnCube_fu_75_moveCounter_V_o),
    .moveCounter_V_o_ap_vld(grp_turnCube_fu_75_moveCounter_V_o_ap_vld),
    .moves_V_address0(grp_turnCube_fu_75_moves_V_address0),
    .moves_V_ce0(grp_turnCube_fu_75_moves_V_ce0),
    .moves_V_we0(grp_turnCube_fu_75_moves_V_we0),
    .moves_V_d0(grp_turnCube_fu_75_moves_V_d0),
    .cubieColor_V_address0(grp_turnCube_fu_75_cubieColor_V_address0),
    .cubieColor_V_ce0(grp_turnCube_fu_75_cubieColor_V_ce0),
    .cubieColor_V_we0(grp_turnCube_fu_75_cubieColor_V_we0),
    .cubieColor_V_d0(grp_turnCube_fu_75_cubieColor_V_d0),
    .cubieColor_V_q0(cubieColor_V_q0),
    .cubieColor_V_address1(grp_turnCube_fu_75_cubieColor_V_address1),
    .cubieColor_V_ce1(grp_turnCube_fu_75_cubieColor_V_ce1),
    .cubieColor_V_we1(grp_turnCube_fu_75_cubieColor_V_we1),
    .cubieColor_V_d1(grp_turnCube_fu_75_cubieColor_V_d1)
);

rotateCubeHorizontal grp_rotateCubeHorizontal_fu_90(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_rotateCubeHorizontal_fu_90_ap_start),
    .ap_done(grp_rotateCubeHorizontal_fu_90_ap_done),
    .ap_idle(grp_rotateCubeHorizontal_fu_90_ap_idle),
    .ap_ready(grp_rotateCubeHorizontal_fu_90_ap_ready),
    .moveCounter_V_i(moveCounter_V_i),
    .moveCounter_V_o(grp_rotateCubeHorizontal_fu_90_moveCounter_V_o),
    .moveCounter_V_o_ap_vld(grp_rotateCubeHorizontal_fu_90_moveCounter_V_o_ap_vld),
    .moves_V_address0(grp_rotateCubeHorizontal_fu_90_moves_V_address0),
    .moves_V_ce0(grp_rotateCubeHorizontal_fu_90_moves_V_ce0),
    .moves_V_we0(grp_rotateCubeHorizontal_fu_90_moves_V_we0),
    .moves_V_d0(grp_rotateCubeHorizontal_fu_90_moves_V_d0),
    .cubieColor_V_address0(grp_rotateCubeHorizontal_fu_90_cubieColor_V_address0),
    .cubieColor_V_ce0(grp_rotateCubeHorizontal_fu_90_cubieColor_V_ce0),
    .cubieColor_V_we0(grp_rotateCubeHorizontal_fu_90_cubieColor_V_we0),
    .cubieColor_V_d0(grp_rotateCubeHorizontal_fu_90_cubieColor_V_d0),
    .cubieColor_V_q0(cubieColor_V_q0),
    .cubieColor_V_address1(grp_rotateCubeHorizontal_fu_90_cubieColor_V_address1),
    .cubieColor_V_ce1(grp_rotateCubeHorizontal_fu_90_cubieColor_V_ce1),
    .cubieColor_V_we1(grp_rotateCubeHorizontal_fu_90_cubieColor_V_we1),
    .cubieColor_V_d1(grp_rotateCubeHorizontal_fu_90_cubieColor_V_d1)
);

findCorner grp_findCorner_fu_100(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_findCorner_fu_100_ap_start),
    .ap_done(grp_findCorner_fu_100_ap_done),
    .ap_idle(grp_findCorner_fu_100_ap_idle),
    .ap_ready(grp_findCorner_fu_100_ap_ready),
    .sCC_V(sC_V),
    .tCC_V(tC_V),
    .cubieColor_V_address0(grp_findCorner_fu_100_cubieColor_V_address0),
    .cubieColor_V_ce0(grp_findCorner_fu_100_cubieColor_V_ce0),
    .cubieColor_V_q0(cubieColor_V_q0),
    .cubieColor_V_address1(grp_findCorner_fu_100_cubieColor_V_address1),
    .cubieColor_V_ce1(grp_findCorner_fu_100_cubieColor_V_ce1),
    .cubieColor_V_q1(cubieColor_V_q1),
    .ap_return(grp_findCorner_fu_100_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_findCorner_fu_100_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state23) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
            grp_findCorner_fu_100_ap_start_reg <= 1'b1;
        end else if ((grp_findCorner_fu_100_ap_ready == 1'b1)) begin
            grp_findCorner_fu_100_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_rotateCubeHorizontal_fu_90_ap_start_reg <= 1'b0;
    end else begin
        if ((((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state21)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state9)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state21)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state9)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state19)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state13)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state21)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state9)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state19)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state17)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state11)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state11)))) begin
            grp_rotateCubeHorizontal_fu_90_ap_start_reg <= 1'b1;
        end else if ((grp_rotateCubeHorizontal_fu_90_ap_ready == 1'b1)) begin
            grp_rotateCubeHorizontal_fu_90_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_turnCube_fu_75_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state19)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state17)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state15)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state17)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state15)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state13)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state15)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state13)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state11)))) begin
            grp_turnCube_fu_75_ap_start_reg <= 1'b1;
        end else if ((grp_turnCube_fu_75_ap_ready == 1'b1)) begin
            grp_turnCube_fu_75_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((grp_findCorner_fu_100_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((grp_findCorner_fu_100_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state24)))) begin
        reg_116 <= grp_findCorner_fu_100_ap_return;
    end
end

always @ (*) begin
    if ((((grp_fu_110_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_fu_110_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        cubieColor_V_address0 = 6'd45;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        cubieColor_V_address0 = 6'd29;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        cubieColor_V_address0 = 6'd8;
    end else if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state24))) begin
        cubieColor_V_address0 = grp_findCorner_fu_100_cubieColor_V_address0;
    end else if ((((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state22)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state10)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state14)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state12)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state22)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state10)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state20)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state12)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state22)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state10)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state20)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state18)))) begin
        cubieColor_V_address0 = grp_rotateCubeHorizontal_fu_90_cubieColor_V_address0;
    end else if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | ((reg_116 == 4'd6) & (1'b1 == ap_CS_fsm_state30)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state20)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state18)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state18)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state14)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state14)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state12)))) begin
        cubieColor_V_address0 = grp_turnCube_fu_75_cubieColor_V_address0;
    end else begin
        cubieColor_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        cubieColor_V_address1 = 6'd49;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        cubieColor_V_address1 = 6'd31;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        cubieColor_V_address1 = 6'd4;
    end else if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state24))) begin
        cubieColor_V_address1 = grp_findCorner_fu_100_cubieColor_V_address1;
    end else if ((((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state22)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state10)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state14)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state12)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state22)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state10)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state20)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state12)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state22)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state10)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state20)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state18)))) begin
        cubieColor_V_address1 = grp_rotateCubeHorizontal_fu_90_cubieColor_V_address1;
    end else if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | ((reg_116 == 4'd6) & (1'b1 == ap_CS_fsm_state30)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state20)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state18)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state18)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state14)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state14)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state12)))) begin
        cubieColor_V_address1 = grp_turnCube_fu_75_cubieColor_V_address1;
    end else begin
        cubieColor_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33))) begin
        cubieColor_V_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state24))) begin
        cubieColor_V_ce0 = grp_findCorner_fu_100_cubieColor_V_ce0;
    end else if ((((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state22)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state10)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state14)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state12)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state22)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state10)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state20)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state12)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state22)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state10)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state20)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state18)))) begin
        cubieColor_V_ce0 = grp_rotateCubeHorizontal_fu_90_cubieColor_V_ce0;
    end else if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | ((reg_116 == 4'd6) & (1'b1 == ap_CS_fsm_state30)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state20)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state18)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state18)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state14)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state14)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state12)))) begin
        cubieColor_V_ce0 = grp_turnCube_fu_75_cubieColor_V_ce0;
    end else begin
        cubieColor_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33))) begin
        cubieColor_V_ce1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state24))) begin
        cubieColor_V_ce1 = grp_findCorner_fu_100_cubieColor_V_ce1;
    end else if ((((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state22)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state10)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state14)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state12)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state22)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state10)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state20)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state12)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state22)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state10)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state20)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state18)))) begin
        cubieColor_V_ce1 = grp_rotateCubeHorizontal_fu_90_cubieColor_V_ce1;
    end else if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | ((reg_116 == 4'd6) & (1'b1 == ap_CS_fsm_state30)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state20)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state18)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state18)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state14)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state14)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state12)))) begin
        cubieColor_V_ce1 = grp_turnCube_fu_75_cubieColor_V_ce1;
    end else begin
        cubieColor_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state22)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state10)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state14)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state12)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state22)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state10)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state20)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state12)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state22)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state10)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state20)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state18)))) begin
        cubieColor_V_d0 = grp_rotateCubeHorizontal_fu_90_cubieColor_V_d0;
    end else if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | ((reg_116 == 4'd6) & (1'b1 == ap_CS_fsm_state30)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state20)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state18)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state18)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state14)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state14)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state12)))) begin
        cubieColor_V_d0 = grp_turnCube_fu_75_cubieColor_V_d0;
    end else begin
        cubieColor_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state22)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state10)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state14)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state12)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state22)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state10)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state20)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state12)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state22)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state10)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state20)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state18)))) begin
        cubieColor_V_d1 = grp_rotateCubeHorizontal_fu_90_cubieColor_V_d1;
    end else if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | ((reg_116 == 4'd6) & (1'b1 == ap_CS_fsm_state30)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state20)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state18)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state18)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state14)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state14)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state12)))) begin
        cubieColor_V_d1 = grp_turnCube_fu_75_cubieColor_V_d1;
    end else begin
        cubieColor_V_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state22)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state10)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state14)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state12)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state22)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state10)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state20)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state12)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state22)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state10)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state20)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state18)))) begin
        cubieColor_V_we0 = grp_rotateCubeHorizontal_fu_90_cubieColor_V_we0;
    end else if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | ((reg_116 == 4'd6) & (1'b1 == ap_CS_fsm_state30)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state20)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state18)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state18)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state14)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state14)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state12)))) begin
        cubieColor_V_we0 = grp_turnCube_fu_75_cubieColor_V_we0;
    end else begin
        cubieColor_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state22)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state10)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state14)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state12)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state22)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state10)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state20)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state12)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state22)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state10)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state20)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state18)))) begin
        cubieColor_V_we1 = grp_rotateCubeHorizontal_fu_90_cubieColor_V_we1;
    end else if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | ((reg_116 == 4'd6) & (1'b1 == ap_CS_fsm_state30)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state20)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state18)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state18)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state14)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state14)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state12)))) begin
        cubieColor_V_we1 = grp_turnCube_fu_75_cubieColor_V_we1;
    end else begin
        cubieColor_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state28) | ((reg_116 == 4'd6) & (1'b1 == ap_CS_fsm_state30)))) begin
        grp_turnCube_fu_75_turn_V = 4'd2;
    end else if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state8) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state20)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state18)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state16)))) begin
        grp_turnCube_fu_75_turn_V = 4'd10;
    end else if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state6) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state18)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state14)))) begin
        grp_turnCube_fu_75_turn_V = 4'd3;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state4) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state14)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state12)))) begin
        grp_turnCube_fu_75_turn_V = 4'd11;
    end else begin
        grp_turnCube_fu_75_turn_V = 'bx;
    end
end

always @ (*) begin
    if ((((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state22) & (grp_rotateCubeHorizontal_fu_90_moveCounter_V_o_ap_vld == 1'b1)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state10) & (grp_rotateCubeHorizontal_fu_90_moveCounter_V_o_ap_vld == 1'b1)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state14) & (grp_rotateCubeHorizontal_fu_90_moveCounter_V_o_ap_vld == 1'b1)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state12) & (grp_rotateCubeHorizontal_fu_90_moveCounter_V_o_ap_vld == 1'b1)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state22) & (grp_rotateCubeHorizontal_fu_90_moveCounter_V_o_ap_vld == 1'b1)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state10) & (grp_rotateCubeHorizontal_fu_90_moveCounter_V_o_ap_vld == 1'b1)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state20) & (grp_rotateCubeHorizontal_fu_90_moveCounter_V_o_ap_vld == 1'b1)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state12) & (grp_rotateCubeHorizontal_fu_90_moveCounter_V_o_ap_vld == 1'b1)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state22) & (grp_rotateCubeHorizontal_fu_90_moveCounter_V_o_ap_vld == 1'b1)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state10) & (grp_rotateCubeHorizontal_fu_90_moveCounter_V_o_ap_vld == 1'b1)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state20) & (grp_rotateCubeHorizontal_fu_90_moveCounter_V_o_ap_vld == 1'b1)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state18) & (grp_rotateCubeHorizontal_fu_90_moveCounter_V_o_ap_vld == 1'b1)))) begin
        moveCounter_V_o = grp_rotateCubeHorizontal_fu_90_moveCounter_V_o;
    end else if ((((1'b1 == ap_CS_fsm_state44) & (grp_turnCube_fu_75_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state42) & (grp_turnCube_fu_75_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state40) & (grp_turnCube_fu_75_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state38) & (grp_turnCube_fu_75_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state32) & (grp_turnCube_fu_75_moveCounter_V_o_ap_vld == 1'b1)) | ((reg_116 == 4'd6) & (1'b1 == ap_CS_fsm_state30) & (grp_turnCube_fu_75_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state28) & (grp_turnCube_fu_75_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state26) & (grp_turnCube_fu_75_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state8) & (grp_turnCube_fu_75_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state6) & (grp_turnCube_fu_75_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state4) & (grp_turnCube_fu_75_moveCounter_V_o_ap_vld == 1'b1)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state20) & (grp_turnCube_fu_75_moveCounter_V_o_ap_vld == 1'b1)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state18) & (grp_turnCube_fu_75_moveCounter_V_o_ap_vld == 1'b1)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state16) & (grp_turnCube_fu_75_moveCounter_V_o_ap_vld == 1'b1)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state18) & (grp_turnCube_fu_75_moveCounter_V_o_ap_vld == 1'b1)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state16) & (grp_turnCube_fu_75_moveCounter_V_o_ap_vld == 1'b1)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state14) & (grp_turnCube_fu_75_moveCounter_V_o_ap_vld == 1'b1)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state16) & (grp_turnCube_fu_75_moveCounter_V_o_ap_vld == 1'b1)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state14) & (grp_turnCube_fu_75_moveCounter_V_o_ap_vld == 1'b1)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state12) & (grp_turnCube_fu_75_moveCounter_V_o_ap_vld == 1'b1)))) begin
        moveCounter_V_o = grp_turnCube_fu_75_moveCounter_V_o;
    end else begin
        moveCounter_V_o = moveCounter_V_i;
    end
end

always @ (*) begin
    if ((((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state22)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state10)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state14)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state12)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state22)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state10)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state20)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state12)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state22)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state10)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state20)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state18)))) begin
        moveCounter_V_o_ap_vld = grp_rotateCubeHorizontal_fu_90_moveCounter_V_o_ap_vld;
    end else if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | ((reg_116 == 4'd6) & (1'b1 == ap_CS_fsm_state30)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state20)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state18)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state18)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state14)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state14)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state12)))) begin
        moveCounter_V_o_ap_vld = grp_turnCube_fu_75_moveCounter_V_o_ap_vld;
    end else begin
        moveCounter_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state22)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state10)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state14)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state12)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state22)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state10)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state20)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state12)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state22)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state10)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state20)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state18)))) begin
        moves_V_address0 = grp_rotateCubeHorizontal_fu_90_moves_V_address0;
    end else if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | ((reg_116 == 4'd6) & (1'b1 == ap_CS_fsm_state30)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state20)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state18)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state18)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state14)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state14)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state12)))) begin
        moves_V_address0 = grp_turnCube_fu_75_moves_V_address0;
    end else begin
        moves_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state22)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state10)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state14)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state12)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state22)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state10)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state20)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state12)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state22)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state10)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state20)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state18)))) begin
        moves_V_ce0 = grp_rotateCubeHorizontal_fu_90_moves_V_ce0;
    end else if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | ((reg_116 == 4'd6) & (1'b1 == ap_CS_fsm_state30)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state20)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state18)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state18)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state14)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state14)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state12)))) begin
        moves_V_ce0 = grp_turnCube_fu_75_moves_V_ce0;
    end else begin
        moves_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state22)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state10)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state14)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state12)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state22)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state10)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state20)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state12)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state22)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state10)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state20)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state18)))) begin
        moves_V_d0 = grp_rotateCubeHorizontal_fu_90_moves_V_d0;
    end else if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | ((reg_116 == 4'd6) & (1'b1 == ap_CS_fsm_state30)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state20)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state18)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state18)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state14)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state14)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state12)))) begin
        moves_V_d0 = grp_turnCube_fu_75_moves_V_d0;
    end else begin
        moves_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state22)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state10)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state14)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state12)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state22)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state10)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state20)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state12)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state22)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state10)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state20)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state18)))) begin
        moves_V_we0 = grp_rotateCubeHorizontal_fu_90_moves_V_we0;
    end else if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | ((reg_116 == 4'd6) & (1'b1 == ap_CS_fsm_state30)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state20)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state18)) | ((reg_116 == 4'd1) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state18)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd2) & (1'b1 == ap_CS_fsm_state14)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state16)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state14)) | ((reg_116 == 4'd3) & (1'b1 == ap_CS_fsm_state12)))) begin
        moves_V_we0 = grp_turnCube_fu_75_moves_V_we0;
    end else begin
        moves_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~(grp_findCorner_fu_100_ap_return == 4'd3) & ~(grp_findCorner_fu_100_ap_return == 4'd2) & ~(grp_findCorner_fu_100_ap_return == 4'd1) & ~(grp_findCorner_fu_100_ap_return == 4'd4) & (grp_findCorner_fu_100_ap_done == 1'b1) & (tmp_fu_120_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else if (((grp_findCorner_fu_100_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (((grp_findCorner_fu_100_ap_return == 4'd3) & (tmp_fu_120_p2 == 1'd1)) | ((grp_findCorner_fu_100_ap_return == 4'd2) & (tmp_fu_120_p2 == 1'd1)) | ((grp_findCorner_fu_100_ap_return == 4'd1) & (tmp_fu_120_p2 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else if (((grp_findCorner_fu_100_ap_done == 1'b1) & (grp_findCorner_fu_100_ap_return == 4'd4) & (tmp_fu_120_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((grp_findCorner_fu_100_ap_done == 1'b1) & (tmp_fu_120_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_turnCube_fu_75_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (grp_turnCube_fu_75_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (grp_turnCube_fu_75_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b0 == ap_block_state10_on_subcall_done) & (1'b1 == ap_CS_fsm_state10) & ((reg_116 == 4'd1) | (reg_116 == 4'd2) | (reg_116 == 4'd3)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b0 == ap_block_state12_on_subcall_done) & (1'b1 == ap_CS_fsm_state12) & ((reg_116 == 4'd1) | (reg_116 == 4'd2) | (reg_116 == 4'd3)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b0 == ap_block_state14_on_subcall_done) & (1'b1 == ap_CS_fsm_state14) & ((reg_116 == 4'd1) | (reg_116 == 4'd2) | (reg_116 == 4'd3)))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b0 == ap_block_state16_on_subcall_done) & (1'b1 == ap_CS_fsm_state16) & ((reg_116 == 4'd1) | (reg_116 == 4'd2) | (reg_116 == 4'd3)))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((1'b0 == ap_block_state18_on_subcall_done) & (1'b1 == ap_CS_fsm_state18) & ((reg_116 == 4'd1) | (reg_116 == 4'd2) | (reg_116 == 4'd3)))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((1'b0 == ap_block_state20_on_subcall_done) & (1'b1 == ap_CS_fsm_state20) & ((reg_116 == 4'd1) | (reg_116 == 4'd2) | (reg_116 == 4'd3)))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((1'b0 == ap_block_state22_on_subcall_done) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if (((grp_findCorner_fu_100_ap_done == 1'b1) & (grp_findCorner_fu_100_ap_return == 4'd5) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else if ((~(grp_findCorner_fu_100_ap_return == 4'd5) & ~(grp_findCorner_fu_100_ap_return == 4'd6) & ~(grp_findCorner_fu_100_ap_return == 4'd7) & (grp_findCorner_fu_100_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else if (((grp_findCorner_fu_100_ap_done == 1'b1) & (grp_findCorner_fu_100_ap_return == 4'd6) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else if (((grp_findCorner_fu_100_ap_done == 1'b1) & (grp_findCorner_fu_100_ap_return == 4'd7) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == ap_CS_fsm_state26) & (grp_turnCube_fu_75_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (grp_turnCube_fu_75_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            if (((1'b0 == ap_block_state30_on_subcall_done) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            if (((1'b1 == ap_CS_fsm_state32) & (grp_turnCube_fu_75_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            if (((grp_fu_110_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((grp_fu_110_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state36 : begin
            if (((grp_fu_110_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            if (((1'b1 == ap_CS_fsm_state38) & (grp_turnCube_fu_75_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            if (((1'b1 == ap_CS_fsm_state40) & (grp_turnCube_fu_75_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            if (((1'b1 == ap_CS_fsm_state42) & (grp_turnCube_fu_75_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            if (((1'b1 == ap_CS_fsm_state44) & (grp_turnCube_fu_75_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state10_on_subcall_done = (((reg_116 == 4'd1) & (grp_rotateCubeHorizontal_fu_90_ap_done == 1'b0)) | ((reg_116 == 4'd2) & (grp_rotateCubeHorizontal_fu_90_ap_done == 1'b0)) | ((reg_116 == 4'd3) & (grp_rotateCubeHorizontal_fu_90_ap_done == 1'b0)));
end

always @ (*) begin
    ap_block_state12_on_subcall_done = (((reg_116 == 4'd1) & (grp_rotateCubeHorizontal_fu_90_ap_done == 1'b0)) | ((reg_116 == 4'd2) & (grp_rotateCubeHorizontal_fu_90_ap_done == 1'b0)) | ((reg_116 == 4'd3) & (grp_turnCube_fu_75_ap_done == 1'b0)));
end

always @ (*) begin
    ap_block_state14_on_subcall_done = (((reg_116 == 4'd1) & (grp_rotateCubeHorizontal_fu_90_ap_done == 1'b0)) | ((reg_116 == 4'd2) & (grp_turnCube_fu_75_ap_done == 1'b0)) | ((reg_116 == 4'd3) & (grp_turnCube_fu_75_ap_done == 1'b0)));
end

always @ (*) begin
    ap_block_state16_on_subcall_done = (((reg_116 == 4'd1) & (grp_turnCube_fu_75_ap_done == 1'b0)) | ((reg_116 == 4'd2) & (grp_turnCube_fu_75_ap_done == 1'b0)) | ((reg_116 == 4'd3) & (grp_turnCube_fu_75_ap_done == 1'b0)));
end

always @ (*) begin
    ap_block_state18_on_subcall_done = (((reg_116 == 4'd1) & (grp_turnCube_fu_75_ap_done == 1'b0)) | ((reg_116 == 4'd2) & (grp_turnCube_fu_75_ap_done == 1'b0)) | ((reg_116 == 4'd3) & (grp_rotateCubeHorizontal_fu_90_ap_done == 1'b0)));
end

always @ (*) begin
    ap_block_state20_on_subcall_done = (((reg_116 == 4'd1) & (grp_turnCube_fu_75_ap_done == 1'b0)) | ((reg_116 == 4'd2) & (grp_rotateCubeHorizontal_fu_90_ap_done == 1'b0)) | ((reg_116 == 4'd3) & (grp_rotateCubeHorizontal_fu_90_ap_done == 1'b0)));
end

always @ (*) begin
    ap_block_state22_on_subcall_done = (((reg_116 == 4'd1) & (grp_rotateCubeHorizontal_fu_90_ap_done == 1'b0)) | ((reg_116 == 4'd2) & (grp_rotateCubeHorizontal_fu_90_ap_done == 1'b0)) | ((reg_116 == 4'd3) & (grp_rotateCubeHorizontal_fu_90_ap_done == 1'b0)));
end

always @ (*) begin
    ap_block_state30_on_subcall_done = ((reg_116 == 4'd6) & (grp_turnCube_fu_75_ap_done == 1'b0));
end

assign grp_findCorner_fu_100_ap_start = grp_findCorner_fu_100_ap_start_reg;

assign grp_fu_110_p2 = ((cubieColor_V_q0 == cubieColor_V_q1) ? 1'b1 : 1'b0);

assign grp_rotateCubeHorizontal_fu_90_ap_start = grp_rotateCubeHorizontal_fu_90_ap_start_reg;

assign grp_turnCube_fu_75_ap_start = grp_turnCube_fu_75_ap_start_reg;

assign tmp_fu_120_p2 = ((grp_findCorner_fu_100_ap_return < 4'd5) ? 1'b1 : 1'b0);

endmodule //solveStage2
