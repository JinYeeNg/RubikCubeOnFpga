// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module solveStage5b (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        cubieColor_V_address0,
        cubieColor_V_ce0,
        cubieColor_V_we0,
        cubieColor_V_d0,
        cubieColor_V_q0,
        cubieColor_V_address1,
        cubieColor_V_ce1,
        cubieColor_V_we1,
        cubieColor_V_d1,
        cubieColor_V_q1,
        moveCounter_V_i,
        moveCounter_V_o,
        moveCounter_V_o_ap_vld,
        moves_V_address0,
        moves_V_ce0,
        moves_V_we0,
        moves_V_d0
);

parameter    ap_ST_fsm_state1 = 97'd1;
parameter    ap_ST_fsm_state2 = 97'd2;
parameter    ap_ST_fsm_state3 = 97'd4;
parameter    ap_ST_fsm_state4 = 97'd8;
parameter    ap_ST_fsm_state5 = 97'd16;
parameter    ap_ST_fsm_state6 = 97'd32;
parameter    ap_ST_fsm_state7 = 97'd64;
parameter    ap_ST_fsm_state8 = 97'd128;
parameter    ap_ST_fsm_state9 = 97'd256;
parameter    ap_ST_fsm_state10 = 97'd512;
parameter    ap_ST_fsm_state11 = 97'd1024;
parameter    ap_ST_fsm_state12 = 97'd2048;
parameter    ap_ST_fsm_state13 = 97'd4096;
parameter    ap_ST_fsm_state14 = 97'd8192;
parameter    ap_ST_fsm_state15 = 97'd16384;
parameter    ap_ST_fsm_state16 = 97'd32768;
parameter    ap_ST_fsm_state17 = 97'd65536;
parameter    ap_ST_fsm_state18 = 97'd131072;
parameter    ap_ST_fsm_state19 = 97'd262144;
parameter    ap_ST_fsm_state20 = 97'd524288;
parameter    ap_ST_fsm_state21 = 97'd1048576;
parameter    ap_ST_fsm_state22 = 97'd2097152;
parameter    ap_ST_fsm_state23 = 97'd4194304;
parameter    ap_ST_fsm_state24 = 97'd8388608;
parameter    ap_ST_fsm_state25 = 97'd16777216;
parameter    ap_ST_fsm_state26 = 97'd33554432;
parameter    ap_ST_fsm_state27 = 97'd67108864;
parameter    ap_ST_fsm_state28 = 97'd134217728;
parameter    ap_ST_fsm_state29 = 97'd268435456;
parameter    ap_ST_fsm_state30 = 97'd536870912;
parameter    ap_ST_fsm_state31 = 97'd1073741824;
parameter    ap_ST_fsm_state32 = 97'd2147483648;
parameter    ap_ST_fsm_state33 = 97'd4294967296;
parameter    ap_ST_fsm_state34 = 97'd8589934592;
parameter    ap_ST_fsm_state35 = 97'd17179869184;
parameter    ap_ST_fsm_state36 = 97'd34359738368;
parameter    ap_ST_fsm_state37 = 97'd68719476736;
parameter    ap_ST_fsm_state38 = 97'd137438953472;
parameter    ap_ST_fsm_state39 = 97'd274877906944;
parameter    ap_ST_fsm_state40 = 97'd549755813888;
parameter    ap_ST_fsm_state41 = 97'd1099511627776;
parameter    ap_ST_fsm_state42 = 97'd2199023255552;
parameter    ap_ST_fsm_state43 = 97'd4398046511104;
parameter    ap_ST_fsm_state44 = 97'd8796093022208;
parameter    ap_ST_fsm_state45 = 97'd17592186044416;
parameter    ap_ST_fsm_state46 = 97'd35184372088832;
parameter    ap_ST_fsm_state47 = 97'd70368744177664;
parameter    ap_ST_fsm_state48 = 97'd140737488355328;
parameter    ap_ST_fsm_state49 = 97'd281474976710656;
parameter    ap_ST_fsm_state50 = 97'd562949953421312;
parameter    ap_ST_fsm_state51 = 97'd1125899906842624;
parameter    ap_ST_fsm_state52 = 97'd2251799813685248;
parameter    ap_ST_fsm_state53 = 97'd4503599627370496;
parameter    ap_ST_fsm_state54 = 97'd9007199254740992;
parameter    ap_ST_fsm_state55 = 97'd18014398509481984;
parameter    ap_ST_fsm_state56 = 97'd36028797018963968;
parameter    ap_ST_fsm_state57 = 97'd72057594037927936;
parameter    ap_ST_fsm_state58 = 97'd144115188075855872;
parameter    ap_ST_fsm_state59 = 97'd288230376151711744;
parameter    ap_ST_fsm_state60 = 97'd576460752303423488;
parameter    ap_ST_fsm_state61 = 97'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 97'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 97'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 97'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 97'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 97'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 97'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 97'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 97'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 97'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 97'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 97'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 97'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 97'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 97'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 97'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 97'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 97'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 97'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 97'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 97'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 97'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 97'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 97'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 97'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 97'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 97'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 97'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 97'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 97'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 97'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 97'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 97'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 97'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 97'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 97'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 97'd79228162514264337593543950336;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] cubieColor_V_address0;
output   cubieColor_V_ce0;
output   cubieColor_V_we0;
output  [2:0] cubieColor_V_d0;
input  [2:0] cubieColor_V_q0;
output  [5:0] cubieColor_V_address1;
output   cubieColor_V_ce1;
output   cubieColor_V_we1;
output  [2:0] cubieColor_V_d1;
input  [2:0] cubieColor_V_q1;
input  [7:0] moveCounter_V_i;
output  [7:0] moveCounter_V_o;
output   moveCounter_V_o_ap_vld;
output  [7:0] moves_V_address0;
output   moves_V_ce0;
output   moves_V_we0;
output  [3:0] moves_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] cubieColor_V_address0;
reg cubieColor_V_ce0;
reg cubieColor_V_we0;
reg[2:0] cubieColor_V_d0;
reg[5:0] cubieColor_V_address1;
reg cubieColor_V_ce1;
reg cubieColor_V_we1;
reg[2:0] cubieColor_V_d1;
reg[7:0] moveCounter_V_o;
reg moveCounter_V_o_ap_vld;
reg[7:0] moves_V_address0;
reg moves_V_ce0;
reg moves_V_we0;
reg[3:0] moves_V_d0;

(* fsm_encoding = "none" *) reg   [96:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] grp_edgeCorrect_fu_75_ap_return;
reg   [0:0] p_s_reg_92;
wire    ap_CS_fsm_state2;
wire    grp_edgeCorrect_fu_75_ap_idle;
wire    grp_edgeCorrect_fu_75_ap_ready;
wire    grp_edgeCorrect_fu_75_ap_done;
reg   [0:0] p_4_reg_96;
wire    ap_CS_fsm_state4;
reg   [0:0] p_8_reg_100;
wire    ap_CS_fsm_state6;
reg   [0:0] p_3_reg_104;
wire    ap_CS_fsm_state8;
reg   [0:0] p_0_reg_108;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state42;
reg    ap_block_state42_on_subcall_done;
reg   [0:0] p_5_reg_116;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state48;
reg    ap_predicate_op160_call_state48;
reg    ap_block_state48_on_subcall_done;
wire   [0:0] tmp_fu_86_p2;
reg   [0:0] tmp_reg_124;
wire    ap_CS_fsm_state54;
wire    grp_turnCube_fu_47_ap_start;
wire    grp_turnCube_fu_47_ap_done;
wire    grp_turnCube_fu_47_ap_idle;
wire    grp_turnCube_fu_47_ap_ready;
reg   [3:0] grp_turnCube_fu_47_turn_V;
wire   [7:0] grp_turnCube_fu_47_moveCounter_V_o;
wire    grp_turnCube_fu_47_moveCounter_V_o_ap_vld;
wire   [7:0] grp_turnCube_fu_47_moves_V_address0;
wire    grp_turnCube_fu_47_moves_V_ce0;
wire    grp_turnCube_fu_47_moves_V_we0;
wire   [3:0] grp_turnCube_fu_47_moves_V_d0;
wire   [5:0] grp_turnCube_fu_47_cubieColor_V_address0;
wire    grp_turnCube_fu_47_cubieColor_V_ce0;
wire    grp_turnCube_fu_47_cubieColor_V_we0;
wire   [2:0] grp_turnCube_fu_47_cubieColor_V_d0;
wire   [5:0] grp_turnCube_fu_47_cubieColor_V_address1;
wire    grp_turnCube_fu_47_cubieColor_V_ce1;
wire    grp_turnCube_fu_47_cubieColor_V_we1;
wire   [2:0] grp_turnCube_fu_47_cubieColor_V_d1;
wire    grp_rotateCubeHorizontal_fu_65_ap_start;
wire    grp_rotateCubeHorizontal_fu_65_ap_done;
wire    grp_rotateCubeHorizontal_fu_65_ap_idle;
wire    grp_rotateCubeHorizontal_fu_65_ap_ready;
wire   [7:0] grp_rotateCubeHorizontal_fu_65_moveCounter_V_o;
wire    grp_rotateCubeHorizontal_fu_65_moveCounter_V_o_ap_vld;
wire   [7:0] grp_rotateCubeHorizontal_fu_65_moves_V_address0;
wire    grp_rotateCubeHorizontal_fu_65_moves_V_ce0;
wire    grp_rotateCubeHorizontal_fu_65_moves_V_we0;
wire   [3:0] grp_rotateCubeHorizontal_fu_65_moves_V_d0;
wire   [5:0] grp_rotateCubeHorizontal_fu_65_cubieColor_V_address0;
wire    grp_rotateCubeHorizontal_fu_65_cubieColor_V_ce0;
wire    grp_rotateCubeHorizontal_fu_65_cubieColor_V_we0;
wire   [2:0] grp_rotateCubeHorizontal_fu_65_cubieColor_V_d0;
wire   [5:0] grp_rotateCubeHorizontal_fu_65_cubieColor_V_address1;
wire    grp_rotateCubeHorizontal_fu_65_cubieColor_V_ce1;
wire    grp_rotateCubeHorizontal_fu_65_cubieColor_V_we1;
wire   [2:0] grp_rotateCubeHorizontal_fu_65_cubieColor_V_d1;
wire    grp_edgeCorrect_fu_75_ap_start;
reg   [3:0] grp_edgeCorrect_fu_75_edge_V;
wire   [5:0] grp_edgeCorrect_fu_75_cubieColor_V_address0;
wire    grp_edgeCorrect_fu_75_cubieColor_V_ce0;
wire   [5:0] grp_edgeCorrect_fu_75_cubieColor_V_address1;
wire    grp_edgeCorrect_fu_75_cubieColor_V_ce1;
reg    grp_turnCube_fu_47_ap_start_reg;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state65;
wire    ap_CS_fsm_state67;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_state81;
wire    ap_CS_fsm_state83;
wire    ap_CS_fsm_state85;
wire    ap_CS_fsm_state87;
wire    ap_CS_fsm_state89;
wire    ap_CS_fsm_state91;
wire    ap_CS_fsm_state93;
wire    ap_CS_fsm_state95;
wire    ap_CS_fsm_state97;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state74;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state80;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state84;
wire    ap_CS_fsm_state86;
wire    ap_CS_fsm_state88;
wire    ap_CS_fsm_state90;
wire    ap_CS_fsm_state92;
wire    ap_CS_fsm_state94;
wire    ap_CS_fsm_state96;
reg    grp_rotateCubeHorizontal_fu_65_ap_start_reg;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state52;
reg    grp_edgeCorrect_fu_75_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state53;
reg    ap_predicate_op197_call_state78;
reg    ap_predicate_op199_call_state78;
reg    ap_block_state78_on_subcall_done;
reg   [96:0] ap_NS_fsm;
reg    ap_predicate_op145_call_state40;
reg    ap_block_state40_on_subcall_done;

// power-on initialization
initial begin
#0 ap_CS_fsm = 97'd1;
#0 grp_turnCube_fu_47_ap_start_reg = 1'b0;
#0 grp_rotateCubeHorizontal_fu_65_ap_start_reg = 1'b0;
#0 grp_edgeCorrect_fu_75_ap_start_reg = 1'b0;
end

turnCube grp_turnCube_fu_47(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_turnCube_fu_47_ap_start),
    .ap_done(grp_turnCube_fu_47_ap_done),
    .ap_idle(grp_turnCube_fu_47_ap_idle),
    .ap_ready(grp_turnCube_fu_47_ap_ready),
    .turn_V(grp_turnCube_fu_47_turn_V),
    .moveCounter_V_i(moveCounter_V_i),
    .moveCounter_V_o(grp_turnCube_fu_47_moveCounter_V_o),
    .moveCounter_V_o_ap_vld(grp_turnCube_fu_47_moveCounter_V_o_ap_vld),
    .moves_V_address0(grp_turnCube_fu_47_moves_V_address0),
    .moves_V_ce0(grp_turnCube_fu_47_moves_V_ce0),
    .moves_V_we0(grp_turnCube_fu_47_moves_V_we0),
    .moves_V_d0(grp_turnCube_fu_47_moves_V_d0),
    .cubieColor_V_address0(grp_turnCube_fu_47_cubieColor_V_address0),
    .cubieColor_V_ce0(grp_turnCube_fu_47_cubieColor_V_ce0),
    .cubieColor_V_we0(grp_turnCube_fu_47_cubieColor_V_we0),
    .cubieColor_V_d0(grp_turnCube_fu_47_cubieColor_V_d0),
    .cubieColor_V_q0(cubieColor_V_q0),
    .cubieColor_V_address1(grp_turnCube_fu_47_cubieColor_V_address1),
    .cubieColor_V_ce1(grp_turnCube_fu_47_cubieColor_V_ce1),
    .cubieColor_V_we1(grp_turnCube_fu_47_cubieColor_V_we1),
    .cubieColor_V_d1(grp_turnCube_fu_47_cubieColor_V_d1)
);

rotateCubeHorizontal grp_rotateCubeHorizontal_fu_65(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_rotateCubeHorizontal_fu_65_ap_start),
    .ap_done(grp_rotateCubeHorizontal_fu_65_ap_done),
    .ap_idle(grp_rotateCubeHorizontal_fu_65_ap_idle),
    .ap_ready(grp_rotateCubeHorizontal_fu_65_ap_ready),
    .moveCounter_V_i(moveCounter_V_i),
    .moveCounter_V_o(grp_rotateCubeHorizontal_fu_65_moveCounter_V_o),
    .moveCounter_V_o_ap_vld(grp_rotateCubeHorizontal_fu_65_moveCounter_V_o_ap_vld),
    .moves_V_address0(grp_rotateCubeHorizontal_fu_65_moves_V_address0),
    .moves_V_ce0(grp_rotateCubeHorizontal_fu_65_moves_V_ce0),
    .moves_V_we0(grp_rotateCubeHorizontal_fu_65_moves_V_we0),
    .moves_V_d0(grp_rotateCubeHorizontal_fu_65_moves_V_d0),
    .cubieColor_V_address0(grp_rotateCubeHorizontal_fu_65_cubieColor_V_address0),
    .cubieColor_V_ce0(grp_rotateCubeHorizontal_fu_65_cubieColor_V_ce0),
    .cubieColor_V_we0(grp_rotateCubeHorizontal_fu_65_cubieColor_V_we0),
    .cubieColor_V_d0(grp_rotateCubeHorizontal_fu_65_cubieColor_V_d0),
    .cubieColor_V_q0(cubieColor_V_q0),
    .cubieColor_V_address1(grp_rotateCubeHorizontal_fu_65_cubieColor_V_address1),
    .cubieColor_V_ce1(grp_rotateCubeHorizontal_fu_65_cubieColor_V_ce1),
    .cubieColor_V_we1(grp_rotateCubeHorizontal_fu_65_cubieColor_V_we1),
    .cubieColor_V_d1(grp_rotateCubeHorizontal_fu_65_cubieColor_V_d1)
);

edgeCorrect grp_edgeCorrect_fu_75(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_edgeCorrect_fu_75_ap_start),
    .ap_done(grp_edgeCorrect_fu_75_ap_done),
    .ap_idle(grp_edgeCorrect_fu_75_ap_idle),
    .ap_ready(grp_edgeCorrect_fu_75_ap_ready),
    .edge_V(grp_edgeCorrect_fu_75_edge_V),
    .cubieColor_V_address0(grp_edgeCorrect_fu_75_cubieColor_V_address0),
    .cubieColor_V_ce0(grp_edgeCorrect_fu_75_cubieColor_V_ce0),
    .cubieColor_V_q0(cubieColor_V_q0),
    .cubieColor_V_address1(grp_edgeCorrect_fu_75_cubieColor_V_address1),
    .cubieColor_V_ce1(grp_edgeCorrect_fu_75_cubieColor_V_ce1),
    .cubieColor_V_q1(cubieColor_V_q1),
    .ap_return(grp_edgeCorrect_fu_75_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_edgeCorrect_fu_75_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
            grp_edgeCorrect_fu_75_ap_start_reg <= 1'b1;
        end else if ((grp_edgeCorrect_fu_75_ap_ready == 1'b1)) begin
            grp_edgeCorrect_fu_75_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_rotateCubeHorizontal_fu_65_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state35))) begin
            grp_rotateCubeHorizontal_fu_65_ap_start_reg <= 1'b1;
        end else if ((grp_rotateCubeHorizontal_fu_65_ap_ready == 1'b1)) begin
            grp_rotateCubeHorizontal_fu_65_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_turnCube_fu_47_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9))) begin
            grp_turnCube_fu_47_ap_start_reg <= 1'b1;
        end else if ((grp_turnCube_fu_47_ap_ready == 1'b1)) begin
            grp_turnCube_fu_47_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state34) & (grp_edgeCorrect_fu_75_ap_done == 1'b1))) begin
        p_0_reg_108 <= grp_edgeCorrect_fu_75_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (grp_edgeCorrect_fu_75_ap_done == 1'b1))) begin
        p_3_reg_104 <= grp_edgeCorrect_fu_75_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (grp_edgeCorrect_fu_75_ap_done == 1'b1))) begin
        p_4_reg_96 <= grp_edgeCorrect_fu_75_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state46) & (grp_edgeCorrect_fu_75_ap_done == 1'b1))) begin
        p_5_reg_116 <= grp_edgeCorrect_fu_75_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_edgeCorrect_fu_75_ap_done == 1'b1))) begin
        p_8_reg_100 <= grp_edgeCorrect_fu_75_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_edgeCorrect_fu_75_ap_done == 1'b1))) begin
        p_s_reg_92 <= grp_edgeCorrect_fu_75_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        tmp_reg_124 <= tmp_fu_86_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state78_on_subcall_done) & (1'b1 == ap_CS_fsm_state78)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state78_on_subcall_done) & (1'b1 == ap_CS_fsm_state78))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        cubieColor_V_address0 = 6'd28;
    end else if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state48) & (ap_predicate_op160_call_state48 == 1'b1)) | ((1'b1 == ap_CS_fsm_state42) & (p_8_reg_100 == 1'd0)))) begin
        cubieColor_V_address0 = grp_edgeCorrect_fu_75_cubieColor_V_address0;
    end else if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state36) | ((1'b1 == ap_CS_fsm_state40) & (p_0_reg_108 == 1'd1) & (p_8_reg_100 == 1'd0) & (p_4_reg_96 == 1'd0) & (p_s_reg_92 == 1'd0)))) begin
        cubieColor_V_address0 = grp_rotateCubeHorizontal_fu_65_cubieColor_V_address0;
    end else if (((1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state78) & (((tmp_reg_124 == 1'd1) & (p_3_reg_104 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_8_reg_100 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_4_reg_96 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_s_reg_92 == 1'd1)))) | ((1'b1 == ap_CS_fsm_state78) & (((tmp_reg_124 == 1'd0) & (p_3_reg_104 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_8_reg_100 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_4_reg_96 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_s_reg_92 == 1'd1)))))) begin
        cubieColor_V_address0 = grp_turnCube_fu_47_cubieColor_V_address0;
    end else begin
        cubieColor_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        cubieColor_V_address1 = 6'd37;
    end else if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state48) & (ap_predicate_op160_call_state48 == 1'b1)) | ((1'b1 == ap_CS_fsm_state42) & (p_8_reg_100 == 1'd0)))) begin
        cubieColor_V_address1 = grp_edgeCorrect_fu_75_cubieColor_V_address1;
    end else if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state36) | ((1'b1 == ap_CS_fsm_state40) & (p_0_reg_108 == 1'd1) & (p_8_reg_100 == 1'd0) & (p_4_reg_96 == 1'd0) & (p_s_reg_92 == 1'd0)))) begin
        cubieColor_V_address1 = grp_rotateCubeHorizontal_fu_65_cubieColor_V_address1;
    end else if (((1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state78) & (((tmp_reg_124 == 1'd1) & (p_3_reg_104 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_8_reg_100 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_4_reg_96 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_s_reg_92 == 1'd1)))) | ((1'b1 == ap_CS_fsm_state78) & (((tmp_reg_124 == 1'd0) & (p_3_reg_104 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_8_reg_100 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_4_reg_96 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_s_reg_92 == 1'd1)))))) begin
        cubieColor_V_address1 = grp_turnCube_fu_47_cubieColor_V_address1;
    end else begin
        cubieColor_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        cubieColor_V_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state48) & (ap_predicate_op160_call_state48 == 1'b1)) | ((1'b1 == ap_CS_fsm_state42) & (p_8_reg_100 == 1'd0)))) begin
        cubieColor_V_ce0 = grp_edgeCorrect_fu_75_cubieColor_V_ce0;
    end else if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state36) | ((1'b1 == ap_CS_fsm_state40) & (p_0_reg_108 == 1'd1) & (p_8_reg_100 == 1'd0) & (p_4_reg_96 == 1'd0) & (p_s_reg_92 == 1'd0)))) begin
        cubieColor_V_ce0 = grp_rotateCubeHorizontal_fu_65_cubieColor_V_ce0;
    end else if (((1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state78) & (((tmp_reg_124 == 1'd1) & (p_3_reg_104 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_8_reg_100 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_4_reg_96 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_s_reg_92 == 1'd1)))) | ((1'b1 == ap_CS_fsm_state78) & (((tmp_reg_124 == 1'd0) & (p_3_reg_104 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_8_reg_100 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_4_reg_96 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_s_reg_92 == 1'd1)))))) begin
        cubieColor_V_ce0 = grp_turnCube_fu_47_cubieColor_V_ce0;
    end else begin
        cubieColor_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        cubieColor_V_ce1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state48) & (ap_predicate_op160_call_state48 == 1'b1)) | ((1'b1 == ap_CS_fsm_state42) & (p_8_reg_100 == 1'd0)))) begin
        cubieColor_V_ce1 = grp_edgeCorrect_fu_75_cubieColor_V_ce1;
    end else if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state36) | ((1'b1 == ap_CS_fsm_state40) & (p_0_reg_108 == 1'd1) & (p_8_reg_100 == 1'd0) & (p_4_reg_96 == 1'd0) & (p_s_reg_92 == 1'd0)))) begin
        cubieColor_V_ce1 = grp_rotateCubeHorizontal_fu_65_cubieColor_V_ce1;
    end else if (((1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state78) & (((tmp_reg_124 == 1'd1) & (p_3_reg_104 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_8_reg_100 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_4_reg_96 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_s_reg_92 == 1'd1)))) | ((1'b1 == ap_CS_fsm_state78) & (((tmp_reg_124 == 1'd0) & (p_3_reg_104 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_8_reg_100 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_4_reg_96 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_s_reg_92 == 1'd1)))))) begin
        cubieColor_V_ce1 = grp_turnCube_fu_47_cubieColor_V_ce1;
    end else begin
        cubieColor_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state36) | ((1'b1 == ap_CS_fsm_state40) & (p_0_reg_108 == 1'd1) & (p_8_reg_100 == 1'd0) & (p_4_reg_96 == 1'd0) & (p_s_reg_92 == 1'd0)))) begin
        cubieColor_V_d0 = grp_rotateCubeHorizontal_fu_65_cubieColor_V_d0;
    end else if (((1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state78) & (((tmp_reg_124 == 1'd1) & (p_3_reg_104 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_8_reg_100 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_4_reg_96 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_s_reg_92 == 1'd1)))) | ((1'b1 == ap_CS_fsm_state78) & (((tmp_reg_124 == 1'd0) & (p_3_reg_104 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_8_reg_100 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_4_reg_96 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_s_reg_92 == 1'd1)))))) begin
        cubieColor_V_d0 = grp_turnCube_fu_47_cubieColor_V_d0;
    end else begin
        cubieColor_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state36) | ((1'b1 == ap_CS_fsm_state40) & (p_0_reg_108 == 1'd1) & (p_8_reg_100 == 1'd0) & (p_4_reg_96 == 1'd0) & (p_s_reg_92 == 1'd0)))) begin
        cubieColor_V_d1 = grp_rotateCubeHorizontal_fu_65_cubieColor_V_d1;
    end else if (((1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state78) & (((tmp_reg_124 == 1'd1) & (p_3_reg_104 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_8_reg_100 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_4_reg_96 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_s_reg_92 == 1'd1)))) | ((1'b1 == ap_CS_fsm_state78) & (((tmp_reg_124 == 1'd0) & (p_3_reg_104 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_8_reg_100 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_4_reg_96 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_s_reg_92 == 1'd1)))))) begin
        cubieColor_V_d1 = grp_turnCube_fu_47_cubieColor_V_d1;
    end else begin
        cubieColor_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state36) | ((1'b1 == ap_CS_fsm_state40) & (p_0_reg_108 == 1'd1) & (p_8_reg_100 == 1'd0) & (p_4_reg_96 == 1'd0) & (p_s_reg_92 == 1'd0)))) begin
        cubieColor_V_we0 = grp_rotateCubeHorizontal_fu_65_cubieColor_V_we0;
    end else if (((1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state78) & (((tmp_reg_124 == 1'd1) & (p_3_reg_104 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_8_reg_100 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_4_reg_96 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_s_reg_92 == 1'd1)))) | ((1'b1 == ap_CS_fsm_state78) & (((tmp_reg_124 == 1'd0) & (p_3_reg_104 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_8_reg_100 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_4_reg_96 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_s_reg_92 == 1'd1)))))) begin
        cubieColor_V_we0 = grp_turnCube_fu_47_cubieColor_V_we0;
    end else begin
        cubieColor_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state36) | ((1'b1 == ap_CS_fsm_state40) & (p_0_reg_108 == 1'd1) & (p_8_reg_100 == 1'd0) & (p_4_reg_96 == 1'd0) & (p_s_reg_92 == 1'd0)))) begin
        cubieColor_V_we1 = grp_rotateCubeHorizontal_fu_65_cubieColor_V_we1;
    end else if (((1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state78) & (((tmp_reg_124 == 1'd1) & (p_3_reg_104 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_8_reg_100 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_4_reg_96 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_s_reg_92 == 1'd1)))) | ((1'b1 == ap_CS_fsm_state78) & (((tmp_reg_124 == 1'd0) & (p_3_reg_104 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_8_reg_100 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_4_reg_96 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_s_reg_92 == 1'd1)))))) begin
        cubieColor_V_we1 = grp_turnCube_fu_47_cubieColor_V_we1;
    end else begin
        cubieColor_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state48) & (ap_predicate_op160_call_state48 == 1'b1)) | ((1'b1 == ap_CS_fsm_state42) & (p_8_reg_100 == 1'd0)))) begin
        grp_edgeCorrect_fu_75_edge_V = 4'd4;
    end else if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_edgeCorrect_fu_75_edge_V = 4'd3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_edgeCorrect_fu_75_edge_V = 4'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_edgeCorrect_fu_75_edge_V = 4'd1;
    end else begin
        grp_edgeCorrect_fu_75_edge_V = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state60))) begin
        grp_turnCube_fu_47_turn_V = 4'd1;
    end else if (((1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state26))) begin
        grp_turnCube_fu_47_turn_V = 4'd10;
    end else if (((1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state24))) begin
        grp_turnCube_fu_47_turn_V = 4'd9;
    end else if (((1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state18))) begin
        grp_turnCube_fu_47_turn_V = 4'd11;
    end else if (((1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state16))) begin
        grp_turnCube_fu_47_turn_V = 4'd8;
    end else if (((1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state14))) begin
        grp_turnCube_fu_47_turn_V = 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state78) & (((tmp_reg_124 == 1'd1) & (p_3_reg_104 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_8_reg_100 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_4_reg_96 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_s_reg_92 == 1'd1)))) | ((1'b1 == ap_CS_fsm_state78) & (((tmp_reg_124 == 1'd0) & (p_3_reg_104 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_8_reg_100 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_4_reg_96 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_s_reg_92 == 1'd1)))))) begin
        grp_turnCube_fu_47_turn_V = 4'd6;
    end else begin
        grp_turnCube_fu_47_turn_V = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state52) & (grp_rotateCubeHorizontal_fu_65_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state50) & (grp_rotateCubeHorizontal_fu_65_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state44) & (grp_rotateCubeHorizontal_fu_65_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state38) & (grp_rotateCubeHorizontal_fu_65_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state36) & (grp_rotateCubeHorizontal_fu_65_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state40) & (grp_rotateCubeHorizontal_fu_65_moveCounter_V_o_ap_vld == 1'b1) & (p_0_reg_108 == 1'd1) & (p_8_reg_100 == 1'd0) & (p_4_reg_96 == 1'd0) & (p_s_reg_92 == 1'd0)))) begin
        moveCounter_V_o = grp_rotateCubeHorizontal_fu_65_moveCounter_V_o;
    end else if ((((1'b1 == ap_CS_fsm_state96) & (grp_turnCube_fu_47_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state94) & (grp_turnCube_fu_47_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state92) & (grp_turnCube_fu_47_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state90) & (grp_turnCube_fu_47_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state88) & (grp_turnCube_fu_47_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state86) & (grp_turnCube_fu_47_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state84) & (grp_turnCube_fu_47_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state82) & (grp_turnCube_fu_47_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state80) & (grp_turnCube_fu_47_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state78) & (grp_turnCube_fu_47_moveCounter_V_o_ap_vld == 1'b1) & (((tmp_reg_124 == 1'd1) & (p_3_reg_104 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_8_reg_100 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_4_reg_96 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_s_reg_92 == 1'd1)))) | ((1'b1 == ap_CS_fsm_state78) & (grp_turnCube_fu_47_moveCounter_V_o_ap_vld == 1'b1) & (((tmp_reg_124 == 1'd0) & (p_3_reg_104 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_8_reg_100 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_4_reg_96 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_s_reg_92 == 1'd1)))) | ((1'b1 == ap_CS_fsm_state76) & (grp_turnCube_fu_47_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state74) & (grp_turnCube_fu_47_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state72) & (grp_turnCube_fu_47_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state70) & (grp_turnCube_fu_47_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state68) & (grp_turnCube_fu_47_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state66) & (grp_turnCube_fu_47_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state64) & (grp_turnCube_fu_47_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state62) & (grp_turnCube_fu_47_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state60) & (grp_turnCube_fu_47_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state58) & (grp_turnCube_fu_47_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state56) & (grp_turnCube_fu_47_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state32) & (grp_turnCube_fu_47_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state30) & (grp_turnCube_fu_47_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state28) & (grp_turnCube_fu_47_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state26) & (grp_turnCube_fu_47_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state24) & (grp_turnCube_fu_47_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state22) & (grp_turnCube_fu_47_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state20) & (grp_turnCube_fu_47_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state18) & (grp_turnCube_fu_47_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state16) & (grp_turnCube_fu_47_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state14) & (grp_turnCube_fu_47_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state12) & (grp_turnCube_fu_47_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state10) & (grp_turnCube_fu_47_moveCounter_V_o_ap_vld == 1'b1)))) begin
        moveCounter_V_o = grp_turnCube_fu_47_moveCounter_V_o;
    end else begin
        moveCounter_V_o = moveCounter_V_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state36) | ((1'b1 == ap_CS_fsm_state40) & (p_0_reg_108 == 1'd1) & (p_8_reg_100 == 1'd0) & (p_4_reg_96 == 1'd0) & (p_s_reg_92 == 1'd0)))) begin
        moveCounter_V_o_ap_vld = grp_rotateCubeHorizontal_fu_65_moveCounter_V_o_ap_vld;
    end else if (((1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state78) & (((tmp_reg_124 == 1'd1) & (p_3_reg_104 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_8_reg_100 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_4_reg_96 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_s_reg_92 == 1'd1)))) | ((1'b1 == ap_CS_fsm_state78) & (((tmp_reg_124 == 1'd0) & (p_3_reg_104 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_8_reg_100 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_4_reg_96 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_s_reg_92 == 1'd1)))))) begin
        moveCounter_V_o_ap_vld = grp_turnCube_fu_47_moveCounter_V_o_ap_vld;
    end else begin
        moveCounter_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state36) | ((1'b1 == ap_CS_fsm_state40) & (p_0_reg_108 == 1'd1) & (p_8_reg_100 == 1'd0) & (p_4_reg_96 == 1'd0) & (p_s_reg_92 == 1'd0)))) begin
        moves_V_address0 = grp_rotateCubeHorizontal_fu_65_moves_V_address0;
    end else if (((1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state78) & (((tmp_reg_124 == 1'd1) & (p_3_reg_104 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_8_reg_100 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_4_reg_96 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_s_reg_92 == 1'd1)))) | ((1'b1 == ap_CS_fsm_state78) & (((tmp_reg_124 == 1'd0) & (p_3_reg_104 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_8_reg_100 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_4_reg_96 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_s_reg_92 == 1'd1)))))) begin
        moves_V_address0 = grp_turnCube_fu_47_moves_V_address0;
    end else begin
        moves_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state36) | ((1'b1 == ap_CS_fsm_state40) & (p_0_reg_108 == 1'd1) & (p_8_reg_100 == 1'd0) & (p_4_reg_96 == 1'd0) & (p_s_reg_92 == 1'd0)))) begin
        moves_V_ce0 = grp_rotateCubeHorizontal_fu_65_moves_V_ce0;
    end else if (((1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state78) & (((tmp_reg_124 == 1'd1) & (p_3_reg_104 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_8_reg_100 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_4_reg_96 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_s_reg_92 == 1'd1)))) | ((1'b1 == ap_CS_fsm_state78) & (((tmp_reg_124 == 1'd0) & (p_3_reg_104 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_8_reg_100 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_4_reg_96 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_s_reg_92 == 1'd1)))))) begin
        moves_V_ce0 = grp_turnCube_fu_47_moves_V_ce0;
    end else begin
        moves_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state36) | ((1'b1 == ap_CS_fsm_state40) & (p_0_reg_108 == 1'd1) & (p_8_reg_100 == 1'd0) & (p_4_reg_96 == 1'd0) & (p_s_reg_92 == 1'd0)))) begin
        moves_V_d0 = grp_rotateCubeHorizontal_fu_65_moves_V_d0;
    end else if (((1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state78) & (((tmp_reg_124 == 1'd1) & (p_3_reg_104 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_8_reg_100 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_4_reg_96 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_s_reg_92 == 1'd1)))) | ((1'b1 == ap_CS_fsm_state78) & (((tmp_reg_124 == 1'd0) & (p_3_reg_104 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_8_reg_100 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_4_reg_96 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_s_reg_92 == 1'd1)))))) begin
        moves_V_d0 = grp_turnCube_fu_47_moves_V_d0;
    end else begin
        moves_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state36) | ((1'b1 == ap_CS_fsm_state40) & (p_0_reg_108 == 1'd1) & (p_8_reg_100 == 1'd0) & (p_4_reg_96 == 1'd0) & (p_s_reg_92 == 1'd0)))) begin
        moves_V_we0 = grp_rotateCubeHorizontal_fu_65_moves_V_we0;
    end else if (((1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state78) & (((tmp_reg_124 == 1'd1) & (p_3_reg_104 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_8_reg_100 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_4_reg_96 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_s_reg_92 == 1'd1)))) | ((1'b1 == ap_CS_fsm_state78) & (((tmp_reg_124 == 1'd0) & (p_3_reg_104 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_8_reg_100 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_4_reg_96 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_s_reg_92 == 1'd1)))))) begin
        moves_V_we0 = grp_turnCube_fu_47_moves_V_we0;
    end else begin
        moves_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_edgeCorrect_fu_75_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_edgeCorrect_fu_75_ap_done == 1'b1) & (p_s_reg_92 == 1'd1) & (grp_edgeCorrect_fu_75_ap_return == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else if (((1'b1 == ap_CS_fsm_state4) & (grp_edgeCorrect_fu_75_ap_done == 1'b1) & (p_s_reg_92 == 1'd1) & (grp_edgeCorrect_fu_75_ap_return == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else if (((1'b1 == ap_CS_fsm_state4) & (grp_edgeCorrect_fu_75_ap_done == 1'b1) & (p_s_reg_92 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (p_4_reg_96 == 1'd1) & (grp_edgeCorrect_fu_75_ap_done == 1'b1) & (grp_edgeCorrect_fu_75_ap_return == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else if (((1'b1 == ap_CS_fsm_state6) & (p_4_reg_96 == 1'd1) & (grp_edgeCorrect_fu_75_ap_done == 1'b1) & (grp_edgeCorrect_fu_75_ap_return == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else if (((1'b1 == ap_CS_fsm_state6) & (p_4_reg_96 == 1'd0) & (grp_edgeCorrect_fu_75_ap_done == 1'b1) & (grp_edgeCorrect_fu_75_ap_return == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else if (((1'b1 == ap_CS_fsm_state6) & (p_4_reg_96 == 1'd0) & (grp_edgeCorrect_fu_75_ap_done == 1'b1) & (grp_edgeCorrect_fu_75_ap_return == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (grp_edgeCorrect_fu_75_ap_done == 1'b1) & (grp_edgeCorrect_fu_75_ap_return == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else if (((1'b1 == ap_CS_fsm_state8) & (grp_edgeCorrect_fu_75_ap_done == 1'b1) & (grp_edgeCorrect_fu_75_ap_return == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((grp_turnCube_fu_47_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((grp_turnCube_fu_47_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((grp_turnCube_fu_47_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((grp_turnCube_fu_47_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((grp_turnCube_fu_47_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((grp_turnCube_fu_47_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((grp_turnCube_fu_47_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if (((grp_turnCube_fu_47_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((grp_turnCube_fu_47_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            if (((grp_turnCube_fu_47_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            if (((grp_turnCube_fu_47_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            if (((grp_turnCube_fu_47_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            if (((1'b1 == ap_CS_fsm_state34) & (grp_edgeCorrect_fu_75_ap_done == 1'b1) & (grp_edgeCorrect_fu_75_ap_return == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else if (((1'b1 == ap_CS_fsm_state34) & (grp_edgeCorrect_fu_75_ap_done == 1'b1) & (grp_edgeCorrect_fu_75_ap_return == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            if (((grp_rotateCubeHorizontal_fu_65_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            if (((grp_rotateCubeHorizontal_fu_65_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            if (((1'b1 == ap_CS_fsm_state40) & (1'b0 == ap_block_state40_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            if (((1'b1 == ap_CS_fsm_state42) & (1'b0 == ap_block_state42_on_subcall_done) & ((p_8_reg_100 == 1'd1) | (grp_edgeCorrect_fu_75_ap_return == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else if (((1'b1 == ap_CS_fsm_state42) & (1'b0 == ap_block_state42_on_subcall_done) & (p_8_reg_100 == 1'd0) & (grp_edgeCorrect_fu_75_ap_return == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            if (((grp_rotateCubeHorizontal_fu_65_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            if (((1'b1 == ap_CS_fsm_state46) & (grp_edgeCorrect_fu_75_ap_done == 1'b1) & (grp_edgeCorrect_fu_75_ap_return == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else if (((1'b1 == ap_CS_fsm_state46) & (grp_edgeCorrect_fu_75_ap_done == 1'b1) & (grp_edgeCorrect_fu_75_ap_return == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            if (((1'b0 == ap_block_state48_on_subcall_done) & (1'b1 == ap_CS_fsm_state48) & ((p_5_reg_116 == 1'd1) | (p_4_reg_96 == 1'd1) | (grp_edgeCorrect_fu_75_ap_return == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else if (((1'b0 == ap_block_state48_on_subcall_done) & (1'b1 == ap_CS_fsm_state48) & (p_5_reg_116 == 1'd0) & (p_4_reg_96 == 1'd0) & (grp_edgeCorrect_fu_75_ap_return == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            if (((grp_rotateCubeHorizontal_fu_65_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            if (((grp_rotateCubeHorizontal_fu_65_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state52))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            if (((grp_turnCube_fu_47_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state56))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            if (((grp_turnCube_fu_47_ap_done == 1'b1) & (tmp_reg_124 == 1'd1) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end else if (((grp_turnCube_fu_47_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state58) & (tmp_reg_124 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            if (((grp_turnCube_fu_47_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state60))) begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            if (((grp_turnCube_fu_47_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state62))) begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            if (((grp_turnCube_fu_47_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state64))) begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            if (((grp_turnCube_fu_47_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state66))) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            if (((grp_turnCube_fu_47_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state68))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            if (((grp_turnCube_fu_47_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state70))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            if (((grp_turnCube_fu_47_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state72))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            if (((grp_turnCube_fu_47_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state74))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            if (((grp_turnCube_fu_47_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state76))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            if (((1'b0 == ap_block_state78_on_subcall_done) & (1'b1 == ap_CS_fsm_state78))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            if (((grp_turnCube_fu_47_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state80))) begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            if (((grp_turnCube_fu_47_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state82))) begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            if (((grp_turnCube_fu_47_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state84))) begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            if (((grp_turnCube_fu_47_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state86))) begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            if (((grp_turnCube_fu_47_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state88))) begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            if (((grp_turnCube_fu_47_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state90))) begin
                ap_NS_fsm = ap_ST_fsm_state91;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state90;
            end
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            if (((grp_turnCube_fu_47_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state92))) begin
                ap_NS_fsm = ap_ST_fsm_state93;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state92;
            end
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            if (((grp_turnCube_fu_47_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state94))) begin
                ap_NS_fsm = ap_ST_fsm_state95;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state94;
            end
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            if (((grp_turnCube_fu_47_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state96))) begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state96;
            end
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

always @ (*) begin
    ap_block_state40_on_subcall_done = ((grp_rotateCubeHorizontal_fu_65_ap_done == 1'b0) & (ap_predicate_op145_call_state40 == 1'b1));
end

always @ (*) begin
    ap_block_state42_on_subcall_done = ((grp_edgeCorrect_fu_75_ap_done == 1'b0) & (p_8_reg_100 == 1'd0));
end

always @ (*) begin
    ap_block_state48_on_subcall_done = ((grp_edgeCorrect_fu_75_ap_done == 1'b0) & (ap_predicate_op160_call_state48 == 1'b1));
end

always @ (*) begin
    ap_block_state78_on_subcall_done = (((grp_turnCube_fu_47_ap_done == 1'b0) & (ap_predicate_op199_call_state78 == 1'b1)) | ((grp_turnCube_fu_47_ap_done == 1'b0) & (ap_predicate_op197_call_state78 == 1'b1)));
end

always @ (*) begin
    ap_predicate_op145_call_state40 = ((p_0_reg_108 == 1'd1) & (p_8_reg_100 == 1'd0) & (p_4_reg_96 == 1'd0) & (p_s_reg_92 == 1'd0));
end

always @ (*) begin
    ap_predicate_op160_call_state48 = ((p_5_reg_116 == 1'd0) & (p_4_reg_96 == 1'd0));
end

always @ (*) begin
    ap_predicate_op197_call_state78 = (((tmp_reg_124 == 1'd0) & (p_3_reg_104 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_8_reg_100 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_4_reg_96 == 1'd1)) | ((tmp_reg_124 == 1'd0) & (p_s_reg_92 == 1'd1)));
end

always @ (*) begin
    ap_predicate_op199_call_state78 = (((tmp_reg_124 == 1'd1) & (p_3_reg_104 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_8_reg_100 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_4_reg_96 == 1'd1)) | ((tmp_reg_124 == 1'd1) & (p_s_reg_92 == 1'd1)));
end

assign grp_edgeCorrect_fu_75_ap_start = grp_edgeCorrect_fu_75_ap_start_reg;

assign grp_rotateCubeHorizontal_fu_65_ap_start = grp_rotateCubeHorizontal_fu_65_ap_start_reg;

assign grp_turnCube_fu_47_ap_start = grp_turnCube_fu_47_ap_start_reg;

assign tmp_fu_86_p2 = ((cubieColor_V_q0 == cubieColor_V_q1) ? 1'b1 : 1'b0);

endmodule //solveStage5b
