-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity findEdge is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fEC_V : IN STD_LOGIC_VECTOR (2 downto 0);
    sEC_V : IN STD_LOGIC_VECTOR (2 downto 0);
    cubieColor_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    cubieColor_V_ce0 : OUT STD_LOGIC;
    cubieColor_V_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
    cubieColor_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    cubieColor_V_ce1 : OUT STD_LOGIC;
    cubieColor_V_q1 : IN STD_LOGIC_VECTOR (2 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of findEdge is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv6_1C : STD_LOGIC_VECTOR (5 downto 0) := "011100";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv6_25 : STD_LOGIC_VECTOR (5 downto 0) := "100101";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_13 : STD_LOGIC_VECTOR (5 downto 0) := "010011";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv6_2E : STD_LOGIC_VECTOR (5 downto 0) := "101110";
    constant ap_const_lv6_1E : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_const_lv6_29 : STD_LOGIC_VECTOR (5 downto 0) := "101001";
    constant ap_const_lv6_27 : STD_LOGIC_VECTOR (5 downto 0) := "100111";
    constant ap_const_lv6_17 : STD_LOGIC_VECTOR (5 downto 0) := "010111";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_15 : STD_LOGIC_VECTOR (5 downto 0) := "010101";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_A : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_const_lv6_22 : STD_LOGIC_VECTOR (5 downto 0) := "100010";
    constant ap_const_lv6_C : STD_LOGIC_VECTOR (5 downto 0) := "001100";
    constant ap_const_lv6_2B : STD_LOGIC_VECTOR (5 downto 0) := "101011";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv6_19 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_const_lv6_E : STD_LOGIC_VECTOR (5 downto 0) := "001110";
    constant ap_const_lv6_34 : STD_LOGIC_VECTOR (5 downto 0) := "110100";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cubieColor_V_load_reg_502 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal cubieColor_V_load_85_reg_508 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal newSel4_fu_207_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal newSel4_reg_526 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_91_reg_531 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_92_reg_536 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_93_reg_541 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_94_reg_546 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel7_fu_264_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal newSel7_reg_551 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_99_reg_556 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_100_reg_561 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_101_reg_566 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_102_reg_571 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_reg_576 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_107_reg_582 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_108_reg_587 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_109_reg_592 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_110_reg_597 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_reg_602 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal or_cond2_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_reg_607 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond6_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond6_reg_612 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_115_reg_617 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_116_reg_622 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_117_reg_627 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_118_reg_632 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp9_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp9_reg_637 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_123_reg_643 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_124_reg_648 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_125_reg_653 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_126_reg_658 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_fu_147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_85_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_86_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_11_fu_157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_12_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_13_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond4_14_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal agg_result_V_cast_fu_185_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_cond5_15_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond6_16_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond7_17_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond8_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond4_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel3_fu_247_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal newSel32_cast_fu_261_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_cond10_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond11_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond9_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond1_18_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond12_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond13_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond14_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond15_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond18_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond19_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond16_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond17_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond20_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond21_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond22_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond23_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp11_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp10_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel_fu_417_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal newSel1_fu_431_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_cond1_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel2_fu_443_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal newSel28_cast_cast_fu_450_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_cond5_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel5_fu_457_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal newSel6_fu_471_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_cond7_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel8_fu_481_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal newSel38_cast_fu_478_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal newSel9_fu_494_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv4_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_return_preg <= newSel9_fu_494_p3;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                cubieColor_V_load_85_reg_508 <= cubieColor_V_q1;
                cubieColor_V_load_reg_502 <= cubieColor_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                newSel4_reg_526 <= newSel4_fu_207_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                newSel7_reg_551 <= newSel7_fu_264_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                or_cond2_reg_607 <= or_cond2_fu_336_p2;
                or_cond6_reg_612 <= or_cond6_fu_347_p2;
                sel_tmp5_reg_602 <= sel_tmp5_fu_330_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                sel_tmp1_reg_576 <= sel_tmp1_fu_284_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                sel_tmp9_reg_637 <= sel_tmp9_fu_365_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_100_reg_561 <= grp_fu_129_p2;
                tmp_101_reg_566 <= grp_fu_135_p2;
                tmp_102_reg_571 <= grp_fu_141_p2;
                tmp_99_reg_556 <= grp_fu_123_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_107_reg_582 <= grp_fu_123_p2;
                tmp_108_reg_587 <= grp_fu_129_p2;
                tmp_109_reg_592 <= grp_fu_135_p2;
                tmp_110_reg_597 <= grp_fu_141_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_115_reg_617 <= grp_fu_123_p2;
                tmp_116_reg_622 <= grp_fu_129_p2;
                tmp_117_reg_627 <= grp_fu_135_p2;
                tmp_118_reg_632 <= grp_fu_141_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_123_reg_643 <= grp_fu_123_p2;
                tmp_124_reg_648 <= grp_fu_129_p2;
                tmp_125_reg_653 <= grp_fu_135_p2;
                tmp_126_reg_658 <= grp_fu_141_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_91_reg_531 <= grp_fu_123_p2;
                tmp_92_reg_536 <= grp_fu_129_p2;
                tmp_93_reg_541 <= grp_fu_135_p2;
                tmp_94_reg_546 <= grp_fu_141_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    agg_result_V_cast_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sel_tmp_fu_179_p2),2));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state13, newSel9_fu_494_p3, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_return <= newSel9_fu_494_p3;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    cubieColor_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            cubieColor_V_address0 <= ap_const_lv6_E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            cubieColor_V_address0 <= ap_const_lv6_10;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            cubieColor_V_address0 <= ap_const_lv6_C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cubieColor_V_address0 <= ap_const_lv6_A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cubieColor_V_address0 <= ap_const_lv6_20;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            cubieColor_V_address0 <= ap_const_lv6_32;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            cubieColor_V_address0 <= ap_const_lv6_27;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            cubieColor_V_address0 <= ap_const_lv6_1E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cubieColor_V_address0 <= ap_const_lv6_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cubieColor_V_address0 <= ap_const_lv6_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cubieColor_V_address0 <= ap_const_lv6_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            cubieColor_V_address0 <= ap_const_lv6_7;
        else 
            cubieColor_V_address0 <= "XXXXXX";
        end if; 
    end process;


    cubieColor_V_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            cubieColor_V_address1 <= ap_const_lv6_34;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            cubieColor_V_address1 <= ap_const_lv6_19;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            cubieColor_V_address1 <= ap_const_lv6_2B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cubieColor_V_address1 <= ap_const_lv6_22;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cubieColor_V_address1 <= ap_const_lv6_30;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            cubieColor_V_address1 <= ap_const_lv6_15;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            cubieColor_V_address1 <= ap_const_lv6_17;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            cubieColor_V_address1 <= ap_const_lv6_29;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cubieColor_V_address1 <= ap_const_lv6_2E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cubieColor_V_address1 <= ap_const_lv6_13;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cubieColor_V_address1 <= ap_const_lv6_25;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            cubieColor_V_address1 <= ap_const_lv6_1C;
        else 
            cubieColor_V_address1 <= "XXXXXX";
        end if; 
    end process;


    cubieColor_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            cubieColor_V_ce0 <= ap_const_logic_1;
        else 
            cubieColor_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cubieColor_V_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            cubieColor_V_ce1 <= ap_const_logic_1;
        else 
            cubieColor_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_123_p2 <= "1" when (cubieColor_V_q0 = fEC_V) else "0";
    grp_fu_129_p2 <= "1" when (cubieColor_V_q1 = sEC_V) else "0";
    grp_fu_135_p2 <= "1" when (cubieColor_V_q0 = sEC_V) else "0";
    grp_fu_141_p2 <= "1" when (cubieColor_V_q1 = fEC_V) else "0";
    newSel1_fu_431_p3 <= 
        ap_const_lv4_A when (sel_tmp9_reg_637(0) = '1') else 
        ap_const_lv4_9;
    newSel28_cast_cast_fu_450_p3 <= 
        ap_const_lv4_6 when (sel_tmp1_reg_576(0) = '1') else 
        ap_const_lv4_5;
    newSel2_fu_443_p3 <= 
        ap_const_lv4_8 when (sel_tmp5_reg_602(0) = '1') else 
        ap_const_lv4_7;
    newSel32_cast_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newSel4_reg_526),3));
    newSel38_cast_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newSel7_reg_551),4));
    newSel3_fu_247_p3 <= 
        ap_const_lv3_4 when (sel_tmp6_fu_241_p2(0) = '1') else 
        ap_const_lv3_3;
    newSel4_fu_207_p3 <= 
        ap_const_lv2_2 when (sel_tmp2_fu_201_p2(0) = '1') else 
        agg_result_V_cast_fu_185_p1;
    newSel5_fu_457_p3 <= 
        newSel_fu_417_p3 when (or_cond_fu_425_p2(0) = '1') else 
        newSel1_fu_431_p3;
    newSel6_fu_471_p3 <= 
        newSel2_fu_443_p3 when (or_cond2_reg_607(0) = '1') else 
        newSel28_cast_cast_fu_450_p3;
    newSel7_fu_264_p3 <= 
        newSel3_fu_247_p3 when (or_cond4_fu_255_p2(0) = '1') else 
        newSel32_cast_fu_261_p1;
    newSel8_fu_481_p3 <= 
        newSel5_fu_457_p3 when (or_cond5_fu_465_p2(0) = '1') else 
        newSel6_fu_471_p3;
    newSel9_fu_494_p3 <= 
        newSel8_fu_481_p3 when (or_cond7_fu_489_p2(0) = '1') else 
        newSel38_cast_fu_478_p1;
    newSel_fu_417_p3 <= 
        ap_const_lv4_C when (sel_tmp11_fu_411_p2(0) = '1') else 
        ap_const_lv4_B;
    or_cond10_fu_272_p2 <= (grp_fu_129_p2 and grp_fu_123_p2);
    or_cond11_fu_278_p2 <= (grp_fu_141_p2 and grp_fu_135_p2);
    or_cond12_fu_304_p2 <= (tmp_108_reg_587 and tmp_107_reg_582);
    or_cond13_fu_308_p2 <= (tmp_110_reg_597 and tmp_109_reg_592);
    or_cond14_fu_318_p2 <= (grp_fu_129_p2 and grp_fu_123_p2);
    or_cond15_fu_324_p2 <= (grp_fu_141_p2 and grp_fu_135_p2);
    or_cond16_fu_371_p2 <= (tmp_116_reg_622 and tmp_115_reg_617);
    or_cond17_fu_375_p2 <= (tmp_118_reg_632 and tmp_117_reg_627);
    or_cond18_fu_353_p2 <= (grp_fu_129_p2 and grp_fu_123_p2);
    or_cond19_fu_359_p2 <= (grp_fu_141_p2 and grp_fu_135_p2);
    or_cond1_18_fu_294_p2 <= (tmp_102_reg_571 and tmp_101_reg_566);
    or_cond1_fu_438_p2 <= (sel_tmp9_reg_637 or sel_tmp7_fu_379_p2);
    or_cond20_fu_385_p2 <= (tmp_124_reg_648 and tmp_123_reg_643);
    or_cond21_fu_389_p2 <= (tmp_126_reg_658 and tmp_125_reg_653);
    or_cond22_fu_399_p2 <= (grp_fu_129_p2 and grp_fu_123_p2);
    or_cond23_fu_405_p2 <= (grp_fu_141_p2 and grp_fu_135_p2);
    or_cond2_12_fu_173_p2 <= (tmp_86_fu_168_p2 and tmp_85_fu_163_p2);
    or_cond2_fu_336_p2 <= (sel_tmp5_fu_330_p2 or sel_tmp3_fu_312_p2);
    or_cond3_13_fu_189_p2 <= (grp_fu_129_p2 and grp_fu_123_p2);
    or_cond3_fu_342_p2 <= (sel_tmp8_fu_298_p2 or sel_tmp1_reg_576);
    or_cond4_14_fu_195_p2 <= (grp_fu_141_p2 and grp_fu_135_p2);
    or_cond4_fu_255_p2 <= (sel_tmp6_fu_241_p2 or sel_tmp4_fu_223_p2);
    or_cond5_15_fu_215_p2 <= (tmp_92_reg_536 and tmp_91_reg_531);
    or_cond5_fu_465_p2 <= (or_cond_fu_425_p2 or or_cond1_fu_438_p2);
    or_cond6_16_fu_219_p2 <= (tmp_94_reg_546 and tmp_93_reg_541);
    or_cond6_fu_347_p2 <= (or_cond3_fu_342_p2 or or_cond2_fu_336_p2);
    or_cond7_17_fu_229_p2 <= (grp_fu_129_p2 and grp_fu_123_p2);
    or_cond7_fu_489_p2 <= (or_cond6_reg_612 or or_cond5_fu_465_p2);
    or_cond8_fu_235_p2 <= (grp_fu_141_p2 and grp_fu_135_p2);
    or_cond9_fu_290_p2 <= (tmp_99_reg_556 and tmp_100_reg_561);
    or_cond_11_fu_157_p2 <= (tmp_s_fu_152_p2 and tmp_fu_147_p2);
    or_cond_fu_425_p2 <= (sel_tmp11_fu_411_p2 or sel_tmp10_fu_393_p2);
    sel_tmp10_fu_393_p2 <= (or_cond21_fu_389_p2 or or_cond20_fu_385_p2);
    sel_tmp11_fu_411_p2 <= (or_cond23_fu_405_p2 or or_cond22_fu_399_p2);
    sel_tmp1_fu_284_p2 <= (or_cond11_fu_278_p2 or or_cond10_fu_272_p2);
    sel_tmp2_fu_201_p2 <= (or_cond4_14_fu_195_p2 or or_cond3_13_fu_189_p2);
    sel_tmp3_fu_312_p2 <= (or_cond13_fu_308_p2 or or_cond12_fu_304_p2);
    sel_tmp4_fu_223_p2 <= (or_cond6_16_fu_219_p2 or or_cond5_15_fu_215_p2);
    sel_tmp5_fu_330_p2 <= (or_cond15_fu_324_p2 or or_cond14_fu_318_p2);
    sel_tmp6_fu_241_p2 <= (or_cond8_fu_235_p2 or or_cond7_17_fu_229_p2);
    sel_tmp7_fu_379_p2 <= (or_cond17_fu_375_p2 or or_cond16_fu_371_p2);
    sel_tmp8_fu_298_p2 <= (or_cond9_fu_290_p2 or or_cond1_18_fu_294_p2);
    sel_tmp9_fu_365_p2 <= (or_cond19_fu_359_p2 or or_cond18_fu_353_p2);
    sel_tmp_fu_179_p2 <= (or_cond_11_fu_157_p2 or or_cond2_12_fu_173_p2);
    tmp_85_fu_163_p2 <= "1" when (cubieColor_V_load_reg_502 = sEC_V) else "0";
    tmp_86_fu_168_p2 <= "1" when (cubieColor_V_load_85_reg_508 = fEC_V) else "0";
    tmp_fu_147_p2 <= "1" when (cubieColor_V_load_reg_502 = fEC_V) else "0";
    tmp_s_fu_152_p2 <= "1" when (cubieColor_V_load_85_reg_508 = sEC_V) else "0";
end behav;
