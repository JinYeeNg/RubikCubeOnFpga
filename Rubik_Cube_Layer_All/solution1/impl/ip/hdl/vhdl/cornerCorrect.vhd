-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cornerCorrect is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    corner_V : IN STD_LOGIC_VECTOR (2 downto 0);
    cubieColor_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    cubieColor_V_ce0 : OUT STD_LOGIC;
    cubieColor_V_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
    cubieColor_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    cubieColor_V_ce1 : OUT STD_LOGIC;
    cubieColor_V_q1 : IN STD_LOGIC_VECTOR (2 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of cornerCorrect is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv6_1B : STD_LOGIC_VECTOR (5 downto 0) := "011011";
    constant ap_const_lv6_16 : STD_LOGIC_VECTOR (5 downto 0) := "010110";
    constant ap_const_lv6_14 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_const_lv6_12 : STD_LOGIC_VECTOR (5 downto 0) := "010010";
    constant ap_const_lv6_1D : STD_LOGIC_VECTOR (5 downto 0) := "011101";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv6_26 : STD_LOGIC_VECTOR (5 downto 0) := "100110";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_2F : STD_LOGIC_VECTOR (5 downto 0) := "101111";
    constant ap_const_lv6_2D : STD_LOGIC_VECTOR (5 downto 0) := "101101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_93 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_77_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_219 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_83_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_216_reg_224 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_217_reg_229 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_218_reg_234 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_88_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_219_reg_239 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal cubieColor_V_load_157_reg_244 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_220_fu_107_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_220_reg_250 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_221_fu_112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_221_reg_255 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_222_reg_260 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_reg_265 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_reg_270 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp10_fu_145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp10_reg_275 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp17_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp17_reg_280 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_77_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal sel_tmp_fu_117_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_101_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp19_fu_128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp24_fu_157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp15_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp21_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp20_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_225_fu_167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp23_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp22_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp13_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp26_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp25_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal agg_result_V_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_return_preg <= agg_result_V_fu_213_p2;
                end if; 
            end if;
        end if;
    end process;


    reg_93_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                reg_93 <= cubieColor_V_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                reg_93 <= cubieColor_V_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                cubieColor_V_load_157_reg_244 <= cubieColor_V_q1;
                tmp_219_reg_239 <= grp_fu_88_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                sel_tmp10_reg_275 <= sel_tmp10_fu_145_p2;
                sel_tmp17_reg_280 <= sel_tmp17_fu_161_p2;
                sel_tmp3_reg_265 <= sel_tmp3_fu_133_p2;
                sel_tmp5_reg_270 <= sel_tmp5_fu_139_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_216_reg_224 <= grp_fu_83_p2;
                tmp_217_reg_229 <= grp_fu_77_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_218_reg_234 <= grp_fu_83_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_220_reg_250 <= tmp_220_fu_107_p2;
                tmp_221_reg_255 <= tmp_221_fu_112_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_222_reg_260 <= grp_fu_88_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_s_reg_219 <= grp_fu_77_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    agg_result_V_fu_213_p2 <= (tmp26_fu_208_p2 or tmp25_fu_203_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state9, agg_result_V_fu_213_p2, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_return <= agg_result_V_fu_213_p2;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    cubieColor_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cubieColor_V_address0 <= ap_const_lv6_2F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            cubieColor_V_address0 <= ap_const_lv6_26;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            cubieColor_V_address0 <= ap_const_lv6_1D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            cubieColor_V_address0 <= ap_const_lv6_14;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cubieColor_V_address0 <= ap_const_lv6_1B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cubieColor_V_address0 <= ap_const_lv6_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cubieColor_V_address0 <= ap_const_lv6_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            cubieColor_V_address0 <= ap_const_lv6_4;
        else 
            cubieColor_V_address0 <= "XXXXXX";
        end if; 
    end process;


    cubieColor_V_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cubieColor_V_address1 <= ap_const_lv6_2D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            cubieColor_V_address1 <= ap_const_lv6_31;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            cubieColor_V_address1 <= ap_const_lv6_28;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            cubieColor_V_address1 <= ap_const_lv6_12;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cubieColor_V_address1 <= ap_const_lv6_16;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cubieColor_V_address1 <= ap_const_lv6_1F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cubieColor_V_address1 <= ap_const_lv6_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            cubieColor_V_address1 <= ap_const_lv6_6;
        else 
            cubieColor_V_address1 <= "XXXXXX";
        end if; 
    end process;


    cubieColor_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            cubieColor_V_ce0 <= ap_const_logic_1;
        else 
            cubieColor_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cubieColor_V_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            cubieColor_V_ce1 <= ap_const_logic_1;
        else 
            cubieColor_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_101_p2 <= "1" when (reg_93 = cubieColor_V_q0) else "0";

    grp_fu_77_p0_assign_proc : process(cubieColor_V_q0, reg_93, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_77_p0 <= reg_93;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_77_p0 <= cubieColor_V_q0;
        else 
            grp_fu_77_p0 <= "XXX";
        end if; 
    end process;

    grp_fu_77_p2 <= "1" when (grp_fu_77_p0 = cubieColor_V_q1) else "0";
    grp_fu_83_p2 <= "1" when (reg_93 = cubieColor_V_q0) else "0";
    grp_fu_88_p2 <= "1" when (reg_93 = cubieColor_V_q0) else "0";
    sel_tmp10_fu_145_p2 <= "1" when (corner_V = ap_const_lv3_4) else "0";
    sel_tmp13_fu_197_p2 <= (tmp23_fu_192_p2 and tmp22_fu_188_p2);
    sel_tmp15_fu_151_p2 <= "1" when (corner_V = ap_const_lv3_2) else "0";
    sel_tmp17_fu_161_p2 <= (tmp24_fu_157_p2 and sel_tmp15_fu_151_p2);
    sel_tmp3_fu_133_p2 <= (tmp_fu_123_p2 and tmp19_fu_128_p2);
    sel_tmp5_fu_139_p2 <= "1" when (corner_V = ap_const_lv3_3) else "0";
    sel_tmp8_fu_182_p2 <= (tmp21_fu_177_p2 and tmp20_fu_173_p2);
    sel_tmp_fu_117_p2 <= "1" when (corner_V = ap_const_lv3_1) else "0";
    tmp19_fu_128_p2 <= (tmp_219_reg_239 and grp_fu_101_p2);
    tmp20_fu_173_p2 <= (tmp_217_reg_229 and sel_tmp5_reg_270);
    tmp21_fu_177_p2 <= (tmp_221_reg_255 and grp_fu_101_p2);
    tmp22_fu_188_p2 <= (tmp_218_reg_234 and sel_tmp10_reg_275);
    tmp23_fu_192_p2 <= (tmp_225_fu_167_p2 and tmp_222_reg_260);
    tmp24_fu_157_p2 <= (tmp_220_reg_250 and tmp_216_reg_224);
    tmp25_fu_203_p2 <= (sel_tmp8_fu_182_p2 or sel_tmp3_reg_265);
    tmp26_fu_208_p2 <= (sel_tmp17_reg_280 or sel_tmp13_fu_197_p2);
    tmp_220_fu_107_p2 <= "1" when (cubieColor_V_load_157_reg_244 = cubieColor_V_q0) else "0";
    tmp_221_fu_112_p2 <= "1" when (cubieColor_V_load_157_reg_244 = cubieColor_V_q1) else "0";
    tmp_225_fu_167_p2 <= "1" when (reg_93 = cubieColor_V_q1) else "0";
    tmp_fu_123_p2 <= (tmp_s_reg_219 and sel_tmp_fu_117_p2);
end behav;
