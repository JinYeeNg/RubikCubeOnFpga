-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity solveStage3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fC_V : IN STD_LOGIC_VECTOR (2 downto 0);
    sC_V : IN STD_LOGIC_VECTOR (2 downto 0);
    moveCounter_V_i : IN STD_LOGIC_VECTOR (7 downto 0);
    moveCounter_V_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    moveCounter_V_o_ap_vld : OUT STD_LOGIC;
    moves_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    moves_V_ce0 : OUT STD_LOGIC;
    moves_V_we0 : OUT STD_LOGIC;
    moves_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    cubieColor_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    cubieColor_V_ce0 : OUT STD_LOGIC;
    cubieColor_V_we0 : OUT STD_LOGIC;
    cubieColor_V_d0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    cubieColor_V_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
    cubieColor_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    cubieColor_V_ce1 : OUT STD_LOGIC;
    cubieColor_V_we1 : OUT STD_LOGIC;
    cubieColor_V_d1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    cubieColor_V_q1 : IN STD_LOGIC_VECTOR (2 downto 0) );
end;


architecture behav of solveStage3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_stage3Prepare_fu_32_ap_start : STD_LOGIC;
    signal grp_stage3Prepare_fu_32_ap_done : STD_LOGIC;
    signal grp_stage3Prepare_fu_32_ap_idle : STD_LOGIC;
    signal grp_stage3Prepare_fu_32_ap_ready : STD_LOGIC;
    signal grp_stage3Prepare_fu_32_cubieColor_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_stage3Prepare_fu_32_cubieColor_V_ce0 : STD_LOGIC;
    signal grp_stage3Prepare_fu_32_cubieColor_V_we0 : STD_LOGIC;
    signal grp_stage3Prepare_fu_32_cubieColor_V_d0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_stage3Prepare_fu_32_cubieColor_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_stage3Prepare_fu_32_cubieColor_V_ce1 : STD_LOGIC;
    signal grp_stage3Prepare_fu_32_cubieColor_V_we1 : STD_LOGIC;
    signal grp_stage3Prepare_fu_32_cubieColor_V_d1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_stage3Prepare_fu_32_moveCounter_V_o : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_stage3Prepare_fu_32_moveCounter_V_o_ap_vld : STD_LOGIC;
    signal grp_stage3Prepare_fu_32_moves_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_stage3Prepare_fu_32_moves_V_ce0 : STD_LOGIC;
    signal grp_stage3Prepare_fu_32_moves_V_we0 : STD_LOGIC;
    signal grp_stage3Prepare_fu_32_moves_V_d0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_solveStage3a_fu_44_ap_start : STD_LOGIC;
    signal grp_solveStage3a_fu_44_ap_done : STD_LOGIC;
    signal grp_solveStage3a_fu_44_ap_idle : STD_LOGIC;
    signal grp_solveStage3a_fu_44_ap_ready : STD_LOGIC;
    signal grp_solveStage3a_fu_44_moveCounter_V_o : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_solveStage3a_fu_44_moveCounter_V_o_ap_vld : STD_LOGIC;
    signal grp_solveStage3a_fu_44_moves_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_solveStage3a_fu_44_moves_V_ce0 : STD_LOGIC;
    signal grp_solveStage3a_fu_44_moves_V_we0 : STD_LOGIC;
    signal grp_solveStage3a_fu_44_moves_V_d0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_solveStage3a_fu_44_cubieColor_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_solveStage3a_fu_44_cubieColor_V_ce0 : STD_LOGIC;
    signal grp_solveStage3a_fu_44_cubieColor_V_we0 : STD_LOGIC;
    signal grp_solveStage3a_fu_44_cubieColor_V_d0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_solveStage3a_fu_44_cubieColor_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_solveStage3a_fu_44_cubieColor_V_ce1 : STD_LOGIC;
    signal grp_solveStage3a_fu_44_cubieColor_V_we1 : STD_LOGIC;
    signal grp_solveStage3a_fu_44_cubieColor_V_d1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_findEdge_fu_54_ap_start : STD_LOGIC;
    signal grp_findEdge_fu_54_ap_done : STD_LOGIC;
    signal grp_findEdge_fu_54_ap_idle : STD_LOGIC;
    signal grp_findEdge_fu_54_ap_ready : STD_LOGIC;
    signal grp_findEdge_fu_54_cubieColor_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_findEdge_fu_54_cubieColor_V_ce0 : STD_LOGIC;
    signal grp_findEdge_fu_54_cubieColor_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_findEdge_fu_54_cubieColor_V_ce1 : STD_LOGIC;
    signal grp_findEdge_fu_54_ap_return : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_stage3Prepare_fu_32_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_solveStage3a_fu_44_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_findEdge_fu_54_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_fu_64_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component stage3Prepare IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fC_V : IN STD_LOGIC_VECTOR (2 downto 0);
        sC_V : IN STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cubieColor_V_ce0 : OUT STD_LOGIC;
        cubieColor_V_we0 : OUT STD_LOGIC;
        cubieColor_V_d0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cubieColor_V_ce1 : OUT STD_LOGIC;
        cubieColor_V_we1 : OUT STD_LOGIC;
        cubieColor_V_d1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_q1 : IN STD_LOGIC_VECTOR (2 downto 0);
        moveCounter_V_i : IN STD_LOGIC_VECTOR (7 downto 0);
        moveCounter_V_o : OUT STD_LOGIC_VECTOR (7 downto 0);
        moveCounter_V_o_ap_vld : OUT STD_LOGIC;
        moves_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        moves_V_ce0 : OUT STD_LOGIC;
        moves_V_we0 : OUT STD_LOGIC;
        moves_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component solveStage3a IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        moveCounter_V_i : IN STD_LOGIC_VECTOR (7 downto 0);
        moveCounter_V_o : OUT STD_LOGIC_VECTOR (7 downto 0);
        moveCounter_V_o_ap_vld : OUT STD_LOGIC;
        moves_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        moves_V_ce0 : OUT STD_LOGIC;
        moves_V_we0 : OUT STD_LOGIC;
        moves_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        cubieColor_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cubieColor_V_ce0 : OUT STD_LOGIC;
        cubieColor_V_we0 : OUT STD_LOGIC;
        cubieColor_V_d0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cubieColor_V_ce1 : OUT STD_LOGIC;
        cubieColor_V_we1 : OUT STD_LOGIC;
        cubieColor_V_d1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_q1 : IN STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component findEdge IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fEC_V : IN STD_LOGIC_VECTOR (2 downto 0);
        sEC_V : IN STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cubieColor_V_ce0 : OUT STD_LOGIC;
        cubieColor_V_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cubieColor_V_ce1 : OUT STD_LOGIC;
        cubieColor_V_q1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;



begin
    grp_stage3Prepare_fu_32 : component stage3Prepare
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_stage3Prepare_fu_32_ap_start,
        ap_done => grp_stage3Prepare_fu_32_ap_done,
        ap_idle => grp_stage3Prepare_fu_32_ap_idle,
        ap_ready => grp_stage3Prepare_fu_32_ap_ready,
        fC_V => fC_V,
        sC_V => sC_V,
        cubieColor_V_address0 => grp_stage3Prepare_fu_32_cubieColor_V_address0,
        cubieColor_V_ce0 => grp_stage3Prepare_fu_32_cubieColor_V_ce0,
        cubieColor_V_we0 => grp_stage3Prepare_fu_32_cubieColor_V_we0,
        cubieColor_V_d0 => grp_stage3Prepare_fu_32_cubieColor_V_d0,
        cubieColor_V_q0 => cubieColor_V_q0,
        cubieColor_V_address1 => grp_stage3Prepare_fu_32_cubieColor_V_address1,
        cubieColor_V_ce1 => grp_stage3Prepare_fu_32_cubieColor_V_ce1,
        cubieColor_V_we1 => grp_stage3Prepare_fu_32_cubieColor_V_we1,
        cubieColor_V_d1 => grp_stage3Prepare_fu_32_cubieColor_V_d1,
        cubieColor_V_q1 => cubieColor_V_q1,
        moveCounter_V_i => moveCounter_V_i,
        moveCounter_V_o => grp_stage3Prepare_fu_32_moveCounter_V_o,
        moveCounter_V_o_ap_vld => grp_stage3Prepare_fu_32_moveCounter_V_o_ap_vld,
        moves_V_address0 => grp_stage3Prepare_fu_32_moves_V_address0,
        moves_V_ce0 => grp_stage3Prepare_fu_32_moves_V_ce0,
        moves_V_we0 => grp_stage3Prepare_fu_32_moves_V_we0,
        moves_V_d0 => grp_stage3Prepare_fu_32_moves_V_d0);

    grp_solveStage3a_fu_44 : component solveStage3a
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_solveStage3a_fu_44_ap_start,
        ap_done => grp_solveStage3a_fu_44_ap_done,
        ap_idle => grp_solveStage3a_fu_44_ap_idle,
        ap_ready => grp_solveStage3a_fu_44_ap_ready,
        moveCounter_V_i => moveCounter_V_i,
        moveCounter_V_o => grp_solveStage3a_fu_44_moveCounter_V_o,
        moveCounter_V_o_ap_vld => grp_solveStage3a_fu_44_moveCounter_V_o_ap_vld,
        moves_V_address0 => grp_solveStage3a_fu_44_moves_V_address0,
        moves_V_ce0 => grp_solveStage3a_fu_44_moves_V_ce0,
        moves_V_we0 => grp_solveStage3a_fu_44_moves_V_we0,
        moves_V_d0 => grp_solveStage3a_fu_44_moves_V_d0,
        cubieColor_V_address0 => grp_solveStage3a_fu_44_cubieColor_V_address0,
        cubieColor_V_ce0 => grp_solveStage3a_fu_44_cubieColor_V_ce0,
        cubieColor_V_we0 => grp_solveStage3a_fu_44_cubieColor_V_we0,
        cubieColor_V_d0 => grp_solveStage3a_fu_44_cubieColor_V_d0,
        cubieColor_V_q0 => cubieColor_V_q0,
        cubieColor_V_address1 => grp_solveStage3a_fu_44_cubieColor_V_address1,
        cubieColor_V_ce1 => grp_solveStage3a_fu_44_cubieColor_V_ce1,
        cubieColor_V_we1 => grp_solveStage3a_fu_44_cubieColor_V_we1,
        cubieColor_V_d1 => grp_solveStage3a_fu_44_cubieColor_V_d1,
        cubieColor_V_q1 => cubieColor_V_q1);

    grp_findEdge_fu_54 : component findEdge
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_findEdge_fu_54_ap_start,
        ap_done => grp_findEdge_fu_54_ap_done,
        ap_idle => grp_findEdge_fu_54_ap_idle,
        ap_ready => grp_findEdge_fu_54_ap_ready,
        fEC_V => fC_V,
        sEC_V => sC_V,
        cubieColor_V_address0 => grp_findEdge_fu_54_cubieColor_V_address0,
        cubieColor_V_ce0 => grp_findEdge_fu_54_cubieColor_V_ce0,
        cubieColor_V_q0 => cubieColor_V_q0,
        cubieColor_V_address1 => grp_findEdge_fu_54_cubieColor_V_address1,
        cubieColor_V_ce1 => grp_findEdge_fu_54_cubieColor_V_ce1,
        cubieColor_V_q1 => cubieColor_V_q1,
        ap_return => grp_findEdge_fu_54_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_findEdge_fu_54_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_findEdge_fu_54_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_findEdge_fu_54_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_findEdge_fu_54_ap_ready = ap_const_logic_1)) then 
                    grp_findEdge_fu_54_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_solveStage3a_fu_44_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_solveStage3a_fu_44_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
                    grp_solveStage3a_fu_44_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_solveStage3a_fu_44_ap_ready = ap_const_logic_1)) then 
                    grp_solveStage3a_fu_44_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_stage3Prepare_fu_32_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_stage3Prepare_fu_32_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_stage3Prepare_fu_32_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_stage3Prepare_fu_32_ap_ready = ap_const_logic_1)) then 
                    grp_stage3Prepare_fu_32_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_stage3Prepare_fu_32_ap_done, grp_solveStage3a_fu_44_ap_done, grp_findEdge_fu_54_ap_done, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state4, tmp_fu_64_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_solveStage3a_fu_44_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_fu_64_p2 = ap_const_lv1_0) and (grp_findEdge_fu_54_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_fu_64_p2 = ap_const_lv1_1) and (grp_findEdge_fu_54_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_stage3Prepare_fu_32_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_solveStage3a_fu_44_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_solveStage3a_fu_44_ap_done, ap_CS_fsm_state8)
    begin
        if ((((grp_solveStage3a_fu_44_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_solveStage3a_fu_44_ap_done, ap_CS_fsm_state8)
    begin
        if (((grp_solveStage3a_fu_44_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    cubieColor_V_address0_assign_proc : process(grp_stage3Prepare_fu_32_cubieColor_V_address0, grp_solveStage3a_fu_44_cubieColor_V_address0, grp_findEdge_fu_54_cubieColor_V_address0, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cubieColor_V_address0 <= grp_findEdge_fu_54_cubieColor_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            cubieColor_V_address0 <= grp_solveStage3a_fu_44_cubieColor_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            cubieColor_V_address0 <= grp_stage3Prepare_fu_32_cubieColor_V_address0;
        else 
            cubieColor_V_address0 <= "XXXXXX";
        end if; 
    end process;


    cubieColor_V_address1_assign_proc : process(grp_stage3Prepare_fu_32_cubieColor_V_address1, grp_solveStage3a_fu_44_cubieColor_V_address1, grp_findEdge_fu_54_cubieColor_V_address1, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cubieColor_V_address1 <= grp_findEdge_fu_54_cubieColor_V_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            cubieColor_V_address1 <= grp_solveStage3a_fu_44_cubieColor_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            cubieColor_V_address1 <= grp_stage3Prepare_fu_32_cubieColor_V_address1;
        else 
            cubieColor_V_address1 <= "XXXXXX";
        end if; 
    end process;


    cubieColor_V_ce0_assign_proc : process(grp_stage3Prepare_fu_32_cubieColor_V_ce0, grp_solveStage3a_fu_44_cubieColor_V_ce0, grp_findEdge_fu_54_cubieColor_V_ce0, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cubieColor_V_ce0 <= grp_findEdge_fu_54_cubieColor_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            cubieColor_V_ce0 <= grp_solveStage3a_fu_44_cubieColor_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            cubieColor_V_ce0 <= grp_stage3Prepare_fu_32_cubieColor_V_ce0;
        else 
            cubieColor_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cubieColor_V_ce1_assign_proc : process(grp_stage3Prepare_fu_32_cubieColor_V_ce1, grp_solveStage3a_fu_44_cubieColor_V_ce1, grp_findEdge_fu_54_cubieColor_V_ce1, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cubieColor_V_ce1 <= grp_findEdge_fu_54_cubieColor_V_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            cubieColor_V_ce1 <= grp_solveStage3a_fu_44_cubieColor_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            cubieColor_V_ce1 <= grp_stage3Prepare_fu_32_cubieColor_V_ce1;
        else 
            cubieColor_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cubieColor_V_d0_assign_proc : process(grp_stage3Prepare_fu_32_cubieColor_V_d0, grp_solveStage3a_fu_44_cubieColor_V_d0, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            cubieColor_V_d0 <= grp_solveStage3a_fu_44_cubieColor_V_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            cubieColor_V_d0 <= grp_stage3Prepare_fu_32_cubieColor_V_d0;
        else 
            cubieColor_V_d0 <= "XXX";
        end if; 
    end process;


    cubieColor_V_d1_assign_proc : process(grp_stage3Prepare_fu_32_cubieColor_V_d1, grp_solveStage3a_fu_44_cubieColor_V_d1, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            cubieColor_V_d1 <= grp_solveStage3a_fu_44_cubieColor_V_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            cubieColor_V_d1 <= grp_stage3Prepare_fu_32_cubieColor_V_d1;
        else 
            cubieColor_V_d1 <= "XXX";
        end if; 
    end process;


    cubieColor_V_we0_assign_proc : process(grp_stage3Prepare_fu_32_cubieColor_V_we0, grp_solveStage3a_fu_44_cubieColor_V_we0, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            cubieColor_V_we0 <= grp_solveStage3a_fu_44_cubieColor_V_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            cubieColor_V_we0 <= grp_stage3Prepare_fu_32_cubieColor_V_we0;
        else 
            cubieColor_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cubieColor_V_we1_assign_proc : process(grp_stage3Prepare_fu_32_cubieColor_V_we1, grp_solveStage3a_fu_44_cubieColor_V_we1, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            cubieColor_V_we1 <= grp_solveStage3a_fu_44_cubieColor_V_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            cubieColor_V_we1 <= grp_stage3Prepare_fu_32_cubieColor_V_we1;
        else 
            cubieColor_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_findEdge_fu_54_ap_start <= grp_findEdge_fu_54_ap_start_reg;
    grp_solveStage3a_fu_44_ap_start <= grp_solveStage3a_fu_44_ap_start_reg;
    grp_stage3Prepare_fu_32_ap_start <= grp_stage3Prepare_fu_32_ap_start_reg;

    moveCounter_V_o_assign_proc : process(moveCounter_V_i, grp_stage3Prepare_fu_32_moveCounter_V_o, grp_stage3Prepare_fu_32_moveCounter_V_o_ap_vld, grp_solveStage3a_fu_44_moveCounter_V_o, grp_solveStage3a_fu_44_moveCounter_V_o_ap_vld, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if ((((grp_solveStage3a_fu_44_moveCounter_V_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((grp_solveStage3a_fu_44_moveCounter_V_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            moveCounter_V_o <= grp_solveStage3a_fu_44_moveCounter_V_o;
        elsif (((grp_stage3Prepare_fu_32_moveCounter_V_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            moveCounter_V_o <= grp_stage3Prepare_fu_32_moveCounter_V_o;
        else 
            moveCounter_V_o <= moveCounter_V_i;
        end if; 
    end process;


    moveCounter_V_o_ap_vld_assign_proc : process(grp_stage3Prepare_fu_32_moveCounter_V_o_ap_vld, grp_solveStage3a_fu_44_moveCounter_V_o_ap_vld, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            moveCounter_V_o_ap_vld <= grp_solveStage3a_fu_44_moveCounter_V_o_ap_vld;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            moveCounter_V_o_ap_vld <= grp_stage3Prepare_fu_32_moveCounter_V_o_ap_vld;
        else 
            moveCounter_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    moves_V_address0_assign_proc : process(grp_stage3Prepare_fu_32_moves_V_address0, grp_solveStage3a_fu_44_moves_V_address0, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            moves_V_address0 <= grp_solveStage3a_fu_44_moves_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            moves_V_address0 <= grp_stage3Prepare_fu_32_moves_V_address0;
        else 
            moves_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    moves_V_ce0_assign_proc : process(grp_stage3Prepare_fu_32_moves_V_ce0, grp_solveStage3a_fu_44_moves_V_ce0, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            moves_V_ce0 <= grp_solveStage3a_fu_44_moves_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            moves_V_ce0 <= grp_stage3Prepare_fu_32_moves_V_ce0;
        else 
            moves_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    moves_V_d0_assign_proc : process(grp_stage3Prepare_fu_32_moves_V_d0, grp_solveStage3a_fu_44_moves_V_d0, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            moves_V_d0 <= grp_solveStage3a_fu_44_moves_V_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            moves_V_d0 <= grp_stage3Prepare_fu_32_moves_V_d0;
        else 
            moves_V_d0 <= "XXXX";
        end if; 
    end process;


    moves_V_we0_assign_proc : process(grp_stage3Prepare_fu_32_moves_V_we0, grp_solveStage3a_fu_44_moves_V_we0, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            moves_V_we0 <= grp_solveStage3a_fu_44_moves_V_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            moves_V_we0 <= grp_stage3Prepare_fu_32_moves_V_we0;
        else 
            moves_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_64_p2 <= "1" when (unsigned(grp_findEdge_fu_54_ap_return) > unsigned(ap_const_lv4_4)) else "0";
end behav;
