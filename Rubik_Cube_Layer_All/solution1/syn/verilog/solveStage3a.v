// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module solveStage3a (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        moveCounter_V_i,
        moveCounter_V_o,
        moveCounter_V_o_ap_vld,
        moves_V_address0,
        moves_V_ce0,
        moves_V_we0,
        moves_V_d0,
        cubieColor_V_address0,
        cubieColor_V_ce0,
        cubieColor_V_we0,
        cubieColor_V_d0,
        cubieColor_V_q0,
        cubieColor_V_address1,
        cubieColor_V_ce1,
        cubieColor_V_we1,
        cubieColor_V_d1,
        cubieColor_V_q1
);

parameter    ap_ST_fsm_state1 = 176'd1;
parameter    ap_ST_fsm_state2 = 176'd2;
parameter    ap_ST_fsm_state3 = 176'd4;
parameter    ap_ST_fsm_state4 = 176'd8;
parameter    ap_ST_fsm_state5 = 176'd16;
parameter    ap_ST_fsm_state6 = 176'd32;
parameter    ap_ST_fsm_state7 = 176'd64;
parameter    ap_ST_fsm_state8 = 176'd128;
parameter    ap_ST_fsm_state9 = 176'd256;
parameter    ap_ST_fsm_state10 = 176'd512;
parameter    ap_ST_fsm_state11 = 176'd1024;
parameter    ap_ST_fsm_state12 = 176'd2048;
parameter    ap_ST_fsm_state13 = 176'd4096;
parameter    ap_ST_fsm_state14 = 176'd8192;
parameter    ap_ST_fsm_state15 = 176'd16384;
parameter    ap_ST_fsm_state16 = 176'd32768;
parameter    ap_ST_fsm_state17 = 176'd65536;
parameter    ap_ST_fsm_state18 = 176'd131072;
parameter    ap_ST_fsm_state19 = 176'd262144;
parameter    ap_ST_fsm_state20 = 176'd524288;
parameter    ap_ST_fsm_state21 = 176'd1048576;
parameter    ap_ST_fsm_state22 = 176'd2097152;
parameter    ap_ST_fsm_state23 = 176'd4194304;
parameter    ap_ST_fsm_state24 = 176'd8388608;
parameter    ap_ST_fsm_state25 = 176'd16777216;
parameter    ap_ST_fsm_state26 = 176'd33554432;
parameter    ap_ST_fsm_state27 = 176'd67108864;
parameter    ap_ST_fsm_state28 = 176'd134217728;
parameter    ap_ST_fsm_state29 = 176'd268435456;
parameter    ap_ST_fsm_state30 = 176'd536870912;
parameter    ap_ST_fsm_state31 = 176'd1073741824;
parameter    ap_ST_fsm_state32 = 176'd2147483648;
parameter    ap_ST_fsm_state33 = 176'd4294967296;
parameter    ap_ST_fsm_state34 = 176'd8589934592;
parameter    ap_ST_fsm_state35 = 176'd17179869184;
parameter    ap_ST_fsm_state36 = 176'd34359738368;
parameter    ap_ST_fsm_state37 = 176'd68719476736;
parameter    ap_ST_fsm_state38 = 176'd137438953472;
parameter    ap_ST_fsm_state39 = 176'd274877906944;
parameter    ap_ST_fsm_state40 = 176'd549755813888;
parameter    ap_ST_fsm_state41 = 176'd1099511627776;
parameter    ap_ST_fsm_state42 = 176'd2199023255552;
parameter    ap_ST_fsm_state43 = 176'd4398046511104;
parameter    ap_ST_fsm_state44 = 176'd8796093022208;
parameter    ap_ST_fsm_state45 = 176'd17592186044416;
parameter    ap_ST_fsm_state46 = 176'd35184372088832;
parameter    ap_ST_fsm_state47 = 176'd70368744177664;
parameter    ap_ST_fsm_state48 = 176'd140737488355328;
parameter    ap_ST_fsm_state49 = 176'd281474976710656;
parameter    ap_ST_fsm_state50 = 176'd562949953421312;
parameter    ap_ST_fsm_state51 = 176'd1125899906842624;
parameter    ap_ST_fsm_state52 = 176'd2251799813685248;
parameter    ap_ST_fsm_state53 = 176'd4503599627370496;
parameter    ap_ST_fsm_state54 = 176'd9007199254740992;
parameter    ap_ST_fsm_state55 = 176'd18014398509481984;
parameter    ap_ST_fsm_state56 = 176'd36028797018963968;
parameter    ap_ST_fsm_state57 = 176'd72057594037927936;
parameter    ap_ST_fsm_state58 = 176'd144115188075855872;
parameter    ap_ST_fsm_state59 = 176'd288230376151711744;
parameter    ap_ST_fsm_state60 = 176'd576460752303423488;
parameter    ap_ST_fsm_state61 = 176'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 176'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 176'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 176'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 176'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 176'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 176'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 176'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 176'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 176'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 176'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 176'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 176'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 176'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 176'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 176'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 176'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 176'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 176'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 176'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 176'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 176'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 176'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 176'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 176'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 176'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 176'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 176'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 176'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 176'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 176'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 176'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 176'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 176'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 176'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 176'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 176'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 176'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 176'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 176'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 176'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 176'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 176'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 176'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 176'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 176'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 176'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 176'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 176'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 176'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 176'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 176'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 176'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 176'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 176'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 176'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 176'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 176'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 176'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 176'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 176'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 176'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 176'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 176'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 176'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 176'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 176'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 176'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 176'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 176'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 176'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 176'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 176'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 176'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 176'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 176'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 176'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 176'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 176'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 176'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 176'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state142 = 176'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state143 = 176'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state144 = 176'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state145 = 176'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state146 = 176'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state147 = 176'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state148 = 176'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state149 = 176'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state150 = 176'd713623846352979940529142984724747568191373312;
parameter    ap_ST_fsm_state151 = 176'd1427247692705959881058285969449495136382746624;
parameter    ap_ST_fsm_state152 = 176'd2854495385411919762116571938898990272765493248;
parameter    ap_ST_fsm_state153 = 176'd5708990770823839524233143877797980545530986496;
parameter    ap_ST_fsm_state154 = 176'd11417981541647679048466287755595961091061972992;
parameter    ap_ST_fsm_state155 = 176'd22835963083295358096932575511191922182123945984;
parameter    ap_ST_fsm_state156 = 176'd45671926166590716193865151022383844364247891968;
parameter    ap_ST_fsm_state157 = 176'd91343852333181432387730302044767688728495783936;
parameter    ap_ST_fsm_state158 = 176'd182687704666362864775460604089535377456991567872;
parameter    ap_ST_fsm_state159 = 176'd365375409332725729550921208179070754913983135744;
parameter    ap_ST_fsm_state160 = 176'd730750818665451459101842416358141509827966271488;
parameter    ap_ST_fsm_state161 = 176'd1461501637330902918203684832716283019655932542976;
parameter    ap_ST_fsm_state162 = 176'd2923003274661805836407369665432566039311865085952;
parameter    ap_ST_fsm_state163 = 176'd5846006549323611672814739330865132078623730171904;
parameter    ap_ST_fsm_state164 = 176'd11692013098647223345629478661730264157247460343808;
parameter    ap_ST_fsm_state165 = 176'd23384026197294446691258957323460528314494920687616;
parameter    ap_ST_fsm_state166 = 176'd46768052394588893382517914646921056628989841375232;
parameter    ap_ST_fsm_state167 = 176'd93536104789177786765035829293842113257979682750464;
parameter    ap_ST_fsm_state168 = 176'd187072209578355573530071658587684226515959365500928;
parameter    ap_ST_fsm_state169 = 176'd374144419156711147060143317175368453031918731001856;
parameter    ap_ST_fsm_state170 = 176'd748288838313422294120286634350736906063837462003712;
parameter    ap_ST_fsm_state171 = 176'd1496577676626844588240573268701473812127674924007424;
parameter    ap_ST_fsm_state172 = 176'd2993155353253689176481146537402947624255349848014848;
parameter    ap_ST_fsm_state173 = 176'd5986310706507378352962293074805895248510699696029696;
parameter    ap_ST_fsm_state174 = 176'd11972621413014756705924586149611790497021399392059392;
parameter    ap_ST_fsm_state175 = 176'd23945242826029513411849172299223580994042798784118784;
parameter    ap_ST_fsm_state176 = 176'd47890485652059026823698344598447161988085597568237568;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] moveCounter_V_i;
output  [7:0] moveCounter_V_o;
output   moveCounter_V_o_ap_vld;
output  [7:0] moves_V_address0;
output   moves_V_ce0;
output   moves_V_we0;
output  [3:0] moves_V_d0;
output  [5:0] cubieColor_V_address0;
output   cubieColor_V_ce0;
output   cubieColor_V_we0;
output  [2:0] cubieColor_V_d0;
input  [2:0] cubieColor_V_q0;
output  [5:0] cubieColor_V_address1;
output   cubieColor_V_ce1;
output   cubieColor_V_we1;
output  [2:0] cubieColor_V_d1;
input  [2:0] cubieColor_V_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] moveCounter_V_o;
reg moveCounter_V_o_ap_vld;
reg moves_V_ce0;
reg moves_V_we0;
reg[5:0] cubieColor_V_address0;
reg cubieColor_V_ce0;
reg cubieColor_V_we0;
reg[5:0] cubieColor_V_address1;
reg cubieColor_V_ce1;
reg cubieColor_V_we1;

(* fsm_encoding = "none" *) reg   [175:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] cubieColor_V_load_31_reg_172;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_fu_102_p2;
reg   [0:0] tmp_reg_177;
reg   [2:0] cubieColor_V_load_32_reg_181;
wire    ap_CS_fsm_state4;
wire   [0:0] or_cond_fu_118_p2;
reg   [0:0] or_cond_reg_187;
wire    ap_CS_fsm_state5;
wire   [0:0] grp_fu_91_p2;
reg   [0:0] tmp_29_reg_191;
wire    ap_CS_fsm_state6;
reg   [2:0] cubieColor_V_load_36_reg_195;
wire    ap_CS_fsm_state7;
wire   [0:0] or_cond2_fu_134_p2;
reg   [0:0] or_cond2_reg_201;
wire    ap_CS_fsm_state8;
reg   [0:0] tmp_32_reg_205;
wire    ap_CS_fsm_state9;
reg   [2:0] cubieColor_V_load_40_reg_209;
wire    ap_CS_fsm_state10;
wire   [0:0] or_cond3_fu_150_p2;
reg   [0:0] or_cond3_reg_215;
wire    ap_CS_fsm_state11;
reg   [0:0] tmp_35_reg_219;
wire    ap_CS_fsm_state12;
reg   [2:0] cubieColor_V_load_44_reg_223;
wire    ap_CS_fsm_state13;
wire   [0:0] grp_fu_96_p2;
reg   [0:0] tmp_38_reg_232;
wire    ap_CS_fsm_state15;
reg   [0:0] tmp_39_reg_236;
wire    ap_CS_fsm_state37;
reg   [0:0] tmp_40_reg_240;
wire    ap_CS_fsm_state59;
reg   [0:0] tmp_41_reg_244;
wire    ap_CS_fsm_state60;
reg   [0:0] tmp_42_reg_248;
wire    ap_CS_fsm_state78;
reg   [0:0] tmp_43_reg_252;
wire    ap_CS_fsm_state96;
reg   [0:0] tmp_44_reg_256;
wire    ap_CS_fsm_state97;
reg   [0:0] tmp_45_reg_260;
wire    ap_CS_fsm_state117;
reg   [0:0] tmp_46_reg_264;
wire    ap_CS_fsm_state137;
reg   [0:0] tmp_47_reg_268;
wire    ap_CS_fsm_state138;
reg   [0:0] tmp_48_reg_272;
wire    ap_CS_fsm_state158;
wire    grp_turnCube_fu_72_ap_start;
wire    grp_turnCube_fu_72_ap_done;
wire    grp_turnCube_fu_72_ap_idle;
wire    grp_turnCube_fu_72_ap_ready;
reg   [3:0] grp_turnCube_fu_72_turn_V;
wire   [7:0] grp_turnCube_fu_72_moveCounter_V_o;
wire    grp_turnCube_fu_72_moveCounter_V_o_ap_vld;
wire   [7:0] grp_turnCube_fu_72_moves_V_address0;
wire    grp_turnCube_fu_72_moves_V_ce0;
wire    grp_turnCube_fu_72_moves_V_we0;
wire   [3:0] grp_turnCube_fu_72_moves_V_d0;
wire   [5:0] grp_turnCube_fu_72_cubieColor_V_address0;
wire    grp_turnCube_fu_72_cubieColor_V_ce0;
wire    grp_turnCube_fu_72_cubieColor_V_we0;
wire   [2:0] grp_turnCube_fu_72_cubieColor_V_d0;
wire   [5:0] grp_turnCube_fu_72_cubieColor_V_address1;
wire    grp_turnCube_fu_72_cubieColor_V_ce1;
wire    grp_turnCube_fu_72_cubieColor_V_we1;
wire   [2:0] grp_turnCube_fu_72_cubieColor_V_d1;
reg    grp_turnCube_fu_72_ap_start_reg;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state65;
wire    ap_CS_fsm_state67;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_state81;
wire    ap_CS_fsm_state83;
wire    ap_CS_fsm_state85;
wire    ap_CS_fsm_state87;
wire    ap_CS_fsm_state89;
wire    ap_CS_fsm_state91;
wire    ap_CS_fsm_state93;
wire    ap_CS_fsm_state98;
wire    ap_CS_fsm_state100;
wire    ap_CS_fsm_state102;
wire    ap_CS_fsm_state104;
wire    ap_CS_fsm_state106;
wire    ap_CS_fsm_state108;
wire    ap_CS_fsm_state110;
wire    ap_CS_fsm_state112;
wire    ap_CS_fsm_state114;
wire    ap_CS_fsm_state118;
wire    ap_CS_fsm_state120;
wire    ap_CS_fsm_state122;
wire    ap_CS_fsm_state124;
wire    ap_CS_fsm_state126;
wire    ap_CS_fsm_state128;
wire    ap_CS_fsm_state130;
wire    ap_CS_fsm_state132;
wire    ap_CS_fsm_state134;
wire    ap_CS_fsm_state139;
wire    ap_CS_fsm_state141;
wire    ap_CS_fsm_state143;
wire    ap_CS_fsm_state145;
wire    ap_CS_fsm_state147;
wire    ap_CS_fsm_state149;
wire    ap_CS_fsm_state151;
wire    ap_CS_fsm_state153;
wire    ap_CS_fsm_state155;
wire    ap_CS_fsm_state159;
wire    ap_CS_fsm_state161;
wire    ap_CS_fsm_state163;
wire    ap_CS_fsm_state165;
wire    ap_CS_fsm_state167;
wire    ap_CS_fsm_state169;
wire    ap_CS_fsm_state171;
wire    ap_CS_fsm_state173;
wire    ap_CS_fsm_state175;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state74;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state80;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state84;
wire    ap_CS_fsm_state86;
wire    ap_CS_fsm_state88;
wire    ap_CS_fsm_state90;
wire    ap_CS_fsm_state92;
wire    ap_CS_fsm_state94;
wire    ap_CS_fsm_state99;
wire    ap_CS_fsm_state101;
wire    ap_CS_fsm_state103;
wire    ap_CS_fsm_state105;
wire    ap_CS_fsm_state107;
wire    ap_CS_fsm_state109;
wire    ap_CS_fsm_state111;
wire    ap_CS_fsm_state113;
wire    ap_CS_fsm_state115;
wire    ap_CS_fsm_state119;
wire    ap_CS_fsm_state121;
wire    ap_CS_fsm_state123;
wire    ap_CS_fsm_state125;
wire    ap_CS_fsm_state127;
wire    ap_CS_fsm_state129;
wire    ap_CS_fsm_state131;
wire    ap_CS_fsm_state133;
wire    ap_CS_fsm_state135;
wire    ap_CS_fsm_state140;
wire    ap_CS_fsm_state142;
wire    ap_CS_fsm_state144;
wire    ap_CS_fsm_state146;
wire    ap_CS_fsm_state148;
wire    ap_CS_fsm_state150;
wire    ap_CS_fsm_state152;
wire    ap_CS_fsm_state154;
wire    ap_CS_fsm_state156;
wire    ap_CS_fsm_state160;
wire    ap_CS_fsm_state162;
wire    ap_CS_fsm_state164;
wire    ap_CS_fsm_state166;
wire    ap_CS_fsm_state168;
wire    ap_CS_fsm_state170;
wire    ap_CS_fsm_state172;
wire    ap_CS_fsm_state174;
wire    ap_CS_fsm_state176;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state95;
wire    ap_CS_fsm_state116;
wire    ap_CS_fsm_state136;
wire    ap_CS_fsm_state157;
wire   [0:0] tmp_s_fu_108_p2;
wire   [0:0] tmp_28_fu_113_p2;
wire   [0:0] tmp_30_fu_124_p2;
wire   [0:0] tmp_31_fu_129_p2;
wire   [0:0] tmp_33_fu_140_p2;
wire   [0:0] tmp_34_fu_145_p2;
wire   [0:0] tmp_36_fu_156_p2;
wire   [0:0] tmp_37_fu_161_p2;
wire   [0:0] or_cond4_fu_166_p2;
reg   [175:0] ap_NS_fsm;
reg    ap_block_state35_on_subcall_done;
reg    ap_predicate_op290_call_state57;
reg    ap_block_state57_on_subcall_done;
reg    ap_block_state76_on_subcall_done;
reg    ap_predicate_op343_call_state94;
reg    ap_block_state94_on_subcall_done;
reg    ap_block_state115_on_subcall_done;
reg    ap_predicate_op400_call_state135;
reg    ap_block_state135_on_subcall_done;
reg    ap_block_state156_on_subcall_done;
reg    ap_predicate_op457_call_state176;
reg    ap_block_state176_on_subcall_done;

// power-on initialization
initial begin
#0 ap_CS_fsm = 176'd1;
#0 grp_turnCube_fu_72_ap_start_reg = 1'b0;
end

turnCube grp_turnCube_fu_72(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_turnCube_fu_72_ap_start),
    .ap_done(grp_turnCube_fu_72_ap_done),
    .ap_idle(grp_turnCube_fu_72_ap_idle),
    .ap_ready(grp_turnCube_fu_72_ap_ready),
    .turn_V(grp_turnCube_fu_72_turn_V),
    .moveCounter_V_i(moveCounter_V_i),
    .moveCounter_V_o(grp_turnCube_fu_72_moveCounter_V_o),
    .moveCounter_V_o_ap_vld(grp_turnCube_fu_72_moveCounter_V_o_ap_vld),
    .moves_V_address0(grp_turnCube_fu_72_moves_V_address0),
    .moves_V_ce0(grp_turnCube_fu_72_moves_V_ce0),
    .moves_V_we0(grp_turnCube_fu_72_moves_V_we0),
    .moves_V_d0(grp_turnCube_fu_72_moves_V_d0),
    .cubieColor_V_address0(grp_turnCube_fu_72_cubieColor_V_address0),
    .cubieColor_V_ce0(grp_turnCube_fu_72_cubieColor_V_ce0),
    .cubieColor_V_we0(grp_turnCube_fu_72_cubieColor_V_we0),
    .cubieColor_V_d0(grp_turnCube_fu_72_cubieColor_V_d0),
    .cubieColor_V_q0(cubieColor_V_q0),
    .cubieColor_V_address1(grp_turnCube_fu_72_cubieColor_V_address1),
    .cubieColor_V_ce1(grp_turnCube_fu_72_cubieColor_V_ce1),
    .cubieColor_V_we1(grp_turnCube_fu_72_cubieColor_V_we1),
    .cubieColor_V_d1(grp_turnCube_fu_72_cubieColor_V_d1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_turnCube_fu_72_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state175) | (1'b1 == ap_CS_fsm_state173) | (1'b1 == ap_CS_fsm_state171) | (1'b1 == ap_CS_fsm_state169) | (1'b1 == ap_CS_fsm_state167) | (1'b1 == ap_CS_fsm_state165) | (1'b1 == ap_CS_fsm_state163) | (1'b1 == ap_CS_fsm_state161) | (1'b1 == ap_CS_fsm_state159) | (1'b1 == ap_CS_fsm_state155) | (1'b1 == ap_CS_fsm_state153) | (1'b1 == ap_CS_fsm_state151) | (1'b1 == ap_CS_fsm_state149) | (1'b1 == ap_CS_fsm_state147) | (1'b1 == ap_CS_fsm_state145) | (1'b1 == ap_CS_fsm_state143) | (1'b1 == ap_CS_fsm_state141) | (1'b1 == ap_CS_fsm_state139) | (1'b1 == ap_CS_fsm_state134) | (1'b1 == ap_CS_fsm_state132) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state118) | (1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16))) begin
            grp_turnCube_fu_72_ap_start_reg <= 1'b1;
        end else if ((grp_turnCube_fu_72_ap_ready == 1'b1)) begin
            grp_turnCube_fu_72_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        cubieColor_V_load_31_reg_172 <= cubieColor_V_q1;
        tmp_reg_177 <= tmp_fu_102_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cubieColor_V_load_32_reg_181 <= cubieColor_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        cubieColor_V_load_36_reg_195 <= cubieColor_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        cubieColor_V_load_40_reg_209 <= cubieColor_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        cubieColor_V_load_44_reg_223 <= cubieColor_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_29_reg_191 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        or_cond2_reg_201 <= or_cond2_fu_134_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_32_reg_205 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        or_cond3_reg_215 <= or_cond3_fu_150_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_177 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        or_cond_reg_187 <= or_cond_fu_118_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_29_reg_191 <= grp_fu_91_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_32_reg_205 <= grp_fu_91_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_35_reg_219 <= grp_fu_91_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_38_reg_232 <= grp_fu_96_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        tmp_39_reg_236 <= grp_fu_96_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        tmp_40_reg_240 <= grp_fu_96_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        tmp_41_reg_244 <= grp_fu_96_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        tmp_42_reg_248 <= grp_fu_96_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        tmp_43_reg_252 <= grp_fu_96_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        tmp_44_reg_256 <= grp_fu_96_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state117)) begin
        tmp_45_reg_260 <= grp_fu_96_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state137)) begin
        tmp_46_reg_264 <= grp_fu_96_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state138)) begin
        tmp_47_reg_268 <= grp_fu_96_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state158)) begin
        tmp_48_reg_272 <= grp_fu_96_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state14) & (((or_cond3_reg_215 == 1'd0) & (or_cond2_reg_201 == 1'd0) & (or_cond_reg_187 == 1'd0) & (or_cond4_fu_166_p2 == 1'd0)) | ((tmp_35_reg_219 == 1'd0) & (or_cond3_reg_215 == 1'd0) & (or_cond2_reg_201 == 1'd0) & (or_cond_reg_187 == 1'd0)) | ((tmp_32_reg_205 == 1'd0) & (or_cond2_reg_201 == 1'd0) & (or_cond_reg_187 == 1'd0) & (or_cond4_fu_166_p2 == 1'd0)) | ((tmp_35_reg_219 == 1'd0) & (tmp_32_reg_205 == 1'd0) & (or_cond2_reg_201 == 1'd0) & (or_cond_reg_187 == 1'd0)) | ((or_cond3_reg_215 == 1'd0) & (tmp_29_reg_191 == 1'd0) & (or_cond_reg_187 == 1'd0) & (or_cond4_fu_166_p2 == 1'd0)) | ((tmp_35_reg_219 == 1'd0) & (or_cond3_reg_215 == 1'd0) & (tmp_29_reg_191 == 1'd0) & (or_cond_reg_187 == 1'd0)) | ((tmp_32_reg_205 == 1'd0) & (tmp_29_reg_191 == 1'd0) & (or_cond_reg_187 == 1'd0) & (or_cond4_fu_166_p2 == 1'd0)) | ((tmp_35_reg_219 == 1'd0) & (tmp_32_reg_205 == 1'd0) & (tmp_29_reg_191 == 1'd0) & (or_cond_reg_187 == 1'd0)) | ((or_cond3_reg_215 == 1'd0) & (or_cond2_reg_201 == 1'd0) & (tmp_reg_177 == 1'd0) & (or_cond4_fu_166_p2 == 1'd0)) | ((tmp_35_reg_219 == 1'd0) & (or_cond3_reg_215 == 1'd0) & (or_cond2_reg_201 == 1'd0) & (tmp_reg_177 == 1'd0)) | ((tmp_32_reg_205 == 1'd0) & (or_cond2_reg_201 == 1'd0) & (tmp_reg_177 == 1'd0) & (or_cond4_fu_166_p2 == 1'd0)) | ((tmp_35_reg_219 == 1'd0) & (tmp_32_reg_205 == 1'd0) & (or_cond2_reg_201 == 1'd0) & (tmp_reg_177 == 1'd0)) | ((or_cond3_reg_215 == 1'd0) & (tmp_29_reg_191 == 1'd0) & (tmp_reg_177 == 1'd0) & (or_cond4_fu_166_p2 == 1'd0)) | ((tmp_35_reg_219 == 1'd0) & (or_cond3_reg_215 == 1'd0) & (tmp_29_reg_191 == 1'd0) & (tmp_reg_177 == 1'd0)) | ((tmp_32_reg_205 == 1'd0) & (tmp_29_reg_191 == 1'd0) & (tmp_reg_177 == 1'd0) & (or_cond4_fu_166_p2 == 1'd0)) | ((tmp_35_reg_219 == 1'd0) & (tmp_32_reg_205 == 1'd0) & (tmp_29_reg_191 == 1'd0) & (tmp_reg_177 == 1'd0)))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & (((or_cond3_reg_215 == 1'd0) & (or_cond2_reg_201 == 1'd0) & (or_cond_reg_187 == 1'd0) & (or_cond4_fu_166_p2 == 1'd0)) | ((tmp_35_reg_219 == 1'd0) & (or_cond3_reg_215 == 1'd0) & (or_cond2_reg_201 == 1'd0) & (or_cond_reg_187 == 1'd0)) | ((tmp_32_reg_205 == 1'd0) & (or_cond2_reg_201 == 1'd0) & (or_cond_reg_187 == 1'd0) & (or_cond4_fu_166_p2 == 1'd0)) | ((tmp_35_reg_219 == 1'd0) & (tmp_32_reg_205 == 1'd0) & (or_cond2_reg_201 == 1'd0) & (or_cond_reg_187 == 1'd0)) | ((or_cond3_reg_215 == 1'd0) & (tmp_29_reg_191 == 1'd0) & (or_cond_reg_187 == 1'd0) & (or_cond4_fu_166_p2 == 1'd0)) | ((tmp_35_reg_219 == 1'd0) & (or_cond3_reg_215 == 1'd0) & (tmp_29_reg_191 == 1'd0) & (or_cond_reg_187 == 1'd0)) | ((tmp_32_reg_205 == 1'd0) & (tmp_29_reg_191 == 1'd0) & (or_cond_reg_187 == 1'd0) & (or_cond4_fu_166_p2 == 1'd0)) | ((tmp_35_reg_219 == 1'd0) & (tmp_32_reg_205 == 1'd0) & (tmp_29_reg_191 == 1'd0) & (or_cond_reg_187 == 1'd0)) | ((or_cond3_reg_215 == 1'd0) & (or_cond2_reg_201 == 1'd0) & (tmp_reg_177 == 1'd0) & (or_cond4_fu_166_p2 == 1'd0)) | ((tmp_35_reg_219 == 1'd0) & (or_cond3_reg_215 == 1'd0) & (or_cond2_reg_201 == 1'd0) & (tmp_reg_177 == 1'd0)) | ((tmp_32_reg_205 == 1'd0) & (or_cond2_reg_201 == 1'd0) & (tmp_reg_177 == 1'd0) & (or_cond4_fu_166_p2 == 1'd0)) | ((tmp_35_reg_219 == 1'd0) & (tmp_32_reg_205 == 1'd0) & (or_cond2_reg_201 == 1'd0) & (tmp_reg_177 == 1'd0)) | ((or_cond3_reg_215 == 1'd0) & (tmp_29_reg_191 == 1'd0) & (tmp_reg_177 == 1'd0) & (or_cond4_fu_166_p2 == 1'd0)) | ((tmp_35_reg_219 == 1'd0) & (or_cond3_reg_215 == 1'd0) & (tmp_29_reg_191 == 1'd0) & (tmp_reg_177 == 1'd0)) | ((tmp_32_reg_205 == 1'd0) & (tmp_29_reg_191 == 1'd0) & (tmp_reg_177 == 1'd0) & (or_cond4_fu_166_p2 == 1'd0)) | ((tmp_35_reg_219 == 1'd0) & (tmp_32_reg_205 == 1'd0) & (tmp_29_reg_191 == 1'd0) & (tmp_reg_177 == 1'd0))))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state136) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state58))) begin
        cubieColor_V_address0 = 6'd31;
    end else if (((1'b1 == ap_CS_fsm_state137) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state14))) begin
        cubieColor_V_address0 = 6'd49;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        cubieColor_V_address0 = 6'd5;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        cubieColor_V_address0 = 6'd3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        cubieColor_V_address0 = 6'd7;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state157) | (1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state36))) begin
        cubieColor_V_address0 = 6'd40;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cubieColor_V_address0 = 6'd1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        cubieColor_V_address0 = 6'd19;
    end else if (((1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state174) | (1'b1 == ap_CS_fsm_state172) | (1'b1 == ap_CS_fsm_state170) | (1'b1 == ap_CS_fsm_state168) | (1'b1 == ap_CS_fsm_state166) | (1'b1 == ap_CS_fsm_state164) | (1'b1 == ap_CS_fsm_state162) | (1'b1 == ap_CS_fsm_state160) | (1'b1 == ap_CS_fsm_state154) | (1'b1 == ap_CS_fsm_state152) | (1'b1 == ap_CS_fsm_state150) | (1'b1 == ap_CS_fsm_state148) | (1'b1 == ap_CS_fsm_state146) | (1'b1 == ap_CS_fsm_state144) | (1'b1 == ap_CS_fsm_state142) | (1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state133) | (1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state82) | ((tmp_41_reg_244 == 1'd1) & (1'b1 == ap_CS_fsm_state76)) | ((tmp_38_reg_232 == 1'd1) & (1'b1 == ap_CS_fsm_state35)) | ((tmp_39_reg_236 == 1'd1) & (tmp_reg_177 == 1'd1) & (1'b1 == ap_CS_fsm_state57)) | ((tmp_48_reg_272 == 1'd1) & (tmp_46_reg_264 == 1'd1) & (1'b1 == ap_CS_fsm_state176)) | ((tmp_47_reg_268 == 1'd1) & (1'b1 == ap_CS_fsm_state156)) | ((tmp_45_reg_260 == 1'd1) & (tmp_43_reg_252 == 1'd1) & (1'b1 == ap_CS_fsm_state135)) | ((tmp_44_reg_256 == 1'd1) & (1'b1 == ap_CS_fsm_state115)) | ((tmp_42_reg_248 == 1'd1) & (tmp_40_reg_240 == 1'd1) & (1'b1 == ap_CS_fsm_state94)))) begin
        cubieColor_V_address0 = grp_turnCube_fu_72_cubieColor_V_address0;
    end else begin
        cubieColor_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state137) | (1'b1 == ap_CS_fsm_state157))) begin
        cubieColor_V_address1 = 6'd5;
    end else if (((1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state116))) begin
        cubieColor_V_address1 = 6'd3;
    end else if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state77))) begin
        cubieColor_V_address1 = 6'd7;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state14))) begin
        cubieColor_V_address1 = 6'd1;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state136))) begin
        cubieColor_V_address1 = 6'd46;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state95))) begin
        cubieColor_V_address1 = 6'd37;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state58))) begin
        cubieColor_V_address1 = 6'd28;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4))) begin
        cubieColor_V_address1 = 6'd49;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        cubieColor_V_address1 = 6'd31;
    end else if (((1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state174) | (1'b1 == ap_CS_fsm_state172) | (1'b1 == ap_CS_fsm_state170) | (1'b1 == ap_CS_fsm_state168) | (1'b1 == ap_CS_fsm_state166) | (1'b1 == ap_CS_fsm_state164) | (1'b1 == ap_CS_fsm_state162) | (1'b1 == ap_CS_fsm_state160) | (1'b1 == ap_CS_fsm_state154) | (1'b1 == ap_CS_fsm_state152) | (1'b1 == ap_CS_fsm_state150) | (1'b1 == ap_CS_fsm_state148) | (1'b1 == ap_CS_fsm_state146) | (1'b1 == ap_CS_fsm_state144) | (1'b1 == ap_CS_fsm_state142) | (1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state133) | (1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state82) | ((tmp_41_reg_244 == 1'd1) & (1'b1 == ap_CS_fsm_state76)) | ((tmp_38_reg_232 == 1'd1) & (1'b1 == ap_CS_fsm_state35)) | ((tmp_39_reg_236 == 1'd1) & (tmp_reg_177 == 1'd1) & (1'b1 == ap_CS_fsm_state57)) | ((tmp_48_reg_272 == 1'd1) & (tmp_46_reg_264 == 1'd1) & (1'b1 == ap_CS_fsm_state176)) | ((tmp_47_reg_268 == 1'd1) & (1'b1 == ap_CS_fsm_state156)) | ((tmp_45_reg_260 == 1'd1) & (tmp_43_reg_252 == 1'd1) & (1'b1 == ap_CS_fsm_state135)) | ((tmp_44_reg_256 == 1'd1) & (1'b1 == ap_CS_fsm_state115)) | ((tmp_42_reg_248 == 1'd1) & (tmp_40_reg_240 == 1'd1) & (1'b1 == ap_CS_fsm_state94)))) begin
        cubieColor_V_address1 = grp_turnCube_fu_72_cubieColor_V_address1;
    end else begin
        cubieColor_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state137) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state157) | (1'b1 == ap_CS_fsm_state136) | (1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state2))) begin
        cubieColor_V_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state174) | (1'b1 == ap_CS_fsm_state172) | (1'b1 == ap_CS_fsm_state170) | (1'b1 == ap_CS_fsm_state168) | (1'b1 == ap_CS_fsm_state166) | (1'b1 == ap_CS_fsm_state164) | (1'b1 == ap_CS_fsm_state162) | (1'b1 == ap_CS_fsm_state160) | (1'b1 == ap_CS_fsm_state154) | (1'b1 == ap_CS_fsm_state152) | (1'b1 == ap_CS_fsm_state150) | (1'b1 == ap_CS_fsm_state148) | (1'b1 == ap_CS_fsm_state146) | (1'b1 == ap_CS_fsm_state144) | (1'b1 == ap_CS_fsm_state142) | (1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state133) | (1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state82) | ((tmp_41_reg_244 == 1'd1) & (1'b1 == ap_CS_fsm_state76)) | ((tmp_38_reg_232 == 1'd1) & (1'b1 == ap_CS_fsm_state35)) | ((tmp_39_reg_236 == 1'd1) & (tmp_reg_177 == 1'd1) & (1'b1 == ap_CS_fsm_state57)) | ((tmp_48_reg_272 == 1'd1) & (tmp_46_reg_264 == 1'd1) & (1'b1 == ap_CS_fsm_state176)) | ((tmp_47_reg_268 == 1'd1) & (1'b1 == ap_CS_fsm_state156)) | ((tmp_45_reg_260 == 1'd1) & (tmp_43_reg_252 == 1'd1) & (1'b1 == ap_CS_fsm_state135)) | ((tmp_44_reg_256 == 1'd1) & (1'b1 == ap_CS_fsm_state115)) | ((tmp_42_reg_248 == 1'd1) & (tmp_40_reg_240 == 1'd1) & (1'b1 == ap_CS_fsm_state94)))) begin
        cubieColor_V_ce0 = grp_turnCube_fu_72_cubieColor_V_ce0;
    end else begin
        cubieColor_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state137) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state157) | (1'b1 == ap_CS_fsm_state136) | (1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state2))) begin
        cubieColor_V_ce1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state174) | (1'b1 == ap_CS_fsm_state172) | (1'b1 == ap_CS_fsm_state170) | (1'b1 == ap_CS_fsm_state168) | (1'b1 == ap_CS_fsm_state166) | (1'b1 == ap_CS_fsm_state164) | (1'b1 == ap_CS_fsm_state162) | (1'b1 == ap_CS_fsm_state160) | (1'b1 == ap_CS_fsm_state154) | (1'b1 == ap_CS_fsm_state152) | (1'b1 == ap_CS_fsm_state150) | (1'b1 == ap_CS_fsm_state148) | (1'b1 == ap_CS_fsm_state146) | (1'b1 == ap_CS_fsm_state144) | (1'b1 == ap_CS_fsm_state142) | (1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state133) | (1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state82) | ((tmp_41_reg_244 == 1'd1) & (1'b1 == ap_CS_fsm_state76)) | ((tmp_38_reg_232 == 1'd1) & (1'b1 == ap_CS_fsm_state35)) | ((tmp_39_reg_236 == 1'd1) & (tmp_reg_177 == 1'd1) & (1'b1 == ap_CS_fsm_state57)) | ((tmp_48_reg_272 == 1'd1) & (tmp_46_reg_264 == 1'd1) & (1'b1 == ap_CS_fsm_state176)) | ((tmp_47_reg_268 == 1'd1) & (1'b1 == ap_CS_fsm_state156)) | ((tmp_45_reg_260 == 1'd1) & (tmp_43_reg_252 == 1'd1) & (1'b1 == ap_CS_fsm_state135)) | ((tmp_44_reg_256 == 1'd1) & (1'b1 == ap_CS_fsm_state115)) | ((tmp_42_reg_248 == 1'd1) & (tmp_40_reg_240 == 1'd1) & (1'b1 == ap_CS_fsm_state94)))) begin
        cubieColor_V_ce1 = grp_turnCube_fu_72_cubieColor_V_ce1;
    end else begin
        cubieColor_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state174) | (1'b1 == ap_CS_fsm_state172) | (1'b1 == ap_CS_fsm_state170) | (1'b1 == ap_CS_fsm_state168) | (1'b1 == ap_CS_fsm_state166) | (1'b1 == ap_CS_fsm_state164) | (1'b1 == ap_CS_fsm_state162) | (1'b1 == ap_CS_fsm_state160) | (1'b1 == ap_CS_fsm_state154) | (1'b1 == ap_CS_fsm_state152) | (1'b1 == ap_CS_fsm_state150) | (1'b1 == ap_CS_fsm_state148) | (1'b1 == ap_CS_fsm_state146) | (1'b1 == ap_CS_fsm_state144) | (1'b1 == ap_CS_fsm_state142) | (1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state133) | (1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state82) | ((tmp_41_reg_244 == 1'd1) & (1'b1 == ap_CS_fsm_state76)) | ((tmp_38_reg_232 == 1'd1) & (1'b1 == ap_CS_fsm_state35)) | ((tmp_39_reg_236 == 1'd1) & (tmp_reg_177 == 1'd1) & (1'b1 == ap_CS_fsm_state57)) | ((tmp_48_reg_272 == 1'd1) & (tmp_46_reg_264 == 1'd1) & (1'b1 == ap_CS_fsm_state176)) | ((tmp_47_reg_268 == 1'd1) & (1'b1 == ap_CS_fsm_state156)) | ((tmp_45_reg_260 == 1'd1) & (tmp_43_reg_252 == 1'd1) & (1'b1 == ap_CS_fsm_state135)) | ((tmp_44_reg_256 == 1'd1) & (1'b1 == ap_CS_fsm_state115)) | ((tmp_42_reg_248 == 1'd1) & (tmp_40_reg_240 == 1'd1) & (1'b1 == ap_CS_fsm_state94)))) begin
        cubieColor_V_we0 = grp_turnCube_fu_72_cubieColor_V_we0;
    end else begin
        cubieColor_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state174) | (1'b1 == ap_CS_fsm_state172) | (1'b1 == ap_CS_fsm_state170) | (1'b1 == ap_CS_fsm_state168) | (1'b1 == ap_CS_fsm_state166) | (1'b1 == ap_CS_fsm_state164) | (1'b1 == ap_CS_fsm_state162) | (1'b1 == ap_CS_fsm_state160) | (1'b1 == ap_CS_fsm_state154) | (1'b1 == ap_CS_fsm_state152) | (1'b1 == ap_CS_fsm_state150) | (1'b1 == ap_CS_fsm_state148) | (1'b1 == ap_CS_fsm_state146) | (1'b1 == ap_CS_fsm_state144) | (1'b1 == ap_CS_fsm_state142) | (1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state133) | (1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state82) | ((tmp_41_reg_244 == 1'd1) & (1'b1 == ap_CS_fsm_state76)) | ((tmp_38_reg_232 == 1'd1) & (1'b1 == ap_CS_fsm_state35)) | ((tmp_39_reg_236 == 1'd1) & (tmp_reg_177 == 1'd1) & (1'b1 == ap_CS_fsm_state57)) | ((tmp_48_reg_272 == 1'd1) & (tmp_46_reg_264 == 1'd1) & (1'b1 == ap_CS_fsm_state176)) | ((tmp_47_reg_268 == 1'd1) & (1'b1 == ap_CS_fsm_state156)) | ((tmp_45_reg_260 == 1'd1) & (tmp_43_reg_252 == 1'd1) & (1'b1 == ap_CS_fsm_state135)) | ((tmp_44_reg_256 == 1'd1) & (1'b1 == ap_CS_fsm_state115)) | ((tmp_42_reg_248 == 1'd1) & (tmp_40_reg_240 == 1'd1) & (1'b1 == ap_CS_fsm_state94)))) begin
        cubieColor_V_we1 = grp_turnCube_fu_72_cubieColor_V_we1;
    end else begin
        cubieColor_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state168) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state86))) begin
        grp_turnCube_fu_72_turn_V = 4'd8;
    end else if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state164) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state82))) begin
        grp_turnCube_fu_72_turn_V = 4'd9;
    end else if (((1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state172) | (1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state90) | ((tmp_41_reg_244 == 1'd1) & (1'b1 == ap_CS_fsm_state76)) | ((tmp_38_reg_232 == 1'd1) & (1'b1 == ap_CS_fsm_state35)) | ((tmp_47_reg_268 == 1'd1) & (1'b1 == ap_CS_fsm_state156)) | ((tmp_44_reg_256 == 1'd1) & (1'b1 == ap_CS_fsm_state115)))) begin
        grp_turnCube_fu_72_turn_V = 4'd6;
    end else if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state152) | (1'b1 == ap_CS_fsm_state111) | ((tmp_39_reg_236 == 1'd1) & (tmp_reg_177 == 1'd1) & (1'b1 == ap_CS_fsm_state57)) | ((tmp_48_reg_272 == 1'd1) & (tmp_46_reg_264 == 1'd1) & (1'b1 == ap_CS_fsm_state176)) | ((tmp_45_reg_260 == 1'd1) & (tmp_43_reg_252 == 1'd1) & (1'b1 == ap_CS_fsm_state135)) | ((tmp_42_reg_248 == 1'd1) & (tmp_40_reg_240 == 1'd1) & (1'b1 == ap_CS_fsm_state94)))) begin
        grp_turnCube_fu_72_turn_V = 4'd7;
    end else if (((1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state148) | (1'b1 == ap_CS_fsm_state107))) begin
        grp_turnCube_fu_72_turn_V = 4'd11;
    end else if (((1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state174) | (1'b1 == ap_CS_fsm_state162) | (1'b1 == ap_CS_fsm_state150) | (1'b1 == ap_CS_fsm_state146) | (1'b1 == ap_CS_fsm_state133) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state92))) begin
        grp_turnCube_fu_72_turn_V = 4'd1;
    end else if (((1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state144) | (1'b1 == ap_CS_fsm_state103))) begin
        grp_turnCube_fu_72_turn_V = 4'd10;
    end else if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state170) | (1'b1 == ap_CS_fsm_state166) | (1'b1 == ap_CS_fsm_state160) | (1'b1 == ap_CS_fsm_state154) | (1'b1 == ap_CS_fsm_state142) | (1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state84))) begin
        grp_turnCube_fu_72_turn_V = 4'd0;
    end else begin
        grp_turnCube_fu_72_turn_V = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_41_reg_244 == 1'd1) & (1'b1 == ap_CS_fsm_state76) & (grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state74) & (grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state72) & (grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state70) & (grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state68) & (grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state66) & (grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state64) & (grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state62) & (grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state55) & (grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state53) & (grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state51) & (grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state49) & (grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state47) & (grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state45) & (grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state43) & (grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state41) & (grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state39) & (grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1)) | ((tmp_38_reg_232 == 1'd1) & (1'b1 == ap_CS_fsm_state35) & (grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state33) & (grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state31) & (grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state29) & (grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state27) & (grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state25) & (grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state23) & (grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state21) & (grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state19) & (grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state17) & (grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1)) | ((tmp_39_reg_236 == 1'd1) & (tmp_reg_177 == 1'd1) & (1'b1 == ap_CS_fsm_state57) & (grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1)) | ((tmp_48_reg_272 == 1'd1) & (tmp_46_reg_264 == 1'd1) & (grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state176)) | ((grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state174)) | ((grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state172)) | ((grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state170)) | ((grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state168)) | ((grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state166)) | ((grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state164)) | ((grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state162)) | ((grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state160)) | ((tmp_47_reg_268 == 1'd1) & (grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state156)) | ((grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state154)) | ((grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state152)) | ((grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state150)) | ((grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state148)) | ((grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state146)) | ((grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state144)) | ((grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state142)) | ((grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state140)) | ((tmp_45_reg_260 == 1'd1) & (tmp_43_reg_252 == 1'd1) & (grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state135)) | ((grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state133)) | ((grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state131)) | ((grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state129)) | ((grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state127)) | ((grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state125)) | ((grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state123)) | ((grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state121)) | ((grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state119)) | ((tmp_44_reg_256 == 1'd1) & (grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state115)) | ((grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state113)) | ((grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state111)) | ((grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state109)) | ((grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state107)) | ((grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state105)) | ((grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state103)) | ((grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state101)) | ((grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state99)) | ((tmp_42_reg_248 == 1'd1) & (tmp_40_reg_240 == 1'd1) & (grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state94)) | ((grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state92)) | ((grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state90)) | ((grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state88)) | ((grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state86)) | ((grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state84)) | ((grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state82)) | ((1'b1 == ap_CS_fsm_state80) & (grp_turnCube_fu_72_moveCounter_V_o_ap_vld == 1'b1)))) begin
        moveCounter_V_o = grp_turnCube_fu_72_moveCounter_V_o;
    end else begin
        moveCounter_V_o = moveCounter_V_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state174) | (1'b1 == ap_CS_fsm_state172) | (1'b1 == ap_CS_fsm_state170) | (1'b1 == ap_CS_fsm_state168) | (1'b1 == ap_CS_fsm_state166) | (1'b1 == ap_CS_fsm_state164) | (1'b1 == ap_CS_fsm_state162) | (1'b1 == ap_CS_fsm_state160) | (1'b1 == ap_CS_fsm_state154) | (1'b1 == ap_CS_fsm_state152) | (1'b1 == ap_CS_fsm_state150) | (1'b1 == ap_CS_fsm_state148) | (1'b1 == ap_CS_fsm_state146) | (1'b1 == ap_CS_fsm_state144) | (1'b1 == ap_CS_fsm_state142) | (1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state133) | (1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state82) | ((tmp_41_reg_244 == 1'd1) & (1'b1 == ap_CS_fsm_state76)) | ((tmp_38_reg_232 == 1'd1) & (1'b1 == ap_CS_fsm_state35)) | ((tmp_39_reg_236 == 1'd1) & (tmp_reg_177 == 1'd1) & (1'b1 == ap_CS_fsm_state57)) | ((tmp_48_reg_272 == 1'd1) & (tmp_46_reg_264 == 1'd1) & (1'b1 == ap_CS_fsm_state176)) | ((tmp_47_reg_268 == 1'd1) & (1'b1 == ap_CS_fsm_state156)) | ((tmp_45_reg_260 == 1'd1) & (tmp_43_reg_252 == 1'd1) & (1'b1 == ap_CS_fsm_state135)) | ((tmp_44_reg_256 == 1'd1) & (1'b1 == ap_CS_fsm_state115)) | ((tmp_42_reg_248 == 1'd1) & (tmp_40_reg_240 == 1'd1) & (1'b1 == ap_CS_fsm_state94)))) begin
        moveCounter_V_o_ap_vld = grp_turnCube_fu_72_moveCounter_V_o_ap_vld;
    end else begin
        moveCounter_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state174) | (1'b1 == ap_CS_fsm_state172) | (1'b1 == ap_CS_fsm_state170) | (1'b1 == ap_CS_fsm_state168) | (1'b1 == ap_CS_fsm_state166) | (1'b1 == ap_CS_fsm_state164) | (1'b1 == ap_CS_fsm_state162) | (1'b1 == ap_CS_fsm_state160) | (1'b1 == ap_CS_fsm_state154) | (1'b1 == ap_CS_fsm_state152) | (1'b1 == ap_CS_fsm_state150) | (1'b1 == ap_CS_fsm_state148) | (1'b1 == ap_CS_fsm_state146) | (1'b1 == ap_CS_fsm_state144) | (1'b1 == ap_CS_fsm_state142) | (1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state133) | (1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state82) | ((tmp_41_reg_244 == 1'd1) & (1'b1 == ap_CS_fsm_state76)) | ((tmp_38_reg_232 == 1'd1) & (1'b1 == ap_CS_fsm_state35)) | ((tmp_39_reg_236 == 1'd1) & (tmp_reg_177 == 1'd1) & (1'b1 == ap_CS_fsm_state57)) | ((tmp_48_reg_272 == 1'd1) & (tmp_46_reg_264 == 1'd1) & (1'b1 == ap_CS_fsm_state176)) | ((tmp_47_reg_268 == 1'd1) & (1'b1 == ap_CS_fsm_state156)) | ((tmp_45_reg_260 == 1'd1) & (tmp_43_reg_252 == 1'd1) & (1'b1 == ap_CS_fsm_state135)) | ((tmp_44_reg_256 == 1'd1) & (1'b1 == ap_CS_fsm_state115)) | ((tmp_42_reg_248 == 1'd1) & (tmp_40_reg_240 == 1'd1) & (1'b1 == ap_CS_fsm_state94)))) begin
        moves_V_ce0 = grp_turnCube_fu_72_moves_V_ce0;
    end else begin
        moves_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state174) | (1'b1 == ap_CS_fsm_state172) | (1'b1 == ap_CS_fsm_state170) | (1'b1 == ap_CS_fsm_state168) | (1'b1 == ap_CS_fsm_state166) | (1'b1 == ap_CS_fsm_state164) | (1'b1 == ap_CS_fsm_state162) | (1'b1 == ap_CS_fsm_state160) | (1'b1 == ap_CS_fsm_state154) | (1'b1 == ap_CS_fsm_state152) | (1'b1 == ap_CS_fsm_state150) | (1'b1 == ap_CS_fsm_state148) | (1'b1 == ap_CS_fsm_state146) | (1'b1 == ap_CS_fsm_state144) | (1'b1 == ap_CS_fsm_state142) | (1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state133) | (1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state82) | ((tmp_41_reg_244 == 1'd1) & (1'b1 == ap_CS_fsm_state76)) | ((tmp_38_reg_232 == 1'd1) & (1'b1 == ap_CS_fsm_state35)) | ((tmp_39_reg_236 == 1'd1) & (tmp_reg_177 == 1'd1) & (1'b1 == ap_CS_fsm_state57)) | ((tmp_48_reg_272 == 1'd1) & (tmp_46_reg_264 == 1'd1) & (1'b1 == ap_CS_fsm_state176)) | ((tmp_47_reg_268 == 1'd1) & (1'b1 == ap_CS_fsm_state156)) | ((tmp_45_reg_260 == 1'd1) & (tmp_43_reg_252 == 1'd1) & (1'b1 == ap_CS_fsm_state135)) | ((tmp_44_reg_256 == 1'd1) & (1'b1 == ap_CS_fsm_state115)) | ((tmp_42_reg_248 == 1'd1) & (tmp_40_reg_240 == 1'd1) & (1'b1 == ap_CS_fsm_state94)))) begin
        moves_V_we0 = grp_turnCube_fu_72_moves_V_we0;
    end else begin
        moves_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_fu_102_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((or_cond_fu_118_p2 == 1'd1) & (tmp_reg_177 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((grp_fu_91_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((or_cond2_fu_134_p2 == 1'd1) & (tmp_29_reg_191 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((grp_fu_91_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((or_cond3_fu_150_p2 == 1'd1) & (tmp_32_reg_205 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((grp_fu_91_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (((or_cond3_reg_215 == 1'd0) & (or_cond2_reg_201 == 1'd0) & (or_cond_reg_187 == 1'd0) & (or_cond4_fu_166_p2 == 1'd0)) | ((tmp_35_reg_219 == 1'd0) & (or_cond3_reg_215 == 1'd0) & (or_cond2_reg_201 == 1'd0) & (or_cond_reg_187 == 1'd0)) | ((tmp_32_reg_205 == 1'd0) & (or_cond2_reg_201 == 1'd0) & (or_cond_reg_187 == 1'd0) & (or_cond4_fu_166_p2 == 1'd0)) | ((tmp_35_reg_219 == 1'd0) & (tmp_32_reg_205 == 1'd0) & (or_cond2_reg_201 == 1'd0) & (or_cond_reg_187 == 1'd0)) | ((or_cond3_reg_215 == 1'd0) & (tmp_29_reg_191 == 1'd0) & (or_cond_reg_187 == 1'd0) & (or_cond4_fu_166_p2 == 1'd0)) | ((tmp_35_reg_219 == 1'd0) & (or_cond3_reg_215 == 1'd0) & (tmp_29_reg_191 == 1'd0) & (or_cond_reg_187 == 1'd0)) | ((tmp_32_reg_205 == 1'd0) & (tmp_29_reg_191 == 1'd0) & (or_cond_reg_187 == 1'd0) & (or_cond4_fu_166_p2 == 1'd0)) | ((tmp_35_reg_219 == 1'd0) & (tmp_32_reg_205 == 1'd0) & (tmp_29_reg_191 == 1'd0) & (or_cond_reg_187 == 1'd0)) | ((or_cond3_reg_215 == 1'd0) & (or_cond2_reg_201 == 1'd0) & (tmp_reg_177 == 1'd0) & (or_cond4_fu_166_p2 == 1'd0)) | ((tmp_35_reg_219 == 1'd0) & (or_cond3_reg_215 == 1'd0) & (or_cond2_reg_201 == 1'd0) & (tmp_reg_177 == 1'd0)) | ((tmp_32_reg_205 == 1'd0) & (or_cond2_reg_201 == 1'd0) & (tmp_reg_177 == 1'd0) & (or_cond4_fu_166_p2 == 1'd0)) | ((tmp_35_reg_219 == 1'd0) & (tmp_32_reg_205 == 1'd0) & (or_cond2_reg_201 == 1'd0) & (tmp_reg_177 == 1'd0)) | ((or_cond3_reg_215 == 1'd0) & (tmp_29_reg_191 == 1'd0) & (tmp_reg_177 == 1'd0) & (or_cond4_fu_166_p2 == 1'd0)) | ((tmp_35_reg_219 == 1'd0) & (or_cond3_reg_215 == 1'd0) & (tmp_29_reg_191 == 1'd0) & (tmp_reg_177 == 1'd0)) | ((tmp_32_reg_205 == 1'd0) & (tmp_29_reg_191 == 1'd0) & (tmp_reg_177 == 1'd0) & (or_cond4_fu_166_p2 == 1'd0)) | ((tmp_35_reg_219 == 1'd0) & (tmp_32_reg_205 == 1'd0) & (tmp_29_reg_191 == 1'd0) & (tmp_reg_177 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state14) & (((or_cond3_reg_215 == 1'd1) & (tmp_32_reg_205 == 1'd1) & (tmp_reg_177 == 1'd0)) | ((or_cond2_reg_201 == 1'd1) & (tmp_29_reg_191 == 1'd1) & (tmp_reg_177 == 1'd0)) | ((tmp_35_reg_219 == 1'd1) & (or_cond4_fu_166_p2 == 1'd1) & (tmp_reg_177 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((grp_fu_96_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            if (((1'b1 == ap_CS_fsm_state35) & (1'b0 == ap_block_state35_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            if (((grp_fu_96_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state47))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state49))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state51))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state55))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            if (((1'b1 == ap_CS_fsm_state57) & (1'b0 == ap_block_state57_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            if (((grp_fu_96_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state94;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        ap_ST_fsm_state60 : begin
            if (((grp_fu_96_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state60))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state62))) begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state64))) begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state66))) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state68))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state70))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state72))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state74))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            if (((1'b1 == ap_CS_fsm_state76) & (1'b0 == ap_block_state76_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            if (((grp_fu_96_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state78))) begin
                ap_NS_fsm = ap_ST_fsm_state94;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state80))) begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state82))) begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state84))) begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state86))) begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state88))) begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state90))) begin
                ap_NS_fsm = ap_ST_fsm_state91;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state90;
            end
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state92))) begin
                ap_NS_fsm = ap_ST_fsm_state93;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state92;
            end
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            if (((1'b1 == ap_CS_fsm_state94) & (1'b0 == ap_block_state94_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state95;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state94;
            end
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            if (((grp_fu_96_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state96))) begin
                ap_NS_fsm = ap_ST_fsm_state135;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end
        end
        ap_ST_fsm_state97 : begin
            if (((grp_fu_96_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state97))) begin
                ap_NS_fsm = ap_ST_fsm_state115;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state98;
            end
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state99))) begin
                ap_NS_fsm = ap_ST_fsm_state100;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state99;
            end
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state101))) begin
                ap_NS_fsm = ap_ST_fsm_state102;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state101;
            end
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state103))) begin
                ap_NS_fsm = ap_ST_fsm_state104;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state103;
            end
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state105))) begin
                ap_NS_fsm = ap_ST_fsm_state106;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state105;
            end
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state107))) begin
                ap_NS_fsm = ap_ST_fsm_state108;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state107;
            end
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state109))) begin
                ap_NS_fsm = ap_ST_fsm_state110;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state109;
            end
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state111))) begin
                ap_NS_fsm = ap_ST_fsm_state112;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state111;
            end
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state113))) begin
                ap_NS_fsm = ap_ST_fsm_state114;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state113;
            end
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            if (((1'b1 == ap_CS_fsm_state115) & (1'b0 == ap_block_state115_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state116;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state115;
            end
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            if (((grp_fu_96_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state117))) begin
                ap_NS_fsm = ap_ST_fsm_state135;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state118;
            end
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state119))) begin
                ap_NS_fsm = ap_ST_fsm_state120;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state119;
            end
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state121))) begin
                ap_NS_fsm = ap_ST_fsm_state122;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state121;
            end
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state123))) begin
                ap_NS_fsm = ap_ST_fsm_state124;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state123;
            end
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state125))) begin
                ap_NS_fsm = ap_ST_fsm_state126;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state125;
            end
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state127))) begin
                ap_NS_fsm = ap_ST_fsm_state128;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state127;
            end
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state129))) begin
                ap_NS_fsm = ap_ST_fsm_state130;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state129;
            end
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state131))) begin
                ap_NS_fsm = ap_ST_fsm_state132;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state131;
            end
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state133))) begin
                ap_NS_fsm = ap_ST_fsm_state134;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state133;
            end
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            if (((1'b0 == ap_block_state135_on_subcall_done) & (1'b1 == ap_CS_fsm_state135))) begin
                ap_NS_fsm = ap_ST_fsm_state136;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state135;
            end
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            if (((grp_fu_96_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state137))) begin
                ap_NS_fsm = ap_ST_fsm_state176;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end
        end
        ap_ST_fsm_state138 : begin
            if (((grp_fu_96_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state138))) begin
                ap_NS_fsm = ap_ST_fsm_state156;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state139;
            end
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state140))) begin
                ap_NS_fsm = ap_ST_fsm_state141;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state140;
            end
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state142))) begin
                ap_NS_fsm = ap_ST_fsm_state143;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state142;
            end
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state144))) begin
                ap_NS_fsm = ap_ST_fsm_state145;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state144;
            end
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state146))) begin
                ap_NS_fsm = ap_ST_fsm_state147;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state146;
            end
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state148))) begin
                ap_NS_fsm = ap_ST_fsm_state149;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state148;
            end
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state150;
        end
        ap_ST_fsm_state150 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state150))) begin
                ap_NS_fsm = ap_ST_fsm_state151;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state150;
            end
        end
        ap_ST_fsm_state151 : begin
            ap_NS_fsm = ap_ST_fsm_state152;
        end
        ap_ST_fsm_state152 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state152))) begin
                ap_NS_fsm = ap_ST_fsm_state153;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state152;
            end
        end
        ap_ST_fsm_state153 : begin
            ap_NS_fsm = ap_ST_fsm_state154;
        end
        ap_ST_fsm_state154 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state154))) begin
                ap_NS_fsm = ap_ST_fsm_state155;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state154;
            end
        end
        ap_ST_fsm_state155 : begin
            ap_NS_fsm = ap_ST_fsm_state156;
        end
        ap_ST_fsm_state156 : begin
            if (((1'b0 == ap_block_state156_on_subcall_done) & (1'b1 == ap_CS_fsm_state156))) begin
                ap_NS_fsm = ap_ST_fsm_state157;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state156;
            end
        end
        ap_ST_fsm_state157 : begin
            ap_NS_fsm = ap_ST_fsm_state158;
        end
        ap_ST_fsm_state158 : begin
            if (((grp_fu_96_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state158))) begin
                ap_NS_fsm = ap_ST_fsm_state176;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state159;
            end
        end
        ap_ST_fsm_state159 : begin
            ap_NS_fsm = ap_ST_fsm_state160;
        end
        ap_ST_fsm_state160 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state160))) begin
                ap_NS_fsm = ap_ST_fsm_state161;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state160;
            end
        end
        ap_ST_fsm_state161 : begin
            ap_NS_fsm = ap_ST_fsm_state162;
        end
        ap_ST_fsm_state162 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state162))) begin
                ap_NS_fsm = ap_ST_fsm_state163;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state162;
            end
        end
        ap_ST_fsm_state163 : begin
            ap_NS_fsm = ap_ST_fsm_state164;
        end
        ap_ST_fsm_state164 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state164))) begin
                ap_NS_fsm = ap_ST_fsm_state165;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state164;
            end
        end
        ap_ST_fsm_state165 : begin
            ap_NS_fsm = ap_ST_fsm_state166;
        end
        ap_ST_fsm_state166 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state166))) begin
                ap_NS_fsm = ap_ST_fsm_state167;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state166;
            end
        end
        ap_ST_fsm_state167 : begin
            ap_NS_fsm = ap_ST_fsm_state168;
        end
        ap_ST_fsm_state168 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state168))) begin
                ap_NS_fsm = ap_ST_fsm_state169;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state168;
            end
        end
        ap_ST_fsm_state169 : begin
            ap_NS_fsm = ap_ST_fsm_state170;
        end
        ap_ST_fsm_state170 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state170))) begin
                ap_NS_fsm = ap_ST_fsm_state171;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state170;
            end
        end
        ap_ST_fsm_state171 : begin
            ap_NS_fsm = ap_ST_fsm_state172;
        end
        ap_ST_fsm_state172 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state172))) begin
                ap_NS_fsm = ap_ST_fsm_state173;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state172;
            end
        end
        ap_ST_fsm_state173 : begin
            ap_NS_fsm = ap_ST_fsm_state174;
        end
        ap_ST_fsm_state174 : begin
            if (((grp_turnCube_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state174))) begin
                ap_NS_fsm = ap_ST_fsm_state175;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state174;
            end
        end
        ap_ST_fsm_state175 : begin
            ap_NS_fsm = ap_ST_fsm_state176;
        end
        ap_ST_fsm_state176 : begin
            if (((1'b0 == ap_block_state176_on_subcall_done) & (1'b1 == ap_CS_fsm_state176))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state176;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state110 = ap_CS_fsm[32'd109];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd110];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state115 = ap_CS_fsm[32'd114];

assign ap_CS_fsm_state116 = ap_CS_fsm[32'd115];

assign ap_CS_fsm_state117 = ap_CS_fsm[32'd116];

assign ap_CS_fsm_state118 = ap_CS_fsm[32'd117];

assign ap_CS_fsm_state119 = ap_CS_fsm[32'd118];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state120 = ap_CS_fsm[32'd119];

assign ap_CS_fsm_state121 = ap_CS_fsm[32'd120];

assign ap_CS_fsm_state122 = ap_CS_fsm[32'd121];

assign ap_CS_fsm_state123 = ap_CS_fsm[32'd122];

assign ap_CS_fsm_state124 = ap_CS_fsm[32'd123];

assign ap_CS_fsm_state125 = ap_CS_fsm[32'd124];

assign ap_CS_fsm_state126 = ap_CS_fsm[32'd125];

assign ap_CS_fsm_state127 = ap_CS_fsm[32'd126];

assign ap_CS_fsm_state128 = ap_CS_fsm[32'd127];

assign ap_CS_fsm_state129 = ap_CS_fsm[32'd128];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state130 = ap_CS_fsm[32'd129];

assign ap_CS_fsm_state131 = ap_CS_fsm[32'd130];

assign ap_CS_fsm_state132 = ap_CS_fsm[32'd131];

assign ap_CS_fsm_state133 = ap_CS_fsm[32'd132];

assign ap_CS_fsm_state134 = ap_CS_fsm[32'd133];

assign ap_CS_fsm_state135 = ap_CS_fsm[32'd134];

assign ap_CS_fsm_state136 = ap_CS_fsm[32'd135];

assign ap_CS_fsm_state137 = ap_CS_fsm[32'd136];

assign ap_CS_fsm_state138 = ap_CS_fsm[32'd137];

assign ap_CS_fsm_state139 = ap_CS_fsm[32'd138];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state140 = ap_CS_fsm[32'd139];

assign ap_CS_fsm_state141 = ap_CS_fsm[32'd140];

assign ap_CS_fsm_state142 = ap_CS_fsm[32'd141];

assign ap_CS_fsm_state143 = ap_CS_fsm[32'd142];

assign ap_CS_fsm_state144 = ap_CS_fsm[32'd143];

assign ap_CS_fsm_state145 = ap_CS_fsm[32'd144];

assign ap_CS_fsm_state146 = ap_CS_fsm[32'd145];

assign ap_CS_fsm_state147 = ap_CS_fsm[32'd146];

assign ap_CS_fsm_state148 = ap_CS_fsm[32'd147];

assign ap_CS_fsm_state149 = ap_CS_fsm[32'd148];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state150 = ap_CS_fsm[32'd149];

assign ap_CS_fsm_state151 = ap_CS_fsm[32'd150];

assign ap_CS_fsm_state152 = ap_CS_fsm[32'd151];

assign ap_CS_fsm_state153 = ap_CS_fsm[32'd152];

assign ap_CS_fsm_state154 = ap_CS_fsm[32'd153];

assign ap_CS_fsm_state155 = ap_CS_fsm[32'd154];

assign ap_CS_fsm_state156 = ap_CS_fsm[32'd155];

assign ap_CS_fsm_state157 = ap_CS_fsm[32'd156];

assign ap_CS_fsm_state158 = ap_CS_fsm[32'd157];

assign ap_CS_fsm_state159 = ap_CS_fsm[32'd158];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state160 = ap_CS_fsm[32'd159];

assign ap_CS_fsm_state161 = ap_CS_fsm[32'd160];

assign ap_CS_fsm_state162 = ap_CS_fsm[32'd161];

assign ap_CS_fsm_state163 = ap_CS_fsm[32'd162];

assign ap_CS_fsm_state164 = ap_CS_fsm[32'd163];

assign ap_CS_fsm_state165 = ap_CS_fsm[32'd164];

assign ap_CS_fsm_state166 = ap_CS_fsm[32'd165];

assign ap_CS_fsm_state167 = ap_CS_fsm[32'd166];

assign ap_CS_fsm_state168 = ap_CS_fsm[32'd167];

assign ap_CS_fsm_state169 = ap_CS_fsm[32'd168];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state170 = ap_CS_fsm[32'd169];

assign ap_CS_fsm_state171 = ap_CS_fsm[32'd170];

assign ap_CS_fsm_state172 = ap_CS_fsm[32'd171];

assign ap_CS_fsm_state173 = ap_CS_fsm[32'd172];

assign ap_CS_fsm_state174 = ap_CS_fsm[32'd173];

assign ap_CS_fsm_state175 = ap_CS_fsm[32'd174];

assign ap_CS_fsm_state176 = ap_CS_fsm[32'd175];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd97];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd98];

always @ (*) begin
    ap_block_state115_on_subcall_done = ((grp_turnCube_fu_72_ap_done == 1'b0) & (tmp_44_reg_256 == 1'd1));
end

always @ (*) begin
    ap_block_state135_on_subcall_done = ((grp_turnCube_fu_72_ap_done == 1'b0) & (ap_predicate_op400_call_state135 == 1'b1));
end

always @ (*) begin
    ap_block_state156_on_subcall_done = ((grp_turnCube_fu_72_ap_done == 1'b0) & (tmp_47_reg_268 == 1'd1));
end

always @ (*) begin
    ap_block_state176_on_subcall_done = ((grp_turnCube_fu_72_ap_done == 1'b0) & (ap_predicate_op457_call_state176 == 1'b1));
end

always @ (*) begin
    ap_block_state35_on_subcall_done = ((grp_turnCube_fu_72_ap_done == 1'b0) & (tmp_38_reg_232 == 1'd1));
end

always @ (*) begin
    ap_block_state57_on_subcall_done = ((grp_turnCube_fu_72_ap_done == 1'b0) & (ap_predicate_op290_call_state57 == 1'b1));
end

always @ (*) begin
    ap_block_state76_on_subcall_done = ((grp_turnCube_fu_72_ap_done == 1'b0) & (tmp_41_reg_244 == 1'd1));
end

always @ (*) begin
    ap_block_state94_on_subcall_done = ((grp_turnCube_fu_72_ap_done == 1'b0) & (ap_predicate_op343_call_state94 == 1'b1));
end

always @ (*) begin
    ap_predicate_op290_call_state57 = ((tmp_39_reg_236 == 1'd1) & (tmp_reg_177 == 1'd1));
end

always @ (*) begin
    ap_predicate_op343_call_state94 = ((tmp_42_reg_248 == 1'd1) & (tmp_40_reg_240 == 1'd1));
end

always @ (*) begin
    ap_predicate_op400_call_state135 = ((tmp_45_reg_260 == 1'd1) & (tmp_43_reg_252 == 1'd1));
end

always @ (*) begin
    ap_predicate_op457_call_state176 = ((tmp_48_reg_272 == 1'd1) & (tmp_46_reg_264 == 1'd1));
end

assign cubieColor_V_d0 = grp_turnCube_fu_72_cubieColor_V_d0;

assign cubieColor_V_d1 = grp_turnCube_fu_72_cubieColor_V_d1;

assign grp_fu_91_p2 = ((cubieColor_V_q1 == cubieColor_V_load_31_reg_172) ? 1'b1 : 1'b0);

assign grp_fu_96_p2 = ((cubieColor_V_q1 == cubieColor_V_q0) ? 1'b1 : 1'b0);

assign grp_turnCube_fu_72_ap_start = grp_turnCube_fu_72_ap_start_reg;

assign moves_V_address0 = grp_turnCube_fu_72_moves_V_address0;

assign moves_V_d0 = grp_turnCube_fu_72_moves_V_d0;

assign or_cond2_fu_134_p2 = (tmp_31_fu_129_p2 | tmp_30_fu_124_p2);

assign or_cond3_fu_150_p2 = (tmp_34_fu_145_p2 | tmp_33_fu_140_p2);

assign or_cond4_fu_166_p2 = (tmp_37_fu_161_p2 | tmp_36_fu_156_p2);

assign or_cond_fu_118_p2 = (tmp_s_fu_108_p2 | tmp_28_fu_113_p2);

assign tmp_28_fu_113_p2 = ((cubieColor_V_load_32_reg_181 == cubieColor_V_q0) ? 1'b1 : 1'b0);

assign tmp_30_fu_124_p2 = ((cubieColor_V_load_36_reg_195 == cubieColor_V_q1) ? 1'b1 : 1'b0);

assign tmp_31_fu_129_p2 = ((cubieColor_V_load_36_reg_195 == cubieColor_V_q0) ? 1'b1 : 1'b0);

assign tmp_33_fu_140_p2 = ((cubieColor_V_load_40_reg_209 == cubieColor_V_q1) ? 1'b1 : 1'b0);

assign tmp_34_fu_145_p2 = ((cubieColor_V_load_40_reg_209 == cubieColor_V_q0) ? 1'b1 : 1'b0);

assign tmp_36_fu_156_p2 = ((cubieColor_V_load_44_reg_223 == cubieColor_V_q1) ? 1'b1 : 1'b0);

assign tmp_37_fu_161_p2 = ((cubieColor_V_load_44_reg_223 == cubieColor_V_q0) ? 1'b1 : 1'b0);

assign tmp_fu_102_p2 = ((cubieColor_V_q0 == cubieColor_V_q1) ? 1'b1 : 1'b0);

assign tmp_s_fu_108_p2 = ((cubieColor_V_load_32_reg_181 == cubieColor_V_q1) ? 1'b1 : 1'b0);

endmodule //solveStage3a
