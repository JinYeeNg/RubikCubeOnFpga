// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module solveStage3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        fC_V,
        sC_V,
        moveCounter_V_i,
        moveCounter_V_o,
        moveCounter_V_o_ap_vld,
        moves_V_address0,
        moves_V_ce0,
        moves_V_we0,
        moves_V_d0,
        cubieColor_V_address0,
        cubieColor_V_ce0,
        cubieColor_V_we0,
        cubieColor_V_d0,
        cubieColor_V_q0,
        cubieColor_V_address1,
        cubieColor_V_ce1,
        cubieColor_V_we1,
        cubieColor_V_d1,
        cubieColor_V_q1
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [2:0] fC_V;
input  [2:0] sC_V;
input  [7:0] moveCounter_V_i;
output  [7:0] moveCounter_V_o;
output   moveCounter_V_o_ap_vld;
output  [7:0] moves_V_address0;
output   moves_V_ce0;
output   moves_V_we0;
output  [3:0] moves_V_d0;
output  [5:0] cubieColor_V_address0;
output   cubieColor_V_ce0;
output   cubieColor_V_we0;
output  [2:0] cubieColor_V_d0;
input  [2:0] cubieColor_V_q0;
output  [5:0] cubieColor_V_address1;
output   cubieColor_V_ce1;
output   cubieColor_V_we1;
output  [2:0] cubieColor_V_d1;
input  [2:0] cubieColor_V_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] moveCounter_V_o;
reg moveCounter_V_o_ap_vld;
reg[7:0] moves_V_address0;
reg moves_V_ce0;
reg moves_V_we0;
reg[3:0] moves_V_d0;
reg[5:0] cubieColor_V_address0;
reg cubieColor_V_ce0;
reg cubieColor_V_we0;
reg[2:0] cubieColor_V_d0;
reg[5:0] cubieColor_V_address1;
reg cubieColor_V_ce1;
reg cubieColor_V_we1;
reg[2:0] cubieColor_V_d1;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state3;
wire    grp_stage3Prepare_fu_32_ap_start;
wire    grp_stage3Prepare_fu_32_ap_done;
wire    grp_stage3Prepare_fu_32_ap_idle;
wire    grp_stage3Prepare_fu_32_ap_ready;
wire   [5:0] grp_stage3Prepare_fu_32_cubieColor_V_address0;
wire    grp_stage3Prepare_fu_32_cubieColor_V_ce0;
wire    grp_stage3Prepare_fu_32_cubieColor_V_we0;
wire   [2:0] grp_stage3Prepare_fu_32_cubieColor_V_d0;
wire   [5:0] grp_stage3Prepare_fu_32_cubieColor_V_address1;
wire    grp_stage3Prepare_fu_32_cubieColor_V_ce1;
wire    grp_stage3Prepare_fu_32_cubieColor_V_we1;
wire   [2:0] grp_stage3Prepare_fu_32_cubieColor_V_d1;
wire   [7:0] grp_stage3Prepare_fu_32_moveCounter_V_o;
wire    grp_stage3Prepare_fu_32_moveCounter_V_o_ap_vld;
wire   [7:0] grp_stage3Prepare_fu_32_moves_V_address0;
wire    grp_stage3Prepare_fu_32_moves_V_ce0;
wire    grp_stage3Prepare_fu_32_moves_V_we0;
wire   [3:0] grp_stage3Prepare_fu_32_moves_V_d0;
wire    grp_solveStage3a_fu_44_ap_start;
wire    grp_solveStage3a_fu_44_ap_done;
wire    grp_solveStage3a_fu_44_ap_idle;
wire    grp_solveStage3a_fu_44_ap_ready;
wire   [7:0] grp_solveStage3a_fu_44_moveCounter_V_o;
wire    grp_solveStage3a_fu_44_moveCounter_V_o_ap_vld;
wire   [7:0] grp_solveStage3a_fu_44_moves_V_address0;
wire    grp_solveStage3a_fu_44_moves_V_ce0;
wire    grp_solveStage3a_fu_44_moves_V_we0;
wire   [3:0] grp_solveStage3a_fu_44_moves_V_d0;
wire   [5:0] grp_solveStage3a_fu_44_cubieColor_V_address0;
wire    grp_solveStage3a_fu_44_cubieColor_V_ce0;
wire    grp_solveStage3a_fu_44_cubieColor_V_we0;
wire   [2:0] grp_solveStage3a_fu_44_cubieColor_V_d0;
wire   [5:0] grp_solveStage3a_fu_44_cubieColor_V_address1;
wire    grp_solveStage3a_fu_44_cubieColor_V_ce1;
wire    grp_solveStage3a_fu_44_cubieColor_V_we1;
wire   [2:0] grp_solveStage3a_fu_44_cubieColor_V_d1;
wire    grp_findEdge_fu_54_ap_start;
wire    grp_findEdge_fu_54_ap_done;
wire    grp_findEdge_fu_54_ap_idle;
wire    grp_findEdge_fu_54_ap_ready;
wire   [5:0] grp_findEdge_fu_54_cubieColor_V_address0;
wire    grp_findEdge_fu_54_cubieColor_V_ce0;
wire   [5:0] grp_findEdge_fu_54_cubieColor_V_address1;
wire    grp_findEdge_fu_54_cubieColor_V_ce1;
wire   [3:0] grp_findEdge_fu_54_ap_return;
reg    grp_stage3Prepare_fu_32_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg    grp_solveStage3a_fu_44_ap_start_reg;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state8;
reg    grp_findEdge_fu_54_ap_start_reg;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_fu_64_p2;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 grp_stage3Prepare_fu_32_ap_start_reg = 1'b0;
#0 grp_solveStage3a_fu_44_ap_start_reg = 1'b0;
#0 grp_findEdge_fu_54_ap_start_reg = 1'b0;
end

stage3Prepare grp_stage3Prepare_fu_32(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_stage3Prepare_fu_32_ap_start),
    .ap_done(grp_stage3Prepare_fu_32_ap_done),
    .ap_idle(grp_stage3Prepare_fu_32_ap_idle),
    .ap_ready(grp_stage3Prepare_fu_32_ap_ready),
    .fC_V(fC_V),
    .sC_V(sC_V),
    .cubieColor_V_address0(grp_stage3Prepare_fu_32_cubieColor_V_address0),
    .cubieColor_V_ce0(grp_stage3Prepare_fu_32_cubieColor_V_ce0),
    .cubieColor_V_we0(grp_stage3Prepare_fu_32_cubieColor_V_we0),
    .cubieColor_V_d0(grp_stage3Prepare_fu_32_cubieColor_V_d0),
    .cubieColor_V_q0(cubieColor_V_q0),
    .cubieColor_V_address1(grp_stage3Prepare_fu_32_cubieColor_V_address1),
    .cubieColor_V_ce1(grp_stage3Prepare_fu_32_cubieColor_V_ce1),
    .cubieColor_V_we1(grp_stage3Prepare_fu_32_cubieColor_V_we1),
    .cubieColor_V_d1(grp_stage3Prepare_fu_32_cubieColor_V_d1),
    .cubieColor_V_q1(cubieColor_V_q1),
    .moveCounter_V_i(moveCounter_V_i),
    .moveCounter_V_o(grp_stage3Prepare_fu_32_moveCounter_V_o),
    .moveCounter_V_o_ap_vld(grp_stage3Prepare_fu_32_moveCounter_V_o_ap_vld),
    .moves_V_address0(grp_stage3Prepare_fu_32_moves_V_address0),
    .moves_V_ce0(grp_stage3Prepare_fu_32_moves_V_ce0),
    .moves_V_we0(grp_stage3Prepare_fu_32_moves_V_we0),
    .moves_V_d0(grp_stage3Prepare_fu_32_moves_V_d0)
);

solveStage3a grp_solveStage3a_fu_44(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_solveStage3a_fu_44_ap_start),
    .ap_done(grp_solveStage3a_fu_44_ap_done),
    .ap_idle(grp_solveStage3a_fu_44_ap_idle),
    .ap_ready(grp_solveStage3a_fu_44_ap_ready),
    .moveCounter_V_i(moveCounter_V_i),
    .moveCounter_V_o(grp_solveStage3a_fu_44_moveCounter_V_o),
    .moveCounter_V_o_ap_vld(grp_solveStage3a_fu_44_moveCounter_V_o_ap_vld),
    .moves_V_address0(grp_solveStage3a_fu_44_moves_V_address0),
    .moves_V_ce0(grp_solveStage3a_fu_44_moves_V_ce0),
    .moves_V_we0(grp_solveStage3a_fu_44_moves_V_we0),
    .moves_V_d0(grp_solveStage3a_fu_44_moves_V_d0),
    .cubieColor_V_address0(grp_solveStage3a_fu_44_cubieColor_V_address0),
    .cubieColor_V_ce0(grp_solveStage3a_fu_44_cubieColor_V_ce0),
    .cubieColor_V_we0(grp_solveStage3a_fu_44_cubieColor_V_we0),
    .cubieColor_V_d0(grp_solveStage3a_fu_44_cubieColor_V_d0),
    .cubieColor_V_q0(cubieColor_V_q0),
    .cubieColor_V_address1(grp_solveStage3a_fu_44_cubieColor_V_address1),
    .cubieColor_V_ce1(grp_solveStage3a_fu_44_cubieColor_V_ce1),
    .cubieColor_V_we1(grp_solveStage3a_fu_44_cubieColor_V_we1),
    .cubieColor_V_d1(grp_solveStage3a_fu_44_cubieColor_V_d1),
    .cubieColor_V_q1(cubieColor_V_q1)
);

findEdge grp_findEdge_fu_54(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_findEdge_fu_54_ap_start),
    .ap_done(grp_findEdge_fu_54_ap_done),
    .ap_idle(grp_findEdge_fu_54_ap_idle),
    .ap_ready(grp_findEdge_fu_54_ap_ready),
    .fEC_V(fC_V),
    .sEC_V(sC_V),
    .cubieColor_V_address0(grp_findEdge_fu_54_cubieColor_V_address0),
    .cubieColor_V_ce0(grp_findEdge_fu_54_cubieColor_V_ce0),
    .cubieColor_V_q0(cubieColor_V_q0),
    .cubieColor_V_address1(grp_findEdge_fu_54_cubieColor_V_address1),
    .cubieColor_V_ce1(grp_findEdge_fu_54_cubieColor_V_ce1),
    .cubieColor_V_q1(cubieColor_V_q1),
    .ap_return(grp_findEdge_fu_54_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_findEdge_fu_54_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_findEdge_fu_54_ap_start_reg <= 1'b1;
        end else if ((grp_findEdge_fu_54_ap_ready == 1'b1)) begin
            grp_findEdge_fu_54_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_solveStage3a_fu_44_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
            grp_solveStage3a_fu_44_ap_start_reg <= 1'b1;
        end else if ((grp_solveStage3a_fu_44_ap_ready == 1'b1)) begin
            grp_solveStage3a_fu_44_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_stage3Prepare_fu_32_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_stage3Prepare_fu_32_ap_start_reg <= 1'b1;
        end else if ((grp_stage3Prepare_fu_32_ap_ready == 1'b1)) begin
            grp_stage3Prepare_fu_32_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((((grp_solveStage3a_fu_44_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_solveStage3a_fu_44_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cubieColor_V_address0 = grp_findEdge_fu_54_cubieColor_V_address0;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2))) begin
        cubieColor_V_address0 = grp_solveStage3a_fu_44_cubieColor_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        cubieColor_V_address0 = grp_stage3Prepare_fu_32_cubieColor_V_address0;
    end else begin
        cubieColor_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cubieColor_V_address1 = grp_findEdge_fu_54_cubieColor_V_address1;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2))) begin
        cubieColor_V_address1 = grp_solveStage3a_fu_44_cubieColor_V_address1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        cubieColor_V_address1 = grp_stage3Prepare_fu_32_cubieColor_V_address1;
    end else begin
        cubieColor_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cubieColor_V_ce0 = grp_findEdge_fu_54_cubieColor_V_ce0;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2))) begin
        cubieColor_V_ce0 = grp_solveStage3a_fu_44_cubieColor_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        cubieColor_V_ce0 = grp_stage3Prepare_fu_32_cubieColor_V_ce0;
    end else begin
        cubieColor_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cubieColor_V_ce1 = grp_findEdge_fu_54_cubieColor_V_ce1;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2))) begin
        cubieColor_V_ce1 = grp_solveStage3a_fu_44_cubieColor_V_ce1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        cubieColor_V_ce1 = grp_stage3Prepare_fu_32_cubieColor_V_ce1;
    end else begin
        cubieColor_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2))) begin
        cubieColor_V_d0 = grp_solveStage3a_fu_44_cubieColor_V_d0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        cubieColor_V_d0 = grp_stage3Prepare_fu_32_cubieColor_V_d0;
    end else begin
        cubieColor_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2))) begin
        cubieColor_V_d1 = grp_solveStage3a_fu_44_cubieColor_V_d1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        cubieColor_V_d1 = grp_stage3Prepare_fu_32_cubieColor_V_d1;
    end else begin
        cubieColor_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2))) begin
        cubieColor_V_we0 = grp_solveStage3a_fu_44_cubieColor_V_we0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        cubieColor_V_we0 = grp_stage3Prepare_fu_32_cubieColor_V_we0;
    end else begin
        cubieColor_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2))) begin
        cubieColor_V_we1 = grp_solveStage3a_fu_44_cubieColor_V_we1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        cubieColor_V_we1 = grp_stage3Prepare_fu_32_cubieColor_V_we1;
    end else begin
        cubieColor_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((((grp_solveStage3a_fu_44_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((grp_solveStage3a_fu_44_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        moveCounter_V_o = grp_solveStage3a_fu_44_moveCounter_V_o;
    end else if (((grp_stage3Prepare_fu_32_moveCounter_V_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        moveCounter_V_o = grp_stage3Prepare_fu_32_moveCounter_V_o;
    end else begin
        moveCounter_V_o = moveCounter_V_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2))) begin
        moveCounter_V_o_ap_vld = grp_solveStage3a_fu_44_moveCounter_V_o_ap_vld;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        moveCounter_V_o_ap_vld = grp_stage3Prepare_fu_32_moveCounter_V_o_ap_vld;
    end else begin
        moveCounter_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2))) begin
        moves_V_address0 = grp_solveStage3a_fu_44_moves_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        moves_V_address0 = grp_stage3Prepare_fu_32_moves_V_address0;
    end else begin
        moves_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2))) begin
        moves_V_ce0 = grp_solveStage3a_fu_44_moves_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        moves_V_ce0 = grp_stage3Prepare_fu_32_moves_V_ce0;
    end else begin
        moves_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2))) begin
        moves_V_d0 = grp_solveStage3a_fu_44_moves_V_d0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        moves_V_d0 = grp_stage3Prepare_fu_32_moves_V_d0;
    end else begin
        moves_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2))) begin
        moves_V_we0 = grp_solveStage3a_fu_44_moves_V_we0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        moves_V_we0 = grp_stage3Prepare_fu_32_moves_V_we0;
    end else begin
        moves_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_solveStage3a_fu_44_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (tmp_fu_64_p2 == 1'd0) & (grp_findEdge_fu_54_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if (((1'b1 == ap_CS_fsm_state4) & (tmp_fu_64_p2 == 1'd1) & (grp_findEdge_fu_54_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_stage3Prepare_fu_32_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((grp_solveStage3a_fu_44_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign grp_findEdge_fu_54_ap_start = grp_findEdge_fu_54_ap_start_reg;

assign grp_solveStage3a_fu_44_ap_start = grp_solveStage3a_fu_44_ap_start_reg;

assign grp_stage3Prepare_fu_32_ap_start = grp_stage3Prepare_fu_32_ap_start_reg;

assign tmp_fu_64_p2 = ((grp_findEdge_fu_54_ap_return > 4'd4) ? 1'b1 : 1'b0);

endmodule //solveStage3
