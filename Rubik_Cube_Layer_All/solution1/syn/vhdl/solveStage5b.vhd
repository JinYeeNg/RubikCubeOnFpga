-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity solveStage5b is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cubieColor_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    cubieColor_V_ce0 : OUT STD_LOGIC;
    cubieColor_V_we0 : OUT STD_LOGIC;
    cubieColor_V_d0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    cubieColor_V_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
    cubieColor_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    cubieColor_V_ce1 : OUT STD_LOGIC;
    cubieColor_V_we1 : OUT STD_LOGIC;
    cubieColor_V_d1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    cubieColor_V_q1 : IN STD_LOGIC_VECTOR (2 downto 0);
    moveCounter_V_i : IN STD_LOGIC_VECTOR (7 downto 0);
    moveCounter_V_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    moveCounter_V_o_ap_vld : OUT STD_LOGIC;
    moves_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    moves_V_ce0 : OUT STD_LOGIC;
    moves_V_we0 : OUT STD_LOGIC;
    moves_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of solveStage5b is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (96 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (96 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (96 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (96 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (96 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (96 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (96 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (96 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (96 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (96 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv6_1C : STD_LOGIC_VECTOR (5 downto 0) := "011100";
    constant ap_const_lv6_25 : STD_LOGIC_VECTOR (5 downto 0) := "100101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_edgeCorrect_fu_75_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_reg_92 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_edgeCorrect_fu_75_ap_idle : STD_LOGIC;
    signal grp_edgeCorrect_fu_75_ap_ready : STD_LOGIC;
    signal grp_edgeCorrect_fu_75_ap_done : STD_LOGIC;
    signal p_4_reg_96 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal p_8_reg_100 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal p_3_reg_104 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal p_0_reg_108 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_block_state42_on_subcall_done : BOOLEAN;
    signal p_5_reg_116 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_predicate_op160_call_state48 : BOOLEAN;
    signal ap_block_state48_on_subcall_done : BOOLEAN;
    signal tmp_fu_86_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_124 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal grp_turnCube_fu_47_ap_start : STD_LOGIC;
    signal grp_turnCube_fu_47_ap_done : STD_LOGIC;
    signal grp_turnCube_fu_47_ap_idle : STD_LOGIC;
    signal grp_turnCube_fu_47_ap_ready : STD_LOGIC;
    signal grp_turnCube_fu_47_turn_V : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_turnCube_fu_47_moveCounter_V_o : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_turnCube_fu_47_moveCounter_V_o_ap_vld : STD_LOGIC;
    signal grp_turnCube_fu_47_moves_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_turnCube_fu_47_moves_V_ce0 : STD_LOGIC;
    signal grp_turnCube_fu_47_moves_V_we0 : STD_LOGIC;
    signal grp_turnCube_fu_47_moves_V_d0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_turnCube_fu_47_cubieColor_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_turnCube_fu_47_cubieColor_V_ce0 : STD_LOGIC;
    signal grp_turnCube_fu_47_cubieColor_V_we0 : STD_LOGIC;
    signal grp_turnCube_fu_47_cubieColor_V_d0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_turnCube_fu_47_cubieColor_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_turnCube_fu_47_cubieColor_V_ce1 : STD_LOGIC;
    signal grp_turnCube_fu_47_cubieColor_V_we1 : STD_LOGIC;
    signal grp_turnCube_fu_47_cubieColor_V_d1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_rotateCubeHorizontal_fu_65_ap_start : STD_LOGIC;
    signal grp_rotateCubeHorizontal_fu_65_ap_done : STD_LOGIC;
    signal grp_rotateCubeHorizontal_fu_65_ap_idle : STD_LOGIC;
    signal grp_rotateCubeHorizontal_fu_65_ap_ready : STD_LOGIC;
    signal grp_rotateCubeHorizontal_fu_65_moveCounter_V_o : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_rotateCubeHorizontal_fu_65_moveCounter_V_o_ap_vld : STD_LOGIC;
    signal grp_rotateCubeHorizontal_fu_65_moves_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_rotateCubeHorizontal_fu_65_moves_V_ce0 : STD_LOGIC;
    signal grp_rotateCubeHorizontal_fu_65_moves_V_we0 : STD_LOGIC;
    signal grp_rotateCubeHorizontal_fu_65_moves_V_d0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_rotateCubeHorizontal_fu_65_cubieColor_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_rotateCubeHorizontal_fu_65_cubieColor_V_ce0 : STD_LOGIC;
    signal grp_rotateCubeHorizontal_fu_65_cubieColor_V_we0 : STD_LOGIC;
    signal grp_rotateCubeHorizontal_fu_65_cubieColor_V_d0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_rotateCubeHorizontal_fu_65_cubieColor_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_rotateCubeHorizontal_fu_65_cubieColor_V_ce1 : STD_LOGIC;
    signal grp_rotateCubeHorizontal_fu_65_cubieColor_V_we1 : STD_LOGIC;
    signal grp_rotateCubeHorizontal_fu_65_cubieColor_V_d1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_edgeCorrect_fu_75_ap_start : STD_LOGIC;
    signal grp_edgeCorrect_fu_75_edge_V : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_edgeCorrect_fu_75_cubieColor_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_edgeCorrect_fu_75_cubieColor_V_ce0 : STD_LOGIC;
    signal grp_edgeCorrect_fu_75_cubieColor_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_edgeCorrect_fu_75_cubieColor_V_ce1 : STD_LOGIC;
    signal grp_turnCube_fu_47_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal grp_rotateCubeHorizontal_fu_65_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal grp_edgeCorrect_fu_75_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_predicate_op197_call_state78 : BOOLEAN;
    signal ap_predicate_op199_call_state78 : BOOLEAN;
    signal ap_block_state78_on_subcall_done : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (96 downto 0);
    signal ap_predicate_op145_call_state40 : BOOLEAN;
    signal ap_block_state40_on_subcall_done : BOOLEAN;

    component turnCube IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        turn_V : IN STD_LOGIC_VECTOR (3 downto 0);
        moveCounter_V_i : IN STD_LOGIC_VECTOR (7 downto 0);
        moveCounter_V_o : OUT STD_LOGIC_VECTOR (7 downto 0);
        moveCounter_V_o_ap_vld : OUT STD_LOGIC;
        moves_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        moves_V_ce0 : OUT STD_LOGIC;
        moves_V_we0 : OUT STD_LOGIC;
        moves_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        cubieColor_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cubieColor_V_ce0 : OUT STD_LOGIC;
        cubieColor_V_we0 : OUT STD_LOGIC;
        cubieColor_V_d0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cubieColor_V_ce1 : OUT STD_LOGIC;
        cubieColor_V_we1 : OUT STD_LOGIC;
        cubieColor_V_d1 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component rotateCubeHorizontal IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        moveCounter_V_i : IN STD_LOGIC_VECTOR (7 downto 0);
        moveCounter_V_o : OUT STD_LOGIC_VECTOR (7 downto 0);
        moveCounter_V_o_ap_vld : OUT STD_LOGIC;
        moves_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        moves_V_ce0 : OUT STD_LOGIC;
        moves_V_we0 : OUT STD_LOGIC;
        moves_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        cubieColor_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cubieColor_V_ce0 : OUT STD_LOGIC;
        cubieColor_V_we0 : OUT STD_LOGIC;
        cubieColor_V_d0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cubieColor_V_ce1 : OUT STD_LOGIC;
        cubieColor_V_we1 : OUT STD_LOGIC;
        cubieColor_V_d1 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component edgeCorrect IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        edge_V : IN STD_LOGIC_VECTOR (3 downto 0);
        cubieColor_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cubieColor_V_ce0 : OUT STD_LOGIC;
        cubieColor_V_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cubieColor_V_ce1 : OUT STD_LOGIC;
        cubieColor_V_q1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    grp_turnCube_fu_47 : component turnCube
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_turnCube_fu_47_ap_start,
        ap_done => grp_turnCube_fu_47_ap_done,
        ap_idle => grp_turnCube_fu_47_ap_idle,
        ap_ready => grp_turnCube_fu_47_ap_ready,
        turn_V => grp_turnCube_fu_47_turn_V,
        moveCounter_V_i => moveCounter_V_i,
        moveCounter_V_o => grp_turnCube_fu_47_moveCounter_V_o,
        moveCounter_V_o_ap_vld => grp_turnCube_fu_47_moveCounter_V_o_ap_vld,
        moves_V_address0 => grp_turnCube_fu_47_moves_V_address0,
        moves_V_ce0 => grp_turnCube_fu_47_moves_V_ce0,
        moves_V_we0 => grp_turnCube_fu_47_moves_V_we0,
        moves_V_d0 => grp_turnCube_fu_47_moves_V_d0,
        cubieColor_V_address0 => grp_turnCube_fu_47_cubieColor_V_address0,
        cubieColor_V_ce0 => grp_turnCube_fu_47_cubieColor_V_ce0,
        cubieColor_V_we0 => grp_turnCube_fu_47_cubieColor_V_we0,
        cubieColor_V_d0 => grp_turnCube_fu_47_cubieColor_V_d0,
        cubieColor_V_q0 => cubieColor_V_q0,
        cubieColor_V_address1 => grp_turnCube_fu_47_cubieColor_V_address1,
        cubieColor_V_ce1 => grp_turnCube_fu_47_cubieColor_V_ce1,
        cubieColor_V_we1 => grp_turnCube_fu_47_cubieColor_V_we1,
        cubieColor_V_d1 => grp_turnCube_fu_47_cubieColor_V_d1);

    grp_rotateCubeHorizontal_fu_65 : component rotateCubeHorizontal
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_rotateCubeHorizontal_fu_65_ap_start,
        ap_done => grp_rotateCubeHorizontal_fu_65_ap_done,
        ap_idle => grp_rotateCubeHorizontal_fu_65_ap_idle,
        ap_ready => grp_rotateCubeHorizontal_fu_65_ap_ready,
        moveCounter_V_i => moveCounter_V_i,
        moveCounter_V_o => grp_rotateCubeHorizontal_fu_65_moveCounter_V_o,
        moveCounter_V_o_ap_vld => grp_rotateCubeHorizontal_fu_65_moveCounter_V_o_ap_vld,
        moves_V_address0 => grp_rotateCubeHorizontal_fu_65_moves_V_address0,
        moves_V_ce0 => grp_rotateCubeHorizontal_fu_65_moves_V_ce0,
        moves_V_we0 => grp_rotateCubeHorizontal_fu_65_moves_V_we0,
        moves_V_d0 => grp_rotateCubeHorizontal_fu_65_moves_V_d0,
        cubieColor_V_address0 => grp_rotateCubeHorizontal_fu_65_cubieColor_V_address0,
        cubieColor_V_ce0 => grp_rotateCubeHorizontal_fu_65_cubieColor_V_ce0,
        cubieColor_V_we0 => grp_rotateCubeHorizontal_fu_65_cubieColor_V_we0,
        cubieColor_V_d0 => grp_rotateCubeHorizontal_fu_65_cubieColor_V_d0,
        cubieColor_V_q0 => cubieColor_V_q0,
        cubieColor_V_address1 => grp_rotateCubeHorizontal_fu_65_cubieColor_V_address1,
        cubieColor_V_ce1 => grp_rotateCubeHorizontal_fu_65_cubieColor_V_ce1,
        cubieColor_V_we1 => grp_rotateCubeHorizontal_fu_65_cubieColor_V_we1,
        cubieColor_V_d1 => grp_rotateCubeHorizontal_fu_65_cubieColor_V_d1);

    grp_edgeCorrect_fu_75 : component edgeCorrect
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_edgeCorrect_fu_75_ap_start,
        ap_done => grp_edgeCorrect_fu_75_ap_done,
        ap_idle => grp_edgeCorrect_fu_75_ap_idle,
        ap_ready => grp_edgeCorrect_fu_75_ap_ready,
        edge_V => grp_edgeCorrect_fu_75_edge_V,
        cubieColor_V_address0 => grp_edgeCorrect_fu_75_cubieColor_V_address0,
        cubieColor_V_ce0 => grp_edgeCorrect_fu_75_cubieColor_V_ce0,
        cubieColor_V_q0 => cubieColor_V_q0,
        cubieColor_V_address1 => grp_edgeCorrect_fu_75_cubieColor_V_address1,
        cubieColor_V_ce1 => grp_edgeCorrect_fu_75_cubieColor_V_ce1,
        cubieColor_V_q1 => cubieColor_V_q1,
        ap_return => grp_edgeCorrect_fu_75_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_edgeCorrect_fu_75_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_edgeCorrect_fu_75_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
                    grp_edgeCorrect_fu_75_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_edgeCorrect_fu_75_ap_ready = ap_const_logic_1)) then 
                    grp_edgeCorrect_fu_75_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_rotateCubeHorizontal_fu_65_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_rotateCubeHorizontal_fu_65_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                    grp_rotateCubeHorizontal_fu_65_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_rotateCubeHorizontal_fu_65_ap_ready = ap_const_logic_1)) then 
                    grp_rotateCubeHorizontal_fu_65_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_turnCube_fu_47_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_turnCube_fu_47_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    grp_turnCube_fu_47_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_turnCube_fu_47_ap_ready = ap_const_logic_1)) then 
                    grp_turnCube_fu_47_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) and (grp_edgeCorrect_fu_75_ap_done = ap_const_logic_1))) then
                p_0_reg_108 <= grp_edgeCorrect_fu_75_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_edgeCorrect_fu_75_ap_done = ap_const_logic_1))) then
                p_3_reg_104 <= grp_edgeCorrect_fu_75_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_edgeCorrect_fu_75_ap_done = ap_const_logic_1))) then
                p_4_reg_96 <= grp_edgeCorrect_fu_75_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state46) and (grp_edgeCorrect_fu_75_ap_done = ap_const_logic_1))) then
                p_5_reg_116 <= grp_edgeCorrect_fu_75_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_edgeCorrect_fu_75_ap_done = ap_const_logic_1))) then
                p_8_reg_100 <= grp_edgeCorrect_fu_75_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_edgeCorrect_fu_75_ap_done = ap_const_logic_1))) then
                p_s_reg_92 <= grp_edgeCorrect_fu_75_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                tmp_reg_124 <= tmp_fu_86_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_edgeCorrect_fu_75_ap_return, p_s_reg_92, ap_CS_fsm_state2, grp_edgeCorrect_fu_75_ap_done, p_4_reg_96, ap_CS_fsm_state4, p_8_reg_100, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state34, ap_CS_fsm_state42, ap_block_state42_on_subcall_done, p_5_reg_116, ap_CS_fsm_state46, ap_CS_fsm_state48, ap_block_state48_on_subcall_done, tmp_reg_124, grp_turnCube_fu_47_ap_done, grp_rotateCubeHorizontal_fu_65_ap_done, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state56, ap_CS_fsm_state58, ap_CS_fsm_state60, ap_CS_fsm_state62, ap_CS_fsm_state64, ap_CS_fsm_state66, ap_CS_fsm_state68, ap_CS_fsm_state70, ap_CS_fsm_state72, ap_CS_fsm_state74, ap_CS_fsm_state76, ap_CS_fsm_state78, ap_CS_fsm_state80, ap_CS_fsm_state82, ap_CS_fsm_state84, ap_CS_fsm_state86, ap_CS_fsm_state88, ap_CS_fsm_state90, ap_CS_fsm_state92, ap_CS_fsm_state94, ap_CS_fsm_state96, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state44, ap_CS_fsm_state50, ap_CS_fsm_state52, ap_block_state78_on_subcall_done, ap_block_state40_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_edgeCorrect_fu_75_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_edgeCorrect_fu_75_ap_done = ap_const_logic_1) and (p_s_reg_92 = ap_const_lv1_1) and (grp_edgeCorrect_fu_75_ap_return = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_edgeCorrect_fu_75_ap_done = ap_const_logic_1) and (p_s_reg_92 = ap_const_lv1_1) and (grp_edgeCorrect_fu_75_ap_return = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_edgeCorrect_fu_75_ap_done = ap_const_logic_1) and (p_s_reg_92 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (p_4_reg_96 = ap_const_lv1_1) and (grp_edgeCorrect_fu_75_ap_done = ap_const_logic_1) and (grp_edgeCorrect_fu_75_ap_return = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (p_4_reg_96 = ap_const_lv1_1) and (grp_edgeCorrect_fu_75_ap_done = ap_const_logic_1) and (grp_edgeCorrect_fu_75_ap_return = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (p_4_reg_96 = ap_const_lv1_0) and (grp_edgeCorrect_fu_75_ap_done = ap_const_logic_1) and (grp_edgeCorrect_fu_75_ap_return = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (p_4_reg_96 = ap_const_lv1_0) and (grp_edgeCorrect_fu_75_ap_done = ap_const_logic_1) and (grp_edgeCorrect_fu_75_ap_return = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_edgeCorrect_fu_75_ap_done = ap_const_logic_1) and (grp_edgeCorrect_fu_75_ap_return = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_edgeCorrect_fu_75_ap_done = ap_const_logic_1) and (grp_edgeCorrect_fu_75_ap_return = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_turnCube_fu_47_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((grp_turnCube_fu_47_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((grp_turnCube_fu_47_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((grp_turnCube_fu_47_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((grp_turnCube_fu_47_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((grp_turnCube_fu_47_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((grp_turnCube_fu_47_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((grp_turnCube_fu_47_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((grp_turnCube_fu_47_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((grp_turnCube_fu_47_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((grp_turnCube_fu_47_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((grp_turnCube_fu_47_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state78;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state34) and (grp_edgeCorrect_fu_75_ap_done = ap_const_logic_1) and (grp_edgeCorrect_fu_75_ap_return = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state34) and (grp_edgeCorrect_fu_75_ap_done = ap_const_logic_1) and (grp_edgeCorrect_fu_75_ap_return = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (((grp_rotateCubeHorizontal_fu_65_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                if (((grp_rotateCubeHorizontal_fu_65_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_boolean_0 = ap_block_state40_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state42) and (ap_const_boolean_0 = ap_block_state42_on_subcall_done) and ((p_8_reg_100 = ap_const_lv1_1) or (grp_edgeCorrect_fu_75_ap_return = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state42) and (ap_const_boolean_0 = ap_block_state42_on_subcall_done) and (p_8_reg_100 = ap_const_lv1_0) and (grp_edgeCorrect_fu_75_ap_return = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                if (((grp_rotateCubeHorizontal_fu_65_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state46) and (grp_edgeCorrect_fu_75_ap_done = ap_const_logic_1) and (grp_edgeCorrect_fu_75_ap_return = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state46) and (grp_edgeCorrect_fu_75_ap_done = ap_const_logic_1) and (grp_edgeCorrect_fu_75_ap_return = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                if (((ap_const_boolean_0 = ap_block_state48_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state48) and ((p_5_reg_116 = ap_const_lv1_1) or (p_4_reg_96 = ap_const_lv1_1) or (grp_edgeCorrect_fu_75_ap_return = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                elsif (((ap_const_boolean_0 = ap_block_state48_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state48) and (p_5_reg_116 = ap_const_lv1_0) and (p_4_reg_96 = ap_const_lv1_0) and (grp_edgeCorrect_fu_75_ap_return = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                if (((grp_rotateCubeHorizontal_fu_65_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                if (((grp_rotateCubeHorizontal_fu_65_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                if (((grp_turnCube_fu_47_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                if (((grp_turnCube_fu_47_ap_done = ap_const_logic_1) and (tmp_reg_124 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                    ap_NS_fsm <= ap_ST_fsm_state79;
                elsif (((grp_turnCube_fu_47_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58) and (tmp_reg_124 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                if (((grp_turnCube_fu_47_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state60))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                if (((grp_turnCube_fu_47_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state62))) then
                    ap_NS_fsm <= ap_ST_fsm_state63;
                else
                    ap_NS_fsm <= ap_ST_fsm_state62;
                end if;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                if (((grp_turnCube_fu_47_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state64))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                if (((grp_turnCube_fu_47_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then
                    ap_NS_fsm <= ap_ST_fsm_state67;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                if (((grp_turnCube_fu_47_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state68))) then
                    ap_NS_fsm <= ap_ST_fsm_state69;
                else
                    ap_NS_fsm <= ap_ST_fsm_state68;
                end if;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                if (((grp_turnCube_fu_47_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                else
                    ap_NS_fsm <= ap_ST_fsm_state70;
                end if;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                if (((grp_turnCube_fu_47_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state72))) then
                    ap_NS_fsm <= ap_ST_fsm_state73;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                if (((grp_turnCube_fu_47_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state74))) then
                    ap_NS_fsm <= ap_ST_fsm_state75;
                else
                    ap_NS_fsm <= ap_ST_fsm_state74;
                end if;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                if (((grp_turnCube_fu_47_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state76))) then
                    ap_NS_fsm <= ap_ST_fsm_state77;
                else
                    ap_NS_fsm <= ap_ST_fsm_state76;
                end if;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                if (((ap_const_boolean_0 = ap_block_state78_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state78))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state78;
                end if;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                if (((grp_turnCube_fu_47_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state80))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                else
                    ap_NS_fsm <= ap_ST_fsm_state80;
                end if;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                if (((grp_turnCube_fu_47_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state82))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_state82;
                end if;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                if (((grp_turnCube_fu_47_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state84))) then
                    ap_NS_fsm <= ap_ST_fsm_state85;
                else
                    ap_NS_fsm <= ap_ST_fsm_state84;
                end if;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                if (((grp_turnCube_fu_47_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state86))) then
                    ap_NS_fsm <= ap_ST_fsm_state87;
                else
                    ap_NS_fsm <= ap_ST_fsm_state86;
                end if;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                if (((grp_turnCube_fu_47_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state88))) then
                    ap_NS_fsm <= ap_ST_fsm_state89;
                else
                    ap_NS_fsm <= ap_ST_fsm_state88;
                end if;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                if (((grp_turnCube_fu_47_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state90))) then
                    ap_NS_fsm <= ap_ST_fsm_state91;
                else
                    ap_NS_fsm <= ap_ST_fsm_state90;
                end if;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                if (((grp_turnCube_fu_47_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state92))) then
                    ap_NS_fsm <= ap_ST_fsm_state93;
                else
                    ap_NS_fsm <= ap_ST_fsm_state92;
                end if;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                if (((grp_turnCube_fu_47_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state94))) then
                    ap_NS_fsm <= ap_ST_fsm_state95;
                else
                    ap_NS_fsm <= ap_ST_fsm_state94;
                end if;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                if (((grp_turnCube_fu_47_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state96))) then
                    ap_NS_fsm <= ap_ST_fsm_state97;
                else
                    ap_NS_fsm <= ap_ST_fsm_state96;
                end if;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_CS_fsm_state91 <= ap_CS_fsm(90);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);

    ap_block_state40_on_subcall_done_assign_proc : process(grp_rotateCubeHorizontal_fu_65_ap_done, ap_predicate_op145_call_state40)
    begin
                ap_block_state40_on_subcall_done <= ((grp_rotateCubeHorizontal_fu_65_ap_done = ap_const_logic_0) and (ap_predicate_op145_call_state40 = ap_const_boolean_1));
    end process;


    ap_block_state42_on_subcall_done_assign_proc : process(grp_edgeCorrect_fu_75_ap_done, p_8_reg_100)
    begin
                ap_block_state42_on_subcall_done <= ((grp_edgeCorrect_fu_75_ap_done = ap_const_logic_0) and (p_8_reg_100 = ap_const_lv1_0));
    end process;


    ap_block_state48_on_subcall_done_assign_proc : process(grp_edgeCorrect_fu_75_ap_done, ap_predicate_op160_call_state48)
    begin
                ap_block_state48_on_subcall_done <= ((grp_edgeCorrect_fu_75_ap_done = ap_const_logic_0) and (ap_predicate_op160_call_state48 = ap_const_boolean_1));
    end process;


    ap_block_state78_on_subcall_done_assign_proc : process(grp_turnCube_fu_47_ap_done, ap_predicate_op197_call_state78, ap_predicate_op199_call_state78)
    begin
                ap_block_state78_on_subcall_done <= (((grp_turnCube_fu_47_ap_done = ap_const_logic_0) and (ap_predicate_op199_call_state78 = ap_const_boolean_1)) or ((grp_turnCube_fu_47_ap_done = ap_const_logic_0) and (ap_predicate_op197_call_state78 = ap_const_boolean_1)));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state78, ap_block_state78_on_subcall_done)
    begin
        if ((((ap_const_boolean_0 = ap_block_state78_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state78)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op145_call_state40_assign_proc : process(p_s_reg_92, p_4_reg_96, p_8_reg_100, p_0_reg_108)
    begin
                ap_predicate_op145_call_state40 <= ((p_0_reg_108 = ap_const_lv1_1) and (p_8_reg_100 = ap_const_lv1_0) and (p_4_reg_96 = ap_const_lv1_0) and (p_s_reg_92 = ap_const_lv1_0));
    end process;


    ap_predicate_op160_call_state48_assign_proc : process(p_4_reg_96, p_5_reg_116)
    begin
                ap_predicate_op160_call_state48 <= ((p_5_reg_116 = ap_const_lv1_0) and (p_4_reg_96 = ap_const_lv1_0));
    end process;


    ap_predicate_op197_call_state78_assign_proc : process(p_s_reg_92, p_4_reg_96, p_8_reg_100, p_3_reg_104, tmp_reg_124)
    begin
                ap_predicate_op197_call_state78 <= (((tmp_reg_124 = ap_const_lv1_0) and (p_3_reg_104 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_8_reg_100 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_4_reg_96 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_s_reg_92 = ap_const_lv1_1)));
    end process;


    ap_predicate_op199_call_state78_assign_proc : process(p_s_reg_92, p_4_reg_96, p_8_reg_100, p_3_reg_104, tmp_reg_124)
    begin
                ap_predicate_op199_call_state78 <= (((tmp_reg_124 = ap_const_lv1_1) and (p_3_reg_104 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_8_reg_100 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_4_reg_96 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_s_reg_92 = ap_const_lv1_1)));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state78, ap_block_state78_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state78_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state78))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    cubieColor_V_address0_assign_proc : process(p_s_reg_92, ap_CS_fsm_state2, p_4_reg_96, ap_CS_fsm_state4, p_8_reg_100, ap_CS_fsm_state6, p_3_reg_104, ap_CS_fsm_state8, p_0_reg_108, ap_CS_fsm_state34, ap_CS_fsm_state42, ap_CS_fsm_state46, ap_CS_fsm_state48, ap_predicate_op160_call_state48, tmp_reg_124, grp_turnCube_fu_47_cubieColor_V_address0, grp_rotateCubeHorizontal_fu_65_cubieColor_V_address0, grp_edgeCorrect_fu_75_cubieColor_V_address0, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state56, ap_CS_fsm_state58, ap_CS_fsm_state60, ap_CS_fsm_state62, ap_CS_fsm_state64, ap_CS_fsm_state66, ap_CS_fsm_state68, ap_CS_fsm_state70, ap_CS_fsm_state72, ap_CS_fsm_state74, ap_CS_fsm_state76, ap_CS_fsm_state78, ap_CS_fsm_state80, ap_CS_fsm_state82, ap_CS_fsm_state84, ap_CS_fsm_state86, ap_CS_fsm_state88, ap_CS_fsm_state90, ap_CS_fsm_state92, ap_CS_fsm_state94, ap_CS_fsm_state96, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state44, ap_CS_fsm_state50, ap_CS_fsm_state52, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            cubieColor_V_address0 <= ap_const_lv6_1C;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state48) and (ap_predicate_op160_call_state48 = ap_const_boolean_1)) or ((ap_const_logic_1 = ap_CS_fsm_state42) and (p_8_reg_100 = ap_const_lv1_0)))) then 
            cubieColor_V_address0 <= grp_edgeCorrect_fu_75_cubieColor_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (p_0_reg_108 = ap_const_lv1_1) and (p_8_reg_100 = ap_const_lv1_0) and (p_4_reg_96 = ap_const_lv1_0) and (p_s_reg_92 = ap_const_lv1_0)))) then 
            cubieColor_V_address0 <= grp_rotateCubeHorizontal_fu_65_cubieColor_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state78) and (((tmp_reg_124 = ap_const_lv1_1) and (p_3_reg_104 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_8_reg_100 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_4_reg_96 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_s_reg_92 = ap_const_lv1_1)))) or ((ap_const_logic_1 = ap_CS_fsm_state78) and (((tmp_reg_124 = ap_const_lv1_0) and (p_3_reg_104 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_8_reg_100 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_4_reg_96 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_s_reg_92 = ap_const_lv1_1)))))) then 
            cubieColor_V_address0 <= grp_turnCube_fu_47_cubieColor_V_address0;
        else 
            cubieColor_V_address0 <= "XXXXXX";
        end if; 
    end process;


    cubieColor_V_address1_assign_proc : process(p_s_reg_92, ap_CS_fsm_state2, p_4_reg_96, ap_CS_fsm_state4, p_8_reg_100, ap_CS_fsm_state6, p_3_reg_104, ap_CS_fsm_state8, p_0_reg_108, ap_CS_fsm_state34, ap_CS_fsm_state42, ap_CS_fsm_state46, ap_CS_fsm_state48, ap_predicate_op160_call_state48, tmp_reg_124, grp_turnCube_fu_47_cubieColor_V_address1, grp_rotateCubeHorizontal_fu_65_cubieColor_V_address1, grp_edgeCorrect_fu_75_cubieColor_V_address1, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state56, ap_CS_fsm_state58, ap_CS_fsm_state60, ap_CS_fsm_state62, ap_CS_fsm_state64, ap_CS_fsm_state66, ap_CS_fsm_state68, ap_CS_fsm_state70, ap_CS_fsm_state72, ap_CS_fsm_state74, ap_CS_fsm_state76, ap_CS_fsm_state78, ap_CS_fsm_state80, ap_CS_fsm_state82, ap_CS_fsm_state84, ap_CS_fsm_state86, ap_CS_fsm_state88, ap_CS_fsm_state90, ap_CS_fsm_state92, ap_CS_fsm_state94, ap_CS_fsm_state96, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state44, ap_CS_fsm_state50, ap_CS_fsm_state52, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            cubieColor_V_address1 <= ap_const_lv6_25;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state48) and (ap_predicate_op160_call_state48 = ap_const_boolean_1)) or ((ap_const_logic_1 = ap_CS_fsm_state42) and (p_8_reg_100 = ap_const_lv1_0)))) then 
            cubieColor_V_address1 <= grp_edgeCorrect_fu_75_cubieColor_V_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (p_0_reg_108 = ap_const_lv1_1) and (p_8_reg_100 = ap_const_lv1_0) and (p_4_reg_96 = ap_const_lv1_0) and (p_s_reg_92 = ap_const_lv1_0)))) then 
            cubieColor_V_address1 <= grp_rotateCubeHorizontal_fu_65_cubieColor_V_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state78) and (((tmp_reg_124 = ap_const_lv1_1) and (p_3_reg_104 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_8_reg_100 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_4_reg_96 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_s_reg_92 = ap_const_lv1_1)))) or ((ap_const_logic_1 = ap_CS_fsm_state78) and (((tmp_reg_124 = ap_const_lv1_0) and (p_3_reg_104 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_8_reg_100 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_4_reg_96 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_s_reg_92 = ap_const_lv1_1)))))) then 
            cubieColor_V_address1 <= grp_turnCube_fu_47_cubieColor_V_address1;
        else 
            cubieColor_V_address1 <= "XXXXXX";
        end if; 
    end process;


    cubieColor_V_ce0_assign_proc : process(p_s_reg_92, ap_CS_fsm_state2, p_4_reg_96, ap_CS_fsm_state4, p_8_reg_100, ap_CS_fsm_state6, p_3_reg_104, ap_CS_fsm_state8, p_0_reg_108, ap_CS_fsm_state34, ap_CS_fsm_state42, ap_CS_fsm_state46, ap_CS_fsm_state48, ap_predicate_op160_call_state48, tmp_reg_124, grp_turnCube_fu_47_cubieColor_V_ce0, grp_rotateCubeHorizontal_fu_65_cubieColor_V_ce0, grp_edgeCorrect_fu_75_cubieColor_V_ce0, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state56, ap_CS_fsm_state58, ap_CS_fsm_state60, ap_CS_fsm_state62, ap_CS_fsm_state64, ap_CS_fsm_state66, ap_CS_fsm_state68, ap_CS_fsm_state70, ap_CS_fsm_state72, ap_CS_fsm_state74, ap_CS_fsm_state76, ap_CS_fsm_state78, ap_CS_fsm_state80, ap_CS_fsm_state82, ap_CS_fsm_state84, ap_CS_fsm_state86, ap_CS_fsm_state88, ap_CS_fsm_state90, ap_CS_fsm_state92, ap_CS_fsm_state94, ap_CS_fsm_state96, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state44, ap_CS_fsm_state50, ap_CS_fsm_state52, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            cubieColor_V_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state48) and (ap_predicate_op160_call_state48 = ap_const_boolean_1)) or ((ap_const_logic_1 = ap_CS_fsm_state42) and (p_8_reg_100 = ap_const_lv1_0)))) then 
            cubieColor_V_ce0 <= grp_edgeCorrect_fu_75_cubieColor_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (p_0_reg_108 = ap_const_lv1_1) and (p_8_reg_100 = ap_const_lv1_0) and (p_4_reg_96 = ap_const_lv1_0) and (p_s_reg_92 = ap_const_lv1_0)))) then 
            cubieColor_V_ce0 <= grp_rotateCubeHorizontal_fu_65_cubieColor_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state78) and (((tmp_reg_124 = ap_const_lv1_1) and (p_3_reg_104 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_8_reg_100 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_4_reg_96 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_s_reg_92 = ap_const_lv1_1)))) or ((ap_const_logic_1 = ap_CS_fsm_state78) and (((tmp_reg_124 = ap_const_lv1_0) and (p_3_reg_104 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_8_reg_100 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_4_reg_96 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_s_reg_92 = ap_const_lv1_1)))))) then 
            cubieColor_V_ce0 <= grp_turnCube_fu_47_cubieColor_V_ce0;
        else 
            cubieColor_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cubieColor_V_ce1_assign_proc : process(p_s_reg_92, ap_CS_fsm_state2, p_4_reg_96, ap_CS_fsm_state4, p_8_reg_100, ap_CS_fsm_state6, p_3_reg_104, ap_CS_fsm_state8, p_0_reg_108, ap_CS_fsm_state34, ap_CS_fsm_state42, ap_CS_fsm_state46, ap_CS_fsm_state48, ap_predicate_op160_call_state48, tmp_reg_124, grp_turnCube_fu_47_cubieColor_V_ce1, grp_rotateCubeHorizontal_fu_65_cubieColor_V_ce1, grp_edgeCorrect_fu_75_cubieColor_V_ce1, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state56, ap_CS_fsm_state58, ap_CS_fsm_state60, ap_CS_fsm_state62, ap_CS_fsm_state64, ap_CS_fsm_state66, ap_CS_fsm_state68, ap_CS_fsm_state70, ap_CS_fsm_state72, ap_CS_fsm_state74, ap_CS_fsm_state76, ap_CS_fsm_state78, ap_CS_fsm_state80, ap_CS_fsm_state82, ap_CS_fsm_state84, ap_CS_fsm_state86, ap_CS_fsm_state88, ap_CS_fsm_state90, ap_CS_fsm_state92, ap_CS_fsm_state94, ap_CS_fsm_state96, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state44, ap_CS_fsm_state50, ap_CS_fsm_state52, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            cubieColor_V_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state48) and (ap_predicate_op160_call_state48 = ap_const_boolean_1)) or ((ap_const_logic_1 = ap_CS_fsm_state42) and (p_8_reg_100 = ap_const_lv1_0)))) then 
            cubieColor_V_ce1 <= grp_edgeCorrect_fu_75_cubieColor_V_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (p_0_reg_108 = ap_const_lv1_1) and (p_8_reg_100 = ap_const_lv1_0) and (p_4_reg_96 = ap_const_lv1_0) and (p_s_reg_92 = ap_const_lv1_0)))) then 
            cubieColor_V_ce1 <= grp_rotateCubeHorizontal_fu_65_cubieColor_V_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state78) and (((tmp_reg_124 = ap_const_lv1_1) and (p_3_reg_104 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_8_reg_100 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_4_reg_96 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_s_reg_92 = ap_const_lv1_1)))) or ((ap_const_logic_1 = ap_CS_fsm_state78) and (((tmp_reg_124 = ap_const_lv1_0) and (p_3_reg_104 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_8_reg_100 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_4_reg_96 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_s_reg_92 = ap_const_lv1_1)))))) then 
            cubieColor_V_ce1 <= grp_turnCube_fu_47_cubieColor_V_ce1;
        else 
            cubieColor_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cubieColor_V_d0_assign_proc : process(p_s_reg_92, p_4_reg_96, p_8_reg_100, p_3_reg_104, p_0_reg_108, tmp_reg_124, grp_turnCube_fu_47_cubieColor_V_d0, grp_rotateCubeHorizontal_fu_65_cubieColor_V_d0, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state56, ap_CS_fsm_state58, ap_CS_fsm_state60, ap_CS_fsm_state62, ap_CS_fsm_state64, ap_CS_fsm_state66, ap_CS_fsm_state68, ap_CS_fsm_state70, ap_CS_fsm_state72, ap_CS_fsm_state74, ap_CS_fsm_state76, ap_CS_fsm_state78, ap_CS_fsm_state80, ap_CS_fsm_state82, ap_CS_fsm_state84, ap_CS_fsm_state86, ap_CS_fsm_state88, ap_CS_fsm_state90, ap_CS_fsm_state92, ap_CS_fsm_state94, ap_CS_fsm_state96, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state44, ap_CS_fsm_state50, ap_CS_fsm_state52)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (p_0_reg_108 = ap_const_lv1_1) and (p_8_reg_100 = ap_const_lv1_0) and (p_4_reg_96 = ap_const_lv1_0) and (p_s_reg_92 = ap_const_lv1_0)))) then 
            cubieColor_V_d0 <= grp_rotateCubeHorizontal_fu_65_cubieColor_V_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state78) and (((tmp_reg_124 = ap_const_lv1_1) and (p_3_reg_104 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_8_reg_100 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_4_reg_96 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_s_reg_92 = ap_const_lv1_1)))) or ((ap_const_logic_1 = ap_CS_fsm_state78) and (((tmp_reg_124 = ap_const_lv1_0) and (p_3_reg_104 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_8_reg_100 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_4_reg_96 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_s_reg_92 = ap_const_lv1_1)))))) then 
            cubieColor_V_d0 <= grp_turnCube_fu_47_cubieColor_V_d0;
        else 
            cubieColor_V_d0 <= "XXX";
        end if; 
    end process;


    cubieColor_V_d1_assign_proc : process(p_s_reg_92, p_4_reg_96, p_8_reg_100, p_3_reg_104, p_0_reg_108, tmp_reg_124, grp_turnCube_fu_47_cubieColor_V_d1, grp_rotateCubeHorizontal_fu_65_cubieColor_V_d1, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state56, ap_CS_fsm_state58, ap_CS_fsm_state60, ap_CS_fsm_state62, ap_CS_fsm_state64, ap_CS_fsm_state66, ap_CS_fsm_state68, ap_CS_fsm_state70, ap_CS_fsm_state72, ap_CS_fsm_state74, ap_CS_fsm_state76, ap_CS_fsm_state78, ap_CS_fsm_state80, ap_CS_fsm_state82, ap_CS_fsm_state84, ap_CS_fsm_state86, ap_CS_fsm_state88, ap_CS_fsm_state90, ap_CS_fsm_state92, ap_CS_fsm_state94, ap_CS_fsm_state96, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state44, ap_CS_fsm_state50, ap_CS_fsm_state52)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (p_0_reg_108 = ap_const_lv1_1) and (p_8_reg_100 = ap_const_lv1_0) and (p_4_reg_96 = ap_const_lv1_0) and (p_s_reg_92 = ap_const_lv1_0)))) then 
            cubieColor_V_d1 <= grp_rotateCubeHorizontal_fu_65_cubieColor_V_d1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state78) and (((tmp_reg_124 = ap_const_lv1_1) and (p_3_reg_104 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_8_reg_100 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_4_reg_96 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_s_reg_92 = ap_const_lv1_1)))) or ((ap_const_logic_1 = ap_CS_fsm_state78) and (((tmp_reg_124 = ap_const_lv1_0) and (p_3_reg_104 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_8_reg_100 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_4_reg_96 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_s_reg_92 = ap_const_lv1_1)))))) then 
            cubieColor_V_d1 <= grp_turnCube_fu_47_cubieColor_V_d1;
        else 
            cubieColor_V_d1 <= "XXX";
        end if; 
    end process;


    cubieColor_V_we0_assign_proc : process(p_s_reg_92, p_4_reg_96, p_8_reg_100, p_3_reg_104, p_0_reg_108, tmp_reg_124, grp_turnCube_fu_47_cubieColor_V_we0, grp_rotateCubeHorizontal_fu_65_cubieColor_V_we0, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state56, ap_CS_fsm_state58, ap_CS_fsm_state60, ap_CS_fsm_state62, ap_CS_fsm_state64, ap_CS_fsm_state66, ap_CS_fsm_state68, ap_CS_fsm_state70, ap_CS_fsm_state72, ap_CS_fsm_state74, ap_CS_fsm_state76, ap_CS_fsm_state78, ap_CS_fsm_state80, ap_CS_fsm_state82, ap_CS_fsm_state84, ap_CS_fsm_state86, ap_CS_fsm_state88, ap_CS_fsm_state90, ap_CS_fsm_state92, ap_CS_fsm_state94, ap_CS_fsm_state96, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state44, ap_CS_fsm_state50, ap_CS_fsm_state52)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (p_0_reg_108 = ap_const_lv1_1) and (p_8_reg_100 = ap_const_lv1_0) and (p_4_reg_96 = ap_const_lv1_0) and (p_s_reg_92 = ap_const_lv1_0)))) then 
            cubieColor_V_we0 <= grp_rotateCubeHorizontal_fu_65_cubieColor_V_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state78) and (((tmp_reg_124 = ap_const_lv1_1) and (p_3_reg_104 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_8_reg_100 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_4_reg_96 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_s_reg_92 = ap_const_lv1_1)))) or ((ap_const_logic_1 = ap_CS_fsm_state78) and (((tmp_reg_124 = ap_const_lv1_0) and (p_3_reg_104 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_8_reg_100 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_4_reg_96 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_s_reg_92 = ap_const_lv1_1)))))) then 
            cubieColor_V_we0 <= grp_turnCube_fu_47_cubieColor_V_we0;
        else 
            cubieColor_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cubieColor_V_we1_assign_proc : process(p_s_reg_92, p_4_reg_96, p_8_reg_100, p_3_reg_104, p_0_reg_108, tmp_reg_124, grp_turnCube_fu_47_cubieColor_V_we1, grp_rotateCubeHorizontal_fu_65_cubieColor_V_we1, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state56, ap_CS_fsm_state58, ap_CS_fsm_state60, ap_CS_fsm_state62, ap_CS_fsm_state64, ap_CS_fsm_state66, ap_CS_fsm_state68, ap_CS_fsm_state70, ap_CS_fsm_state72, ap_CS_fsm_state74, ap_CS_fsm_state76, ap_CS_fsm_state78, ap_CS_fsm_state80, ap_CS_fsm_state82, ap_CS_fsm_state84, ap_CS_fsm_state86, ap_CS_fsm_state88, ap_CS_fsm_state90, ap_CS_fsm_state92, ap_CS_fsm_state94, ap_CS_fsm_state96, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state44, ap_CS_fsm_state50, ap_CS_fsm_state52)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (p_0_reg_108 = ap_const_lv1_1) and (p_8_reg_100 = ap_const_lv1_0) and (p_4_reg_96 = ap_const_lv1_0) and (p_s_reg_92 = ap_const_lv1_0)))) then 
            cubieColor_V_we1 <= grp_rotateCubeHorizontal_fu_65_cubieColor_V_we1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state78) and (((tmp_reg_124 = ap_const_lv1_1) and (p_3_reg_104 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_8_reg_100 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_4_reg_96 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_s_reg_92 = ap_const_lv1_1)))) or ((ap_const_logic_1 = ap_CS_fsm_state78) and (((tmp_reg_124 = ap_const_lv1_0) and (p_3_reg_104 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_8_reg_100 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_4_reg_96 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_s_reg_92 = ap_const_lv1_1)))))) then 
            cubieColor_V_we1 <= grp_turnCube_fu_47_cubieColor_V_we1;
        else 
            cubieColor_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_edgeCorrect_fu_75_ap_start <= grp_edgeCorrect_fu_75_ap_start_reg;

    grp_edgeCorrect_fu_75_edge_V_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, p_8_reg_100, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state34, ap_CS_fsm_state42, ap_CS_fsm_state46, ap_CS_fsm_state48, ap_predicate_op160_call_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state48) and (ap_predicate_op160_call_state48 = ap_const_boolean_1)) or ((ap_const_logic_1 = ap_CS_fsm_state42) and (p_8_reg_100 = ap_const_lv1_0)))) then 
            grp_edgeCorrect_fu_75_edge_V <= ap_const_lv4_4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_edgeCorrect_fu_75_edge_V <= ap_const_lv4_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_edgeCorrect_fu_75_edge_V <= ap_const_lv4_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_edgeCorrect_fu_75_edge_V <= ap_const_lv4_1;
        else 
            grp_edgeCorrect_fu_75_edge_V <= "XXXX";
        end if; 
    end process;

    grp_rotateCubeHorizontal_fu_65_ap_start <= grp_rotateCubeHorizontal_fu_65_ap_start_reg;
    grp_turnCube_fu_47_ap_start <= grp_turnCube_fu_47_ap_start_reg;

    grp_turnCube_fu_47_turn_V_assign_proc : process(p_s_reg_92, p_4_reg_96, p_8_reg_100, p_3_reg_104, tmp_reg_124, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state56, ap_CS_fsm_state58, ap_CS_fsm_state60, ap_CS_fsm_state62, ap_CS_fsm_state64, ap_CS_fsm_state66, ap_CS_fsm_state68, ap_CS_fsm_state70, ap_CS_fsm_state72, ap_CS_fsm_state74, ap_CS_fsm_state76, ap_CS_fsm_state78, ap_CS_fsm_state80, ap_CS_fsm_state82, ap_CS_fsm_state84, ap_CS_fsm_state86, ap_CS_fsm_state88, ap_CS_fsm_state90, ap_CS_fsm_state92, ap_CS_fsm_state94, ap_CS_fsm_state96)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            grp_turnCube_fu_47_turn_V <= ap_const_lv4_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            grp_turnCube_fu_47_turn_V <= ap_const_lv4_A;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            grp_turnCube_fu_47_turn_V <= ap_const_lv4_9;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_turnCube_fu_47_turn_V <= ap_const_lv4_B;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            grp_turnCube_fu_47_turn_V <= ap_const_lv4_8;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            grp_turnCube_fu_47_turn_V <= ap_const_lv4_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state78) and (((tmp_reg_124 = ap_const_lv1_1) and (p_3_reg_104 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_8_reg_100 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_4_reg_96 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_s_reg_92 = ap_const_lv1_1)))) or ((ap_const_logic_1 = ap_CS_fsm_state78) and (((tmp_reg_124 = ap_const_lv1_0) and (p_3_reg_104 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_8_reg_100 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_4_reg_96 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_s_reg_92 = ap_const_lv1_1)))))) then 
            grp_turnCube_fu_47_turn_V <= ap_const_lv4_6;
        else 
            grp_turnCube_fu_47_turn_V <= "XXXX";
        end if; 
    end process;


    moveCounter_V_o_assign_proc : process(moveCounter_V_i, p_s_reg_92, p_4_reg_96, p_8_reg_100, p_3_reg_104, p_0_reg_108, tmp_reg_124, grp_turnCube_fu_47_moveCounter_V_o, grp_turnCube_fu_47_moveCounter_V_o_ap_vld, grp_rotateCubeHorizontal_fu_65_moveCounter_V_o, grp_rotateCubeHorizontal_fu_65_moveCounter_V_o_ap_vld, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state56, ap_CS_fsm_state58, ap_CS_fsm_state60, ap_CS_fsm_state62, ap_CS_fsm_state64, ap_CS_fsm_state66, ap_CS_fsm_state68, ap_CS_fsm_state70, ap_CS_fsm_state72, ap_CS_fsm_state74, ap_CS_fsm_state76, ap_CS_fsm_state78, ap_CS_fsm_state80, ap_CS_fsm_state82, ap_CS_fsm_state84, ap_CS_fsm_state86, ap_CS_fsm_state88, ap_CS_fsm_state90, ap_CS_fsm_state92, ap_CS_fsm_state94, ap_CS_fsm_state96, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state44, ap_CS_fsm_state50, ap_CS_fsm_state52)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state52) and (grp_rotateCubeHorizontal_fu_65_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state50) and (grp_rotateCubeHorizontal_fu_65_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state44) and (grp_rotateCubeHorizontal_fu_65_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state38) and (grp_rotateCubeHorizontal_fu_65_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state36) and (grp_rotateCubeHorizontal_fu_65_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (grp_rotateCubeHorizontal_fu_65_moveCounter_V_o_ap_vld = ap_const_logic_1) and (p_0_reg_108 = ap_const_lv1_1) and (p_8_reg_100 = ap_const_lv1_0) and (p_4_reg_96 = ap_const_lv1_0) and (p_s_reg_92 = ap_const_lv1_0)))) then 
            moveCounter_V_o <= grp_rotateCubeHorizontal_fu_65_moveCounter_V_o;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state96) and (grp_turnCube_fu_47_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state94) and (grp_turnCube_fu_47_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state92) and (grp_turnCube_fu_47_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state90) and (grp_turnCube_fu_47_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state88) and (grp_turnCube_fu_47_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state86) and (grp_turnCube_fu_47_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state84) and (grp_turnCube_fu_47_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state82) and (grp_turnCube_fu_47_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (grp_turnCube_fu_47_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state78) and (grp_turnCube_fu_47_moveCounter_V_o_ap_vld = ap_const_logic_1) and (((tmp_reg_124 = ap_const_lv1_1) and (p_3_reg_104 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_8_reg_100 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_4_reg_96 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_s_reg_92 = ap_const_lv1_1)))) or ((ap_const_logic_1 = ap_CS_fsm_state78) and (grp_turnCube_fu_47_moveCounter_V_o_ap_vld = ap_const_logic_1) and (((tmp_reg_124 = ap_const_lv1_0) and (p_3_reg_104 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_8_reg_100 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_4_reg_96 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_s_reg_92 = ap_const_lv1_1)))) or ((ap_const_logic_1 = ap_CS_fsm_state76) and (grp_turnCube_fu_47_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state74) and (grp_turnCube_fu_47_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state72) and (grp_turnCube_fu_47_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state70) and (grp_turnCube_fu_47_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state68) and (grp_turnCube_fu_47_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state66) and (grp_turnCube_fu_47_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state64) and (grp_turnCube_fu_47_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state62) and (grp_turnCube_fu_47_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state60) and (grp_turnCube_fu_47_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state58) and (grp_turnCube_fu_47_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state56) and (grp_turnCube_fu_47_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state32) and (grp_turnCube_fu_47_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state30) and (grp_turnCube_fu_47_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (grp_turnCube_fu_47_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (grp_turnCube_fu_47_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (grp_turnCube_fu_47_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state22) and (grp_turnCube_fu_47_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (grp_turnCube_fu_47_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (grp_turnCube_fu_47_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_turnCube_fu_47_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_turnCube_fu_47_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_turnCube_fu_47_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_turnCube_fu_47_moveCounter_V_o_ap_vld = ap_const_logic_1)))) then 
            moveCounter_V_o <= grp_turnCube_fu_47_moveCounter_V_o;
        else 
            moveCounter_V_o <= moveCounter_V_i;
        end if; 
    end process;


    moveCounter_V_o_ap_vld_assign_proc : process(p_s_reg_92, p_4_reg_96, p_8_reg_100, p_3_reg_104, p_0_reg_108, tmp_reg_124, grp_turnCube_fu_47_moveCounter_V_o_ap_vld, grp_rotateCubeHorizontal_fu_65_moveCounter_V_o_ap_vld, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state56, ap_CS_fsm_state58, ap_CS_fsm_state60, ap_CS_fsm_state62, ap_CS_fsm_state64, ap_CS_fsm_state66, ap_CS_fsm_state68, ap_CS_fsm_state70, ap_CS_fsm_state72, ap_CS_fsm_state74, ap_CS_fsm_state76, ap_CS_fsm_state78, ap_CS_fsm_state80, ap_CS_fsm_state82, ap_CS_fsm_state84, ap_CS_fsm_state86, ap_CS_fsm_state88, ap_CS_fsm_state90, ap_CS_fsm_state92, ap_CS_fsm_state94, ap_CS_fsm_state96, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state44, ap_CS_fsm_state50, ap_CS_fsm_state52)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (p_0_reg_108 = ap_const_lv1_1) and (p_8_reg_100 = ap_const_lv1_0) and (p_4_reg_96 = ap_const_lv1_0) and (p_s_reg_92 = ap_const_lv1_0)))) then 
            moveCounter_V_o_ap_vld <= grp_rotateCubeHorizontal_fu_65_moveCounter_V_o_ap_vld;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state78) and (((tmp_reg_124 = ap_const_lv1_1) and (p_3_reg_104 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_8_reg_100 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_4_reg_96 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_s_reg_92 = ap_const_lv1_1)))) or ((ap_const_logic_1 = ap_CS_fsm_state78) and (((tmp_reg_124 = ap_const_lv1_0) and (p_3_reg_104 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_8_reg_100 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_4_reg_96 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_s_reg_92 = ap_const_lv1_1)))))) then 
            moveCounter_V_o_ap_vld <= grp_turnCube_fu_47_moveCounter_V_o_ap_vld;
        else 
            moveCounter_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    moves_V_address0_assign_proc : process(p_s_reg_92, p_4_reg_96, p_8_reg_100, p_3_reg_104, p_0_reg_108, tmp_reg_124, grp_turnCube_fu_47_moves_V_address0, grp_rotateCubeHorizontal_fu_65_moves_V_address0, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state56, ap_CS_fsm_state58, ap_CS_fsm_state60, ap_CS_fsm_state62, ap_CS_fsm_state64, ap_CS_fsm_state66, ap_CS_fsm_state68, ap_CS_fsm_state70, ap_CS_fsm_state72, ap_CS_fsm_state74, ap_CS_fsm_state76, ap_CS_fsm_state78, ap_CS_fsm_state80, ap_CS_fsm_state82, ap_CS_fsm_state84, ap_CS_fsm_state86, ap_CS_fsm_state88, ap_CS_fsm_state90, ap_CS_fsm_state92, ap_CS_fsm_state94, ap_CS_fsm_state96, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state44, ap_CS_fsm_state50, ap_CS_fsm_state52)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (p_0_reg_108 = ap_const_lv1_1) and (p_8_reg_100 = ap_const_lv1_0) and (p_4_reg_96 = ap_const_lv1_0) and (p_s_reg_92 = ap_const_lv1_0)))) then 
            moves_V_address0 <= grp_rotateCubeHorizontal_fu_65_moves_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state78) and (((tmp_reg_124 = ap_const_lv1_1) and (p_3_reg_104 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_8_reg_100 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_4_reg_96 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_s_reg_92 = ap_const_lv1_1)))) or ((ap_const_logic_1 = ap_CS_fsm_state78) and (((tmp_reg_124 = ap_const_lv1_0) and (p_3_reg_104 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_8_reg_100 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_4_reg_96 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_s_reg_92 = ap_const_lv1_1)))))) then 
            moves_V_address0 <= grp_turnCube_fu_47_moves_V_address0;
        else 
            moves_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    moves_V_ce0_assign_proc : process(p_s_reg_92, p_4_reg_96, p_8_reg_100, p_3_reg_104, p_0_reg_108, tmp_reg_124, grp_turnCube_fu_47_moves_V_ce0, grp_rotateCubeHorizontal_fu_65_moves_V_ce0, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state56, ap_CS_fsm_state58, ap_CS_fsm_state60, ap_CS_fsm_state62, ap_CS_fsm_state64, ap_CS_fsm_state66, ap_CS_fsm_state68, ap_CS_fsm_state70, ap_CS_fsm_state72, ap_CS_fsm_state74, ap_CS_fsm_state76, ap_CS_fsm_state78, ap_CS_fsm_state80, ap_CS_fsm_state82, ap_CS_fsm_state84, ap_CS_fsm_state86, ap_CS_fsm_state88, ap_CS_fsm_state90, ap_CS_fsm_state92, ap_CS_fsm_state94, ap_CS_fsm_state96, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state44, ap_CS_fsm_state50, ap_CS_fsm_state52)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (p_0_reg_108 = ap_const_lv1_1) and (p_8_reg_100 = ap_const_lv1_0) and (p_4_reg_96 = ap_const_lv1_0) and (p_s_reg_92 = ap_const_lv1_0)))) then 
            moves_V_ce0 <= grp_rotateCubeHorizontal_fu_65_moves_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state78) and (((tmp_reg_124 = ap_const_lv1_1) and (p_3_reg_104 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_8_reg_100 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_4_reg_96 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_s_reg_92 = ap_const_lv1_1)))) or ((ap_const_logic_1 = ap_CS_fsm_state78) and (((tmp_reg_124 = ap_const_lv1_0) and (p_3_reg_104 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_8_reg_100 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_4_reg_96 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_s_reg_92 = ap_const_lv1_1)))))) then 
            moves_V_ce0 <= grp_turnCube_fu_47_moves_V_ce0;
        else 
            moves_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    moves_V_d0_assign_proc : process(p_s_reg_92, p_4_reg_96, p_8_reg_100, p_3_reg_104, p_0_reg_108, tmp_reg_124, grp_turnCube_fu_47_moves_V_d0, grp_rotateCubeHorizontal_fu_65_moves_V_d0, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state56, ap_CS_fsm_state58, ap_CS_fsm_state60, ap_CS_fsm_state62, ap_CS_fsm_state64, ap_CS_fsm_state66, ap_CS_fsm_state68, ap_CS_fsm_state70, ap_CS_fsm_state72, ap_CS_fsm_state74, ap_CS_fsm_state76, ap_CS_fsm_state78, ap_CS_fsm_state80, ap_CS_fsm_state82, ap_CS_fsm_state84, ap_CS_fsm_state86, ap_CS_fsm_state88, ap_CS_fsm_state90, ap_CS_fsm_state92, ap_CS_fsm_state94, ap_CS_fsm_state96, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state44, ap_CS_fsm_state50, ap_CS_fsm_state52)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (p_0_reg_108 = ap_const_lv1_1) and (p_8_reg_100 = ap_const_lv1_0) and (p_4_reg_96 = ap_const_lv1_0) and (p_s_reg_92 = ap_const_lv1_0)))) then 
            moves_V_d0 <= grp_rotateCubeHorizontal_fu_65_moves_V_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state78) and (((tmp_reg_124 = ap_const_lv1_1) and (p_3_reg_104 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_8_reg_100 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_4_reg_96 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_s_reg_92 = ap_const_lv1_1)))) or ((ap_const_logic_1 = ap_CS_fsm_state78) and (((tmp_reg_124 = ap_const_lv1_0) and (p_3_reg_104 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_8_reg_100 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_4_reg_96 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_s_reg_92 = ap_const_lv1_1)))))) then 
            moves_V_d0 <= grp_turnCube_fu_47_moves_V_d0;
        else 
            moves_V_d0 <= "XXXX";
        end if; 
    end process;


    moves_V_we0_assign_proc : process(p_s_reg_92, p_4_reg_96, p_8_reg_100, p_3_reg_104, p_0_reg_108, tmp_reg_124, grp_turnCube_fu_47_moves_V_we0, grp_rotateCubeHorizontal_fu_65_moves_V_we0, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state56, ap_CS_fsm_state58, ap_CS_fsm_state60, ap_CS_fsm_state62, ap_CS_fsm_state64, ap_CS_fsm_state66, ap_CS_fsm_state68, ap_CS_fsm_state70, ap_CS_fsm_state72, ap_CS_fsm_state74, ap_CS_fsm_state76, ap_CS_fsm_state78, ap_CS_fsm_state80, ap_CS_fsm_state82, ap_CS_fsm_state84, ap_CS_fsm_state86, ap_CS_fsm_state88, ap_CS_fsm_state90, ap_CS_fsm_state92, ap_CS_fsm_state94, ap_CS_fsm_state96, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state44, ap_CS_fsm_state50, ap_CS_fsm_state52)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (p_0_reg_108 = ap_const_lv1_1) and (p_8_reg_100 = ap_const_lv1_0) and (p_4_reg_96 = ap_const_lv1_0) and (p_s_reg_92 = ap_const_lv1_0)))) then 
            moves_V_we0 <= grp_rotateCubeHorizontal_fu_65_moves_V_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state78) and (((tmp_reg_124 = ap_const_lv1_1) and (p_3_reg_104 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_8_reg_100 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_4_reg_96 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_1) and (p_s_reg_92 = ap_const_lv1_1)))) or ((ap_const_logic_1 = ap_CS_fsm_state78) and (((tmp_reg_124 = ap_const_lv1_0) and (p_3_reg_104 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_8_reg_100 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_4_reg_96 = ap_const_lv1_1)) or ((tmp_reg_124 = ap_const_lv1_0) and (p_s_reg_92 = ap_const_lv1_1)))))) then 
            moves_V_we0 <= grp_turnCube_fu_47_moves_V_we0;
        else 
            moves_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_86_p2 <= "1" when (cubieColor_V_q0 = cubieColor_V_q1) else "0";
end behav;
