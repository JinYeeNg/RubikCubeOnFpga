-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity edgeCorrect is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    edge_V : IN STD_LOGIC_VECTOR (3 downto 0);
    cubieColor_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    cubieColor_V_ce0 : OUT STD_LOGIC;
    cubieColor_V_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
    cubieColor_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    cubieColor_V_ce1 : OUT STD_LOGIC;
    cubieColor_V_q1 : IN STD_LOGIC_VECTOR (2 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of edgeCorrect is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv6_1E : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv6_27 : STD_LOGIC_VECTOR (5 downto 0) := "100111";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1C : STD_LOGIC_VECTOR (5 downto 0) := "011100";
    constant ap_const_lv6_25 : STD_LOGIC_VECTOR (5 downto 0) := "100101";
    constant ap_const_lv6_16 : STD_LOGIC_VECTOR (5 downto 0) := "010110";
    constant ap_const_lv6_13 : STD_LOGIC_VECTOR (5 downto 0) := "010011";
    constant ap_const_lv6_2E : STD_LOGIC_VECTOR (5 downto 0) := "101110";
    constant ap_const_lv6_29 : STD_LOGIC_VECTOR (5 downto 0) := "101001";
    constant ap_const_lv6_17 : STD_LOGIC_VECTOR (5 downto 0) := "010111";
    constant ap_const_lv6_15 : STD_LOGIC_VECTOR (5 downto 0) := "010101";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_131 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_100_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_319 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_105_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_201_reg_324 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_202_reg_329 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_203_reg_334 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_110_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_204_reg_339 : STD_LOGIC_VECTOR (0 downto 0);
    signal cubieColor_V_load_137_reg_344 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_205_reg_349 : STD_LOGIC_VECTOR (0 downto 0);
    signal cubieColor_V_load_139_reg_354 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_206_reg_359 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_207_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_207_reg_364 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_208_reg_369 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_209_reg_374 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp32_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp32_reg_387 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp33_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp33_reg_392 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp20_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp20_reg_397 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal sel_tmp22_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp22_reg_402 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp35_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp35_reg_407 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_110_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp25_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_121_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp26_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp27_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp12_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp10_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp14_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp28_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp16_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_213_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp29_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp18_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp17_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp19_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp30_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp31_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp21_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp23_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp36_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp37_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp34_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal agg_result_V_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_return_preg <= agg_result_V_fu_313_p2;
                end if; 
            end if;
        end if;
    end process;


    reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                reg_131 <= cubieColor_V_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                reg_131 <= cubieColor_V_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                cubieColor_V_load_137_reg_344 <= cubieColor_V_q1;
                tmp_205_reg_349 <= grp_fu_110_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                cubieColor_V_load_139_reg_354 <= cubieColor_V_q1;
                tmp_206_reg_359 <= grp_fu_110_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                sel_tmp20_reg_397 <= sel_tmp20_fu_262_p2;
                sel_tmp22_reg_402 <= sel_tmp22_fu_267_p2;
                tmp35_reg_407 <= tmp35_fu_272_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp32_reg_387 <= tmp32_fu_212_p2;
                tmp33_reg_392 <= tmp33_fu_218_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_201_reg_324 <= grp_fu_105_p2;
                tmp_s_reg_319 <= grp_fu_100_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_202_reg_329 <= grp_fu_105_p2;
                tmp_203_reg_334 <= grp_fu_100_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_204_reg_339 <= grp_fu_110_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_207_reg_364 <= tmp_207_fu_140_p2;
                tmp_208_reg_369 <= grp_fu_110_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_209_reg_374 <= grp_fu_116_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    agg_result_V_fu_313_p2 <= (tmp37_fu_308_p2 or tmp34_fu_298_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state12, agg_result_V_fu_313_p2, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_return <= agg_result_V_fu_313_p2;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    cubieColor_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            cubieColor_V_address0 <= ap_const_lv6_30;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            cubieColor_V_address0 <= ap_const_lv6_17;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cubieColor_V_address0 <= ap_const_lv6_2E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cubieColor_V_address0 <= ap_const_lv6_16;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            cubieColor_V_address0 <= ap_const_lv6_1C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            cubieColor_V_address0 <= ap_const_lv6_32;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            cubieColor_V_address0 <= ap_const_lv6_27;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cubieColor_V_address0 <= ap_const_lv6_1E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cubieColor_V_address0 <= ap_const_lv6_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cubieColor_V_address0 <= ap_const_lv6_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            cubieColor_V_address0 <= ap_const_lv6_4;
        else 
            cubieColor_V_address0 <= "XXXXXX";
        end if; 
    end process;


    cubieColor_V_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            cubieColor_V_address1 <= ap_const_lv6_15;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            cubieColor_V_address1 <= ap_const_lv6_29;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cubieColor_V_address1 <= ap_const_lv6_13;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cubieColor_V_address1 <= ap_const_lv6_25;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            cubieColor_V_address1 <= ap_const_lv6_20;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            cubieColor_V_address1 <= ap_const_lv6_31;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            cubieColor_V_address1 <= ap_const_lv6_28;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cubieColor_V_address1 <= ap_const_lv6_1F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cubieColor_V_address1 <= ap_const_lv6_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cubieColor_V_address1 <= ap_const_lv6_3;
        else 
            cubieColor_V_address1 <= "XXXXXX";
        end if; 
    end process;


    cubieColor_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            cubieColor_V_ce0 <= ap_const_logic_1;
        else 
            cubieColor_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cubieColor_V_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            cubieColor_V_ce1 <= ap_const_logic_1;
        else 
            cubieColor_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_100_p2 <= "1" when (reg_131 = cubieColor_V_q0) else "0";
    grp_fu_105_p2 <= "1" when (reg_131 = cubieColor_V_q1) else "0";

    grp_fu_110_p0_assign_proc : process(cubieColor_V_q1, reg_131, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_110_p0 <= reg_131;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_110_p0 <= cubieColor_V_q1;
        else 
            grp_fu_110_p0 <= "XXX";
        end if; 
    end process;

    grp_fu_110_p2 <= "1" when (grp_fu_110_p0 = cubieColor_V_q0) else "0";
    grp_fu_116_p2 <= "1" when (cubieColor_V_load_137_reg_344 = cubieColor_V_q1) else "0";
    grp_fu_121_p2 <= "1" when (reg_131 = cubieColor_V_q1) else "0";
    grp_fu_126_p2 <= "1" when (cubieColor_V_load_139_reg_354 = cubieColor_V_q0) else "0";
    sel_tmp10_fu_189_p2 <= (tmp26_fu_184_p2 and sel_tmp8_fu_178_p2);
    sel_tmp12_fu_195_p2 <= "1" when (edge_V = ap_const_lv4_4) else "0";
    sel_tmp14_fu_206_p2 <= (tmp27_fu_201_p2 and sel_tmp12_fu_195_p2);
    sel_tmp16_fu_230_p2 <= "1" when (edge_V = ap_const_lv4_5) else "0";
    sel_tmp17_fu_240_p2 <= (tmp28_fu_235_p2 and sel_tmp16_fu_230_p2);
    sel_tmp18_fu_246_p2 <= "1" when (edge_V = ap_const_lv4_6) else "0";
    sel_tmp19_fu_256_p2 <= (tmp29_fu_251_p2 and sel_tmp18_fu_246_p2);
    sel_tmp20_fu_262_p2 <= "1" when (edge_V = ap_const_lv4_7) else "0";
    sel_tmp21_fu_283_p2 <= (tmp30_fu_278_p2 and sel_tmp20_reg_397);
    sel_tmp22_fu_267_p2 <= "1" when (edge_V = ap_const_lv4_8) else "0";
    sel_tmp23_fu_293_p2 <= (tmp31_fu_288_p2 and sel_tmp22_reg_402);
    sel_tmp2_fu_156_p2 <= (tmp_fu_152_p2 and sel_tmp_fu_146_p2);
    sel_tmp4_fu_162_p2 <= "1" when (edge_V = ap_const_lv4_2) else "0";
    sel_tmp6_fu_172_p2 <= (tmp25_fu_168_p2 and sel_tmp4_fu_162_p2);
    sel_tmp8_fu_178_p2 <= "1" when (edge_V = ap_const_lv4_3) else "0";
    sel_tmp_fu_146_p2 <= "1" when (edge_V = ap_const_lv4_1) else "0";
    tmp25_fu_168_p2 <= (tmp_209_reg_374 and tmp_201_reg_324);
    tmp26_fu_184_p2 <= (tmp_202_reg_329 and grp_fu_121_p2);
    tmp27_fu_201_p2 <= (tmp_203_reg_334 and grp_fu_126_p2);
    tmp28_fu_235_p2 <= (tmp_204_reg_339 and grp_fu_116_p2);
    tmp29_fu_251_p2 <= (tmp_213_fu_224_p2 and tmp_205_reg_349);
    tmp30_fu_278_p2 <= (tmp_206_reg_359 and grp_fu_121_p2);
    tmp31_fu_288_p2 <= (tmp_207_reg_364 and grp_fu_126_p2);
    tmp32_fu_212_p2 <= (sel_tmp6_fu_172_p2 or sel_tmp2_fu_156_p2);
    tmp33_fu_218_p2 <= (sel_tmp14_fu_206_p2 or sel_tmp10_fu_189_p2);
    tmp34_fu_298_p2 <= (tmp33_reg_392 or tmp32_reg_387);
    tmp35_fu_272_p2 <= (sel_tmp19_fu_256_p2 or sel_tmp17_fu_240_p2);
    tmp36_fu_302_p2 <= (sel_tmp23_fu_293_p2 or sel_tmp21_fu_283_p2);
    tmp37_fu_308_p2 <= (tmp36_fu_302_p2 or tmp35_reg_407);
    tmp_207_fu_140_p2 <= "1" when (reg_131 = cubieColor_V_q1) else "0";
    tmp_213_fu_224_p2 <= "1" when (reg_131 = cubieColor_V_q0) else "0";
    tmp_fu_152_p2 <= (tmp_s_reg_319 and tmp_208_reg_369);
end behav;
