-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity solveCube is
generic (
    C_S_AXI_ADD_IO_ADDR_WIDTH : INTEGER := 10;
    C_S_AXI_ADD_IO_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_add_io_AWVALID : IN STD_LOGIC;
    s_axi_add_io_AWREADY : OUT STD_LOGIC;
    s_axi_add_io_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADD_IO_ADDR_WIDTH-1 downto 0);
    s_axi_add_io_WVALID : IN STD_LOGIC;
    s_axi_add_io_WREADY : OUT STD_LOGIC;
    s_axi_add_io_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_ADD_IO_DATA_WIDTH-1 downto 0);
    s_axi_add_io_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_ADD_IO_DATA_WIDTH/8-1 downto 0);
    s_axi_add_io_ARVALID : IN STD_LOGIC;
    s_axi_add_io_ARREADY : OUT STD_LOGIC;
    s_axi_add_io_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADD_IO_ADDR_WIDTH-1 downto 0);
    s_axi_add_io_RVALID : OUT STD_LOGIC;
    s_axi_add_io_RREADY : IN STD_LOGIC;
    s_axi_add_io_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_ADD_IO_DATA_WIDTH-1 downto 0);
    s_axi_add_io_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_add_io_BVALID : OUT STD_LOGIC;
    s_axi_add_io_BREADY : IN STD_LOGIC;
    s_axi_add_io_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of solveCube is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "solveCube,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=12.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.736500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=0,HLS_SYN_FF=2584,HLS_SYN_LUT=27346,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state131 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (142 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state133 : STD_LOGIC_VECTOR (142 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state134 : STD_LOGIC_VECTOR (142 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state135 : STD_LOGIC_VECTOR (142 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state136 : STD_LOGIC_VECTOR (142 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state137 : STD_LOGIC_VECTOR (142 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state138 : STD_LOGIC_VECTOR (142 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state139 : STD_LOGIC_VECTOR (142 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state140 : STD_LOGIC_VECTOR (142 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state141 : STD_LOGIC_VECTOR (142 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state142 : STD_LOGIC_VECTOR (142 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state143 : STD_LOGIC_VECTOR (142 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv32_75 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110101";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_79 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111001";
    constant ap_const_lv32_7B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001100";
    constant ap_const_lv32_8D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_8E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001110";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_8A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001010";
    constant ap_const_lv32_8B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001011";
    constant ap_const_lv32_81 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000001";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_89 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_82 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000010";
    constant ap_const_lv32_84 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000100";
    constant ap_const_lv32_86 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000110";
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_83 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000011";
    constant ap_const_lv32_85 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000101";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv32_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110110";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_7A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111010";
    constant ap_const_lv32_7C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111100";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (142 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal cubieColor_tb_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal cubieColor_tb_V_ce0 : STD_LOGIC;
    signal cubieColor_tb_V_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal rMoves_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rMoves_V_ce0 : STD_LOGIC;
    signal rMoves_V_we0 : STD_LOGIC;
    signal order_V_ap_vld : STD_LOGIC;
    signal cubieColor_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal cubieColor_V_ce0 : STD_LOGIC;
    signal cubieColor_V_we0 : STD_LOGIC;
    signal cubieColor_V_d0 : STD_LOGIC_VECTOR (2 downto 0);
    signal cubieColor_V_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal cubieColor_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal cubieColor_V_ce1 : STD_LOGIC;
    signal cubieColor_V_we1 : STD_LOGIC;
    signal cubieColor_V_d1 : STD_LOGIC_VECTOR (2 downto 0);
    signal cubieColor_V_q1 : STD_LOGIC_VECTOR (2 downto 0);
    signal moveCounter_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal moves_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal moves_V_ce0 : STD_LOGIC;
    signal moves_V_we0 : STD_LOGIC;
    signal moves_V_d0 : STD_LOGIC_VECTOR (3 downto 0);
    signal moves_V_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_findEdge_fu_372_ap_return : STD_LOGIC_VECTOR (3 downto 0);
    signal reg_431 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_findEdge_fu_372_ap_idle : STD_LOGIC;
    signal grp_findEdge_fu_372_ap_ready : STD_LOGIC;
    signal grp_findEdge_fu_372_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal reg_436 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal ap_CS_fsm_state106 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state106 : signal is "none";
    signal i_V_fu_451_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_V_reg_562 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_7_fu_473_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_reg_567 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_V_fu_491_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_V_reg_575 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_8_cast_fu_506_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_cast_reg_580 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_reg_638 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal grp_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_reg_643 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_648 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal grp_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_reg_652 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal grp_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_reg_657 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cornerCorrect_fu_400_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal p_22_reg_665 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state112 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state112 : signal is "none";
    signal grp_cornerCorrect_fu_400_ap_idle : STD_LOGIC;
    signal grp_cornerCorrect_fu_400_ap_ready : STD_LOGIC;
    signal grp_cornerCorrect_fu_400_ap_done : STD_LOGIC;
    signal p_23_reg_669 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state114 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state114 : signal is "none";
    signal p_24_reg_673 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state116 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state116 : signal is "none";
    signal p_28_reg_677 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state118 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state118 : signal is "none";
    signal p_29_reg_681 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state120 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state120 : signal is "none";
    signal p_30_reg_685 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state122 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state122 : signal is "none";
    signal p_27_reg_689 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state124 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state124 : signal is "none";
    signal ap_block_state124_on_subcall_done : BOOLEAN;
    signal p_26_reg_693 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state126 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state126 : signal is "none";
    signal ap_predicate_op373_call_state126 : BOOLEAN;
    signal ap_predicate_op375_call_state126 : BOOLEAN;
    signal ap_block_state126_on_subcall_done : BOOLEAN;
    signal grp_optimizeCube_fu_363_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal op2_V_assign_reg_712 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state141 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state141 : signal is "none";
    signal grp_optimizeCube_fu_363_ap_idle : STD_LOGIC;
    signal grp_optimizeCube_fu_363_ap_ready : STD_LOGIC;
    signal grp_optimizeCube_fu_363_ap_done : STD_LOGIC;
    signal i_V_1_fu_548_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_V_1_reg_720 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state142 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state142 : signal is "none";
    signal tmp_61_fu_554_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_61_reg_725 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_solveStage3_fu_242_ap_start : STD_LOGIC;
    signal grp_solveStage3_fu_242_ap_done : STD_LOGIC;
    signal grp_solveStage3_fu_242_ap_idle : STD_LOGIC;
    signal grp_solveStage3_fu_242_ap_ready : STD_LOGIC;
    signal grp_solveStage3_fu_242_fC_V : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_solveStage3_fu_242_sC_V : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_solveStage3_fu_242_moveCounter_V_o : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_solveStage3_fu_242_moveCounter_V_o_ap_vld : STD_LOGIC;
    signal grp_solveStage3_fu_242_moves_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_solveStage3_fu_242_moves_V_ce0 : STD_LOGIC;
    signal grp_solveStage3_fu_242_moves_V_we0 : STD_LOGIC;
    signal grp_solveStage3_fu_242_moves_V_d0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_solveStage3_fu_242_cubieColor_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_solveStage3_fu_242_cubieColor_V_ce0 : STD_LOGIC;
    signal grp_solveStage3_fu_242_cubieColor_V_we0 : STD_LOGIC;
    signal grp_solveStage3_fu_242_cubieColor_V_d0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_solveStage3_fu_242_cubieColor_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_solveStage3_fu_242_cubieColor_V_ce1 : STD_LOGIC;
    signal grp_solveStage3_fu_242_cubieColor_V_we1 : STD_LOGIC;
    signal grp_solveStage3_fu_242_cubieColor_V_d1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_solveStage2_fu_262_ap_start : STD_LOGIC;
    signal grp_solveStage2_fu_262_ap_done : STD_LOGIC;
    signal grp_solveStage2_fu_262_ap_idle : STD_LOGIC;
    signal grp_solveStage2_fu_262_ap_ready : STD_LOGIC;
    signal grp_solveStage2_fu_262_sC_V : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_solveStage2_fu_262_tC_V : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_solveStage2_fu_262_cubieColor_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_solveStage2_fu_262_cubieColor_V_ce0 : STD_LOGIC;
    signal grp_solveStage2_fu_262_cubieColor_V_we0 : STD_LOGIC;
    signal grp_solveStage2_fu_262_cubieColor_V_d0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_solveStage2_fu_262_cubieColor_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_solveStage2_fu_262_cubieColor_V_ce1 : STD_LOGIC;
    signal grp_solveStage2_fu_262_cubieColor_V_we1 : STD_LOGIC;
    signal grp_solveStage2_fu_262_cubieColor_V_d1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_solveStage2_fu_262_moveCounter_V_o : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_solveStage2_fu_262_moveCounter_V_o_ap_vld : STD_LOGIC;
    signal grp_solveStage2_fu_262_moves_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_solveStage2_fu_262_moves_V_ce0 : STD_LOGIC;
    signal grp_solveStage2_fu_262_moves_V_we0 : STD_LOGIC;
    signal grp_solveStage2_fu_262_moves_V_d0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_solveStage5b_fu_280_ap_start : STD_LOGIC;
    signal grp_solveStage5b_fu_280_ap_done : STD_LOGIC;
    signal grp_solveStage5b_fu_280_ap_idle : STD_LOGIC;
    signal grp_solveStage5b_fu_280_ap_ready : STD_LOGIC;
    signal grp_solveStage5b_fu_280_cubieColor_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_solveStage5b_fu_280_cubieColor_V_ce0 : STD_LOGIC;
    signal grp_solveStage5b_fu_280_cubieColor_V_we0 : STD_LOGIC;
    signal grp_solveStage5b_fu_280_cubieColor_V_d0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_solveStage5b_fu_280_cubieColor_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_solveStage5b_fu_280_cubieColor_V_ce1 : STD_LOGIC;
    signal grp_solveStage5b_fu_280_cubieColor_V_we1 : STD_LOGIC;
    signal grp_solveStage5b_fu_280_cubieColor_V_d1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_solveStage5b_fu_280_moveCounter_V_o : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_solveStage5b_fu_280_moveCounter_V_o_ap_vld : STD_LOGIC;
    signal grp_solveStage5b_fu_280_moves_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_solveStage5b_fu_280_moves_V_ce0 : STD_LOGIC;
    signal grp_solveStage5b_fu_280_moves_V_we0 : STD_LOGIC;
    signal grp_solveStage5b_fu_280_moves_V_d0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_solveStage5a_fu_290_ap_start : STD_LOGIC;
    signal grp_solveStage5a_fu_290_ap_done : STD_LOGIC;
    signal grp_solveStage5a_fu_290_ap_idle : STD_LOGIC;
    signal grp_solveStage5a_fu_290_ap_ready : STD_LOGIC;
    signal grp_solveStage5a_fu_290_cubieColor_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_solveStage5a_fu_290_cubieColor_V_ce0 : STD_LOGIC;
    signal grp_solveStage5a_fu_290_cubieColor_V_we0 : STD_LOGIC;
    signal grp_solveStage5a_fu_290_cubieColor_V_d0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_solveStage5a_fu_290_cubieColor_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_solveStage5a_fu_290_cubieColor_V_ce1 : STD_LOGIC;
    signal grp_solveStage5a_fu_290_cubieColor_V_we1 : STD_LOGIC;
    signal grp_solveStage5a_fu_290_cubieColor_V_d1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_solveStage5a_fu_290_moveCounter_V_o : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_solveStage5a_fu_290_moveCounter_V_o_ap_vld : STD_LOGIC;
    signal grp_solveStage5a_fu_290_moves_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_solveStage5a_fu_290_moves_V_ce0 : STD_LOGIC;
    signal grp_solveStage5a_fu_290_moves_V_we0 : STD_LOGIC;
    signal grp_solveStage5a_fu_290_moves_V_d0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_solveStage4a_fu_300_ap_start : STD_LOGIC;
    signal grp_solveStage4a_fu_300_ap_done : STD_LOGIC;
    signal grp_solveStage4a_fu_300_ap_idle : STD_LOGIC;
    signal grp_solveStage4a_fu_300_ap_ready : STD_LOGIC;
    signal grp_solveStage4a_fu_300_moveCounter_V_o : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_solveStage4a_fu_300_moveCounter_V_o_ap_vld : STD_LOGIC;
    signal grp_solveStage4a_fu_300_moves_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_solveStage4a_fu_300_moves_V_ce0 : STD_LOGIC;
    signal grp_solveStage4a_fu_300_moves_V_we0 : STD_LOGIC;
    signal grp_solveStage4a_fu_300_moves_V_d0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_solveStage4a_fu_300_cubieColor_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_solveStage4a_fu_300_cubieColor_V_ce0 : STD_LOGIC;
    signal grp_solveStage4a_fu_300_cubieColor_V_we0 : STD_LOGIC;
    signal grp_solveStage4a_fu_300_cubieColor_V_d0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_solveStage4a_fu_300_cubieColor_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_solveStage4a_fu_300_cubieColor_V_ce1 : STD_LOGIC;
    signal grp_solveStage4a_fu_300_cubieColor_V_we1 : STD_LOGIC;
    signal grp_solveStage4a_fu_300_cubieColor_V_d1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_solveStage4b_fu_310_ap_start : STD_LOGIC;
    signal grp_solveStage4b_fu_310_ap_done : STD_LOGIC;
    signal grp_solveStage4b_fu_310_ap_idle : STD_LOGIC;
    signal grp_solveStage4b_fu_310_ap_ready : STD_LOGIC;
    signal grp_solveStage4b_fu_310_moveCounter_V_o : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_solveStage4b_fu_310_moveCounter_V_o_ap_vld : STD_LOGIC;
    signal grp_solveStage4b_fu_310_moves_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_solveStage4b_fu_310_moves_V_ce0 : STD_LOGIC;
    signal grp_solveStage4b_fu_310_moves_V_we0 : STD_LOGIC;
    signal grp_solveStage4b_fu_310_moves_V_d0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_solveStage4b_fu_310_cubieColor_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_solveStage4b_fu_310_cubieColor_V_ce0 : STD_LOGIC;
    signal grp_solveStage4b_fu_310_cubieColor_V_we0 : STD_LOGIC;
    signal grp_solveStage4b_fu_310_cubieColor_V_d0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_solveStage4b_fu_310_cubieColor_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_solveStage4b_fu_310_cubieColor_V_ce1 : STD_LOGIC;
    signal grp_solveStage4b_fu_310_cubieColor_V_we1 : STD_LOGIC;
    signal grp_solveStage4b_fu_310_cubieColor_V_d1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_turnCube_fu_320_ap_start : STD_LOGIC;
    signal grp_turnCube_fu_320_ap_done : STD_LOGIC;
    signal grp_turnCube_fu_320_ap_idle : STD_LOGIC;
    signal grp_turnCube_fu_320_ap_ready : STD_LOGIC;
    signal grp_turnCube_fu_320_moveCounter_V_o : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_turnCube_fu_320_moveCounter_V_o_ap_vld : STD_LOGIC;
    signal grp_turnCube_fu_320_moves_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_turnCube_fu_320_moves_V_ce0 : STD_LOGIC;
    signal grp_turnCube_fu_320_moves_V_we0 : STD_LOGIC;
    signal grp_turnCube_fu_320_moves_V_d0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_turnCube_fu_320_cubieColor_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_turnCube_fu_320_cubieColor_V_ce0 : STD_LOGIC;
    signal grp_turnCube_fu_320_cubieColor_V_we0 : STD_LOGIC;
    signal grp_turnCube_fu_320_cubieColor_V_d0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_turnCube_fu_320_cubieColor_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_turnCube_fu_320_cubieColor_V_ce1 : STD_LOGIC;
    signal grp_turnCube_fu_320_cubieColor_V_we1 : STD_LOGIC;
    signal grp_turnCube_fu_320_cubieColor_V_d1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_solveStage1_fu_332_ap_start : STD_LOGIC;
    signal grp_solveStage1_fu_332_ap_done : STD_LOGIC;
    signal grp_solveStage1_fu_332_ap_idle : STD_LOGIC;
    signal grp_solveStage1_fu_332_ap_ready : STD_LOGIC;
    signal grp_solveStage1_fu_332_moveCounter_V_o : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_solveStage1_fu_332_moveCounter_V_o_ap_vld : STD_LOGIC;
    signal grp_solveStage1_fu_332_moves_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_solveStage1_fu_332_moves_V_ce0 : STD_LOGIC;
    signal grp_solveStage1_fu_332_moves_V_we0 : STD_LOGIC;
    signal grp_solveStage1_fu_332_moves_V_d0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_solveStage1_fu_332_cubieColor_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_solveStage1_fu_332_cubieColor_V_ce0 : STD_LOGIC;
    signal grp_solveStage1_fu_332_cubieColor_V_we0 : STD_LOGIC;
    signal grp_solveStage1_fu_332_cubieColor_V_d0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_solveStage1_fu_332_cubieColor_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_solveStage1_fu_332_cubieColor_V_ce1 : STD_LOGIC;
    signal grp_solveStage1_fu_332_cubieColor_V_we1 : STD_LOGIC;
    signal grp_solveStage1_fu_332_cubieColor_V_d1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_rotateCubeHorizontal_fu_343_ap_start : STD_LOGIC;
    signal grp_rotateCubeHorizontal_fu_343_ap_done : STD_LOGIC;
    signal grp_rotateCubeHorizontal_fu_343_ap_idle : STD_LOGIC;
    signal grp_rotateCubeHorizontal_fu_343_ap_ready : STD_LOGIC;
    signal grp_rotateCubeHorizontal_fu_343_moveCounter_V_o : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_rotateCubeHorizontal_fu_343_moveCounter_V_o_ap_vld : STD_LOGIC;
    signal grp_rotateCubeHorizontal_fu_343_moves_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_rotateCubeHorizontal_fu_343_moves_V_ce0 : STD_LOGIC;
    signal grp_rotateCubeHorizontal_fu_343_moves_V_we0 : STD_LOGIC;
    signal grp_rotateCubeHorizontal_fu_343_moves_V_d0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_rotateCubeHorizontal_fu_343_cubieColor_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_rotateCubeHorizontal_fu_343_cubieColor_V_ce0 : STD_LOGIC;
    signal grp_rotateCubeHorizontal_fu_343_cubieColor_V_we0 : STD_LOGIC;
    signal grp_rotateCubeHorizontal_fu_343_cubieColor_V_d0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_rotateCubeHorizontal_fu_343_cubieColor_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_rotateCubeHorizontal_fu_343_cubieColor_V_ce1 : STD_LOGIC;
    signal grp_rotateCubeHorizontal_fu_343_cubieColor_V_we1 : STD_LOGIC;
    signal grp_rotateCubeHorizontal_fu_343_cubieColor_V_d1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_rotateCubeVertical_fu_353_ap_start : STD_LOGIC;
    signal grp_rotateCubeVertical_fu_353_ap_done : STD_LOGIC;
    signal grp_rotateCubeVertical_fu_353_ap_idle : STD_LOGIC;
    signal grp_rotateCubeVertical_fu_353_ap_ready : STD_LOGIC;
    signal grp_rotateCubeVertical_fu_353_moveCounter_V_o : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_rotateCubeVertical_fu_353_moveCounter_V_o_ap_vld : STD_LOGIC;
    signal grp_rotateCubeVertical_fu_353_moves_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_rotateCubeVertical_fu_353_moves_V_ce0 : STD_LOGIC;
    signal grp_rotateCubeVertical_fu_353_moves_V_we0 : STD_LOGIC;
    signal grp_rotateCubeVertical_fu_353_moves_V_d0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_rotateCubeVertical_fu_353_cubieColor_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_rotateCubeVertical_fu_353_cubieColor_V_ce0 : STD_LOGIC;
    signal grp_rotateCubeVertical_fu_353_cubieColor_V_we0 : STD_LOGIC;
    signal grp_rotateCubeVertical_fu_353_cubieColor_V_d0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_rotateCubeVertical_fu_353_cubieColor_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_rotateCubeVertical_fu_353_cubieColor_V_ce1 : STD_LOGIC;
    signal grp_rotateCubeVertical_fu_353_cubieColor_V_we1 : STD_LOGIC;
    signal grp_rotateCubeVertical_fu_353_cubieColor_V_d1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_optimizeCube_fu_363_ap_start : STD_LOGIC;
    signal grp_optimizeCube_fu_363_moves_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_optimizeCube_fu_363_moves_V_ce0 : STD_LOGIC;
    signal grp_optimizeCube_fu_363_moves_V_we0 : STD_LOGIC;
    signal grp_optimizeCube_fu_363_moves_V_d0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_findEdge_fu_372_ap_start : STD_LOGIC;
    signal grp_findEdge_fu_372_sEC_V : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_findEdge_fu_372_cubieColor_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_findEdge_fu_372_cubieColor_V_ce0 : STD_LOGIC;
    signal grp_findEdge_fu_372_cubieColor_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_findEdge_fu_372_cubieColor_V_ce1 : STD_LOGIC;
    signal grp_edgeCorrect_fu_385_ap_start : STD_LOGIC;
    signal grp_edgeCorrect_fu_385_ap_done : STD_LOGIC;
    signal grp_edgeCorrect_fu_385_ap_idle : STD_LOGIC;
    signal grp_edgeCorrect_fu_385_ap_ready : STD_LOGIC;
    signal grp_edgeCorrect_fu_385_edge_V : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_edgeCorrect_fu_385_cubieColor_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_edgeCorrect_fu_385_cubieColor_V_ce0 : STD_LOGIC;
    signal grp_edgeCorrect_fu_385_cubieColor_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_edgeCorrect_fu_385_cubieColor_V_ce1 : STD_LOGIC;
    signal grp_edgeCorrect_fu_385_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cornerCorrect_fu_400_ap_start : STD_LOGIC;
    signal grp_cornerCorrect_fu_400_corner_V : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_cornerCorrect_fu_400_cubieColor_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_cornerCorrect_fu_400_cubieColor_V_ce0 : STD_LOGIC;
    signal grp_cornerCorrect_fu_400_cubieColor_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_cornerCorrect_fu_400_cubieColor_V_ce1 : STD_LOGIC;
    signal p_s_reg_209 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_2_reg_220 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal t_V_reg_231 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state143 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state143 : signal is "none";
    signal grp_solveStage3_fu_242_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal grp_solveStage2_fu_262_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal grp_solveStage5b_fu_280_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state139 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state139 : signal is "none";
    signal ap_CS_fsm_state140 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state140 : signal is "none";
    signal grp_solveStage5a_fu_290_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state130 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state130 : signal is "none";
    signal ap_CS_fsm_state128 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state128 : signal is "none";
    signal grp_solveStage4a_fu_300_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal grp_solveStage4b_fu_310_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state109 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state109 : signal is "none";
    signal ap_CS_fsm_state110 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state110 : signal is "none";
    signal grp_turnCube_fu_320_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state127 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state127 : signal is "none";
    signal grp_solveStage1_fu_332_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_rotateCubeHorizontal_fu_343_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal grp_rotateCubeVertical_fu_353_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal grp_optimizeCube_fu_363_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state138 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state138 : signal is "none";
    signal grp_findEdge_fu_372_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_edgeCorrect_fu_385_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal ap_CS_fsm_state131 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state131 : signal is "none";
    signal ap_CS_fsm_state133 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state133 : signal is "none";
    signal ap_CS_fsm_state135 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state135 : signal is "none";
    signal ap_CS_fsm_state137 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state137 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_CS_fsm_state132 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state132 : signal is "none";
    signal ap_CS_fsm_state134 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state134 : signal is "none";
    signal ap_CS_fsm_state136 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state136 : signal is "none";
    signal grp_cornerCorrect_fu_400_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_CS_fsm_state111 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state111 : signal is "none";
    signal ap_CS_fsm_state113 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state113 : signal is "none";
    signal ap_CS_fsm_state115 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state115 : signal is "none";
    signal ap_CS_fsm_state117 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state117 : signal is "none";
    signal ap_CS_fsm_state119 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state119 : signal is "none";
    signal ap_CS_fsm_state121 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state121 : signal is "none";
    signal ap_CS_fsm_state123 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state123 : signal is "none";
    signal ap_CS_fsm_state125 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state125 : signal is "none";
    signal ap_CS_fsm_state129 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state129 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal ap_CS_fsm_state105 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state105 : signal is "none";
    signal ap_CS_fsm_state108 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state108 : signal is "none";
    signal tmp_6_fu_461_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_cast_fu_457_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_cast_fu_469_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_54_cast_fu_497_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_8_fu_501_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp3_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond5_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (142 downto 0);
    signal ap_block_state104_on_subcall_done : BOOLEAN;
    signal ap_predicate_op381_call_state128 : BOOLEAN;
    signal ap_predicate_op383_call_state128 : BOOLEAN;
    signal ap_block_state128_on_subcall_done : BOOLEAN;

    component solveStage3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fC_V : IN STD_LOGIC_VECTOR (2 downto 0);
        sC_V : IN STD_LOGIC_VECTOR (2 downto 0);
        moveCounter_V_i : IN STD_LOGIC_VECTOR (7 downto 0);
        moveCounter_V_o : OUT STD_LOGIC_VECTOR (7 downto 0);
        moveCounter_V_o_ap_vld : OUT STD_LOGIC;
        moves_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        moves_V_ce0 : OUT STD_LOGIC;
        moves_V_we0 : OUT STD_LOGIC;
        moves_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        cubieColor_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cubieColor_V_ce0 : OUT STD_LOGIC;
        cubieColor_V_we0 : OUT STD_LOGIC;
        cubieColor_V_d0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cubieColor_V_ce1 : OUT STD_LOGIC;
        cubieColor_V_we1 : OUT STD_LOGIC;
        cubieColor_V_d1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_q1 : IN STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component solveStage2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sC_V : IN STD_LOGIC_VECTOR (2 downto 0);
        tC_V : IN STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cubieColor_V_ce0 : OUT STD_LOGIC;
        cubieColor_V_we0 : OUT STD_LOGIC;
        cubieColor_V_d0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cubieColor_V_ce1 : OUT STD_LOGIC;
        cubieColor_V_we1 : OUT STD_LOGIC;
        cubieColor_V_d1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_q1 : IN STD_LOGIC_VECTOR (2 downto 0);
        moveCounter_V_i : IN STD_LOGIC_VECTOR (7 downto 0);
        moveCounter_V_o : OUT STD_LOGIC_VECTOR (7 downto 0);
        moveCounter_V_o_ap_vld : OUT STD_LOGIC;
        moves_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        moves_V_ce0 : OUT STD_LOGIC;
        moves_V_we0 : OUT STD_LOGIC;
        moves_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component solveStage5b IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        cubieColor_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cubieColor_V_ce0 : OUT STD_LOGIC;
        cubieColor_V_we0 : OUT STD_LOGIC;
        cubieColor_V_d0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cubieColor_V_ce1 : OUT STD_LOGIC;
        cubieColor_V_we1 : OUT STD_LOGIC;
        cubieColor_V_d1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_q1 : IN STD_LOGIC_VECTOR (2 downto 0);
        moveCounter_V_i : IN STD_LOGIC_VECTOR (7 downto 0);
        moveCounter_V_o : OUT STD_LOGIC_VECTOR (7 downto 0);
        moveCounter_V_o_ap_vld : OUT STD_LOGIC;
        moves_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        moves_V_ce0 : OUT STD_LOGIC;
        moves_V_we0 : OUT STD_LOGIC;
        moves_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component solveStage5a IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        cubieColor_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cubieColor_V_ce0 : OUT STD_LOGIC;
        cubieColor_V_we0 : OUT STD_LOGIC;
        cubieColor_V_d0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cubieColor_V_ce1 : OUT STD_LOGIC;
        cubieColor_V_we1 : OUT STD_LOGIC;
        cubieColor_V_d1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_q1 : IN STD_LOGIC_VECTOR (2 downto 0);
        moveCounter_V_i : IN STD_LOGIC_VECTOR (7 downto 0);
        moveCounter_V_o : OUT STD_LOGIC_VECTOR (7 downto 0);
        moveCounter_V_o_ap_vld : OUT STD_LOGIC;
        moves_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        moves_V_ce0 : OUT STD_LOGIC;
        moves_V_we0 : OUT STD_LOGIC;
        moves_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component solveStage4a IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        moveCounter_V_i : IN STD_LOGIC_VECTOR (7 downto 0);
        moveCounter_V_o : OUT STD_LOGIC_VECTOR (7 downto 0);
        moveCounter_V_o_ap_vld : OUT STD_LOGIC;
        moves_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        moves_V_ce0 : OUT STD_LOGIC;
        moves_V_we0 : OUT STD_LOGIC;
        moves_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        cubieColor_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cubieColor_V_ce0 : OUT STD_LOGIC;
        cubieColor_V_we0 : OUT STD_LOGIC;
        cubieColor_V_d0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cubieColor_V_ce1 : OUT STD_LOGIC;
        cubieColor_V_we1 : OUT STD_LOGIC;
        cubieColor_V_d1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_q1 : IN STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component solveStage4b IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        moveCounter_V_i : IN STD_LOGIC_VECTOR (7 downto 0);
        moveCounter_V_o : OUT STD_LOGIC_VECTOR (7 downto 0);
        moveCounter_V_o_ap_vld : OUT STD_LOGIC;
        moves_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        moves_V_ce0 : OUT STD_LOGIC;
        moves_V_we0 : OUT STD_LOGIC;
        moves_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        cubieColor_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cubieColor_V_ce0 : OUT STD_LOGIC;
        cubieColor_V_we0 : OUT STD_LOGIC;
        cubieColor_V_d0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cubieColor_V_ce1 : OUT STD_LOGIC;
        cubieColor_V_we1 : OUT STD_LOGIC;
        cubieColor_V_d1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_q1 : IN STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component turnCube IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        turn_V : IN STD_LOGIC_VECTOR (3 downto 0);
        moveCounter_V_i : IN STD_LOGIC_VECTOR (7 downto 0);
        moveCounter_V_o : OUT STD_LOGIC_VECTOR (7 downto 0);
        moveCounter_V_o_ap_vld : OUT STD_LOGIC;
        moves_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        moves_V_ce0 : OUT STD_LOGIC;
        moves_V_we0 : OUT STD_LOGIC;
        moves_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        cubieColor_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cubieColor_V_ce0 : OUT STD_LOGIC;
        cubieColor_V_we0 : OUT STD_LOGIC;
        cubieColor_V_d0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cubieColor_V_ce1 : OUT STD_LOGIC;
        cubieColor_V_we1 : OUT STD_LOGIC;
        cubieColor_V_d1 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component solveStage1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        edgeNumber_V : IN STD_LOGIC_VECTOR (3 downto 0);
        moveCounter_V_i : IN STD_LOGIC_VECTOR (7 downto 0);
        moveCounter_V_o : OUT STD_LOGIC_VECTOR (7 downto 0);
        moveCounter_V_o_ap_vld : OUT STD_LOGIC;
        moves_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        moves_V_ce0 : OUT STD_LOGIC;
        moves_V_we0 : OUT STD_LOGIC;
        moves_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        cubieColor_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cubieColor_V_ce0 : OUT STD_LOGIC;
        cubieColor_V_we0 : OUT STD_LOGIC;
        cubieColor_V_d0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cubieColor_V_ce1 : OUT STD_LOGIC;
        cubieColor_V_we1 : OUT STD_LOGIC;
        cubieColor_V_d1 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component rotateCubeHorizontal IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        moveCounter_V_i : IN STD_LOGIC_VECTOR (7 downto 0);
        moveCounter_V_o : OUT STD_LOGIC_VECTOR (7 downto 0);
        moveCounter_V_o_ap_vld : OUT STD_LOGIC;
        moves_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        moves_V_ce0 : OUT STD_LOGIC;
        moves_V_we0 : OUT STD_LOGIC;
        moves_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        cubieColor_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cubieColor_V_ce0 : OUT STD_LOGIC;
        cubieColor_V_we0 : OUT STD_LOGIC;
        cubieColor_V_d0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cubieColor_V_ce1 : OUT STD_LOGIC;
        cubieColor_V_we1 : OUT STD_LOGIC;
        cubieColor_V_d1 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component rotateCubeVertical IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        moveCounter_V_i : IN STD_LOGIC_VECTOR (7 downto 0);
        moveCounter_V_o : OUT STD_LOGIC_VECTOR (7 downto 0);
        moveCounter_V_o_ap_vld : OUT STD_LOGIC;
        moves_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        moves_V_ce0 : OUT STD_LOGIC;
        moves_V_we0 : OUT STD_LOGIC;
        moves_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        cubieColor_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cubieColor_V_ce0 : OUT STD_LOGIC;
        cubieColor_V_we0 : OUT STD_LOGIC;
        cubieColor_V_d0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cubieColor_V_ce1 : OUT STD_LOGIC;
        cubieColor_V_we1 : OUT STD_LOGIC;
        cubieColor_V_d1 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component optimizeCube IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        moveCounter_V : IN STD_LOGIC_VECTOR (7 downto 0);
        moves_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        moves_V_ce0 : OUT STD_LOGIC;
        moves_V_we0 : OUT STD_LOGIC;
        moves_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        moves_V_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component findEdge IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fEC_V : IN STD_LOGIC_VECTOR (2 downto 0);
        sEC_V : IN STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cubieColor_V_ce0 : OUT STD_LOGIC;
        cubieColor_V_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cubieColor_V_ce1 : OUT STD_LOGIC;
        cubieColor_V_q1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component edgeCorrect IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        edge_V : IN STD_LOGIC_VECTOR (3 downto 0);
        cubieColor_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cubieColor_V_ce0 : OUT STD_LOGIC;
        cubieColor_V_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cubieColor_V_ce1 : OUT STD_LOGIC;
        cubieColor_V_q1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component cornerCorrect IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        corner_V : IN STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cubieColor_V_ce0 : OUT STD_LOGIC;
        cubieColor_V_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
        cubieColor_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cubieColor_V_ce1 : OUT STD_LOGIC;
        cubieColor_V_q1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component solveCube_cubieCoeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (2 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (2 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component solveCube_moves_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (3 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component solveCube_add_io_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        cubieColor_tb_V_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        cubieColor_tb_V_ce0 : IN STD_LOGIC;
        cubieColor_tb_V_q0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        rMoves_V_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        rMoves_V_ce0 : IN STD_LOGIC;
        rMoves_V_we0 : IN STD_LOGIC;
        rMoves_V_d0 : IN STD_LOGIC_VECTOR (3 downto 0);
        order_V : IN STD_LOGIC_VECTOR (7 downto 0);
        order_V_ap_vld : IN STD_LOGIC );
    end component;



begin
    cubieColor_V_U : component solveCube_cubieCoeOg
    generic map (
        DataWidth => 3,
        AddressRange => 54,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cubieColor_V_address0,
        ce0 => cubieColor_V_ce0,
        we0 => cubieColor_V_we0,
        d0 => cubieColor_V_d0,
        q0 => cubieColor_V_q0,
        address1 => cubieColor_V_address1,
        ce1 => cubieColor_V_ce1,
        we1 => cubieColor_V_we1,
        d1 => cubieColor_V_d1,
        q1 => cubieColor_V_q1);

    moves_V_U : component solveCube_moves_V
    generic map (
        DataWidth => 4,
        AddressRange => 200,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => moves_V_address0,
        ce0 => moves_V_ce0,
        we0 => moves_V_we0,
        d0 => moves_V_d0,
        q0 => moves_V_q0);

    solveCube_add_io_s_axi_U : component solveCube_add_io_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_ADD_IO_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_ADD_IO_DATA_WIDTH)
    port map (
        AWVALID => s_axi_add_io_AWVALID,
        AWREADY => s_axi_add_io_AWREADY,
        AWADDR => s_axi_add_io_AWADDR,
        WVALID => s_axi_add_io_WVALID,
        WREADY => s_axi_add_io_WREADY,
        WDATA => s_axi_add_io_WDATA,
        WSTRB => s_axi_add_io_WSTRB,
        ARVALID => s_axi_add_io_ARVALID,
        ARREADY => s_axi_add_io_ARREADY,
        ARADDR => s_axi_add_io_ARADDR,
        RVALID => s_axi_add_io_RVALID,
        RREADY => s_axi_add_io_RREADY,
        RDATA => s_axi_add_io_RDATA,
        RRESP => s_axi_add_io_RRESP,
        BVALID => s_axi_add_io_BVALID,
        BREADY => s_axi_add_io_BREADY,
        BRESP => s_axi_add_io_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        cubieColor_tb_V_address0 => cubieColor_tb_V_address0,
        cubieColor_tb_V_ce0 => cubieColor_tb_V_ce0,
        cubieColor_tb_V_q0 => cubieColor_tb_V_q0,
        rMoves_V_address0 => rMoves_V_address0,
        rMoves_V_ce0 => rMoves_V_ce0,
        rMoves_V_we0 => rMoves_V_we0,
        rMoves_V_d0 => moves_V_q0,
        order_V => grp_optimizeCube_fu_363_ap_return,
        order_V_ap_vld => order_V_ap_vld);

    grp_solveStage3_fu_242 : component solveStage3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_solveStage3_fu_242_ap_start,
        ap_done => grp_solveStage3_fu_242_ap_done,
        ap_idle => grp_solveStage3_fu_242_ap_idle,
        ap_ready => grp_solveStage3_fu_242_ap_ready,
        fC_V => grp_solveStage3_fu_242_fC_V,
        sC_V => grp_solveStage3_fu_242_sC_V,
        moveCounter_V_i => moveCounter_V,
        moveCounter_V_o => grp_solveStage3_fu_242_moveCounter_V_o,
        moveCounter_V_o_ap_vld => grp_solveStage3_fu_242_moveCounter_V_o_ap_vld,
        moves_V_address0 => grp_solveStage3_fu_242_moves_V_address0,
        moves_V_ce0 => grp_solveStage3_fu_242_moves_V_ce0,
        moves_V_we0 => grp_solveStage3_fu_242_moves_V_we0,
        moves_V_d0 => grp_solveStage3_fu_242_moves_V_d0,
        cubieColor_V_address0 => grp_solveStage3_fu_242_cubieColor_V_address0,
        cubieColor_V_ce0 => grp_solveStage3_fu_242_cubieColor_V_ce0,
        cubieColor_V_we0 => grp_solveStage3_fu_242_cubieColor_V_we0,
        cubieColor_V_d0 => grp_solveStage3_fu_242_cubieColor_V_d0,
        cubieColor_V_q0 => cubieColor_V_q0,
        cubieColor_V_address1 => grp_solveStage3_fu_242_cubieColor_V_address1,
        cubieColor_V_ce1 => grp_solveStage3_fu_242_cubieColor_V_ce1,
        cubieColor_V_we1 => grp_solveStage3_fu_242_cubieColor_V_we1,
        cubieColor_V_d1 => grp_solveStage3_fu_242_cubieColor_V_d1,
        cubieColor_V_q1 => cubieColor_V_q1);

    grp_solveStage2_fu_262 : component solveStage2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_solveStage2_fu_262_ap_start,
        ap_done => grp_solveStage2_fu_262_ap_done,
        ap_idle => grp_solveStage2_fu_262_ap_idle,
        ap_ready => grp_solveStage2_fu_262_ap_ready,
        sC_V => grp_solveStage2_fu_262_sC_V,
        tC_V => grp_solveStage2_fu_262_tC_V,
        cubieColor_V_address0 => grp_solveStage2_fu_262_cubieColor_V_address0,
        cubieColor_V_ce0 => grp_solveStage2_fu_262_cubieColor_V_ce0,
        cubieColor_V_we0 => grp_solveStage2_fu_262_cubieColor_V_we0,
        cubieColor_V_d0 => grp_solveStage2_fu_262_cubieColor_V_d0,
        cubieColor_V_q0 => cubieColor_V_q0,
        cubieColor_V_address1 => grp_solveStage2_fu_262_cubieColor_V_address1,
        cubieColor_V_ce1 => grp_solveStage2_fu_262_cubieColor_V_ce1,
        cubieColor_V_we1 => grp_solveStage2_fu_262_cubieColor_V_we1,
        cubieColor_V_d1 => grp_solveStage2_fu_262_cubieColor_V_d1,
        cubieColor_V_q1 => cubieColor_V_q1,
        moveCounter_V_i => moveCounter_V,
        moveCounter_V_o => grp_solveStage2_fu_262_moveCounter_V_o,
        moveCounter_V_o_ap_vld => grp_solveStage2_fu_262_moveCounter_V_o_ap_vld,
        moves_V_address0 => grp_solveStage2_fu_262_moves_V_address0,
        moves_V_ce0 => grp_solveStage2_fu_262_moves_V_ce0,
        moves_V_we0 => grp_solveStage2_fu_262_moves_V_we0,
        moves_V_d0 => grp_solveStage2_fu_262_moves_V_d0);

    grp_solveStage5b_fu_280 : component solveStage5b
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_solveStage5b_fu_280_ap_start,
        ap_done => grp_solveStage5b_fu_280_ap_done,
        ap_idle => grp_solveStage5b_fu_280_ap_idle,
        ap_ready => grp_solveStage5b_fu_280_ap_ready,
        cubieColor_V_address0 => grp_solveStage5b_fu_280_cubieColor_V_address0,
        cubieColor_V_ce0 => grp_solveStage5b_fu_280_cubieColor_V_ce0,
        cubieColor_V_we0 => grp_solveStage5b_fu_280_cubieColor_V_we0,
        cubieColor_V_d0 => grp_solveStage5b_fu_280_cubieColor_V_d0,
        cubieColor_V_q0 => cubieColor_V_q0,
        cubieColor_V_address1 => grp_solveStage5b_fu_280_cubieColor_V_address1,
        cubieColor_V_ce1 => grp_solveStage5b_fu_280_cubieColor_V_ce1,
        cubieColor_V_we1 => grp_solveStage5b_fu_280_cubieColor_V_we1,
        cubieColor_V_d1 => grp_solveStage5b_fu_280_cubieColor_V_d1,
        cubieColor_V_q1 => cubieColor_V_q1,
        moveCounter_V_i => moveCounter_V,
        moveCounter_V_o => grp_solveStage5b_fu_280_moveCounter_V_o,
        moveCounter_V_o_ap_vld => grp_solveStage5b_fu_280_moveCounter_V_o_ap_vld,
        moves_V_address0 => grp_solveStage5b_fu_280_moves_V_address0,
        moves_V_ce0 => grp_solveStage5b_fu_280_moves_V_ce0,
        moves_V_we0 => grp_solveStage5b_fu_280_moves_V_we0,
        moves_V_d0 => grp_solveStage5b_fu_280_moves_V_d0);

    grp_solveStage5a_fu_290 : component solveStage5a
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_solveStage5a_fu_290_ap_start,
        ap_done => grp_solveStage5a_fu_290_ap_done,
        ap_idle => grp_solveStage5a_fu_290_ap_idle,
        ap_ready => grp_solveStage5a_fu_290_ap_ready,
        cubieColor_V_address0 => grp_solveStage5a_fu_290_cubieColor_V_address0,
        cubieColor_V_ce0 => grp_solveStage5a_fu_290_cubieColor_V_ce0,
        cubieColor_V_we0 => grp_solveStage5a_fu_290_cubieColor_V_we0,
        cubieColor_V_d0 => grp_solveStage5a_fu_290_cubieColor_V_d0,
        cubieColor_V_q0 => cubieColor_V_q0,
        cubieColor_V_address1 => grp_solveStage5a_fu_290_cubieColor_V_address1,
        cubieColor_V_ce1 => grp_solveStage5a_fu_290_cubieColor_V_ce1,
        cubieColor_V_we1 => grp_solveStage5a_fu_290_cubieColor_V_we1,
        cubieColor_V_d1 => grp_solveStage5a_fu_290_cubieColor_V_d1,
        cubieColor_V_q1 => cubieColor_V_q1,
        moveCounter_V_i => moveCounter_V,
        moveCounter_V_o => grp_solveStage5a_fu_290_moveCounter_V_o,
        moveCounter_V_o_ap_vld => grp_solveStage5a_fu_290_moveCounter_V_o_ap_vld,
        moves_V_address0 => grp_solveStage5a_fu_290_moves_V_address0,
        moves_V_ce0 => grp_solveStage5a_fu_290_moves_V_ce0,
        moves_V_we0 => grp_solveStage5a_fu_290_moves_V_we0,
        moves_V_d0 => grp_solveStage5a_fu_290_moves_V_d0);

    grp_solveStage4a_fu_300 : component solveStage4a
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_solveStage4a_fu_300_ap_start,
        ap_done => grp_solveStage4a_fu_300_ap_done,
        ap_idle => grp_solveStage4a_fu_300_ap_idle,
        ap_ready => grp_solveStage4a_fu_300_ap_ready,
        moveCounter_V_i => moveCounter_V,
        moveCounter_V_o => grp_solveStage4a_fu_300_moveCounter_V_o,
        moveCounter_V_o_ap_vld => grp_solveStage4a_fu_300_moveCounter_V_o_ap_vld,
        moves_V_address0 => grp_solveStage4a_fu_300_moves_V_address0,
        moves_V_ce0 => grp_solveStage4a_fu_300_moves_V_ce0,
        moves_V_we0 => grp_solveStage4a_fu_300_moves_V_we0,
        moves_V_d0 => grp_solveStage4a_fu_300_moves_V_d0,
        cubieColor_V_address0 => grp_solveStage4a_fu_300_cubieColor_V_address0,
        cubieColor_V_ce0 => grp_solveStage4a_fu_300_cubieColor_V_ce0,
        cubieColor_V_we0 => grp_solveStage4a_fu_300_cubieColor_V_we0,
        cubieColor_V_d0 => grp_solveStage4a_fu_300_cubieColor_V_d0,
        cubieColor_V_q0 => cubieColor_V_q0,
        cubieColor_V_address1 => grp_solveStage4a_fu_300_cubieColor_V_address1,
        cubieColor_V_ce1 => grp_solveStage4a_fu_300_cubieColor_V_ce1,
        cubieColor_V_we1 => grp_solveStage4a_fu_300_cubieColor_V_we1,
        cubieColor_V_d1 => grp_solveStage4a_fu_300_cubieColor_V_d1,
        cubieColor_V_q1 => cubieColor_V_q1);

    grp_solveStage4b_fu_310 : component solveStage4b
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_solveStage4b_fu_310_ap_start,
        ap_done => grp_solveStage4b_fu_310_ap_done,
        ap_idle => grp_solveStage4b_fu_310_ap_idle,
        ap_ready => grp_solveStage4b_fu_310_ap_ready,
        moveCounter_V_i => moveCounter_V,
        moveCounter_V_o => grp_solveStage4b_fu_310_moveCounter_V_o,
        moveCounter_V_o_ap_vld => grp_solveStage4b_fu_310_moveCounter_V_o_ap_vld,
        moves_V_address0 => grp_solveStage4b_fu_310_moves_V_address0,
        moves_V_ce0 => grp_solveStage4b_fu_310_moves_V_ce0,
        moves_V_we0 => grp_solveStage4b_fu_310_moves_V_we0,
        moves_V_d0 => grp_solveStage4b_fu_310_moves_V_d0,
        cubieColor_V_address0 => grp_solveStage4b_fu_310_cubieColor_V_address0,
        cubieColor_V_ce0 => grp_solveStage4b_fu_310_cubieColor_V_ce0,
        cubieColor_V_we0 => grp_solveStage4b_fu_310_cubieColor_V_we0,
        cubieColor_V_d0 => grp_solveStage4b_fu_310_cubieColor_V_d0,
        cubieColor_V_q0 => cubieColor_V_q0,
        cubieColor_V_address1 => grp_solveStage4b_fu_310_cubieColor_V_address1,
        cubieColor_V_ce1 => grp_solveStage4b_fu_310_cubieColor_V_ce1,
        cubieColor_V_we1 => grp_solveStage4b_fu_310_cubieColor_V_we1,
        cubieColor_V_d1 => grp_solveStage4b_fu_310_cubieColor_V_d1,
        cubieColor_V_q1 => cubieColor_V_q1);

    grp_turnCube_fu_320 : component turnCube
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_turnCube_fu_320_ap_start,
        ap_done => grp_turnCube_fu_320_ap_done,
        ap_idle => grp_turnCube_fu_320_ap_idle,
        ap_ready => grp_turnCube_fu_320_ap_ready,
        turn_V => ap_const_lv4_0,
        moveCounter_V_i => moveCounter_V,
        moveCounter_V_o => grp_turnCube_fu_320_moveCounter_V_o,
        moveCounter_V_o_ap_vld => grp_turnCube_fu_320_moveCounter_V_o_ap_vld,
        moves_V_address0 => grp_turnCube_fu_320_moves_V_address0,
        moves_V_ce0 => grp_turnCube_fu_320_moves_V_ce0,
        moves_V_we0 => grp_turnCube_fu_320_moves_V_we0,
        moves_V_d0 => grp_turnCube_fu_320_moves_V_d0,
        cubieColor_V_address0 => grp_turnCube_fu_320_cubieColor_V_address0,
        cubieColor_V_ce0 => grp_turnCube_fu_320_cubieColor_V_ce0,
        cubieColor_V_we0 => grp_turnCube_fu_320_cubieColor_V_we0,
        cubieColor_V_d0 => grp_turnCube_fu_320_cubieColor_V_d0,
        cubieColor_V_q0 => cubieColor_V_q0,
        cubieColor_V_address1 => grp_turnCube_fu_320_cubieColor_V_address1,
        cubieColor_V_ce1 => grp_turnCube_fu_320_cubieColor_V_ce1,
        cubieColor_V_we1 => grp_turnCube_fu_320_cubieColor_V_we1,
        cubieColor_V_d1 => grp_turnCube_fu_320_cubieColor_V_d1);

    grp_solveStage1_fu_332 : component solveStage1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_solveStage1_fu_332_ap_start,
        ap_done => grp_solveStage1_fu_332_ap_done,
        ap_idle => grp_solveStage1_fu_332_ap_idle,
        ap_ready => grp_solveStage1_fu_332_ap_ready,
        edgeNumber_V => reg_431,
        moveCounter_V_i => moveCounter_V,
        moveCounter_V_o => grp_solveStage1_fu_332_moveCounter_V_o,
        moveCounter_V_o_ap_vld => grp_solveStage1_fu_332_moveCounter_V_o_ap_vld,
        moves_V_address0 => grp_solveStage1_fu_332_moves_V_address0,
        moves_V_ce0 => grp_solveStage1_fu_332_moves_V_ce0,
        moves_V_we0 => grp_solveStage1_fu_332_moves_V_we0,
        moves_V_d0 => grp_solveStage1_fu_332_moves_V_d0,
        cubieColor_V_address0 => grp_solveStage1_fu_332_cubieColor_V_address0,
        cubieColor_V_ce0 => grp_solveStage1_fu_332_cubieColor_V_ce0,
        cubieColor_V_we0 => grp_solveStage1_fu_332_cubieColor_V_we0,
        cubieColor_V_d0 => grp_solveStage1_fu_332_cubieColor_V_d0,
        cubieColor_V_q0 => cubieColor_V_q0,
        cubieColor_V_address1 => grp_solveStage1_fu_332_cubieColor_V_address1,
        cubieColor_V_ce1 => grp_solveStage1_fu_332_cubieColor_V_ce1,
        cubieColor_V_we1 => grp_solveStage1_fu_332_cubieColor_V_we1,
        cubieColor_V_d1 => grp_solveStage1_fu_332_cubieColor_V_d1);

    grp_rotateCubeHorizontal_fu_343 : component rotateCubeHorizontal
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_rotateCubeHorizontal_fu_343_ap_start,
        ap_done => grp_rotateCubeHorizontal_fu_343_ap_done,
        ap_idle => grp_rotateCubeHorizontal_fu_343_ap_idle,
        ap_ready => grp_rotateCubeHorizontal_fu_343_ap_ready,
        moveCounter_V_i => moveCounter_V,
        moveCounter_V_o => grp_rotateCubeHorizontal_fu_343_moveCounter_V_o,
        moveCounter_V_o_ap_vld => grp_rotateCubeHorizontal_fu_343_moveCounter_V_o_ap_vld,
        moves_V_address0 => grp_rotateCubeHorizontal_fu_343_moves_V_address0,
        moves_V_ce0 => grp_rotateCubeHorizontal_fu_343_moves_V_ce0,
        moves_V_we0 => grp_rotateCubeHorizontal_fu_343_moves_V_we0,
        moves_V_d0 => grp_rotateCubeHorizontal_fu_343_moves_V_d0,
        cubieColor_V_address0 => grp_rotateCubeHorizontal_fu_343_cubieColor_V_address0,
        cubieColor_V_ce0 => grp_rotateCubeHorizontal_fu_343_cubieColor_V_ce0,
        cubieColor_V_we0 => grp_rotateCubeHorizontal_fu_343_cubieColor_V_we0,
        cubieColor_V_d0 => grp_rotateCubeHorizontal_fu_343_cubieColor_V_d0,
        cubieColor_V_q0 => cubieColor_V_q0,
        cubieColor_V_address1 => grp_rotateCubeHorizontal_fu_343_cubieColor_V_address1,
        cubieColor_V_ce1 => grp_rotateCubeHorizontal_fu_343_cubieColor_V_ce1,
        cubieColor_V_we1 => grp_rotateCubeHorizontal_fu_343_cubieColor_V_we1,
        cubieColor_V_d1 => grp_rotateCubeHorizontal_fu_343_cubieColor_V_d1);

    grp_rotateCubeVertical_fu_353 : component rotateCubeVertical
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_rotateCubeVertical_fu_353_ap_start,
        ap_done => grp_rotateCubeVertical_fu_353_ap_done,
        ap_idle => grp_rotateCubeVertical_fu_353_ap_idle,
        ap_ready => grp_rotateCubeVertical_fu_353_ap_ready,
        moveCounter_V_i => moveCounter_V,
        moveCounter_V_o => grp_rotateCubeVertical_fu_353_moveCounter_V_o,
        moveCounter_V_o_ap_vld => grp_rotateCubeVertical_fu_353_moveCounter_V_o_ap_vld,
        moves_V_address0 => grp_rotateCubeVertical_fu_353_moves_V_address0,
        moves_V_ce0 => grp_rotateCubeVertical_fu_353_moves_V_ce0,
        moves_V_we0 => grp_rotateCubeVertical_fu_353_moves_V_we0,
        moves_V_d0 => grp_rotateCubeVertical_fu_353_moves_V_d0,
        cubieColor_V_address0 => grp_rotateCubeVertical_fu_353_cubieColor_V_address0,
        cubieColor_V_ce0 => grp_rotateCubeVertical_fu_353_cubieColor_V_ce0,
        cubieColor_V_we0 => grp_rotateCubeVertical_fu_353_cubieColor_V_we0,
        cubieColor_V_d0 => grp_rotateCubeVertical_fu_353_cubieColor_V_d0,
        cubieColor_V_q0 => cubieColor_V_q0,
        cubieColor_V_address1 => grp_rotateCubeVertical_fu_353_cubieColor_V_address1,
        cubieColor_V_ce1 => grp_rotateCubeVertical_fu_353_cubieColor_V_ce1,
        cubieColor_V_we1 => grp_rotateCubeVertical_fu_353_cubieColor_V_we1,
        cubieColor_V_d1 => grp_rotateCubeVertical_fu_353_cubieColor_V_d1);

    grp_optimizeCube_fu_363 : component optimizeCube
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_optimizeCube_fu_363_ap_start,
        ap_done => grp_optimizeCube_fu_363_ap_done,
        ap_idle => grp_optimizeCube_fu_363_ap_idle,
        ap_ready => grp_optimizeCube_fu_363_ap_ready,
        moveCounter_V => moveCounter_V,
        moves_V_address0 => grp_optimizeCube_fu_363_moves_V_address0,
        moves_V_ce0 => grp_optimizeCube_fu_363_moves_V_ce0,
        moves_V_we0 => grp_optimizeCube_fu_363_moves_V_we0,
        moves_V_d0 => grp_optimizeCube_fu_363_moves_V_d0,
        moves_V_q0 => moves_V_q0,
        ap_return => grp_optimizeCube_fu_363_ap_return);

    grp_findEdge_fu_372 : component findEdge
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_findEdge_fu_372_ap_start,
        ap_done => grp_findEdge_fu_372_ap_done,
        ap_idle => grp_findEdge_fu_372_ap_idle,
        ap_ready => grp_findEdge_fu_372_ap_ready,
        fEC_V => ap_const_lv3_0,
        sEC_V => grp_findEdge_fu_372_sEC_V,
        cubieColor_V_address0 => grp_findEdge_fu_372_cubieColor_V_address0,
        cubieColor_V_ce0 => grp_findEdge_fu_372_cubieColor_V_ce0,
        cubieColor_V_q0 => cubieColor_V_q0,
        cubieColor_V_address1 => grp_findEdge_fu_372_cubieColor_V_address1,
        cubieColor_V_ce1 => grp_findEdge_fu_372_cubieColor_V_ce1,
        cubieColor_V_q1 => cubieColor_V_q1,
        ap_return => grp_findEdge_fu_372_ap_return);

    grp_edgeCorrect_fu_385 : component edgeCorrect
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_edgeCorrect_fu_385_ap_start,
        ap_done => grp_edgeCorrect_fu_385_ap_done,
        ap_idle => grp_edgeCorrect_fu_385_ap_idle,
        ap_ready => grp_edgeCorrect_fu_385_ap_ready,
        edge_V => grp_edgeCorrect_fu_385_edge_V,
        cubieColor_V_address0 => grp_edgeCorrect_fu_385_cubieColor_V_address0,
        cubieColor_V_ce0 => grp_edgeCorrect_fu_385_cubieColor_V_ce0,
        cubieColor_V_q0 => cubieColor_V_q0,
        cubieColor_V_address1 => grp_edgeCorrect_fu_385_cubieColor_V_address1,
        cubieColor_V_ce1 => grp_edgeCorrect_fu_385_cubieColor_V_ce1,
        cubieColor_V_q1 => cubieColor_V_q1,
        ap_return => grp_edgeCorrect_fu_385_ap_return);

    grp_cornerCorrect_fu_400 : component cornerCorrect
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_cornerCorrect_fu_400_ap_start,
        ap_done => grp_cornerCorrect_fu_400_ap_done,
        ap_idle => grp_cornerCorrect_fu_400_ap_idle,
        ap_ready => grp_cornerCorrect_fu_400_ap_ready,
        corner_V => grp_cornerCorrect_fu_400_corner_V,
        cubieColor_V_address0 => grp_cornerCorrect_fu_400_cubieColor_V_address0,
        cubieColor_V_ce0 => grp_cornerCorrect_fu_400_cubieColor_V_ce0,
        cubieColor_V_q0 => cubieColor_V_q0,
        cubieColor_V_address1 => grp_cornerCorrect_fu_400_cubieColor_V_address1,
        cubieColor_V_ce1 => grp_cornerCorrect_fu_400_cubieColor_V_ce1,
        cubieColor_V_q1 => cubieColor_V_q1,
        ap_return => grp_cornerCorrect_fu_400_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_cornerCorrect_fu_400_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_cornerCorrect_fu_400_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state125) or (ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state121) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state117) or (ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                    grp_cornerCorrect_fu_400_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_cornerCorrect_fu_400_ap_ready = ap_const_logic_1)) then 
                    grp_cornerCorrect_fu_400_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_edgeCorrect_fu_385_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_edgeCorrect_fu_385_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state137) or (ap_const_logic_1 = ap_CS_fsm_state135) or (ap_const_logic_1 = ap_CS_fsm_state133) or (ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_edgeCorrect_fu_385_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_edgeCorrect_fu_385_ap_ready = ap_const_logic_1)) then 
                    grp_edgeCorrect_fu_385_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_findEdge_fu_372_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_findEdge_fu_372_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    grp_findEdge_fu_372_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_findEdge_fu_372_ap_ready = ap_const_logic_1)) then 
                    grp_findEdge_fu_372_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_optimizeCube_fu_363_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_optimizeCube_fu_363_ap_start_reg <= ap_const_logic_0;
            else
                if (((grp_edgeCorrect_fu_385_ap_done = ap_const_logic_1) and (grp_edgeCorrect_fu_385_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state138))) then 
                    grp_optimizeCube_fu_363_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_optimizeCube_fu_363_ap_ready = ap_const_logic_1)) then 
                    grp_optimizeCube_fu_363_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_rotateCubeHorizontal_fu_343_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_rotateCubeHorizontal_fu_343_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                    grp_rotateCubeHorizontal_fu_343_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_rotateCubeHorizontal_fu_343_ap_ready = ap_const_logic_1)) then 
                    grp_rotateCubeHorizontal_fu_343_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_rotateCubeVertical_fu_353_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_rotateCubeVertical_fu_353_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state69))) then 
                    grp_rotateCubeVertical_fu_353_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_rotateCubeVertical_fu_353_ap_ready = ap_const_logic_1)) then 
                    grp_rotateCubeVertical_fu_353_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_solveStage1_fu_332_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_solveStage1_fu_332_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                    grp_solveStage1_fu_332_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_solveStage1_fu_332_ap_ready = ap_const_logic_1)) then 
                    grp_solveStage1_fu_332_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_solveStage2_fu_262_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_solveStage2_fu_262_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                    grp_solveStage2_fu_262_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_solveStage2_fu_262_ap_ready = ap_const_logic_1)) then 
                    grp_solveStage2_fu_262_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_solveStage3_fu_242_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_solveStage3_fu_242_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state83))) then 
                    grp_solveStage3_fu_242_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_solveStage3_fu_242_ap_ready = ap_const_logic_1)) then 
                    grp_solveStage3_fu_242_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_solveStage4a_fu_300_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_solveStage4a_fu_300_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
                    grp_solveStage4a_fu_300_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_solveStage4a_fu_300_ap_ready = ap_const_logic_1)) then 
                    grp_solveStage4a_fu_300_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_solveStage4b_fu_310_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_solveStage4b_fu_310_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
                    grp_solveStage4b_fu_310_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_solveStage4b_fu_310_ap_ready = ap_const_logic_1)) then 
                    grp_solveStage4b_fu_310_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_solveStage5a_fu_290_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_solveStage5a_fu_290_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
                    grp_solveStage5a_fu_290_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_solveStage5a_fu_290_ap_ready = ap_const_logic_1)) then 
                    grp_solveStage5a_fu_290_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_solveStage5b_fu_280_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_solveStage5b_fu_280_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state139)) then 
                    grp_solveStage5b_fu_280_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_solveStage5b_fu_280_ap_ready = ap_const_logic_1)) then 
                    grp_solveStage5b_fu_280_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_turnCube_fu_320_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_turnCube_fu_320_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state127)) then 
                    grp_turnCube_fu_320_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_turnCube_fu_320_ap_ready = ap_const_logic_1)) then 
                    grp_turnCube_fu_320_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    moveCounter_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_445_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                moveCounter_V <= ap_const_lv8_0;
            elsif ((((grp_rotateCubeVertical_fu_353_moveCounter_V_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state72)) or ((grp_rotateCubeVertical_fu_353_moveCounter_V_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state70)))) then 
                moveCounter_V <= grp_rotateCubeVertical_fu_353_moveCounter_V_o;
            elsif ((((grp_rotateCubeHorizontal_fu_343_moveCounter_V_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state98)) or ((grp_rotateCubeHorizontal_fu_343_moveCounter_V_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state94)) or ((grp_rotateCubeHorizontal_fu_343_moveCounter_V_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state90)) or ((grp_rotateCubeHorizontal_fu_343_moveCounter_V_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state86)) or ((grp_rotateCubeHorizontal_fu_343_moveCounter_V_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state74)) or ((grp_rotateCubeHorizontal_fu_343_moveCounter_V_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state68)) or ((grp_rotateCubeHorizontal_fu_343_moveCounter_V_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state62)) or ((grp_rotateCubeHorizontal_fu_343_moveCounter_V_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state56)) or ((grp_rotateCubeHorizontal_fu_343_moveCounter_V_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50)) or ((grp_rotateCubeHorizontal_fu_343_moveCounter_V_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state36)) or ((grp_rotateCubeHorizontal_fu_343_moveCounter_V_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((grp_rotateCubeHorizontal_fu_343_moveCounter_V_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((grp_rotateCubeHorizontal_fu_343_moveCounter_V_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
                moveCounter_V <= grp_rotateCubeHorizontal_fu_343_moveCounter_V_o;
            elsif ((((grp_solveStage1_fu_332_moveCounter_V_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((grp_solveStage1_fu_332_moveCounter_V_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((grp_solveStage1_fu_332_moveCounter_V_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((grp_solveStage1_fu_332_moveCounter_V_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
                moveCounter_V <= grp_solveStage1_fu_332_moveCounter_V_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state128) and (grp_turnCube_fu_320_moveCounter_V_o_ap_vld = ap_const_logic_1) and (((p_29_reg_681 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_23_reg_669 = ap_const_lv1_1) and (p_27_reg_689 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_28_reg_677 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_22_reg_665 = ap_const_lv1_1) and (p_26_reg_693 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0))))) then 
                moveCounter_V <= grp_turnCube_fu_320_moveCounter_V_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state110) and (grp_solveStage4b_fu_310_moveCounter_V_o_ap_vld = ap_const_logic_1))) then 
                moveCounter_V <= grp_solveStage4b_fu_310_moveCounter_V_o;
            elsif (((or_cond_reg_648 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state104) and (grp_solveStage4a_fu_300_moveCounter_V_o_ap_vld = ap_const_logic_1))) then 
                moveCounter_V <= grp_solveStage4a_fu_300_moveCounter_V_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state128) and (grp_solveStage5a_fu_290_moveCounter_V_o_ap_vld = ap_const_logic_1) and (((p_26_reg_693 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_1) and (p_24_reg_673 = ap_const_lv1_1)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_29_reg_681 = ap_const_lv1_0)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_27_reg_689 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_1)) or ((p_23_reg_669 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_1)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_1) and (p_28_reg_677 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_28_reg_677 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_29_reg_681 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0))))) then 
                moveCounter_V <= grp_solveStage5a_fu_290_moveCounter_V_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state140) and (grp_solveStage5b_fu_280_moveCounter_V_o_ap_vld = ap_const_logic_1))) then 
                moveCounter_V <= grp_solveStage5b_fu_280_moveCounter_V_o;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state66) and (grp_solveStage2_fu_262_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state60) and (grp_solveStage2_fu_262_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state54) and (grp_solveStage2_fu_262_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state48) and (grp_solveStage2_fu_262_moveCounter_V_o_ap_vld = ap_const_logic_1)))) then 
                moveCounter_V <= grp_solveStage2_fu_262_moveCounter_V_o;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state96) and (grp_solveStage3_fu_242_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state92) and (grp_solveStage3_fu_242_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state88) and (grp_solveStage3_fu_242_moveCounter_V_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state84) and (grp_solveStage3_fu_242_moveCounter_V_o_ap_vld = ap_const_logic_1)))) then 
                moveCounter_V <= grp_solveStage3_fu_242_moveCounter_V_o;
            end if; 
        end if;
    end process;

    p_2_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_445_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_2_reg_220 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                p_2_reg_220 <= j_V_reg_575;
            end if; 
        end if;
    end process;

    p_s_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_485_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_s_reg_209 <= i_V_reg_562;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_s_reg_209 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    reg_436_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
                reg_436 <= cubieColor_V_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
                reg_436 <= cubieColor_V_q0;
            end if; 
        end if;
    end process;

    t_V_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state143)) then 
                t_V_reg_231 <= i_V_1_reg_720;
            elsif (((grp_optimizeCube_fu_363_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state141))) then 
                t_V_reg_231 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state142)) then
                i_V_1_reg_720 <= i_V_1_fu_548_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_V_reg_562 <= i_V_fu_451_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_V_reg_575 <= j_V_fu_491_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_optimizeCube_fu_363_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state141))) then
                op2_V_assign_reg_712 <= grp_optimizeCube_fu_363_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state102)) then
                or_cond_reg_648 <= or_cond_fu_521_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_cornerCorrect_fu_400_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state112))) then
                p_22_reg_665 <= grp_cornerCorrect_fu_400_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_cornerCorrect_fu_400_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state114))) then
                p_23_reg_669 <= grp_cornerCorrect_fu_400_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_cornerCorrect_fu_400_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state116))) then
                p_24_reg_673 <= grp_cornerCorrect_fu_400_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state126_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state126) and (ap_predicate_op373_call_state126 = ap_const_boolean_1))) then
                p_26_reg_693 <= grp_cornerCorrect_fu_400_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state124_on_subcall_done) and (p_24_reg_673 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state124))) then
                p_27_reg_689 <= grp_cornerCorrect_fu_400_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_cornerCorrect_fu_400_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state118))) then
                p_28_reg_677 <= grp_cornerCorrect_fu_400_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_cornerCorrect_fu_400_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state120))) then
                p_29_reg_681 <= grp_cornerCorrect_fu_400_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_cornerCorrect_fu_400_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state122))) then
                p_30_reg_685 <= grp_cornerCorrect_fu_400_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((grp_findEdge_fu_372_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((grp_findEdge_fu_372_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((grp_findEdge_fu_372_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((grp_findEdge_fu_372_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then
                reg_431 <= grp_findEdge_fu_372_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state101)) then
                tmp_53_reg_638 <= grp_fu_411_p2;
                tmp_54_reg_643 <= grp_fu_416_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state107)) then
                tmp_57_reg_652 <= grp_fu_421_p2;
                tmp_58_reg_657 <= grp_fu_426_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_543_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state142))) then
                    tmp_61_reg_725(7 downto 0) <= tmp_61_fu_554_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_445_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_7_reg_567 <= tmp_7_fu_473_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_485_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    tmp_8_cast_reg_580(6 downto 0) <= tmp_8_cast_fu_506_p1(6 downto 0);
            end if;
        end if;
    end process;
    tmp_8_cast_reg_580(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    tmp_61_reg_725(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state14, grp_findEdge_fu_372_ap_done, ap_CS_fsm_state20, ap_CS_fsm_state26, ap_CS_fsm_state32, ap_CS_fsm_state2, tmp_fu_445_p2, ap_CS_fsm_state3, tmp_s_fu_485_p2, or_cond_fu_521_p2, ap_CS_fsm_state102, grp_cornerCorrect_fu_400_ap_return, p_22_reg_665, ap_CS_fsm_state112, grp_cornerCorrect_fu_400_ap_done, p_23_reg_669, ap_CS_fsm_state114, p_24_reg_673, ap_CS_fsm_state116, ap_CS_fsm_state118, p_29_reg_681, ap_CS_fsm_state120, ap_CS_fsm_state122, ap_CS_fsm_state124, ap_block_state124_on_subcall_done, ap_CS_fsm_state126, ap_block_state126_on_subcall_done, ap_CS_fsm_state141, grp_optimizeCube_fu_363_ap_done, ap_CS_fsm_state142, exitcond_fu_543_p2, grp_solveStage3_fu_242_ap_done, grp_solveStage2_fu_262_ap_done, grp_solveStage5b_fu_280_ap_done, grp_solveStage4b_fu_310_ap_done, grp_solveStage1_fu_332_ap_done, grp_rotateCubeHorizontal_fu_343_ap_done, grp_rotateCubeVertical_fu_353_ap_done, grp_edgeCorrect_fu_385_ap_done, grp_edgeCorrect_fu_385_ap_return, ap_CS_fsm_state84, ap_CS_fsm_state88, ap_CS_fsm_state92, ap_CS_fsm_state96, ap_CS_fsm_state48, ap_CS_fsm_state54, ap_CS_fsm_state60, ap_CS_fsm_state66, ap_CS_fsm_state140, ap_CS_fsm_state128, ap_CS_fsm_state104, ap_CS_fsm_state110, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state18, ap_CS_fsm_state24, ap_CS_fsm_state30, ap_CS_fsm_state36, ap_CS_fsm_state50, ap_CS_fsm_state56, ap_CS_fsm_state62, ap_CS_fsm_state68, ap_CS_fsm_state74, ap_CS_fsm_state86, ap_CS_fsm_state90, ap_CS_fsm_state94, ap_CS_fsm_state98, ap_CS_fsm_state70, ap_CS_fsm_state72, ap_CS_fsm_state138, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state76, ap_CS_fsm_state78, ap_CS_fsm_state80, ap_CS_fsm_state82, ap_CS_fsm_state132, ap_CS_fsm_state134, ap_CS_fsm_state136, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state52, ap_CS_fsm_state58, ap_CS_fsm_state64, ap_CS_fsm_state108, or_cond5_fu_537_p2, ap_block_state104_on_subcall_done, ap_block_state128_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_445_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_s_fu_485_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_edgeCorrect_fu_385_ap_done = ap_const_logic_1) and (grp_edgeCorrect_fu_385_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                elsif (((grp_edgeCorrect_fu_385_ap_done = ap_const_logic_1) and (grp_edgeCorrect_fu_385_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_edgeCorrect_fu_385_ap_done = ap_const_logic_1) and (grp_edgeCorrect_fu_385_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                elsif (((grp_edgeCorrect_fu_385_ap_done = ap_const_logic_1) and (grp_edgeCorrect_fu_385_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_edgeCorrect_fu_385_ap_done = ap_const_logic_1) and (grp_edgeCorrect_fu_385_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                elsif (((grp_edgeCorrect_fu_385_ap_done = ap_const_logic_1) and (grp_edgeCorrect_fu_385_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((grp_edgeCorrect_fu_385_ap_done = ap_const_logic_1) and (grp_edgeCorrect_fu_385_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                elsif (((grp_edgeCorrect_fu_385_ap_done = ap_const_logic_1) and (grp_edgeCorrect_fu_385_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((grp_findEdge_fu_372_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((grp_solveStage1_fu_332_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((grp_rotateCubeHorizontal_fu_343_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((grp_findEdge_fu_372_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((grp_solveStage1_fu_332_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((grp_rotateCubeHorizontal_fu_343_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((grp_findEdge_fu_372_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((grp_solveStage1_fu_332_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((grp_rotateCubeHorizontal_fu_343_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((grp_findEdge_fu_372_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((grp_solveStage1_fu_332_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (((grp_rotateCubeHorizontal_fu_343_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                if (((grp_cornerCorrect_fu_400_ap_done = ap_const_logic_1) and (grp_cornerCorrect_fu_400_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                elsif (((grp_cornerCorrect_fu_400_ap_done = ap_const_logic_1) and (grp_cornerCorrect_fu_400_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                if (((grp_cornerCorrect_fu_400_ap_done = ap_const_logic_1) and (grp_cornerCorrect_fu_400_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                elsif (((grp_cornerCorrect_fu_400_ap_done = ap_const_logic_1) and (grp_cornerCorrect_fu_400_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                if (((grp_cornerCorrect_fu_400_ap_done = ap_const_logic_1) and (grp_cornerCorrect_fu_400_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                elsif (((grp_cornerCorrect_fu_400_ap_done = ap_const_logic_1) and (grp_cornerCorrect_fu_400_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                if (((grp_cornerCorrect_fu_400_ap_done = ap_const_logic_1) and (grp_cornerCorrect_fu_400_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state69;
                elsif (((grp_cornerCorrect_fu_400_ap_done = ap_const_logic_1) and (grp_cornerCorrect_fu_400_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                if (((grp_cornerCorrect_fu_400_ap_done = ap_const_logic_1) and (grp_cornerCorrect_fu_400_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                elsif (((grp_cornerCorrect_fu_400_ap_done = ap_const_logic_1) and (grp_cornerCorrect_fu_400_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                if (((grp_solveStage2_fu_262_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                if (((grp_rotateCubeHorizontal_fu_343_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                if (((grp_cornerCorrect_fu_400_ap_done = ap_const_logic_1) and (grp_cornerCorrect_fu_400_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                elsif (((grp_cornerCorrect_fu_400_ap_done = ap_const_logic_1) and (grp_cornerCorrect_fu_400_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                if (((grp_solveStage2_fu_262_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state54))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state54;
                end if;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                if (((grp_rotateCubeHorizontal_fu_343_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                if (((grp_cornerCorrect_fu_400_ap_done = ap_const_logic_1) and (grp_cornerCorrect_fu_400_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                elsif (((grp_cornerCorrect_fu_400_ap_done = ap_const_logic_1) and (grp_cornerCorrect_fu_400_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                if (((grp_solveStage2_fu_262_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state60))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                if (((grp_rotateCubeHorizontal_fu_343_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state62))) then
                    ap_NS_fsm <= ap_ST_fsm_state63;
                else
                    ap_NS_fsm <= ap_ST_fsm_state62;
                end if;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                if (((grp_cornerCorrect_fu_400_ap_done = ap_const_logic_1) and (grp_cornerCorrect_fu_400_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state64))) then
                    ap_NS_fsm <= ap_ST_fsm_state67;
                elsif (((grp_cornerCorrect_fu_400_ap_done = ap_const_logic_1) and (grp_cornerCorrect_fu_400_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state64))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                if (((grp_solveStage2_fu_262_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then
                    ap_NS_fsm <= ap_ST_fsm_state67;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                if (((grp_rotateCubeHorizontal_fu_343_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state68))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state68;
                end if;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                if (((grp_rotateCubeVertical_fu_353_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                else
                    ap_NS_fsm <= ap_ST_fsm_state70;
                end if;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                if (((grp_rotateCubeVertical_fu_353_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state72))) then
                    ap_NS_fsm <= ap_ST_fsm_state73;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                if (((grp_rotateCubeHorizontal_fu_343_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state74))) then
                    ap_NS_fsm <= ap_ST_fsm_state75;
                else
                    ap_NS_fsm <= ap_ST_fsm_state74;
                end if;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                if (((grp_edgeCorrect_fu_385_ap_done = ap_const_logic_1) and (grp_edgeCorrect_fu_385_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state76))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                elsif (((grp_edgeCorrect_fu_385_ap_done = ap_const_logic_1) and (grp_edgeCorrect_fu_385_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state76))) then
                    ap_NS_fsm <= ap_ST_fsm_state77;
                else
                    ap_NS_fsm <= ap_ST_fsm_state76;
                end if;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                if (((grp_edgeCorrect_fu_385_ap_done = ap_const_logic_1) and (grp_edgeCorrect_fu_385_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state78))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                elsif (((grp_edgeCorrect_fu_385_ap_done = ap_const_logic_1) and (grp_edgeCorrect_fu_385_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state78))) then
                    ap_NS_fsm <= ap_ST_fsm_state79;
                else
                    ap_NS_fsm <= ap_ST_fsm_state78;
                end if;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                if (((grp_edgeCorrect_fu_385_ap_done = ap_const_logic_1) and (grp_edgeCorrect_fu_385_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state80))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                elsif (((grp_edgeCorrect_fu_385_ap_done = ap_const_logic_1) and (grp_edgeCorrect_fu_385_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state80))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                else
                    ap_NS_fsm <= ap_ST_fsm_state80;
                end if;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                if (((grp_edgeCorrect_fu_385_ap_done = ap_const_logic_1) and (grp_edgeCorrect_fu_385_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state82))) then
                    ap_NS_fsm <= ap_ST_fsm_state99;
                elsif (((grp_edgeCorrect_fu_385_ap_done = ap_const_logic_1) and (grp_edgeCorrect_fu_385_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state82))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_state82;
                end if;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                if (((grp_solveStage3_fu_242_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state84))) then
                    ap_NS_fsm <= ap_ST_fsm_state85;
                else
                    ap_NS_fsm <= ap_ST_fsm_state84;
                end if;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                if (((grp_rotateCubeHorizontal_fu_343_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state86))) then
                    ap_NS_fsm <= ap_ST_fsm_state87;
                else
                    ap_NS_fsm <= ap_ST_fsm_state86;
                end if;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                if (((grp_solveStage3_fu_242_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state88))) then
                    ap_NS_fsm <= ap_ST_fsm_state89;
                else
                    ap_NS_fsm <= ap_ST_fsm_state88;
                end if;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                if (((grp_rotateCubeHorizontal_fu_343_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state90))) then
                    ap_NS_fsm <= ap_ST_fsm_state91;
                else
                    ap_NS_fsm <= ap_ST_fsm_state90;
                end if;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                if (((grp_solveStage3_fu_242_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state92))) then
                    ap_NS_fsm <= ap_ST_fsm_state93;
                else
                    ap_NS_fsm <= ap_ST_fsm_state92;
                end if;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                if (((grp_rotateCubeHorizontal_fu_343_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state94))) then
                    ap_NS_fsm <= ap_ST_fsm_state95;
                else
                    ap_NS_fsm <= ap_ST_fsm_state94;
                end if;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                if (((grp_solveStage3_fu_242_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state96))) then
                    ap_NS_fsm <= ap_ST_fsm_state97;
                else
                    ap_NS_fsm <= ap_ST_fsm_state96;
                end if;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                if (((grp_rotateCubeHorizontal_fu_343_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state98))) then
                    ap_NS_fsm <= ap_ST_fsm_state75;
                else
                    ap_NS_fsm <= ap_ST_fsm_state98;
                end if;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                if (((or_cond_fu_521_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state102))) then
                    ap_NS_fsm <= ap_ST_fsm_state104;
                else
                    ap_NS_fsm <= ap_ST_fsm_state103;
                end if;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state104) and (ap_const_boolean_0 = ap_block_state104_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state105;
                else
                    ap_NS_fsm <= ap_ST_fsm_state104;
                end if;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                if (((or_cond5_fu_537_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state108))) then
                    ap_NS_fsm <= ap_ST_fsm_state111;
                else
                    ap_NS_fsm <= ap_ST_fsm_state109;
                end if;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                if (((grp_solveStage4b_fu_310_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state110))) then
                    ap_NS_fsm <= ap_ST_fsm_state105;
                else
                    ap_NS_fsm <= ap_ST_fsm_state110;
                end if;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                if (((grp_cornerCorrect_fu_400_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state112))) then
                    ap_NS_fsm <= ap_ST_fsm_state113;
                else
                    ap_NS_fsm <= ap_ST_fsm_state112;
                end if;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                if (((grp_cornerCorrect_fu_400_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state114))) then
                    ap_NS_fsm <= ap_ST_fsm_state115;
                else
                    ap_NS_fsm <= ap_ST_fsm_state114;
                end if;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                if (((p_23_reg_669 = ap_const_lv1_1) and (grp_cornerCorrect_fu_400_ap_done = ap_const_logic_1) and (p_22_reg_665 = ap_const_lv1_1) and (grp_cornerCorrect_fu_400_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state116))) then
                    ap_NS_fsm <= ap_ST_fsm_state129;
                elsif (((grp_cornerCorrect_fu_400_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state116) and (((p_23_reg_669 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1) and (grp_cornerCorrect_fu_400_ap_return = ap_const_lv1_0)) or ((p_22_reg_665 = ap_const_lv1_1) and (grp_cornerCorrect_fu_400_ap_return = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state126;
                elsif (((grp_cornerCorrect_fu_400_ap_done = ap_const_logic_1) and (p_22_reg_665 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_0) and (grp_cornerCorrect_fu_400_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state116))) then
                    ap_NS_fsm <= ap_ST_fsm_state125;
                elsif (((p_23_reg_669 = ap_const_lv1_1) and (grp_cornerCorrect_fu_400_ap_done = ap_const_logic_1) and (grp_cornerCorrect_fu_400_ap_return = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state116))) then
                    ap_NS_fsm <= ap_ST_fsm_state124;
                elsif (((p_23_reg_669 = ap_const_lv1_1) and (grp_cornerCorrect_fu_400_ap_done = ap_const_logic_1) and (p_22_reg_665 = ap_const_lv1_0) and (grp_cornerCorrect_fu_400_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state116))) then
                    ap_NS_fsm <= ap_ST_fsm_state123;
                elsif (((grp_cornerCorrect_fu_400_ap_done = ap_const_logic_1) and (grp_cornerCorrect_fu_400_ap_return = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state116))) then
                    ap_NS_fsm <= ap_ST_fsm_state119;
                elsif (((grp_cornerCorrect_fu_400_ap_done = ap_const_logic_1) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0) and (grp_cornerCorrect_fu_400_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state116))) then
                    ap_NS_fsm <= ap_ST_fsm_state117;
                else
                    ap_NS_fsm <= ap_ST_fsm_state116;
                end if;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                if (((grp_cornerCorrect_fu_400_ap_done = ap_const_logic_1) and (grp_cornerCorrect_fu_400_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state118))) then
                    ap_NS_fsm <= ap_ST_fsm_state127;
                elsif (((grp_cornerCorrect_fu_400_ap_done = ap_const_logic_1) and (grp_cornerCorrect_fu_400_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state118))) then
                    ap_NS_fsm <= ap_ST_fsm_state119;
                else
                    ap_NS_fsm <= ap_ST_fsm_state118;
                end if;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                if (((grp_cornerCorrect_fu_400_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state120))) then
                    ap_NS_fsm <= ap_ST_fsm_state121;
                else
                    ap_NS_fsm <= ap_ST_fsm_state120;
                end if;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state122 => 
                if (((grp_cornerCorrect_fu_400_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state122) and (((p_29_reg_681 = ap_const_lv1_1) and (grp_cornerCorrect_fu_400_ap_return = ap_const_lv1_1)) or ((p_29_reg_681 = ap_const_lv1_0) and (grp_cornerCorrect_fu_400_ap_return = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state130;
                elsif (((grp_cornerCorrect_fu_400_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state122) and (((p_29_reg_681 = ap_const_lv1_1) and (grp_cornerCorrect_fu_400_ap_return = ap_const_lv1_0)) or ((grp_cornerCorrect_fu_400_ap_return = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state127;
                else
                    ap_NS_fsm <= ap_ST_fsm_state122;
                end if;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                if (((ap_const_boolean_0 = ap_block_state124_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state124) and ((p_24_reg_673 = ap_const_lv1_1) or (grp_cornerCorrect_fu_400_ap_return = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state130;
                elsif (((ap_const_boolean_0 = ap_block_state124_on_subcall_done) and (p_24_reg_673 = ap_const_lv1_0) and (grp_cornerCorrect_fu_400_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state124))) then
                    ap_NS_fsm <= ap_ST_fsm_state127;
                else
                    ap_NS_fsm <= ap_ST_fsm_state124;
                end if;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state126 => 
                if (((ap_const_boolean_0 = ap_block_state126_on_subcall_done) and (p_24_reg_673 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_1) and (grp_cornerCorrect_fu_400_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state126))) then
                    ap_NS_fsm <= ap_ST_fsm_state131;
                elsif (((ap_const_boolean_0 = ap_block_state126_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state126) and (((p_24_reg_673 = ap_const_lv1_1) and (grp_cornerCorrect_fu_400_ap_return = ap_const_lv1_0)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_0)) or ((p_23_reg_669 = ap_const_lv1_1) and (p_24_reg_673 = ap_const_lv1_0)) or ((grp_cornerCorrect_fu_400_ap_return = ap_const_lv1_1) and (p_24_reg_673 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state130;
                elsif (((ap_const_boolean_0 = ap_block_state126_on_subcall_done) and (p_24_reg_673 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (grp_cornerCorrect_fu_400_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state126))) then
                    ap_NS_fsm <= ap_ST_fsm_state127;
                else
                    ap_NS_fsm <= ap_ST_fsm_state126;
                end if;
            when ap_ST_fsm_state127 => 
                ap_NS_fsm <= ap_ST_fsm_state128;
            when ap_ST_fsm_state128 => 
                if (((ap_const_boolean_0 = ap_block_state128_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state128))) then
                    ap_NS_fsm <= ap_ST_fsm_state111;
                else
                    ap_NS_fsm <= ap_ST_fsm_state128;
                end if;
            when ap_ST_fsm_state129 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state130 => 
                ap_NS_fsm <= ap_ST_fsm_state128;
            when ap_ST_fsm_state131 => 
                ap_NS_fsm <= ap_ST_fsm_state132;
            when ap_ST_fsm_state132 => 
                if (((grp_edgeCorrect_fu_385_ap_done = ap_const_logic_1) and (grp_edgeCorrect_fu_385_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state132))) then
                    ap_NS_fsm <= ap_ST_fsm_state139;
                elsif (((grp_edgeCorrect_fu_385_ap_done = ap_const_logic_1) and (grp_edgeCorrect_fu_385_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state132))) then
                    ap_NS_fsm <= ap_ST_fsm_state133;
                else
                    ap_NS_fsm <= ap_ST_fsm_state132;
                end if;
            when ap_ST_fsm_state133 => 
                ap_NS_fsm <= ap_ST_fsm_state134;
            when ap_ST_fsm_state134 => 
                if (((grp_edgeCorrect_fu_385_ap_done = ap_const_logic_1) and (grp_edgeCorrect_fu_385_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state134))) then
                    ap_NS_fsm <= ap_ST_fsm_state139;
                elsif (((grp_edgeCorrect_fu_385_ap_done = ap_const_logic_1) and (grp_edgeCorrect_fu_385_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state134))) then
                    ap_NS_fsm <= ap_ST_fsm_state135;
                else
                    ap_NS_fsm <= ap_ST_fsm_state134;
                end if;
            when ap_ST_fsm_state135 => 
                ap_NS_fsm <= ap_ST_fsm_state136;
            when ap_ST_fsm_state136 => 
                if (((grp_edgeCorrect_fu_385_ap_done = ap_const_logic_1) and (grp_edgeCorrect_fu_385_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state136))) then
                    ap_NS_fsm <= ap_ST_fsm_state139;
                elsif (((grp_edgeCorrect_fu_385_ap_done = ap_const_logic_1) and (grp_edgeCorrect_fu_385_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state136))) then
                    ap_NS_fsm <= ap_ST_fsm_state137;
                else
                    ap_NS_fsm <= ap_ST_fsm_state136;
                end if;
            when ap_ST_fsm_state137 => 
                ap_NS_fsm <= ap_ST_fsm_state138;
            when ap_ST_fsm_state138 => 
                if (((grp_edgeCorrect_fu_385_ap_done = ap_const_logic_1) and (grp_edgeCorrect_fu_385_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state138))) then
                    ap_NS_fsm <= ap_ST_fsm_state141;
                elsif (((grp_edgeCorrect_fu_385_ap_done = ap_const_logic_1) and (grp_edgeCorrect_fu_385_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state138))) then
                    ap_NS_fsm <= ap_ST_fsm_state139;
                else
                    ap_NS_fsm <= ap_ST_fsm_state138;
                end if;
            when ap_ST_fsm_state139 => 
                ap_NS_fsm <= ap_ST_fsm_state140;
            when ap_ST_fsm_state140 => 
                if (((grp_solveStage5b_fu_280_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state140))) then
                    ap_NS_fsm <= ap_ST_fsm_state131;
                else
                    ap_NS_fsm <= ap_ST_fsm_state140;
                end if;
            when ap_ST_fsm_state141 => 
                if (((grp_optimizeCube_fu_363_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state141))) then
                    ap_NS_fsm <= ap_ST_fsm_state142;
                else
                    ap_NS_fsm <= ap_ST_fsm_state141;
                end if;
            when ap_ST_fsm_state142 => 
                if (((exitcond_fu_543_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state142))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state143;
                end if;
            when ap_ST_fsm_state143 => 
                ap_NS_fsm <= ap_ST_fsm_state142;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state100 <= ap_CS_fsm(99);
    ap_CS_fsm_state101 <= ap_CS_fsm(100);
    ap_CS_fsm_state102 <= ap_CS_fsm(101);
    ap_CS_fsm_state103 <= ap_CS_fsm(102);
    ap_CS_fsm_state104 <= ap_CS_fsm(103);
    ap_CS_fsm_state105 <= ap_CS_fsm(104);
    ap_CS_fsm_state106 <= ap_CS_fsm(105);
    ap_CS_fsm_state107 <= ap_CS_fsm(106);
    ap_CS_fsm_state108 <= ap_CS_fsm(107);
    ap_CS_fsm_state109 <= ap_CS_fsm(108);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state110 <= ap_CS_fsm(109);
    ap_CS_fsm_state111 <= ap_CS_fsm(110);
    ap_CS_fsm_state112 <= ap_CS_fsm(111);
    ap_CS_fsm_state113 <= ap_CS_fsm(112);
    ap_CS_fsm_state114 <= ap_CS_fsm(113);
    ap_CS_fsm_state115 <= ap_CS_fsm(114);
    ap_CS_fsm_state116 <= ap_CS_fsm(115);
    ap_CS_fsm_state117 <= ap_CS_fsm(116);
    ap_CS_fsm_state118 <= ap_CS_fsm(117);
    ap_CS_fsm_state119 <= ap_CS_fsm(118);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state120 <= ap_CS_fsm(119);
    ap_CS_fsm_state121 <= ap_CS_fsm(120);
    ap_CS_fsm_state122 <= ap_CS_fsm(121);
    ap_CS_fsm_state123 <= ap_CS_fsm(122);
    ap_CS_fsm_state124 <= ap_CS_fsm(123);
    ap_CS_fsm_state125 <= ap_CS_fsm(124);
    ap_CS_fsm_state126 <= ap_CS_fsm(125);
    ap_CS_fsm_state127 <= ap_CS_fsm(126);
    ap_CS_fsm_state128 <= ap_CS_fsm(127);
    ap_CS_fsm_state129 <= ap_CS_fsm(128);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state130 <= ap_CS_fsm(129);
    ap_CS_fsm_state131 <= ap_CS_fsm(130);
    ap_CS_fsm_state132 <= ap_CS_fsm(131);
    ap_CS_fsm_state133 <= ap_CS_fsm(132);
    ap_CS_fsm_state134 <= ap_CS_fsm(133);
    ap_CS_fsm_state135 <= ap_CS_fsm(134);
    ap_CS_fsm_state136 <= ap_CS_fsm(135);
    ap_CS_fsm_state137 <= ap_CS_fsm(136);
    ap_CS_fsm_state138 <= ap_CS_fsm(137);
    ap_CS_fsm_state139 <= ap_CS_fsm(138);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state140 <= ap_CS_fsm(139);
    ap_CS_fsm_state141 <= ap_CS_fsm(140);
    ap_CS_fsm_state142 <= ap_CS_fsm(141);
    ap_CS_fsm_state143 <= ap_CS_fsm(142);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_CS_fsm_state91 <= ap_CS_fsm(90);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_CS_fsm_state98 <= ap_CS_fsm(97);
    ap_CS_fsm_state99 <= ap_CS_fsm(98);

    ap_block_state104_on_subcall_done_assign_proc : process(or_cond_reg_648, grp_solveStage4a_fu_300_ap_done)
    begin
                ap_block_state104_on_subcall_done <= ((grp_solveStage4a_fu_300_ap_done = ap_const_logic_0) and (or_cond_reg_648 = ap_const_lv1_0));
    end process;


    ap_block_state124_on_subcall_done_assign_proc : process(grp_cornerCorrect_fu_400_ap_done, p_24_reg_673)
    begin
                ap_block_state124_on_subcall_done <= ((grp_cornerCorrect_fu_400_ap_done = ap_const_logic_0) and (p_24_reg_673 = ap_const_lv1_0));
    end process;


    ap_block_state126_on_subcall_done_assign_proc : process(grp_cornerCorrect_fu_400_ap_done, ap_predicate_op373_call_state126, ap_predicate_op375_call_state126)
    begin
                ap_block_state126_on_subcall_done <= (((grp_cornerCorrect_fu_400_ap_done = ap_const_logic_0) and (ap_predicate_op375_call_state126 = ap_const_boolean_1)) or ((grp_cornerCorrect_fu_400_ap_done = ap_const_logic_0) and (ap_predicate_op373_call_state126 = ap_const_boolean_1)));
    end process;


    ap_block_state128_on_subcall_done_assign_proc : process(grp_solveStage5a_fu_290_ap_done, grp_turnCube_fu_320_ap_done, ap_predicate_op381_call_state128, ap_predicate_op383_call_state128)
    begin
                ap_block_state128_on_subcall_done <= (((grp_solveStage5a_fu_290_ap_done = ap_const_logic_0) and (ap_predicate_op383_call_state128 = ap_const_boolean_1)) or ((grp_turnCube_fu_320_ap_done = ap_const_logic_0) and (ap_predicate_op381_call_state128 = ap_const_boolean_1)));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state142, exitcond_fu_543_p2)
    begin
        if (((exitcond_fu_543_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state142))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op373_call_state126_assign_proc : process(p_23_reg_669, p_24_reg_673)
    begin
                ap_predicate_op373_call_state126 <= ((p_24_reg_673 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0));
    end process;


    ap_predicate_op375_call_state126_assign_proc : process(p_23_reg_669, p_24_reg_673)
    begin
                ap_predicate_op375_call_state126 <= ((p_24_reg_673 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_1));
    end process;


    ap_predicate_op381_call_state128_assign_proc : process(p_22_reg_665, p_23_reg_669, p_24_reg_673, p_28_reg_677, p_29_reg_681, p_30_reg_685, p_27_reg_689, p_26_reg_693)
    begin
                ap_predicate_op381_call_state128 <= (((p_29_reg_681 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_23_reg_669 = ap_const_lv1_1) and (p_27_reg_689 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_28_reg_677 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_22_reg_665 = ap_const_lv1_1) and (p_26_reg_693 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0)));
    end process;


    ap_predicate_op383_call_state128_assign_proc : process(p_22_reg_665, p_23_reg_669, p_24_reg_673, p_28_reg_677, p_29_reg_681, p_30_reg_685, p_27_reg_689, p_26_reg_693)
    begin
                ap_predicate_op383_call_state128 <= (((p_26_reg_693 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_1) and (p_24_reg_673 = ap_const_lv1_1)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_29_reg_681 = ap_const_lv1_0)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_27_reg_689 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_1)) or ((p_23_reg_669 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_1)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_1) and (p_28_reg_677 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_28_reg_677 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_29_reg_681 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state142, exitcond_fu_543_p2)
    begin
        if (((exitcond_fu_543_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state142))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    cubieColor_V_address0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state20, ap_CS_fsm_state26, ap_CS_fsm_state32, ap_CS_fsm_state100, ap_CS_fsm_state106, tmp_8_cast_reg_580, ap_CS_fsm_state101, or_cond_reg_648, ap_CS_fsm_state107, p_22_reg_665, ap_CS_fsm_state112, p_23_reg_669, ap_CS_fsm_state114, p_24_reg_673, ap_CS_fsm_state116, p_28_reg_677, ap_CS_fsm_state118, p_29_reg_681, ap_CS_fsm_state120, p_30_reg_685, ap_CS_fsm_state122, p_27_reg_689, ap_CS_fsm_state124, p_26_reg_693, ap_CS_fsm_state126, ap_predicate_op373_call_state126, ap_predicate_op375_call_state126, grp_solveStage3_fu_242_cubieColor_V_address0, grp_solveStage2_fu_262_cubieColor_V_address0, grp_solveStage5b_fu_280_cubieColor_V_address0, grp_solveStage5a_fu_290_cubieColor_V_address0, grp_solveStage4a_fu_300_cubieColor_V_address0, grp_solveStage4b_fu_310_cubieColor_V_address0, grp_turnCube_fu_320_cubieColor_V_address0, grp_solveStage1_fu_332_cubieColor_V_address0, grp_rotateCubeHorizontal_fu_343_cubieColor_V_address0, grp_rotateCubeVertical_fu_353_cubieColor_V_address0, grp_findEdge_fu_372_cubieColor_V_address0, grp_edgeCorrect_fu_385_cubieColor_V_address0, grp_cornerCorrect_fu_400_cubieColor_V_address0, ap_CS_fsm_state4, ap_CS_fsm_state84, ap_CS_fsm_state88, ap_CS_fsm_state92, ap_CS_fsm_state96, ap_CS_fsm_state48, ap_CS_fsm_state54, ap_CS_fsm_state60, ap_CS_fsm_state66, ap_CS_fsm_state140, ap_CS_fsm_state128, ap_CS_fsm_state104, ap_CS_fsm_state110, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state18, ap_CS_fsm_state24, ap_CS_fsm_state30, ap_CS_fsm_state36, ap_CS_fsm_state50, ap_CS_fsm_state56, ap_CS_fsm_state62, ap_CS_fsm_state68, ap_CS_fsm_state74, ap_CS_fsm_state86, ap_CS_fsm_state90, ap_CS_fsm_state94, ap_CS_fsm_state98, ap_CS_fsm_state70, ap_CS_fsm_state72, ap_CS_fsm_state138, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state76, ap_CS_fsm_state78, ap_CS_fsm_state80, ap_CS_fsm_state82, ap_CS_fsm_state132, ap_CS_fsm_state134, ap_CS_fsm_state136, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state52, ap_CS_fsm_state58, ap_CS_fsm_state64, ap_CS_fsm_state99)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state107)) then 
            cubieColor_V_address0 <= ap_const_lv6_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            cubieColor_V_address0 <= ap_const_lv6_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            cubieColor_V_address0 <= ap_const_lv6_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            cubieColor_V_address0 <= ap_const_lv6_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            cubieColor_V_address0 <= ap_const_lv6_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cubieColor_V_address0 <= tmp_8_cast_reg_580(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state122) or (ap_const_logic_1 = ap_CS_fsm_state120) or (ap_const_logic_1 = ap_CS_fsm_state118) or (ap_const_logic_1 = ap_CS_fsm_state116) or (ap_const_logic_1 = ap_CS_fsm_state114) or (ap_const_logic_1 = ap_CS_fsm_state112) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_const_logic_1 = ap_CS_fsm_state126) and (ap_predicate_op375_call_state126 = ap_const_boolean_1)) or ((ap_const_logic_1 = ap_CS_fsm_state126) and (ap_predicate_op373_call_state126 = ap_const_boolean_1)) or ((p_24_reg_673 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state124)))) then 
            cubieColor_V_address0 <= grp_cornerCorrect_fu_400_cubieColor_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state136) or (ap_const_logic_1 = ap_CS_fsm_state134) or (ap_const_logic_1 = ap_CS_fsm_state132) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state138))) then 
            cubieColor_V_address0 <= grp_edgeCorrect_fu_385_cubieColor_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            cubieColor_V_address0 <= grp_findEdge_fu_372_cubieColor_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            cubieColor_V_address0 <= grp_rotateCubeVertical_fu_353_cubieColor_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            cubieColor_V_address0 <= grp_rotateCubeHorizontal_fu_343_cubieColor_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            cubieColor_V_address0 <= grp_solveStage1_fu_332_cubieColor_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state128) and (((p_29_reg_681 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_23_reg_669 = ap_const_lv1_1) and (p_27_reg_689 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_28_reg_677 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_22_reg_665 = ap_const_lv1_1) and (p_26_reg_693 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0))))) then 
            cubieColor_V_address0 <= grp_turnCube_fu_320_cubieColor_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            cubieColor_V_address0 <= grp_solveStage4b_fu_310_cubieColor_V_address0;
        elsif (((or_cond_reg_648 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state104))) then 
            cubieColor_V_address0 <= grp_solveStage4a_fu_300_cubieColor_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state128) and (((p_26_reg_693 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_1) and (p_24_reg_673 = ap_const_lv1_1)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_29_reg_681 = ap_const_lv1_0)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_27_reg_689 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_1)) or ((p_23_reg_669 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_1)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_1) and (p_28_reg_677 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_28_reg_677 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_29_reg_681 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0))))) then 
            cubieColor_V_address0 <= grp_solveStage5a_fu_290_cubieColor_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state140)) then 
            cubieColor_V_address0 <= grp_solveStage5b_fu_280_cubieColor_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            cubieColor_V_address0 <= grp_solveStage2_fu_262_cubieColor_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state84))) then 
            cubieColor_V_address0 <= grp_solveStage3_fu_242_cubieColor_V_address0;
        else 
            cubieColor_V_address0 <= "XXXXXX";
        end if; 
    end process;


    cubieColor_V_address1_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state20, ap_CS_fsm_state26, ap_CS_fsm_state32, ap_CS_fsm_state100, ap_CS_fsm_state106, ap_CS_fsm_state101, or_cond_reg_648, ap_CS_fsm_state107, p_22_reg_665, ap_CS_fsm_state112, p_23_reg_669, ap_CS_fsm_state114, p_24_reg_673, ap_CS_fsm_state116, p_28_reg_677, ap_CS_fsm_state118, p_29_reg_681, ap_CS_fsm_state120, p_30_reg_685, ap_CS_fsm_state122, p_27_reg_689, ap_CS_fsm_state124, p_26_reg_693, ap_CS_fsm_state126, ap_predicate_op373_call_state126, ap_predicate_op375_call_state126, grp_solveStage3_fu_242_cubieColor_V_address1, grp_solveStage2_fu_262_cubieColor_V_address1, grp_solveStage5b_fu_280_cubieColor_V_address1, grp_solveStage5a_fu_290_cubieColor_V_address1, grp_solveStage4a_fu_300_cubieColor_V_address1, grp_solveStage4b_fu_310_cubieColor_V_address1, grp_turnCube_fu_320_cubieColor_V_address1, grp_solveStage1_fu_332_cubieColor_V_address1, grp_rotateCubeHorizontal_fu_343_cubieColor_V_address1, grp_rotateCubeVertical_fu_353_cubieColor_V_address1, grp_findEdge_fu_372_cubieColor_V_address1, grp_edgeCorrect_fu_385_cubieColor_V_address1, grp_cornerCorrect_fu_400_cubieColor_V_address1, ap_CS_fsm_state84, ap_CS_fsm_state88, ap_CS_fsm_state92, ap_CS_fsm_state96, ap_CS_fsm_state48, ap_CS_fsm_state54, ap_CS_fsm_state60, ap_CS_fsm_state66, ap_CS_fsm_state140, ap_CS_fsm_state128, ap_CS_fsm_state104, ap_CS_fsm_state110, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state18, ap_CS_fsm_state24, ap_CS_fsm_state30, ap_CS_fsm_state36, ap_CS_fsm_state50, ap_CS_fsm_state56, ap_CS_fsm_state62, ap_CS_fsm_state68, ap_CS_fsm_state74, ap_CS_fsm_state86, ap_CS_fsm_state90, ap_CS_fsm_state94, ap_CS_fsm_state98, ap_CS_fsm_state70, ap_CS_fsm_state72, ap_CS_fsm_state138, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state76, ap_CS_fsm_state78, ap_CS_fsm_state80, ap_CS_fsm_state82, ap_CS_fsm_state132, ap_CS_fsm_state134, ap_CS_fsm_state136, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state52, ap_CS_fsm_state58, ap_CS_fsm_state64, ap_CS_fsm_state105)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state107)) then 
            cubieColor_V_address1 <= ap_const_lv6_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            cubieColor_V_address1 <= ap_const_lv6_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            cubieColor_V_address1 <= ap_const_lv6_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            cubieColor_V_address1 <= ap_const_lv6_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            cubieColor_V_address1 <= ap_const_lv6_3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state122) or (ap_const_logic_1 = ap_CS_fsm_state120) or (ap_const_logic_1 = ap_CS_fsm_state118) or (ap_const_logic_1 = ap_CS_fsm_state116) or (ap_const_logic_1 = ap_CS_fsm_state114) or (ap_const_logic_1 = ap_CS_fsm_state112) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_const_logic_1 = ap_CS_fsm_state126) and (ap_predicate_op375_call_state126 = ap_const_boolean_1)) or ((ap_const_logic_1 = ap_CS_fsm_state126) and (ap_predicate_op373_call_state126 = ap_const_boolean_1)) or ((p_24_reg_673 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state124)))) then 
            cubieColor_V_address1 <= grp_cornerCorrect_fu_400_cubieColor_V_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state136) or (ap_const_logic_1 = ap_CS_fsm_state134) or (ap_const_logic_1 = ap_CS_fsm_state132) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state138))) then 
            cubieColor_V_address1 <= grp_edgeCorrect_fu_385_cubieColor_V_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            cubieColor_V_address1 <= grp_findEdge_fu_372_cubieColor_V_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            cubieColor_V_address1 <= grp_rotateCubeVertical_fu_353_cubieColor_V_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            cubieColor_V_address1 <= grp_rotateCubeHorizontal_fu_343_cubieColor_V_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            cubieColor_V_address1 <= grp_solveStage1_fu_332_cubieColor_V_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state128) and (((p_29_reg_681 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_23_reg_669 = ap_const_lv1_1) and (p_27_reg_689 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_28_reg_677 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_22_reg_665 = ap_const_lv1_1) and (p_26_reg_693 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0))))) then 
            cubieColor_V_address1 <= grp_turnCube_fu_320_cubieColor_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            cubieColor_V_address1 <= grp_solveStage4b_fu_310_cubieColor_V_address1;
        elsif (((or_cond_reg_648 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state104))) then 
            cubieColor_V_address1 <= grp_solveStage4a_fu_300_cubieColor_V_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state128) and (((p_26_reg_693 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_1) and (p_24_reg_673 = ap_const_lv1_1)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_29_reg_681 = ap_const_lv1_0)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_27_reg_689 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_1)) or ((p_23_reg_669 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_1)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_1) and (p_28_reg_677 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_28_reg_677 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_29_reg_681 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0))))) then 
            cubieColor_V_address1 <= grp_solveStage5a_fu_290_cubieColor_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state140)) then 
            cubieColor_V_address1 <= grp_solveStage5b_fu_280_cubieColor_V_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            cubieColor_V_address1 <= grp_solveStage2_fu_262_cubieColor_V_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state84))) then 
            cubieColor_V_address1 <= grp_solveStage3_fu_242_cubieColor_V_address1;
        else 
            cubieColor_V_address1 <= "XXXXXX";
        end if; 
    end process;


    cubieColor_V_ce0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state20, ap_CS_fsm_state26, ap_CS_fsm_state32, ap_CS_fsm_state100, ap_CS_fsm_state106, ap_CS_fsm_state101, or_cond_reg_648, ap_CS_fsm_state107, p_22_reg_665, ap_CS_fsm_state112, p_23_reg_669, ap_CS_fsm_state114, p_24_reg_673, ap_CS_fsm_state116, p_28_reg_677, ap_CS_fsm_state118, p_29_reg_681, ap_CS_fsm_state120, p_30_reg_685, ap_CS_fsm_state122, p_27_reg_689, ap_CS_fsm_state124, p_26_reg_693, ap_CS_fsm_state126, ap_predicate_op373_call_state126, ap_predicate_op375_call_state126, grp_solveStage3_fu_242_cubieColor_V_ce0, grp_solveStage2_fu_262_cubieColor_V_ce0, grp_solveStage5b_fu_280_cubieColor_V_ce0, grp_solveStage5a_fu_290_cubieColor_V_ce0, grp_solveStage4a_fu_300_cubieColor_V_ce0, grp_solveStage4b_fu_310_cubieColor_V_ce0, grp_turnCube_fu_320_cubieColor_V_ce0, grp_solveStage1_fu_332_cubieColor_V_ce0, grp_rotateCubeHorizontal_fu_343_cubieColor_V_ce0, grp_rotateCubeVertical_fu_353_cubieColor_V_ce0, grp_findEdge_fu_372_cubieColor_V_ce0, grp_edgeCorrect_fu_385_cubieColor_V_ce0, grp_cornerCorrect_fu_400_cubieColor_V_ce0, ap_CS_fsm_state4, ap_CS_fsm_state84, ap_CS_fsm_state88, ap_CS_fsm_state92, ap_CS_fsm_state96, ap_CS_fsm_state48, ap_CS_fsm_state54, ap_CS_fsm_state60, ap_CS_fsm_state66, ap_CS_fsm_state140, ap_CS_fsm_state128, ap_CS_fsm_state104, ap_CS_fsm_state110, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state18, ap_CS_fsm_state24, ap_CS_fsm_state30, ap_CS_fsm_state36, ap_CS_fsm_state50, ap_CS_fsm_state56, ap_CS_fsm_state62, ap_CS_fsm_state68, ap_CS_fsm_state74, ap_CS_fsm_state86, ap_CS_fsm_state90, ap_CS_fsm_state94, ap_CS_fsm_state98, ap_CS_fsm_state70, ap_CS_fsm_state72, ap_CS_fsm_state138, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state76, ap_CS_fsm_state78, ap_CS_fsm_state80, ap_CS_fsm_state82, ap_CS_fsm_state132, ap_CS_fsm_state134, ap_CS_fsm_state136, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state52, ap_CS_fsm_state58, ap_CS_fsm_state64, ap_CS_fsm_state99)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state99))) then 
            cubieColor_V_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state122) or (ap_const_logic_1 = ap_CS_fsm_state120) or (ap_const_logic_1 = ap_CS_fsm_state118) or (ap_const_logic_1 = ap_CS_fsm_state116) or (ap_const_logic_1 = ap_CS_fsm_state114) or (ap_const_logic_1 = ap_CS_fsm_state112) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_const_logic_1 = ap_CS_fsm_state126) and (ap_predicate_op375_call_state126 = ap_const_boolean_1)) or ((ap_const_logic_1 = ap_CS_fsm_state126) and (ap_predicate_op373_call_state126 = ap_const_boolean_1)) or ((p_24_reg_673 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state124)))) then 
            cubieColor_V_ce0 <= grp_cornerCorrect_fu_400_cubieColor_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state136) or (ap_const_logic_1 = ap_CS_fsm_state134) or (ap_const_logic_1 = ap_CS_fsm_state132) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state138))) then 
            cubieColor_V_ce0 <= grp_edgeCorrect_fu_385_cubieColor_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            cubieColor_V_ce0 <= grp_findEdge_fu_372_cubieColor_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            cubieColor_V_ce0 <= grp_rotateCubeVertical_fu_353_cubieColor_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            cubieColor_V_ce0 <= grp_rotateCubeHorizontal_fu_343_cubieColor_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            cubieColor_V_ce0 <= grp_solveStage1_fu_332_cubieColor_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state128) and (((p_29_reg_681 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_23_reg_669 = ap_const_lv1_1) and (p_27_reg_689 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_28_reg_677 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_22_reg_665 = ap_const_lv1_1) and (p_26_reg_693 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0))))) then 
            cubieColor_V_ce0 <= grp_turnCube_fu_320_cubieColor_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            cubieColor_V_ce0 <= grp_solveStage4b_fu_310_cubieColor_V_ce0;
        elsif (((or_cond_reg_648 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state104))) then 
            cubieColor_V_ce0 <= grp_solveStage4a_fu_300_cubieColor_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state128) and (((p_26_reg_693 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_1) and (p_24_reg_673 = ap_const_lv1_1)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_29_reg_681 = ap_const_lv1_0)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_27_reg_689 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_1)) or ((p_23_reg_669 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_1)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_1) and (p_28_reg_677 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_28_reg_677 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_29_reg_681 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0))))) then 
            cubieColor_V_ce0 <= grp_solveStage5a_fu_290_cubieColor_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state140)) then 
            cubieColor_V_ce0 <= grp_solveStage5b_fu_280_cubieColor_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            cubieColor_V_ce0 <= grp_solveStage2_fu_262_cubieColor_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state84))) then 
            cubieColor_V_ce0 <= grp_solveStage3_fu_242_cubieColor_V_ce0;
        else 
            cubieColor_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cubieColor_V_ce1_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state20, ap_CS_fsm_state26, ap_CS_fsm_state32, ap_CS_fsm_state100, ap_CS_fsm_state106, ap_CS_fsm_state101, or_cond_reg_648, ap_CS_fsm_state107, p_22_reg_665, ap_CS_fsm_state112, p_23_reg_669, ap_CS_fsm_state114, p_24_reg_673, ap_CS_fsm_state116, p_28_reg_677, ap_CS_fsm_state118, p_29_reg_681, ap_CS_fsm_state120, p_30_reg_685, ap_CS_fsm_state122, p_27_reg_689, ap_CS_fsm_state124, p_26_reg_693, ap_CS_fsm_state126, ap_predicate_op373_call_state126, ap_predicate_op375_call_state126, grp_solveStage3_fu_242_cubieColor_V_ce1, grp_solveStage2_fu_262_cubieColor_V_ce1, grp_solveStage5b_fu_280_cubieColor_V_ce1, grp_solveStage5a_fu_290_cubieColor_V_ce1, grp_solveStage4a_fu_300_cubieColor_V_ce1, grp_solveStage4b_fu_310_cubieColor_V_ce1, grp_turnCube_fu_320_cubieColor_V_ce1, grp_solveStage1_fu_332_cubieColor_V_ce1, grp_rotateCubeHorizontal_fu_343_cubieColor_V_ce1, grp_rotateCubeVertical_fu_353_cubieColor_V_ce1, grp_findEdge_fu_372_cubieColor_V_ce1, grp_edgeCorrect_fu_385_cubieColor_V_ce1, grp_cornerCorrect_fu_400_cubieColor_V_ce1, ap_CS_fsm_state84, ap_CS_fsm_state88, ap_CS_fsm_state92, ap_CS_fsm_state96, ap_CS_fsm_state48, ap_CS_fsm_state54, ap_CS_fsm_state60, ap_CS_fsm_state66, ap_CS_fsm_state140, ap_CS_fsm_state128, ap_CS_fsm_state104, ap_CS_fsm_state110, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state18, ap_CS_fsm_state24, ap_CS_fsm_state30, ap_CS_fsm_state36, ap_CS_fsm_state50, ap_CS_fsm_state56, ap_CS_fsm_state62, ap_CS_fsm_state68, ap_CS_fsm_state74, ap_CS_fsm_state86, ap_CS_fsm_state90, ap_CS_fsm_state94, ap_CS_fsm_state98, ap_CS_fsm_state70, ap_CS_fsm_state72, ap_CS_fsm_state138, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state76, ap_CS_fsm_state78, ap_CS_fsm_state80, ap_CS_fsm_state82, ap_CS_fsm_state132, ap_CS_fsm_state134, ap_CS_fsm_state136, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state52, ap_CS_fsm_state58, ap_CS_fsm_state64, ap_CS_fsm_state105)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state105))) then 
            cubieColor_V_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state122) or (ap_const_logic_1 = ap_CS_fsm_state120) or (ap_const_logic_1 = ap_CS_fsm_state118) or (ap_const_logic_1 = ap_CS_fsm_state116) or (ap_const_logic_1 = ap_CS_fsm_state114) or (ap_const_logic_1 = ap_CS_fsm_state112) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_const_logic_1 = ap_CS_fsm_state126) and (ap_predicate_op375_call_state126 = ap_const_boolean_1)) or ((ap_const_logic_1 = ap_CS_fsm_state126) and (ap_predicate_op373_call_state126 = ap_const_boolean_1)) or ((p_24_reg_673 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state124)))) then 
            cubieColor_V_ce1 <= grp_cornerCorrect_fu_400_cubieColor_V_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state136) or (ap_const_logic_1 = ap_CS_fsm_state134) or (ap_const_logic_1 = ap_CS_fsm_state132) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state138))) then 
            cubieColor_V_ce1 <= grp_edgeCorrect_fu_385_cubieColor_V_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            cubieColor_V_ce1 <= grp_findEdge_fu_372_cubieColor_V_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            cubieColor_V_ce1 <= grp_rotateCubeVertical_fu_353_cubieColor_V_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            cubieColor_V_ce1 <= grp_rotateCubeHorizontal_fu_343_cubieColor_V_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            cubieColor_V_ce1 <= grp_solveStage1_fu_332_cubieColor_V_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state128) and (((p_29_reg_681 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_23_reg_669 = ap_const_lv1_1) and (p_27_reg_689 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_28_reg_677 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_22_reg_665 = ap_const_lv1_1) and (p_26_reg_693 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0))))) then 
            cubieColor_V_ce1 <= grp_turnCube_fu_320_cubieColor_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            cubieColor_V_ce1 <= grp_solveStage4b_fu_310_cubieColor_V_ce1;
        elsif (((or_cond_reg_648 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state104))) then 
            cubieColor_V_ce1 <= grp_solveStage4a_fu_300_cubieColor_V_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state128) and (((p_26_reg_693 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_1) and (p_24_reg_673 = ap_const_lv1_1)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_29_reg_681 = ap_const_lv1_0)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_27_reg_689 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_1)) or ((p_23_reg_669 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_1)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_1) and (p_28_reg_677 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_28_reg_677 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_29_reg_681 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0))))) then 
            cubieColor_V_ce1 <= grp_solveStage5a_fu_290_cubieColor_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state140)) then 
            cubieColor_V_ce1 <= grp_solveStage5b_fu_280_cubieColor_V_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            cubieColor_V_ce1 <= grp_solveStage2_fu_262_cubieColor_V_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state84))) then 
            cubieColor_V_ce1 <= grp_solveStage3_fu_242_cubieColor_V_ce1;
        else 
            cubieColor_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cubieColor_V_d0_assign_proc : process(cubieColor_tb_V_q0, or_cond_reg_648, p_22_reg_665, p_23_reg_669, p_24_reg_673, p_28_reg_677, p_29_reg_681, p_30_reg_685, p_27_reg_689, p_26_reg_693, grp_solveStage3_fu_242_cubieColor_V_d0, grp_solveStage2_fu_262_cubieColor_V_d0, grp_solveStage5b_fu_280_cubieColor_V_d0, grp_solveStage5a_fu_290_cubieColor_V_d0, grp_solveStage4a_fu_300_cubieColor_V_d0, grp_solveStage4b_fu_310_cubieColor_V_d0, grp_turnCube_fu_320_cubieColor_V_d0, grp_solveStage1_fu_332_cubieColor_V_d0, grp_rotateCubeHorizontal_fu_343_cubieColor_V_d0, grp_rotateCubeVertical_fu_353_cubieColor_V_d0, ap_CS_fsm_state4, ap_CS_fsm_state84, ap_CS_fsm_state88, ap_CS_fsm_state92, ap_CS_fsm_state96, ap_CS_fsm_state48, ap_CS_fsm_state54, ap_CS_fsm_state60, ap_CS_fsm_state66, ap_CS_fsm_state140, ap_CS_fsm_state128, ap_CS_fsm_state104, ap_CS_fsm_state110, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state18, ap_CS_fsm_state24, ap_CS_fsm_state30, ap_CS_fsm_state36, ap_CS_fsm_state50, ap_CS_fsm_state56, ap_CS_fsm_state62, ap_CS_fsm_state68, ap_CS_fsm_state74, ap_CS_fsm_state86, ap_CS_fsm_state90, ap_CS_fsm_state94, ap_CS_fsm_state98, ap_CS_fsm_state70, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cubieColor_V_d0 <= cubieColor_tb_V_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            cubieColor_V_d0 <= grp_rotateCubeVertical_fu_353_cubieColor_V_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            cubieColor_V_d0 <= grp_rotateCubeHorizontal_fu_343_cubieColor_V_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            cubieColor_V_d0 <= grp_solveStage1_fu_332_cubieColor_V_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state128) and (((p_29_reg_681 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_23_reg_669 = ap_const_lv1_1) and (p_27_reg_689 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_28_reg_677 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_22_reg_665 = ap_const_lv1_1) and (p_26_reg_693 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0))))) then 
            cubieColor_V_d0 <= grp_turnCube_fu_320_cubieColor_V_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            cubieColor_V_d0 <= grp_solveStage4b_fu_310_cubieColor_V_d0;
        elsif (((or_cond_reg_648 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state104))) then 
            cubieColor_V_d0 <= grp_solveStage4a_fu_300_cubieColor_V_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state128) and (((p_26_reg_693 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_1) and (p_24_reg_673 = ap_const_lv1_1)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_29_reg_681 = ap_const_lv1_0)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_27_reg_689 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_1)) or ((p_23_reg_669 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_1)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_1) and (p_28_reg_677 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_28_reg_677 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_29_reg_681 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0))))) then 
            cubieColor_V_d0 <= grp_solveStage5a_fu_290_cubieColor_V_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state140)) then 
            cubieColor_V_d0 <= grp_solveStage5b_fu_280_cubieColor_V_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            cubieColor_V_d0 <= grp_solveStage2_fu_262_cubieColor_V_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state84))) then 
            cubieColor_V_d0 <= grp_solveStage3_fu_242_cubieColor_V_d0;
        else 
            cubieColor_V_d0 <= "XXX";
        end if; 
    end process;


    cubieColor_V_d1_assign_proc : process(or_cond_reg_648, p_22_reg_665, p_23_reg_669, p_24_reg_673, p_28_reg_677, p_29_reg_681, p_30_reg_685, p_27_reg_689, p_26_reg_693, grp_solveStage3_fu_242_cubieColor_V_d1, grp_solveStage2_fu_262_cubieColor_V_d1, grp_solveStage5b_fu_280_cubieColor_V_d1, grp_solveStage5a_fu_290_cubieColor_V_d1, grp_solveStage4a_fu_300_cubieColor_V_d1, grp_solveStage4b_fu_310_cubieColor_V_d1, grp_turnCube_fu_320_cubieColor_V_d1, grp_solveStage1_fu_332_cubieColor_V_d1, grp_rotateCubeHorizontal_fu_343_cubieColor_V_d1, grp_rotateCubeVertical_fu_353_cubieColor_V_d1, ap_CS_fsm_state84, ap_CS_fsm_state88, ap_CS_fsm_state92, ap_CS_fsm_state96, ap_CS_fsm_state48, ap_CS_fsm_state54, ap_CS_fsm_state60, ap_CS_fsm_state66, ap_CS_fsm_state140, ap_CS_fsm_state128, ap_CS_fsm_state104, ap_CS_fsm_state110, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state18, ap_CS_fsm_state24, ap_CS_fsm_state30, ap_CS_fsm_state36, ap_CS_fsm_state50, ap_CS_fsm_state56, ap_CS_fsm_state62, ap_CS_fsm_state68, ap_CS_fsm_state74, ap_CS_fsm_state86, ap_CS_fsm_state90, ap_CS_fsm_state94, ap_CS_fsm_state98, ap_CS_fsm_state70, ap_CS_fsm_state72)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            cubieColor_V_d1 <= grp_rotateCubeVertical_fu_353_cubieColor_V_d1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            cubieColor_V_d1 <= grp_rotateCubeHorizontal_fu_343_cubieColor_V_d1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            cubieColor_V_d1 <= grp_solveStage1_fu_332_cubieColor_V_d1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state128) and (((p_29_reg_681 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_23_reg_669 = ap_const_lv1_1) and (p_27_reg_689 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_28_reg_677 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_22_reg_665 = ap_const_lv1_1) and (p_26_reg_693 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0))))) then 
            cubieColor_V_d1 <= grp_turnCube_fu_320_cubieColor_V_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            cubieColor_V_d1 <= grp_solveStage4b_fu_310_cubieColor_V_d1;
        elsif (((or_cond_reg_648 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state104))) then 
            cubieColor_V_d1 <= grp_solveStage4a_fu_300_cubieColor_V_d1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state128) and (((p_26_reg_693 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_1) and (p_24_reg_673 = ap_const_lv1_1)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_29_reg_681 = ap_const_lv1_0)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_27_reg_689 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_1)) or ((p_23_reg_669 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_1)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_1) and (p_28_reg_677 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_28_reg_677 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_29_reg_681 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0))))) then 
            cubieColor_V_d1 <= grp_solveStage5a_fu_290_cubieColor_V_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state140)) then 
            cubieColor_V_d1 <= grp_solveStage5b_fu_280_cubieColor_V_d1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            cubieColor_V_d1 <= grp_solveStage2_fu_262_cubieColor_V_d1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state84))) then 
            cubieColor_V_d1 <= grp_solveStage3_fu_242_cubieColor_V_d1;
        else 
            cubieColor_V_d1 <= "XXX";
        end if; 
    end process;


    cubieColor_V_we0_assign_proc : process(or_cond_reg_648, p_22_reg_665, p_23_reg_669, p_24_reg_673, p_28_reg_677, p_29_reg_681, p_30_reg_685, p_27_reg_689, p_26_reg_693, grp_solveStage3_fu_242_cubieColor_V_we0, grp_solveStage2_fu_262_cubieColor_V_we0, grp_solveStage5b_fu_280_cubieColor_V_we0, grp_solveStage5a_fu_290_cubieColor_V_we0, grp_solveStage4a_fu_300_cubieColor_V_we0, grp_solveStage4b_fu_310_cubieColor_V_we0, grp_turnCube_fu_320_cubieColor_V_we0, grp_solveStage1_fu_332_cubieColor_V_we0, grp_rotateCubeHorizontal_fu_343_cubieColor_V_we0, grp_rotateCubeVertical_fu_353_cubieColor_V_we0, ap_CS_fsm_state4, ap_CS_fsm_state84, ap_CS_fsm_state88, ap_CS_fsm_state92, ap_CS_fsm_state96, ap_CS_fsm_state48, ap_CS_fsm_state54, ap_CS_fsm_state60, ap_CS_fsm_state66, ap_CS_fsm_state140, ap_CS_fsm_state128, ap_CS_fsm_state104, ap_CS_fsm_state110, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state18, ap_CS_fsm_state24, ap_CS_fsm_state30, ap_CS_fsm_state36, ap_CS_fsm_state50, ap_CS_fsm_state56, ap_CS_fsm_state62, ap_CS_fsm_state68, ap_CS_fsm_state74, ap_CS_fsm_state86, ap_CS_fsm_state90, ap_CS_fsm_state94, ap_CS_fsm_state98, ap_CS_fsm_state70, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cubieColor_V_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            cubieColor_V_we0 <= grp_rotateCubeVertical_fu_353_cubieColor_V_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            cubieColor_V_we0 <= grp_rotateCubeHorizontal_fu_343_cubieColor_V_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            cubieColor_V_we0 <= grp_solveStage1_fu_332_cubieColor_V_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state128) and (((p_29_reg_681 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_23_reg_669 = ap_const_lv1_1) and (p_27_reg_689 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_28_reg_677 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_22_reg_665 = ap_const_lv1_1) and (p_26_reg_693 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0))))) then 
            cubieColor_V_we0 <= grp_turnCube_fu_320_cubieColor_V_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            cubieColor_V_we0 <= grp_solveStage4b_fu_310_cubieColor_V_we0;
        elsif (((or_cond_reg_648 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state104))) then 
            cubieColor_V_we0 <= grp_solveStage4a_fu_300_cubieColor_V_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state128) and (((p_26_reg_693 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_1) and (p_24_reg_673 = ap_const_lv1_1)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_29_reg_681 = ap_const_lv1_0)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_27_reg_689 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_1)) or ((p_23_reg_669 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_1)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_1) and (p_28_reg_677 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_28_reg_677 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_29_reg_681 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0))))) then 
            cubieColor_V_we0 <= grp_solveStage5a_fu_290_cubieColor_V_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state140)) then 
            cubieColor_V_we0 <= grp_solveStage5b_fu_280_cubieColor_V_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            cubieColor_V_we0 <= grp_solveStage2_fu_262_cubieColor_V_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state84))) then 
            cubieColor_V_we0 <= grp_solveStage3_fu_242_cubieColor_V_we0;
        else 
            cubieColor_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cubieColor_V_we1_assign_proc : process(or_cond_reg_648, p_22_reg_665, p_23_reg_669, p_24_reg_673, p_28_reg_677, p_29_reg_681, p_30_reg_685, p_27_reg_689, p_26_reg_693, grp_solveStage3_fu_242_cubieColor_V_we1, grp_solveStage2_fu_262_cubieColor_V_we1, grp_solveStage5b_fu_280_cubieColor_V_we1, grp_solveStage5a_fu_290_cubieColor_V_we1, grp_solveStage4a_fu_300_cubieColor_V_we1, grp_solveStage4b_fu_310_cubieColor_V_we1, grp_turnCube_fu_320_cubieColor_V_we1, grp_solveStage1_fu_332_cubieColor_V_we1, grp_rotateCubeHorizontal_fu_343_cubieColor_V_we1, grp_rotateCubeVertical_fu_353_cubieColor_V_we1, ap_CS_fsm_state84, ap_CS_fsm_state88, ap_CS_fsm_state92, ap_CS_fsm_state96, ap_CS_fsm_state48, ap_CS_fsm_state54, ap_CS_fsm_state60, ap_CS_fsm_state66, ap_CS_fsm_state140, ap_CS_fsm_state128, ap_CS_fsm_state104, ap_CS_fsm_state110, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state18, ap_CS_fsm_state24, ap_CS_fsm_state30, ap_CS_fsm_state36, ap_CS_fsm_state50, ap_CS_fsm_state56, ap_CS_fsm_state62, ap_CS_fsm_state68, ap_CS_fsm_state74, ap_CS_fsm_state86, ap_CS_fsm_state90, ap_CS_fsm_state94, ap_CS_fsm_state98, ap_CS_fsm_state70, ap_CS_fsm_state72)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            cubieColor_V_we1 <= grp_rotateCubeVertical_fu_353_cubieColor_V_we1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            cubieColor_V_we1 <= grp_rotateCubeHorizontal_fu_343_cubieColor_V_we1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            cubieColor_V_we1 <= grp_solveStage1_fu_332_cubieColor_V_we1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state128) and (((p_29_reg_681 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_23_reg_669 = ap_const_lv1_1) and (p_27_reg_689 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_28_reg_677 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_22_reg_665 = ap_const_lv1_1) and (p_26_reg_693 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0))))) then 
            cubieColor_V_we1 <= grp_turnCube_fu_320_cubieColor_V_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            cubieColor_V_we1 <= grp_solveStage4b_fu_310_cubieColor_V_we1;
        elsif (((or_cond_reg_648 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state104))) then 
            cubieColor_V_we1 <= grp_solveStage4a_fu_300_cubieColor_V_we1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state128) and (((p_26_reg_693 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_1) and (p_24_reg_673 = ap_const_lv1_1)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_29_reg_681 = ap_const_lv1_0)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_27_reg_689 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_1)) or ((p_23_reg_669 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_1)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_1) and (p_28_reg_677 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_28_reg_677 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_29_reg_681 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0))))) then 
            cubieColor_V_we1 <= grp_solveStage5a_fu_290_cubieColor_V_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state140)) then 
            cubieColor_V_we1 <= grp_solveStage5b_fu_280_cubieColor_V_we1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            cubieColor_V_we1 <= grp_solveStage2_fu_262_cubieColor_V_we1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state84))) then 
            cubieColor_V_we1 <= grp_solveStage3_fu_242_cubieColor_V_we1;
        else 
            cubieColor_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    cubieColor_tb_V_address0 <= tmp_8_cast_fu_506_p1(6 - 1 downto 0);

    cubieColor_tb_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cubieColor_tb_V_ce0 <= ap_const_logic_1;
        else 
            cubieColor_tb_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_543_p2 <= "1" when (t_V_reg_231 = op2_V_assign_reg_712) else "0";
    grp_cornerCorrect_fu_400_ap_start <= grp_cornerCorrect_fu_400_ap_start_reg;

    grp_cornerCorrect_fu_400_corner_V_assign_proc : process(ap_CS_fsm_state112, ap_CS_fsm_state114, p_24_reg_673, ap_CS_fsm_state116, ap_CS_fsm_state118, ap_CS_fsm_state120, ap_CS_fsm_state122, ap_CS_fsm_state124, ap_CS_fsm_state126, ap_predicate_op373_call_state126, ap_predicate_op375_call_state126, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state52, ap_CS_fsm_state58, ap_CS_fsm_state64)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state122) or (ap_const_logic_1 = ap_CS_fsm_state118) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state44) or ((ap_const_logic_1 = ap_CS_fsm_state126) and (ap_predicate_op375_call_state126 = ap_const_boolean_1)) or ((ap_const_logic_1 = ap_CS_fsm_state126) and (ap_predicate_op373_call_state126 = ap_const_boolean_1)) or ((p_24_reg_673 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state124)))) then 
            grp_cornerCorrect_fu_400_corner_V <= ap_const_lv3_4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state120) or (ap_const_logic_1 = ap_CS_fsm_state116) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            grp_cornerCorrect_fu_400_corner_V <= ap_const_lv3_3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state114) or (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            grp_cornerCorrect_fu_400_corner_V <= ap_const_lv3_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state112) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            grp_cornerCorrect_fu_400_corner_V <= ap_const_lv3_1;
        else 
            grp_cornerCorrect_fu_400_corner_V <= "XXX";
        end if; 
    end process;

    grp_edgeCorrect_fu_385_ap_start <= grp_edgeCorrect_fu_385_ap_start_reg;

    grp_edgeCorrect_fu_385_edge_V_assign_proc : process(ap_CS_fsm_state138, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state76, ap_CS_fsm_state78, ap_CS_fsm_state80, ap_CS_fsm_state82, ap_CS_fsm_state132, ap_CS_fsm_state134, ap_CS_fsm_state136)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            grp_edgeCorrect_fu_385_edge_V <= ap_const_lv4_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            grp_edgeCorrect_fu_385_edge_V <= ap_const_lv4_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            grp_edgeCorrect_fu_385_edge_V <= ap_const_lv4_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            grp_edgeCorrect_fu_385_edge_V <= ap_const_lv4_5;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state138))) then 
            grp_edgeCorrect_fu_385_edge_V <= ap_const_lv4_4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state136) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_edgeCorrect_fu_385_edge_V <= ap_const_lv4_3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state134) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_edgeCorrect_fu_385_edge_V <= ap_const_lv4_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state132) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_edgeCorrect_fu_385_edge_V <= ap_const_lv4_1;
        else 
            grp_edgeCorrect_fu_385_edge_V <= "XXXX";
        end if; 
    end process;

    grp_findEdge_fu_372_ap_start <= grp_findEdge_fu_372_ap_start_reg;

    grp_findEdge_fu_372_sEC_V_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state20, ap_CS_fsm_state26, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_findEdge_fu_372_sEC_V <= ap_const_lv3_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_findEdge_fu_372_sEC_V <= ap_const_lv3_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_findEdge_fu_372_sEC_V <= ap_const_lv3_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_findEdge_fu_372_sEC_V <= ap_const_lv3_5;
        else 
            grp_findEdge_fu_372_sEC_V <= "XXX";
        end if; 
    end process;

    grp_fu_411_p2 <= "1" when (reg_436 = cubieColor_V_q0) else "0";
    grp_fu_416_p2 <= "1" when (reg_436 = cubieColor_V_q1) else "0";
    grp_fu_421_p2 <= "1" when (reg_436 = cubieColor_V_q1) else "0";
    grp_fu_426_p2 <= "1" when (reg_436 = cubieColor_V_q0) else "0";
    grp_optimizeCube_fu_363_ap_start <= grp_optimizeCube_fu_363_ap_start_reg;
    grp_rotateCubeHorizontal_fu_343_ap_start <= grp_rotateCubeHorizontal_fu_343_ap_start_reg;
    grp_rotateCubeVertical_fu_353_ap_start <= grp_rotateCubeVertical_fu_353_ap_start_reg;
    grp_solveStage1_fu_332_ap_start <= grp_solveStage1_fu_332_ap_start_reg;
    grp_solveStage2_fu_262_ap_start <= grp_solveStage2_fu_262_ap_start_reg;

    grp_solveStage2_fu_262_sC_V_assign_proc : process(ap_CS_fsm_state48, ap_CS_fsm_state54, ap_CS_fsm_state60, ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            grp_solveStage2_fu_262_sC_V <= ap_const_lv3_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            grp_solveStage2_fu_262_sC_V <= ap_const_lv3_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            grp_solveStage2_fu_262_sC_V <= ap_const_lv3_5;
        else 
            grp_solveStage2_fu_262_sC_V <= "XXX";
        end if; 
    end process;


    grp_solveStage2_fu_262_tC_V_assign_proc : process(ap_CS_fsm_state48, ap_CS_fsm_state54, ap_CS_fsm_state60, ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            grp_solveStage2_fu_262_tC_V <= ap_const_lv3_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_solveStage2_fu_262_tC_V <= ap_const_lv3_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            grp_solveStage2_fu_262_tC_V <= ap_const_lv3_3;
        else 
            grp_solveStage2_fu_262_tC_V <= "XXX";
        end if; 
    end process;

    grp_solveStage3_fu_242_ap_start <= grp_solveStage3_fu_242_ap_start_reg;

    grp_solveStage3_fu_242_fC_V_assign_proc : process(ap_CS_fsm_state84, ap_CS_fsm_state88, ap_CS_fsm_state92, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_solveStage3_fu_242_fC_V <= ap_const_lv3_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            grp_solveStage3_fu_242_fC_V <= ap_const_lv3_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            grp_solveStage3_fu_242_fC_V <= ap_const_lv3_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            grp_solveStage3_fu_242_fC_V <= ap_const_lv3_5;
        else 
            grp_solveStage3_fu_242_fC_V <= "XXX";
        end if; 
    end process;


    grp_solveStage3_fu_242_sC_V_assign_proc : process(ap_CS_fsm_state84, ap_CS_fsm_state88, ap_CS_fsm_state92, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_solveStage3_fu_242_sC_V <= ap_const_lv3_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            grp_solveStage3_fu_242_sC_V <= ap_const_lv3_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            grp_solveStage3_fu_242_sC_V <= ap_const_lv3_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            grp_solveStage3_fu_242_sC_V <= ap_const_lv3_3;
        else 
            grp_solveStage3_fu_242_sC_V <= "XXX";
        end if; 
    end process;

    grp_solveStage4a_fu_300_ap_start <= grp_solveStage4a_fu_300_ap_start_reg;
    grp_solveStage4b_fu_310_ap_start <= grp_solveStage4b_fu_310_ap_start_reg;
    grp_solveStage5a_fu_290_ap_start <= grp_solveStage5a_fu_290_ap_start_reg;
    grp_solveStage5b_fu_280_ap_start <= grp_solveStage5b_fu_280_ap_start_reg;
    grp_turnCube_fu_320_ap_start <= grp_turnCube_fu_320_ap_start_reg;
    i_V_1_fu_548_p2 <= std_logic_vector(unsigned(t_V_reg_231) + unsigned(ap_const_lv8_1));
    i_V_fu_451_p2 <= std_logic_vector(unsigned(p_s_reg_209) + unsigned(ap_const_lv3_1));
    j_V_fu_491_p2 <= std_logic_vector(unsigned(p_2_reg_220) + unsigned(ap_const_lv4_1));

    moves_V_address0_assign_proc : process(or_cond_reg_648, p_22_reg_665, p_23_reg_669, p_24_reg_673, p_28_reg_677, p_29_reg_681, p_30_reg_685, p_27_reg_689, p_26_reg_693, ap_CS_fsm_state141, ap_CS_fsm_state142, tmp_61_fu_554_p1, grp_solveStage3_fu_242_moves_V_address0, grp_solveStage2_fu_262_moves_V_address0, grp_solveStage5b_fu_280_moves_V_address0, grp_solveStage5a_fu_290_moves_V_address0, grp_solveStage4a_fu_300_moves_V_address0, grp_solveStage4b_fu_310_moves_V_address0, grp_turnCube_fu_320_moves_V_address0, grp_solveStage1_fu_332_moves_V_address0, grp_rotateCubeHorizontal_fu_343_moves_V_address0, grp_rotateCubeVertical_fu_353_moves_V_address0, grp_optimizeCube_fu_363_moves_V_address0, ap_CS_fsm_state84, ap_CS_fsm_state88, ap_CS_fsm_state92, ap_CS_fsm_state96, ap_CS_fsm_state48, ap_CS_fsm_state54, ap_CS_fsm_state60, ap_CS_fsm_state66, ap_CS_fsm_state140, ap_CS_fsm_state128, ap_CS_fsm_state104, ap_CS_fsm_state110, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state18, ap_CS_fsm_state24, ap_CS_fsm_state30, ap_CS_fsm_state36, ap_CS_fsm_state50, ap_CS_fsm_state56, ap_CS_fsm_state62, ap_CS_fsm_state68, ap_CS_fsm_state74, ap_CS_fsm_state86, ap_CS_fsm_state90, ap_CS_fsm_state94, ap_CS_fsm_state98, ap_CS_fsm_state70, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state142)) then 
            moves_V_address0 <= tmp_61_fu_554_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state141)) then 
            moves_V_address0 <= grp_optimizeCube_fu_363_moves_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            moves_V_address0 <= grp_rotateCubeVertical_fu_353_moves_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            moves_V_address0 <= grp_rotateCubeHorizontal_fu_343_moves_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            moves_V_address0 <= grp_solveStage1_fu_332_moves_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state128) and (((p_29_reg_681 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_23_reg_669 = ap_const_lv1_1) and (p_27_reg_689 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_28_reg_677 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_22_reg_665 = ap_const_lv1_1) and (p_26_reg_693 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0))))) then 
            moves_V_address0 <= grp_turnCube_fu_320_moves_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            moves_V_address0 <= grp_solveStage4b_fu_310_moves_V_address0;
        elsif (((or_cond_reg_648 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state104))) then 
            moves_V_address0 <= grp_solveStage4a_fu_300_moves_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state128) and (((p_26_reg_693 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_1) and (p_24_reg_673 = ap_const_lv1_1)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_29_reg_681 = ap_const_lv1_0)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_27_reg_689 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_1)) or ((p_23_reg_669 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_1)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_1) and (p_28_reg_677 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_28_reg_677 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_29_reg_681 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0))))) then 
            moves_V_address0 <= grp_solveStage5a_fu_290_moves_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state140)) then 
            moves_V_address0 <= grp_solveStage5b_fu_280_moves_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            moves_V_address0 <= grp_solveStage2_fu_262_moves_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state84))) then 
            moves_V_address0 <= grp_solveStage3_fu_242_moves_V_address0;
        else 
            moves_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    moves_V_ce0_assign_proc : process(or_cond_reg_648, p_22_reg_665, p_23_reg_669, p_24_reg_673, p_28_reg_677, p_29_reg_681, p_30_reg_685, p_27_reg_689, p_26_reg_693, ap_CS_fsm_state141, ap_CS_fsm_state142, grp_solveStage3_fu_242_moves_V_ce0, grp_solveStage2_fu_262_moves_V_ce0, grp_solveStage5b_fu_280_moves_V_ce0, grp_solveStage5a_fu_290_moves_V_ce0, grp_solveStage4a_fu_300_moves_V_ce0, grp_solveStage4b_fu_310_moves_V_ce0, grp_turnCube_fu_320_moves_V_ce0, grp_solveStage1_fu_332_moves_V_ce0, grp_rotateCubeHorizontal_fu_343_moves_V_ce0, grp_rotateCubeVertical_fu_353_moves_V_ce0, grp_optimizeCube_fu_363_moves_V_ce0, ap_CS_fsm_state84, ap_CS_fsm_state88, ap_CS_fsm_state92, ap_CS_fsm_state96, ap_CS_fsm_state48, ap_CS_fsm_state54, ap_CS_fsm_state60, ap_CS_fsm_state66, ap_CS_fsm_state140, ap_CS_fsm_state128, ap_CS_fsm_state104, ap_CS_fsm_state110, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state18, ap_CS_fsm_state24, ap_CS_fsm_state30, ap_CS_fsm_state36, ap_CS_fsm_state50, ap_CS_fsm_state56, ap_CS_fsm_state62, ap_CS_fsm_state68, ap_CS_fsm_state74, ap_CS_fsm_state86, ap_CS_fsm_state90, ap_CS_fsm_state94, ap_CS_fsm_state98, ap_CS_fsm_state70, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state142)) then 
            moves_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state141)) then 
            moves_V_ce0 <= grp_optimizeCube_fu_363_moves_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            moves_V_ce0 <= grp_rotateCubeVertical_fu_353_moves_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            moves_V_ce0 <= grp_rotateCubeHorizontal_fu_343_moves_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            moves_V_ce0 <= grp_solveStage1_fu_332_moves_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state128) and (((p_29_reg_681 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_23_reg_669 = ap_const_lv1_1) and (p_27_reg_689 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_28_reg_677 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_22_reg_665 = ap_const_lv1_1) and (p_26_reg_693 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0))))) then 
            moves_V_ce0 <= grp_turnCube_fu_320_moves_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            moves_V_ce0 <= grp_solveStage4b_fu_310_moves_V_ce0;
        elsif (((or_cond_reg_648 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state104))) then 
            moves_V_ce0 <= grp_solveStage4a_fu_300_moves_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state128) and (((p_26_reg_693 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_1) and (p_24_reg_673 = ap_const_lv1_1)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_29_reg_681 = ap_const_lv1_0)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_27_reg_689 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_1)) or ((p_23_reg_669 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_1)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_1) and (p_28_reg_677 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_28_reg_677 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_29_reg_681 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0))))) then 
            moves_V_ce0 <= grp_solveStage5a_fu_290_moves_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state140)) then 
            moves_V_ce0 <= grp_solveStage5b_fu_280_moves_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            moves_V_ce0 <= grp_solveStage2_fu_262_moves_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state84))) then 
            moves_V_ce0 <= grp_solveStage3_fu_242_moves_V_ce0;
        else 
            moves_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    moves_V_d0_assign_proc : process(or_cond_reg_648, p_22_reg_665, p_23_reg_669, p_24_reg_673, p_28_reg_677, p_29_reg_681, p_30_reg_685, p_27_reg_689, p_26_reg_693, ap_CS_fsm_state141, grp_solveStage3_fu_242_moves_V_d0, grp_solveStage2_fu_262_moves_V_d0, grp_solveStage5b_fu_280_moves_V_d0, grp_solveStage5a_fu_290_moves_V_d0, grp_solveStage4a_fu_300_moves_V_d0, grp_solveStage4b_fu_310_moves_V_d0, grp_turnCube_fu_320_moves_V_d0, grp_solveStage1_fu_332_moves_V_d0, grp_rotateCubeHorizontal_fu_343_moves_V_d0, grp_rotateCubeVertical_fu_353_moves_V_d0, grp_optimizeCube_fu_363_moves_V_d0, ap_CS_fsm_state84, ap_CS_fsm_state88, ap_CS_fsm_state92, ap_CS_fsm_state96, ap_CS_fsm_state48, ap_CS_fsm_state54, ap_CS_fsm_state60, ap_CS_fsm_state66, ap_CS_fsm_state140, ap_CS_fsm_state128, ap_CS_fsm_state104, ap_CS_fsm_state110, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state18, ap_CS_fsm_state24, ap_CS_fsm_state30, ap_CS_fsm_state36, ap_CS_fsm_state50, ap_CS_fsm_state56, ap_CS_fsm_state62, ap_CS_fsm_state68, ap_CS_fsm_state74, ap_CS_fsm_state86, ap_CS_fsm_state90, ap_CS_fsm_state94, ap_CS_fsm_state98, ap_CS_fsm_state70, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state141)) then 
            moves_V_d0 <= grp_optimizeCube_fu_363_moves_V_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            moves_V_d0 <= grp_rotateCubeVertical_fu_353_moves_V_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            moves_V_d0 <= grp_rotateCubeHorizontal_fu_343_moves_V_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            moves_V_d0 <= grp_solveStage1_fu_332_moves_V_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state128) and (((p_29_reg_681 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_23_reg_669 = ap_const_lv1_1) and (p_27_reg_689 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_28_reg_677 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_22_reg_665 = ap_const_lv1_1) and (p_26_reg_693 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0))))) then 
            moves_V_d0 <= grp_turnCube_fu_320_moves_V_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            moves_V_d0 <= grp_solveStage4b_fu_310_moves_V_d0;
        elsif (((or_cond_reg_648 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state104))) then 
            moves_V_d0 <= grp_solveStage4a_fu_300_moves_V_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state128) and (((p_26_reg_693 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_1) and (p_24_reg_673 = ap_const_lv1_1)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_29_reg_681 = ap_const_lv1_0)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_27_reg_689 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_1)) or ((p_23_reg_669 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_1)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_1) and (p_28_reg_677 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_28_reg_677 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_29_reg_681 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0))))) then 
            moves_V_d0 <= grp_solveStage5a_fu_290_moves_V_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state140)) then 
            moves_V_d0 <= grp_solveStage5b_fu_280_moves_V_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            moves_V_d0 <= grp_solveStage2_fu_262_moves_V_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state84))) then 
            moves_V_d0 <= grp_solveStage3_fu_242_moves_V_d0;
        else 
            moves_V_d0 <= "XXXX";
        end if; 
    end process;


    moves_V_we0_assign_proc : process(or_cond_reg_648, p_22_reg_665, p_23_reg_669, p_24_reg_673, p_28_reg_677, p_29_reg_681, p_30_reg_685, p_27_reg_689, p_26_reg_693, ap_CS_fsm_state141, grp_solveStage3_fu_242_moves_V_we0, grp_solveStage2_fu_262_moves_V_we0, grp_solveStage5b_fu_280_moves_V_we0, grp_solveStage5a_fu_290_moves_V_we0, grp_solveStage4a_fu_300_moves_V_we0, grp_solveStage4b_fu_310_moves_V_we0, grp_turnCube_fu_320_moves_V_we0, grp_solveStage1_fu_332_moves_V_we0, grp_rotateCubeHorizontal_fu_343_moves_V_we0, grp_rotateCubeVertical_fu_353_moves_V_we0, grp_optimizeCube_fu_363_moves_V_we0, ap_CS_fsm_state84, ap_CS_fsm_state88, ap_CS_fsm_state92, ap_CS_fsm_state96, ap_CS_fsm_state48, ap_CS_fsm_state54, ap_CS_fsm_state60, ap_CS_fsm_state66, ap_CS_fsm_state140, ap_CS_fsm_state128, ap_CS_fsm_state104, ap_CS_fsm_state110, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state18, ap_CS_fsm_state24, ap_CS_fsm_state30, ap_CS_fsm_state36, ap_CS_fsm_state50, ap_CS_fsm_state56, ap_CS_fsm_state62, ap_CS_fsm_state68, ap_CS_fsm_state74, ap_CS_fsm_state86, ap_CS_fsm_state90, ap_CS_fsm_state94, ap_CS_fsm_state98, ap_CS_fsm_state70, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state141)) then 
            moves_V_we0 <= grp_optimizeCube_fu_363_moves_V_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            moves_V_we0 <= grp_rotateCubeVertical_fu_353_moves_V_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            moves_V_we0 <= grp_rotateCubeHorizontal_fu_343_moves_V_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            moves_V_we0 <= grp_solveStage1_fu_332_moves_V_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state128) and (((p_29_reg_681 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_23_reg_669 = ap_const_lv1_1) and (p_27_reg_689 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_28_reg_677 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_22_reg_665 = ap_const_lv1_1) and (p_26_reg_693 = ap_const_lv1_0) and (p_24_reg_673 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0))))) then 
            moves_V_we0 <= grp_turnCube_fu_320_moves_V_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            moves_V_we0 <= grp_solveStage4b_fu_310_moves_V_we0;
        elsif (((or_cond_reg_648 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state104))) then 
            moves_V_we0 <= grp_solveStage4a_fu_300_moves_V_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state128) and (((p_26_reg_693 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_1) and (p_24_reg_673 = ap_const_lv1_1)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_29_reg_681 = ap_const_lv1_0)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_27_reg_689 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_1)) or ((p_23_reg_669 = ap_const_lv1_1) and (p_22_reg_665 = ap_const_lv1_1)) or ((p_24_reg_673 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_1)) or ((p_30_reg_685 = ap_const_lv1_1) and (p_29_reg_681 = ap_const_lv1_1) and (p_28_reg_677 = ap_const_lv1_1) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0)) or ((p_28_reg_677 = ap_const_lv1_1) and (p_30_reg_685 = ap_const_lv1_0) and (p_29_reg_681 = ap_const_lv1_0) and (p_23_reg_669 = ap_const_lv1_0) and (p_22_reg_665 = ap_const_lv1_0))))) then 
            moves_V_we0 <= grp_solveStage5a_fu_290_moves_V_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state140)) then 
            moves_V_we0 <= grp_solveStage5b_fu_280_moves_V_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            moves_V_we0 <= grp_solveStage2_fu_262_moves_V_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state84))) then 
            moves_V_we0 <= grp_solveStage3_fu_242_moves_V_we0;
        else 
            moves_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_cond5_fu_537_p2 <= (tmp5_fu_531_p2 and tmp4_fu_527_p2);
    or_cond_fu_521_p2 <= (tmp3_fu_515_p2 and tmp2_fu_511_p2);

    order_V_ap_vld_assign_proc : process(ap_CS_fsm_state141, grp_optimizeCube_fu_363_ap_done)
    begin
        if (((grp_optimizeCube_fu_363_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state141))) then 
            order_V_ap_vld <= ap_const_logic_1;
        else 
            order_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_shl_cast_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_461_p3),7));
    rMoves_V_address0 <= tmp_61_reg_725(8 - 1 downto 0);

    rMoves_V_ce0_assign_proc : process(ap_CS_fsm_state143)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state143)) then 
            rMoves_V_ce0 <= ap_const_logic_1;
        else 
            rMoves_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rMoves_V_we0_assign_proc : process(ap_CS_fsm_state143)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state143)) then 
            rMoves_V_we0 <= ap_const_logic_1;
        else 
            rMoves_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp2_fu_511_p2 <= (tmp_54_reg_643 and tmp_53_reg_638);
    tmp3_fu_515_p2 <= (grp_fu_416_p2 and grp_fu_411_p2);
    tmp4_fu_527_p2 <= (tmp_58_reg_657 and tmp_57_reg_652);
    tmp5_fu_531_p2 <= (grp_fu_426_p2 and grp_fu_421_p2);
    tmp_54_cast_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_2_reg_220),7));
    tmp_61_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_231),64));
    tmp_6_fu_461_p3 <= (p_s_reg_209 & ap_const_lv3_0);
    tmp_7_fu_473_p2 <= std_logic_vector(unsigned(tmp_cast_fu_457_p1) + unsigned(p_shl_cast_fu_469_p1));
    tmp_8_cast_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_501_p2),64));
    tmp_8_fu_501_p2 <= std_logic_vector(unsigned(tmp_7_reg_567) + unsigned(tmp_54_cast_fu_497_p1));
    tmp_cast_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_s_reg_209),7));
    tmp_fu_445_p2 <= "1" when (p_s_reg_209 = ap_const_lv3_6) else "0";
    tmp_s_fu_485_p2 <= "1" when (p_2_reg_220 = ap_const_lv4_9) else "0";
end behav;
