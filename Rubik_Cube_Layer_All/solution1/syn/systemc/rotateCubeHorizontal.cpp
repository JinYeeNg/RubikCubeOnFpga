// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "rotateCubeHorizontal.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic rotateCubeHorizontal::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic rotateCubeHorizontal::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<31> rotateCubeHorizontal::ap_ST_fsm_state1 = "1";
const sc_lv<31> rotateCubeHorizontal::ap_ST_fsm_state2 = "10";
const sc_lv<31> rotateCubeHorizontal::ap_ST_fsm_state3 = "100";
const sc_lv<31> rotateCubeHorizontal::ap_ST_fsm_state4 = "1000";
const sc_lv<31> rotateCubeHorizontal::ap_ST_fsm_state5 = "10000";
const sc_lv<31> rotateCubeHorizontal::ap_ST_fsm_state6 = "100000";
const sc_lv<31> rotateCubeHorizontal::ap_ST_fsm_state7 = "1000000";
const sc_lv<31> rotateCubeHorizontal::ap_ST_fsm_state8 = "10000000";
const sc_lv<31> rotateCubeHorizontal::ap_ST_fsm_state9 = "100000000";
const sc_lv<31> rotateCubeHorizontal::ap_ST_fsm_state10 = "1000000000";
const sc_lv<31> rotateCubeHorizontal::ap_ST_fsm_state11 = "10000000000";
const sc_lv<31> rotateCubeHorizontal::ap_ST_fsm_state12 = "100000000000";
const sc_lv<31> rotateCubeHorizontal::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<31> rotateCubeHorizontal::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<31> rotateCubeHorizontal::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<31> rotateCubeHorizontal::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<31> rotateCubeHorizontal::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<31> rotateCubeHorizontal::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<31> rotateCubeHorizontal::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<31> rotateCubeHorizontal::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<31> rotateCubeHorizontal::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<31> rotateCubeHorizontal::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<31> rotateCubeHorizontal::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<31> rotateCubeHorizontal::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<31> rotateCubeHorizontal::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<31> rotateCubeHorizontal::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<31> rotateCubeHorizontal::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<31> rotateCubeHorizontal::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<31> rotateCubeHorizontal::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<31> rotateCubeHorizontal::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<31> rotateCubeHorizontal::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<32> rotateCubeHorizontal::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> rotateCubeHorizontal::ap_const_lv32_1 = "1";
const sc_lv<1> rotateCubeHorizontal::ap_const_lv1_0 = "0";
const sc_lv<32> rotateCubeHorizontal::ap_const_lv32_2 = "10";
const sc_lv<1> rotateCubeHorizontal::ap_const_lv1_1 = "1";
const sc_lv<3> rotateCubeHorizontal::ap_const_lv3_0 = "000";
const sc_lv<4> rotateCubeHorizontal::ap_const_lv4_0 = "0000";
const sc_lv<32> rotateCubeHorizontal::ap_const_lv32_3 = "11";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_6 = "110";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_3 = "11";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_7 = "111";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_4 = "100";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_1 = "1";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_8 = "1000";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_5 = "101";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_2 = "10";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_B = "1011";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_E = "1110";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_11 = "10001";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_A = "1010";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_D = "1101";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_10 = "10000";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_9 = "1001";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_C = "1100";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_F = "1111";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_24 = "100100";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_25 = "100101";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_26 = "100110";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_27 = "100111";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_28 = "101000";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_29 = "101001";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_2A = "101010";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_2B = "101011";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_2C = "101100";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_2D = "101101";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_2E = "101110";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_2F = "101111";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_30 = "110000";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_31 = "110001";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_32 = "110010";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_33 = "110011";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_34 = "110100";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_35 = "110101";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_1B = "11011";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_1C = "11100";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_1D = "11101";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_1E = "11110";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_1F = "11111";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_20 = "100000";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_21 = "100001";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_22 = "100010";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_23 = "100011";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_12 = "10010";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_13 = "10011";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_14 = "10100";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_15 = "10101";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_16 = "10110";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_17 = "10111";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_18 = "11000";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_19 = "11001";
const sc_lv<64> rotateCubeHorizontal::ap_const_lv64_1A = "11010";
const sc_lv<4> rotateCubeHorizontal::ap_const_lv4_C = "1100";
const sc_lv<32> rotateCubeHorizontal::ap_const_lv32_4 = "100";
const sc_lv<32> rotateCubeHorizontal::ap_const_lv32_5 = "101";
const sc_lv<32> rotateCubeHorizontal::ap_const_lv32_6 = "110";
const sc_lv<32> rotateCubeHorizontal::ap_const_lv32_7 = "111";
const sc_lv<32> rotateCubeHorizontal::ap_const_lv32_8 = "1000";
const sc_lv<32> rotateCubeHorizontal::ap_const_lv32_9 = "1001";
const sc_lv<32> rotateCubeHorizontal::ap_const_lv32_A = "1010";
const sc_lv<32> rotateCubeHorizontal::ap_const_lv32_B = "1011";
const sc_lv<32> rotateCubeHorizontal::ap_const_lv32_C = "1100";
const sc_lv<32> rotateCubeHorizontal::ap_const_lv32_D = "1101";
const sc_lv<32> rotateCubeHorizontal::ap_const_lv32_E = "1110";
const sc_lv<32> rotateCubeHorizontal::ap_const_lv32_F = "1111";
const sc_lv<32> rotateCubeHorizontal::ap_const_lv32_10 = "10000";
const sc_lv<32> rotateCubeHorizontal::ap_const_lv32_11 = "10001";
const sc_lv<32> rotateCubeHorizontal::ap_const_lv32_12 = "10010";
const sc_lv<32> rotateCubeHorizontal::ap_const_lv32_13 = "10011";
const sc_lv<32> rotateCubeHorizontal::ap_const_lv32_14 = "10100";
const sc_lv<32> rotateCubeHorizontal::ap_const_lv32_15 = "10101";
const sc_lv<32> rotateCubeHorizontal::ap_const_lv32_16 = "10110";
const sc_lv<32> rotateCubeHorizontal::ap_const_lv32_17 = "10111";
const sc_lv<32> rotateCubeHorizontal::ap_const_lv32_18 = "11000";
const sc_lv<32> rotateCubeHorizontal::ap_const_lv32_19 = "11001";
const sc_lv<32> rotateCubeHorizontal::ap_const_lv32_1A = "11010";
const sc_lv<32> rotateCubeHorizontal::ap_const_lv32_1B = "11011";
const sc_lv<32> rotateCubeHorizontal::ap_const_lv32_1C = "11100";
const sc_lv<32> rotateCubeHorizontal::ap_const_lv32_1D = "11101";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_0 = "000000";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_1 = "1";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_2 = "10";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_3 = "11";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_4 = "100";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_5 = "101";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_6 = "110";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_7 = "111";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_8 = "1000";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_9 = "1001";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_A = "1010";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_B = "1011";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_C = "1100";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_D = "1101";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_E = "1110";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_F = "1111";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_10 = "10000";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_11 = "10001";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_12 = "10010";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_13 = "10011";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_14 = "10100";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_15 = "10101";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_16 = "10110";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_17 = "10111";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_18 = "11000";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_19 = "11001";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_1A = "11010";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_1B = "11011";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_1C = "11100";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_1D = "11101";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_1E = "11110";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_1F = "11111";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_20 = "100000";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_21 = "100001";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_22 = "100010";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_23 = "100011";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_24 = "100100";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_25 = "100101";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_26 = "100110";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_27 = "100111";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_28 = "101000";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_29 = "101001";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_2A = "101010";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_2B = "101011";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_2C = "101100";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_2D = "101101";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_2E = "101110";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_2F = "101111";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_30 = "110000";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_31 = "110001";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_32 = "110010";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_33 = "110011";
const sc_lv<32> rotateCubeHorizontal::ap_const_lv32_1E = "11110";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_34 = "110100";
const sc_lv<6> rotateCubeHorizontal::ap_const_lv6_35 = "110101";
const sc_lv<8> rotateCubeHorizontal::ap_const_lv8_1 = "1";
const sc_lv<9> rotateCubeHorizontal::ap_const_lv9_1FF = "111111111";
const sc_lv<3> rotateCubeHorizontal::ap_const_lv3_6 = "110";
const sc_lv<3> rotateCubeHorizontal::ap_const_lv3_1 = "1";
const sc_lv<4> rotateCubeHorizontal::ap_const_lv4_9 = "1001";
const sc_lv<4> rotateCubeHorizontal::ap_const_lv4_1 = "1";
const bool rotateCubeHorizontal::ap_const_boolean_1 = true;

rotateCubeHorizontal::rotateCubeHorizontal(sc_module_name name) : sc_module(name), mVcdFile(0) {
    cubieTemp_V_U = new turnCube_cubieTembkb("cubieTemp_V_U");
    cubieTemp_V_U->clk(ap_clk);
    cubieTemp_V_U->reset(ap_rst);
    cubieTemp_V_U->address0(cubieTemp_V_address0);
    cubieTemp_V_U->ce0(cubieTemp_V_ce0);
    cubieTemp_V_U->we0(cubieTemp_V_we0);
    cubieTemp_V_U->d0(cubieColor_V_q0);
    cubieTemp_V_U->q0(cubieTemp_V_q0);
    cubieTemp_V_U->address1(cubieTemp_V_address1);
    cubieTemp_V_U->ce1(cubieTemp_V_ce1);
    cubieTemp_V_U->q1(cubieTemp_V_q1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state31);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state31 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state31 );

    SC_METHOD(thread_cubieColor_V_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_13_cast_fu_900_p1 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state31 );

    SC_METHOD(thread_cubieColor_V_address1);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state31 );

    SC_METHOD(thread_cubieColor_V_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state31 );

    SC_METHOD(thread_cubieColor_V_ce1);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state31 );

    SC_METHOD(thread_cubieColor_V_d0);
    sensitive << ( cubieTemp_V_q0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state31 );

    SC_METHOD(thread_cubieColor_V_d1);
    sensitive << ( cubieTemp_V_q1 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state31 );

    SC_METHOD(thread_cubieColor_V_we0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state31 );

    SC_METHOD(thread_cubieColor_V_we1);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state31 );

    SC_METHOD(thread_cubieTemp_V_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_13_cast_reg_1196 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );

    SC_METHOD(thread_cubieTemp_V_address1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );

    SC_METHOD(thread_cubieTemp_V_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );

    SC_METHOD(thread_cubieTemp_V_ce1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );

    SC_METHOD(thread_cubieTemp_V_we0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_i_V_fu_851_p2);
    sensitive << ( p_s_reg_792 );

    SC_METHOD(thread_j_V_fu_885_p2);
    sensitive << ( p_4_reg_803 );

    SC_METHOD(thread_lhs_V_cast_fu_830_p1);
    sensitive << ( moveCounter_V_assign_fu_818_p2 );

    SC_METHOD(thread_moveCounter_V_assign_fu_818_p2);
    sensitive << ( moveCounter_V_i );

    SC_METHOD(thread_moveCounter_V_o);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( moveCounter_V_i );
    sensitive << ( moveCounter_V_assign_fu_818_p2 );

    SC_METHOD(thread_moveCounter_V_o_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_moves_V_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_s_fu_840_p1 );

    SC_METHOD(thread_moves_V_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_moves_V_d0);
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_moves_V_we0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_p_shl_cast_fu_869_p1);
    sensitive << ( tmp_11_fu_861_p3 );

    SC_METHOD(thread_r_V_fu_834_p2);
    sensitive << ( lhs_V_cast_fu_830_p1 );

    SC_METHOD(thread_tmp_11_fu_861_p3);
    sensitive << ( p_s_reg_792 );

    SC_METHOD(thread_tmp_12_fu_873_p2);
    sensitive << ( tmp_69_cast_fu_857_p1 );
    sensitive << ( p_shl_cast_fu_869_p1 );

    SC_METHOD(thread_tmp_13_cast_fu_900_p1);
    sensitive << ( tmp_13_fu_895_p2 );

    SC_METHOD(thread_tmp_13_fu_895_p2);
    sensitive << ( tmp_12_reg_1183 );
    sensitive << ( tmp_71_cast_fu_891_p1 );

    SC_METHOD(thread_tmp_64_fu_845_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( p_s_reg_792 );

    SC_METHOD(thread_tmp_65_fu_879_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( p_4_reg_803 );

    SC_METHOD(thread_tmp_69_cast_fu_857_p1);
    sensitive << ( p_s_reg_792 );

    SC_METHOD(thread_tmp_71_cast_fu_891_p1);
    sensitive << ( p_4_reg_803 );

    SC_METHOD(thread_tmp_s_fu_840_p1);
    sensitive << ( r_V_fu_834_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_64_fu_845_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_65_fu_879_p2 );

    ap_CS_fsm = "0000000000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "rotateCubeHorizontal_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, moveCounter_V_i, "(port)moveCounter_V_i");
    sc_trace(mVcdFile, moveCounter_V_o, "(port)moveCounter_V_o");
    sc_trace(mVcdFile, moveCounter_V_o_ap_vld, "(port)moveCounter_V_o_ap_vld");
    sc_trace(mVcdFile, moves_V_address0, "(port)moves_V_address0");
    sc_trace(mVcdFile, moves_V_ce0, "(port)moves_V_ce0");
    sc_trace(mVcdFile, moves_V_we0, "(port)moves_V_we0");
    sc_trace(mVcdFile, moves_V_d0, "(port)moves_V_d0");
    sc_trace(mVcdFile, cubieColor_V_address0, "(port)cubieColor_V_address0");
    sc_trace(mVcdFile, cubieColor_V_ce0, "(port)cubieColor_V_ce0");
    sc_trace(mVcdFile, cubieColor_V_we0, "(port)cubieColor_V_we0");
    sc_trace(mVcdFile, cubieColor_V_d0, "(port)cubieColor_V_d0");
    sc_trace(mVcdFile, cubieColor_V_q0, "(port)cubieColor_V_q0");
    sc_trace(mVcdFile, cubieColor_V_address1, "(port)cubieColor_V_address1");
    sc_trace(mVcdFile, cubieColor_V_ce1, "(port)cubieColor_V_ce1");
    sc_trace(mVcdFile, cubieColor_V_we1, "(port)cubieColor_V_we1");
    sc_trace(mVcdFile, cubieColor_V_d1, "(port)cubieColor_V_d1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_V_fu_851_p2, "i_V_fu_851_p2");
    sc_trace(mVcdFile, i_V_reg_1178, "i_V_reg_1178");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_12_fu_873_p2, "tmp_12_fu_873_p2");
    sc_trace(mVcdFile, tmp_12_reg_1183, "tmp_12_reg_1183");
    sc_trace(mVcdFile, tmp_64_fu_845_p2, "tmp_64_fu_845_p2");
    sc_trace(mVcdFile, j_V_fu_885_p2, "j_V_fu_885_p2");
    sc_trace(mVcdFile, j_V_reg_1191, "j_V_reg_1191");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_13_cast_fu_900_p1, "tmp_13_cast_fu_900_p1");
    sc_trace(mVcdFile, tmp_13_cast_reg_1196, "tmp_13_cast_reg_1196");
    sc_trace(mVcdFile, tmp_65_fu_879_p2, "tmp_65_fu_879_p2");
    sc_trace(mVcdFile, cubieTemp_V_address0, "cubieTemp_V_address0");
    sc_trace(mVcdFile, cubieTemp_V_ce0, "cubieTemp_V_ce0");
    sc_trace(mVcdFile, cubieTemp_V_we0, "cubieTemp_V_we0");
    sc_trace(mVcdFile, cubieTemp_V_q0, "cubieTemp_V_q0");
    sc_trace(mVcdFile, cubieTemp_V_address1, "cubieTemp_V_address1");
    sc_trace(mVcdFile, cubieTemp_V_ce1, "cubieTemp_V_ce1");
    sc_trace(mVcdFile, cubieTemp_V_q1, "cubieTemp_V_q1");
    sc_trace(mVcdFile, p_s_reg_792, "p_s_reg_792");
    sc_trace(mVcdFile, p_4_reg_803, "p_4_reg_803");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_s_fu_840_p1, "tmp_s_fu_840_p1");
    sc_trace(mVcdFile, moveCounter_V_assign_fu_818_p2, "moveCounter_V_assign_fu_818_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, ap_CS_fsm_state31, "ap_CS_fsm_state31");
    sc_trace(mVcdFile, lhs_V_cast_fu_830_p1, "lhs_V_cast_fu_830_p1");
    sc_trace(mVcdFile, r_V_fu_834_p2, "r_V_fu_834_p2");
    sc_trace(mVcdFile, tmp_11_fu_861_p3, "tmp_11_fu_861_p3");
    sc_trace(mVcdFile, tmp_69_cast_fu_857_p1, "tmp_69_cast_fu_857_p1");
    sc_trace(mVcdFile, p_shl_cast_fu_869_p1, "p_shl_cast_fu_869_p1");
    sc_trace(mVcdFile, tmp_71_cast_fu_891_p1, "tmp_71_cast_fu_891_p1");
    sc_trace(mVcdFile, tmp_13_fu_895_p2, "tmp_13_fu_895_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

rotateCubeHorizontal::~rotateCubeHorizontal() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete cubieTemp_V_U;
}

void rotateCubeHorizontal::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        p_4_reg_803 = j_V_reg_1191.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(tmp_64_fu_845_p2.read(), ap_const_lv1_0))) {
        p_4_reg_803 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        p_s_reg_792 = ap_const_lv3_0;
    } else if ((esl_seteq<1,1,1>(tmp_65_fu_879_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        p_s_reg_792 = i_V_reg_1178.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_V_reg_1178 = i_V_fu_851_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_V_reg_1191 = j_V_fu_885_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_64_fu_845_p2.read(), ap_const_lv1_0))) {
        tmp_12_reg_1183 = tmp_12_fu_873_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(tmp_65_fu_879_p2.read(), ap_const_lv1_0))) {
        tmp_13_cast_reg_1196 = tmp_13_cast_fu_900_p1.read();
    }
}

void rotateCubeHorizontal::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void rotateCubeHorizontal::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void rotateCubeHorizontal::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void rotateCubeHorizontal::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void rotateCubeHorizontal::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void rotateCubeHorizontal::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void rotateCubeHorizontal::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void rotateCubeHorizontal::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void rotateCubeHorizontal::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void rotateCubeHorizontal::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void rotateCubeHorizontal::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void rotateCubeHorizontal::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void rotateCubeHorizontal::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void rotateCubeHorizontal::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void rotateCubeHorizontal::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void rotateCubeHorizontal::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void rotateCubeHorizontal::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void rotateCubeHorizontal::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void rotateCubeHorizontal::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[25];
}

void rotateCubeHorizontal::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[26];
}

void rotateCubeHorizontal::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read()[27];
}

void rotateCubeHorizontal::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read()[28];
}

void rotateCubeHorizontal::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void rotateCubeHorizontal::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[29];
}

void rotateCubeHorizontal::thread_ap_CS_fsm_state31() {
    ap_CS_fsm_state31 = ap_CS_fsm.read()[30];
}

void rotateCubeHorizontal::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void rotateCubeHorizontal::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void rotateCubeHorizontal::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void rotateCubeHorizontal::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void rotateCubeHorizontal::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void rotateCubeHorizontal::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void rotateCubeHorizontal::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void rotateCubeHorizontal::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void rotateCubeHorizontal::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void rotateCubeHorizontal::thread_cubieColor_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        cubieColor_V_address0 = ap_const_lv6_35;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        cubieColor_V_address0 = ap_const_lv6_33;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        cubieColor_V_address0 = ap_const_lv6_31;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        cubieColor_V_address0 = ap_const_lv6_2F;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        cubieColor_V_address0 = ap_const_lv6_2D;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        cubieColor_V_address0 = ap_const_lv6_2B;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        cubieColor_V_address0 = ap_const_lv6_29;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        cubieColor_V_address0 = ap_const_lv6_27;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        cubieColor_V_address0 = ap_const_lv6_25;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        cubieColor_V_address0 = ap_const_lv6_23;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        cubieColor_V_address0 = ap_const_lv6_21;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        cubieColor_V_address0 = ap_const_lv6_1F;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        cubieColor_V_address0 = ap_const_lv6_1D;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        cubieColor_V_address0 = ap_const_lv6_1B;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        cubieColor_V_address0 = ap_const_lv6_19;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        cubieColor_V_address0 = ap_const_lv6_17;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        cubieColor_V_address0 = ap_const_lv6_15;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        cubieColor_V_address0 = ap_const_lv6_13;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        cubieColor_V_address0 = ap_const_lv6_11;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        cubieColor_V_address0 = ap_const_lv6_F;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        cubieColor_V_address0 = ap_const_lv6_D;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        cubieColor_V_address0 = ap_const_lv6_B;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        cubieColor_V_address0 = ap_const_lv6_9;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        cubieColor_V_address0 = ap_const_lv6_7;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        cubieColor_V_address0 = ap_const_lv6_5;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        cubieColor_V_address0 = ap_const_lv6_3;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        cubieColor_V_address0 = ap_const_lv6_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        cubieColor_V_address0 =  (sc_lv<6>) (tmp_13_cast_fu_900_p1.read());
    } else {
        cubieColor_V_address0 = "XXXXXX";
    }
}

void rotateCubeHorizontal::thread_cubieColor_V_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        cubieColor_V_address1 = ap_const_lv6_34;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        cubieColor_V_address1 = ap_const_lv6_32;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        cubieColor_V_address1 = ap_const_lv6_30;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        cubieColor_V_address1 = ap_const_lv6_2E;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        cubieColor_V_address1 = ap_const_lv6_2C;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        cubieColor_V_address1 = ap_const_lv6_2A;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        cubieColor_V_address1 = ap_const_lv6_28;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        cubieColor_V_address1 = ap_const_lv6_26;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        cubieColor_V_address1 = ap_const_lv6_24;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        cubieColor_V_address1 = ap_const_lv6_22;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        cubieColor_V_address1 = ap_const_lv6_20;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        cubieColor_V_address1 = ap_const_lv6_1E;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        cubieColor_V_address1 = ap_const_lv6_1C;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        cubieColor_V_address1 = ap_const_lv6_1A;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        cubieColor_V_address1 = ap_const_lv6_18;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        cubieColor_V_address1 = ap_const_lv6_16;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        cubieColor_V_address1 = ap_const_lv6_14;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        cubieColor_V_address1 = ap_const_lv6_12;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        cubieColor_V_address1 = ap_const_lv6_10;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        cubieColor_V_address1 = ap_const_lv6_E;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        cubieColor_V_address1 = ap_const_lv6_C;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        cubieColor_V_address1 = ap_const_lv6_A;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        cubieColor_V_address1 = ap_const_lv6_8;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        cubieColor_V_address1 = ap_const_lv6_6;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        cubieColor_V_address1 = ap_const_lv6_4;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        cubieColor_V_address1 = ap_const_lv6_2;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        cubieColor_V_address1 = ap_const_lv6_1;
    } else {
        cubieColor_V_address1 = "XXXXXX";
    }
}

void rotateCubeHorizontal::thread_cubieColor_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()))) {
        cubieColor_V_ce0 = ap_const_logic_1;
    } else {
        cubieColor_V_ce0 = ap_const_logic_0;
    }
}

void rotateCubeHorizontal::thread_cubieColor_V_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()))) {
        cubieColor_V_ce1 = ap_const_logic_1;
    } else {
        cubieColor_V_ce1 = ap_const_logic_0;
    }
}

void rotateCubeHorizontal::thread_cubieColor_V_d0() {
    cubieColor_V_d0 = cubieTemp_V_q0.read();
}

void rotateCubeHorizontal::thread_cubieColor_V_d1() {
    cubieColor_V_d1 = cubieTemp_V_q1.read();
}

void rotateCubeHorizontal::thread_cubieColor_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()))) {
        cubieColor_V_we0 = ap_const_logic_1;
    } else {
        cubieColor_V_we0 = ap_const_logic_0;
    }
}

void rotateCubeHorizontal::thread_cubieColor_V_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()))) {
        cubieColor_V_we1 = ap_const_logic_1;
    } else {
        cubieColor_V_we1 = ap_const_logic_0;
    }
}

void rotateCubeHorizontal::thread_cubieTemp_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        cubieTemp_V_address0 =  (sc_lv<6>) (ap_const_lv64_1A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        cubieTemp_V_address0 =  (sc_lv<6>) (ap_const_lv64_18);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        cubieTemp_V_address0 =  (sc_lv<6>) (ap_const_lv64_16);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        cubieTemp_V_address0 =  (sc_lv<6>) (ap_const_lv64_14);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        cubieTemp_V_address0 =  (sc_lv<6>) (ap_const_lv64_12);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        cubieTemp_V_address0 =  (sc_lv<6>) (ap_const_lv64_22);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        cubieTemp_V_address0 =  (sc_lv<6>) (ap_const_lv64_20);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        cubieTemp_V_address0 =  (sc_lv<6>) (ap_const_lv64_1E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        cubieTemp_V_address0 =  (sc_lv<6>) (ap_const_lv64_1C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        cubieTemp_V_address0 =  (sc_lv<6>) (ap_const_lv64_35);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        cubieTemp_V_address0 =  (sc_lv<6>) (ap_const_lv64_33);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        cubieTemp_V_address0 =  (sc_lv<6>) (ap_const_lv64_31);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        cubieTemp_V_address0 =  (sc_lv<6>) (ap_const_lv64_2F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        cubieTemp_V_address0 =  (sc_lv<6>) (ap_const_lv64_2D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        cubieTemp_V_address0 =  (sc_lv<6>) (ap_const_lv64_2B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        cubieTemp_V_address0 =  (sc_lv<6>) (ap_const_lv64_29);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        cubieTemp_V_address0 =  (sc_lv<6>) (ap_const_lv64_27);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        cubieTemp_V_address0 =  (sc_lv<6>) (ap_const_lv64_25);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        cubieTemp_V_address0 =  (sc_lv<6>) (ap_const_lv64_F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        cubieTemp_V_address0 =  (sc_lv<6>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        cubieTemp_V_address0 =  (sc_lv<6>) (ap_const_lv64_D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        cubieTemp_V_address0 =  (sc_lv<6>) (ap_const_lv64_11);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        cubieTemp_V_address0 =  (sc_lv<6>) (ap_const_lv64_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        cubieTemp_V_address0 =  (sc_lv<6>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        cubieTemp_V_address0 =  (sc_lv<6>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        cubieTemp_V_address0 =  (sc_lv<6>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        cubieTemp_V_address0 =  (sc_lv<6>) (tmp_13_cast_reg_1196.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        cubieTemp_V_address0 =  (sc_lv<6>) (ap_const_lv64_6);
    } else {
        cubieTemp_V_address0 = "XXXXXX";
    }
}

void rotateCubeHorizontal::thread_cubieTemp_V_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        cubieTemp_V_address1 =  (sc_lv<6>) (ap_const_lv64_19);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        cubieTemp_V_address1 =  (sc_lv<6>) (ap_const_lv64_17);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        cubieTemp_V_address1 =  (sc_lv<6>) (ap_const_lv64_15);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        cubieTemp_V_address1 =  (sc_lv<6>) (ap_const_lv64_13);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        cubieTemp_V_address1 =  (sc_lv<6>) (ap_const_lv64_23);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        cubieTemp_V_address1 =  (sc_lv<6>) (ap_const_lv64_21);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        cubieTemp_V_address1 =  (sc_lv<6>) (ap_const_lv64_1F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        cubieTemp_V_address1 =  (sc_lv<6>) (ap_const_lv64_1D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        cubieTemp_V_address1 =  (sc_lv<6>) (ap_const_lv64_1B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        cubieTemp_V_address1 =  (sc_lv<6>) (ap_const_lv64_34);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        cubieTemp_V_address1 =  (sc_lv<6>) (ap_const_lv64_32);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        cubieTemp_V_address1 =  (sc_lv<6>) (ap_const_lv64_30);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        cubieTemp_V_address1 =  (sc_lv<6>) (ap_const_lv64_2E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        cubieTemp_V_address1 =  (sc_lv<6>) (ap_const_lv64_2C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        cubieTemp_V_address1 =  (sc_lv<6>) (ap_const_lv64_2A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        cubieTemp_V_address1 =  (sc_lv<6>) (ap_const_lv64_28);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        cubieTemp_V_address1 =  (sc_lv<6>) (ap_const_lv64_26);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        cubieTemp_V_address1 =  (sc_lv<6>) (ap_const_lv64_24);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        cubieTemp_V_address1 =  (sc_lv<6>) (ap_const_lv64_C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        cubieTemp_V_address1 =  (sc_lv<6>) (ap_const_lv64_10);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        cubieTemp_V_address1 =  (sc_lv<6>) (ap_const_lv64_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        cubieTemp_V_address1 =  (sc_lv<6>) (ap_const_lv64_E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        cubieTemp_V_address1 =  (sc_lv<6>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        cubieTemp_V_address1 =  (sc_lv<6>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        cubieTemp_V_address1 =  (sc_lv<6>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        cubieTemp_V_address1 =  (sc_lv<6>) (ap_const_lv64_0);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        cubieTemp_V_address1 =  (sc_lv<6>) (ap_const_lv64_3);
    } else {
        cubieTemp_V_address1 = "XXXXXX";
    }
}

void rotateCubeHorizontal::thread_cubieTemp_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()))) {
        cubieTemp_V_ce0 = ap_const_logic_1;
    } else {
        cubieTemp_V_ce0 = ap_const_logic_0;
    }
}

void rotateCubeHorizontal::thread_cubieTemp_V_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()))) {
        cubieTemp_V_ce1 = ap_const_logic_1;
    } else {
        cubieTemp_V_ce1 = ap_const_logic_0;
    }
}

void rotateCubeHorizontal::thread_cubieTemp_V_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        cubieTemp_V_we0 = ap_const_logic_1;
    } else {
        cubieTemp_V_we0 = ap_const_logic_0;
    }
}

void rotateCubeHorizontal::thread_i_V_fu_851_p2() {
    i_V_fu_851_p2 = (!p_s_reg_792.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(p_s_reg_792.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void rotateCubeHorizontal::thread_j_V_fu_885_p2() {
    j_V_fu_885_p2 = (!p_4_reg_803.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(p_4_reg_803.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void rotateCubeHorizontal::thread_lhs_V_cast_fu_830_p1() {
    lhs_V_cast_fu_830_p1 = esl_zext<9,8>(moveCounter_V_assign_fu_818_p2.read());
}

void rotateCubeHorizontal::thread_moveCounter_V_assign_fu_818_p2() {
    moveCounter_V_assign_fu_818_p2 = (!moveCounter_V_i.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(moveCounter_V_i.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void rotateCubeHorizontal::thread_moveCounter_V_o() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        moveCounter_V_o = moveCounter_V_assign_fu_818_p2.read();
    } else {
        moveCounter_V_o = moveCounter_V_i.read();
    }
}

void rotateCubeHorizontal::thread_moveCounter_V_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        moveCounter_V_o_ap_vld = ap_const_logic_1;
    } else {
        moveCounter_V_o_ap_vld = ap_const_logic_0;
    }
}

void rotateCubeHorizontal::thread_moves_V_address0() {
    moves_V_address0 =  (sc_lv<8>) (tmp_s_fu_840_p1.read());
}

void rotateCubeHorizontal::thread_moves_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        moves_V_ce0 = ap_const_logic_1;
    } else {
        moves_V_ce0 = ap_const_logic_0;
    }
}

void rotateCubeHorizontal::thread_moves_V_d0() {
    moves_V_d0 = ap_const_lv4_C;
}

void rotateCubeHorizontal::thread_moves_V_we0() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        moves_V_we0 = ap_const_logic_1;
    } else {
        moves_V_we0 = ap_const_logic_0;
    }
}

void rotateCubeHorizontal::thread_p_shl_cast_fu_869_p1() {
    p_shl_cast_fu_869_p1 = esl_zext<7,6>(tmp_11_fu_861_p3.read());
}

void rotateCubeHorizontal::thread_r_V_fu_834_p2() {
    r_V_fu_834_p2 = (!lhs_V_cast_fu_830_p1.read().is_01() || !ap_const_lv9_1FF.is_01())? sc_lv<9>(): (sc_biguint<9>(lhs_V_cast_fu_830_p1.read()) + sc_bigint<9>(ap_const_lv9_1FF));
}

void rotateCubeHorizontal::thread_tmp_11_fu_861_p3() {
    tmp_11_fu_861_p3 = esl_concat<3,3>(p_s_reg_792.read(), ap_const_lv3_0);
}

void rotateCubeHorizontal::thread_tmp_12_fu_873_p2() {
    tmp_12_fu_873_p2 = (!tmp_69_cast_fu_857_p1.read().is_01() || !p_shl_cast_fu_869_p1.read().is_01())? sc_lv<7>(): (sc_biguint<7>(tmp_69_cast_fu_857_p1.read()) + sc_biguint<7>(p_shl_cast_fu_869_p1.read()));
}

void rotateCubeHorizontal::thread_tmp_13_cast_fu_900_p1() {
    tmp_13_cast_fu_900_p1 = esl_zext<64,7>(tmp_13_fu_895_p2.read());
}

void rotateCubeHorizontal::thread_tmp_13_fu_895_p2() {
    tmp_13_fu_895_p2 = (!tmp_12_reg_1183.read().is_01() || !tmp_71_cast_fu_891_p1.read().is_01())? sc_lv<7>(): (sc_biguint<7>(tmp_12_reg_1183.read()) + sc_biguint<7>(tmp_71_cast_fu_891_p1.read()));
}

void rotateCubeHorizontal::thread_tmp_64_fu_845_p2() {
    tmp_64_fu_845_p2 = (!p_s_reg_792.read().is_01() || !ap_const_lv3_6.is_01())? sc_lv<1>(): sc_lv<1>(p_s_reg_792.read() == ap_const_lv3_6);
}

void rotateCubeHorizontal::thread_tmp_65_fu_879_p2() {
    tmp_65_fu_879_p2 = (!p_4_reg_803.read().is_01() || !ap_const_lv4_9.is_01())? sc_lv<1>(): sc_lv<1>(p_4_reg_803.read() == ap_const_lv4_9);
}

void rotateCubeHorizontal::thread_tmp_69_cast_fu_857_p1() {
    tmp_69_cast_fu_857_p1 = esl_zext<7,3>(p_s_reg_792.read());
}

void rotateCubeHorizontal::thread_tmp_71_cast_fu_891_p1() {
    tmp_71_cast_fu_891_p1 = esl_zext<7,4>(p_4_reg_803.read());
}

void rotateCubeHorizontal::thread_tmp_s_fu_840_p1() {
    tmp_s_fu_840_p1 = esl_sext<64,9>(r_V_fu_834_p2.read());
}

void rotateCubeHorizontal::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_64_fu_845_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(tmp_65_fu_879_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<31>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

