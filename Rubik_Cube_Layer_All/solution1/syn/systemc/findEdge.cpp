// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "findEdge.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic findEdge::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic findEdge::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<13> findEdge::ap_ST_fsm_state1 = "1";
const sc_lv<13> findEdge::ap_ST_fsm_state2 = "10";
const sc_lv<13> findEdge::ap_ST_fsm_state3 = "100";
const sc_lv<13> findEdge::ap_ST_fsm_state4 = "1000";
const sc_lv<13> findEdge::ap_ST_fsm_state5 = "10000";
const sc_lv<13> findEdge::ap_ST_fsm_state6 = "100000";
const sc_lv<13> findEdge::ap_ST_fsm_state7 = "1000000";
const sc_lv<13> findEdge::ap_ST_fsm_state8 = "10000000";
const sc_lv<13> findEdge::ap_ST_fsm_state9 = "100000000";
const sc_lv<13> findEdge::ap_ST_fsm_state10 = "1000000000";
const sc_lv<13> findEdge::ap_ST_fsm_state11 = "10000000000";
const sc_lv<13> findEdge::ap_ST_fsm_state12 = "100000000000";
const sc_lv<13> findEdge::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<32> findEdge::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> findEdge::ap_const_lv32_1 = "1";
const sc_lv<32> findEdge::ap_const_lv32_2 = "10";
const sc_lv<32> findEdge::ap_const_lv32_3 = "11";
const sc_lv<32> findEdge::ap_const_lv32_4 = "100";
const sc_lv<32> findEdge::ap_const_lv32_5 = "101";
const sc_lv<32> findEdge::ap_const_lv32_6 = "110";
const sc_lv<32> findEdge::ap_const_lv32_7 = "111";
const sc_lv<32> findEdge::ap_const_lv32_8 = "1000";
const sc_lv<32> findEdge::ap_const_lv32_9 = "1001";
const sc_lv<32> findEdge::ap_const_lv32_A = "1010";
const sc_lv<32> findEdge::ap_const_lv32_B = "1011";
const sc_lv<6> findEdge::ap_const_lv6_7 = "111";
const sc_lv<6> findEdge::ap_const_lv6_1C = "11100";
const sc_lv<6> findEdge::ap_const_lv6_3 = "11";
const sc_lv<6> findEdge::ap_const_lv6_25 = "100101";
const sc_lv<6> findEdge::ap_const_lv6_1 = "1";
const sc_lv<6> findEdge::ap_const_lv6_13 = "10011";
const sc_lv<6> findEdge::ap_const_lv6_5 = "101";
const sc_lv<6> findEdge::ap_const_lv6_2E = "101110";
const sc_lv<6> findEdge::ap_const_lv6_1E = "11110";
const sc_lv<6> findEdge::ap_const_lv6_29 = "101001";
const sc_lv<6> findEdge::ap_const_lv6_27 = "100111";
const sc_lv<6> findEdge::ap_const_lv6_17 = "10111";
const sc_lv<6> findEdge::ap_const_lv6_32 = "110010";
const sc_lv<6> findEdge::ap_const_lv6_15 = "10101";
const sc_lv<6> findEdge::ap_const_lv6_20 = "100000";
const sc_lv<6> findEdge::ap_const_lv6_30 = "110000";
const sc_lv<6> findEdge::ap_const_lv6_A = "1010";
const sc_lv<6> findEdge::ap_const_lv6_22 = "100010";
const sc_lv<6> findEdge::ap_const_lv6_C = "1100";
const sc_lv<6> findEdge::ap_const_lv6_2B = "101011";
const sc_lv<6> findEdge::ap_const_lv6_10 = "10000";
const sc_lv<6> findEdge::ap_const_lv6_19 = "11001";
const sc_lv<6> findEdge::ap_const_lv6_E = "1110";
const sc_lv<6> findEdge::ap_const_lv6_34 = "110100";
const sc_lv<32> findEdge::ap_const_lv32_C = "1100";
const sc_lv<2> findEdge::ap_const_lv2_2 = "10";
const sc_lv<3> findEdge::ap_const_lv3_4 = "100";
const sc_lv<3> findEdge::ap_const_lv3_3 = "11";
const sc_lv<4> findEdge::ap_const_lv4_C = "1100";
const sc_lv<4> findEdge::ap_const_lv4_B = "1011";
const sc_lv<4> findEdge::ap_const_lv4_A = "1010";
const sc_lv<4> findEdge::ap_const_lv4_9 = "1001";
const sc_lv<4> findEdge::ap_const_lv4_8 = "1000";
const sc_lv<4> findEdge::ap_const_lv4_7 = "111";
const sc_lv<4> findEdge::ap_const_lv4_6 = "110";
const sc_lv<4> findEdge::ap_const_lv4_5 = "101";
const sc_lv<4> findEdge::ap_const_lv4_0 = "0000";
const bool findEdge::ap_const_boolean_1 = true;

findEdge::findEdge(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_agg_result_V_cast_fu_185_p1);
    sensitive << ( sel_tmp_fu_179_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( newSel9_fu_494_p3 );
    sensitive << ( ap_return_preg );

    SC_METHOD(thread_cubieColor_V_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_cubieColor_V_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_cubieColor_V_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_cubieColor_V_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_grp_fu_123_p2);
    sensitive << ( fEC_V );
    sensitive << ( cubieColor_V_q0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_grp_fu_129_p2);
    sensitive << ( sEC_V );
    sensitive << ( cubieColor_V_q1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_grp_fu_135_p2);
    sensitive << ( sEC_V );
    sensitive << ( cubieColor_V_q0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_grp_fu_141_p2);
    sensitive << ( fEC_V );
    sensitive << ( cubieColor_V_q1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_newSel1_fu_431_p3);
    sensitive << ( sel_tmp9_reg_637 );

    SC_METHOD(thread_newSel28_cast_cast_fu_450_p3);
    sensitive << ( sel_tmp1_reg_576 );

    SC_METHOD(thread_newSel2_fu_443_p3);
    sensitive << ( sel_tmp5_reg_602 );

    SC_METHOD(thread_newSel32_cast_fu_261_p1);
    sensitive << ( newSel4_reg_526 );

    SC_METHOD(thread_newSel38_cast_fu_478_p1);
    sensitive << ( newSel7_reg_551 );

    SC_METHOD(thread_newSel3_fu_247_p3);
    sensitive << ( sel_tmp6_fu_241_p2 );

    SC_METHOD(thread_newSel4_fu_207_p3);
    sensitive << ( sel_tmp2_fu_201_p2 );
    sensitive << ( agg_result_V_cast_fu_185_p1 );

    SC_METHOD(thread_newSel5_fu_457_p3);
    sensitive << ( or_cond_fu_425_p2 );
    sensitive << ( newSel_fu_417_p3 );
    sensitive << ( newSel1_fu_431_p3 );

    SC_METHOD(thread_newSel6_fu_471_p3);
    sensitive << ( or_cond2_reg_607 );
    sensitive << ( newSel2_fu_443_p3 );
    sensitive << ( newSel28_cast_cast_fu_450_p3 );

    SC_METHOD(thread_newSel7_fu_264_p3);
    sensitive << ( or_cond4_fu_255_p2 );
    sensitive << ( newSel3_fu_247_p3 );
    sensitive << ( newSel32_cast_fu_261_p1 );

    SC_METHOD(thread_newSel8_fu_481_p3);
    sensitive << ( or_cond5_fu_465_p2 );
    sensitive << ( newSel5_fu_457_p3 );
    sensitive << ( newSel6_fu_471_p3 );

    SC_METHOD(thread_newSel9_fu_494_p3);
    sensitive << ( or_cond7_fu_489_p2 );
    sensitive << ( newSel8_fu_481_p3 );
    sensitive << ( newSel38_cast_fu_478_p1 );

    SC_METHOD(thread_newSel_fu_417_p3);
    sensitive << ( sel_tmp11_fu_411_p2 );

    SC_METHOD(thread_or_cond10_fu_272_p2);
    sensitive << ( grp_fu_123_p2 );
    sensitive << ( grp_fu_129_p2 );

    SC_METHOD(thread_or_cond11_fu_278_p2);
    sensitive << ( grp_fu_135_p2 );
    sensitive << ( grp_fu_141_p2 );

    SC_METHOD(thread_or_cond12_fu_304_p2);
    sensitive << ( tmp_107_reg_582 );
    sensitive << ( tmp_108_reg_587 );

    SC_METHOD(thread_or_cond13_fu_308_p2);
    sensitive << ( tmp_109_reg_592 );
    sensitive << ( tmp_110_reg_597 );

    SC_METHOD(thread_or_cond14_fu_318_p2);
    sensitive << ( grp_fu_123_p2 );
    sensitive << ( grp_fu_129_p2 );

    SC_METHOD(thread_or_cond15_fu_324_p2);
    sensitive << ( grp_fu_135_p2 );
    sensitive << ( grp_fu_141_p2 );

    SC_METHOD(thread_or_cond16_fu_371_p2);
    sensitive << ( tmp_115_reg_617 );
    sensitive << ( tmp_116_reg_622 );

    SC_METHOD(thread_or_cond17_fu_375_p2);
    sensitive << ( tmp_117_reg_627 );
    sensitive << ( tmp_118_reg_632 );

    SC_METHOD(thread_or_cond18_fu_353_p2);
    sensitive << ( grp_fu_123_p2 );
    sensitive << ( grp_fu_129_p2 );

    SC_METHOD(thread_or_cond19_fu_359_p2);
    sensitive << ( grp_fu_135_p2 );
    sensitive << ( grp_fu_141_p2 );

    SC_METHOD(thread_or_cond1_18_fu_294_p2);
    sensitive << ( tmp_101_reg_566 );
    sensitive << ( tmp_102_reg_571 );

    SC_METHOD(thread_or_cond1_fu_438_p2);
    sensitive << ( sel_tmp9_reg_637 );
    sensitive << ( sel_tmp7_fu_379_p2 );

    SC_METHOD(thread_or_cond20_fu_385_p2);
    sensitive << ( tmp_123_reg_643 );
    sensitive << ( tmp_124_reg_648 );

    SC_METHOD(thread_or_cond21_fu_389_p2);
    sensitive << ( tmp_125_reg_653 );
    sensitive << ( tmp_126_reg_658 );

    SC_METHOD(thread_or_cond22_fu_399_p2);
    sensitive << ( grp_fu_123_p2 );
    sensitive << ( grp_fu_129_p2 );

    SC_METHOD(thread_or_cond23_fu_405_p2);
    sensitive << ( grp_fu_135_p2 );
    sensitive << ( grp_fu_141_p2 );

    SC_METHOD(thread_or_cond2_12_fu_173_p2);
    sensitive << ( tmp_85_fu_163_p2 );
    sensitive << ( tmp_86_fu_168_p2 );

    SC_METHOD(thread_or_cond2_fu_336_p2);
    sensitive << ( sel_tmp5_fu_330_p2 );
    sensitive << ( sel_tmp3_fu_312_p2 );

    SC_METHOD(thread_or_cond3_13_fu_189_p2);
    sensitive << ( grp_fu_123_p2 );
    sensitive << ( grp_fu_129_p2 );

    SC_METHOD(thread_or_cond3_fu_342_p2);
    sensitive << ( sel_tmp1_reg_576 );
    sensitive << ( sel_tmp8_fu_298_p2 );

    SC_METHOD(thread_or_cond4_14_fu_195_p2);
    sensitive << ( grp_fu_135_p2 );
    sensitive << ( grp_fu_141_p2 );

    SC_METHOD(thread_or_cond4_fu_255_p2);
    sensitive << ( sel_tmp6_fu_241_p2 );
    sensitive << ( sel_tmp4_fu_223_p2 );

    SC_METHOD(thread_or_cond5_15_fu_215_p2);
    sensitive << ( tmp_91_reg_531 );
    sensitive << ( tmp_92_reg_536 );

    SC_METHOD(thread_or_cond5_fu_465_p2);
    sensitive << ( or_cond_fu_425_p2 );
    sensitive << ( or_cond1_fu_438_p2 );

    SC_METHOD(thread_or_cond6_16_fu_219_p2);
    sensitive << ( tmp_93_reg_541 );
    sensitive << ( tmp_94_reg_546 );

    SC_METHOD(thread_or_cond6_fu_347_p2);
    sensitive << ( or_cond2_fu_336_p2 );
    sensitive << ( or_cond3_fu_342_p2 );

    SC_METHOD(thread_or_cond7_17_fu_229_p2);
    sensitive << ( grp_fu_123_p2 );
    sensitive << ( grp_fu_129_p2 );

    SC_METHOD(thread_or_cond7_fu_489_p2);
    sensitive << ( or_cond6_reg_612 );
    sensitive << ( or_cond5_fu_465_p2 );

    SC_METHOD(thread_or_cond8_fu_235_p2);
    sensitive << ( grp_fu_135_p2 );
    sensitive << ( grp_fu_141_p2 );

    SC_METHOD(thread_or_cond9_fu_290_p2);
    sensitive << ( tmp_99_reg_556 );
    sensitive << ( tmp_100_reg_561 );

    SC_METHOD(thread_or_cond_11_fu_157_p2);
    sensitive << ( tmp_fu_147_p2 );
    sensitive << ( tmp_s_fu_152_p2 );

    SC_METHOD(thread_or_cond_fu_425_p2);
    sensitive << ( sel_tmp11_fu_411_p2 );
    sensitive << ( sel_tmp10_fu_393_p2 );

    SC_METHOD(thread_sel_tmp10_fu_393_p2);
    sensitive << ( or_cond20_fu_385_p2 );
    sensitive << ( or_cond21_fu_389_p2 );

    SC_METHOD(thread_sel_tmp11_fu_411_p2);
    sensitive << ( or_cond22_fu_399_p2 );
    sensitive << ( or_cond23_fu_405_p2 );

    SC_METHOD(thread_sel_tmp1_fu_284_p2);
    sensitive << ( or_cond10_fu_272_p2 );
    sensitive << ( or_cond11_fu_278_p2 );

    SC_METHOD(thread_sel_tmp2_fu_201_p2);
    sensitive << ( or_cond3_13_fu_189_p2 );
    sensitive << ( or_cond4_14_fu_195_p2 );

    SC_METHOD(thread_sel_tmp3_fu_312_p2);
    sensitive << ( or_cond12_fu_304_p2 );
    sensitive << ( or_cond13_fu_308_p2 );

    SC_METHOD(thread_sel_tmp4_fu_223_p2);
    sensitive << ( or_cond5_15_fu_215_p2 );
    sensitive << ( or_cond6_16_fu_219_p2 );

    SC_METHOD(thread_sel_tmp5_fu_330_p2);
    sensitive << ( or_cond14_fu_318_p2 );
    sensitive << ( or_cond15_fu_324_p2 );

    SC_METHOD(thread_sel_tmp6_fu_241_p2);
    sensitive << ( or_cond7_17_fu_229_p2 );
    sensitive << ( or_cond8_fu_235_p2 );

    SC_METHOD(thread_sel_tmp7_fu_379_p2);
    sensitive << ( or_cond16_fu_371_p2 );
    sensitive << ( or_cond17_fu_375_p2 );

    SC_METHOD(thread_sel_tmp8_fu_298_p2);
    sensitive << ( or_cond9_fu_290_p2 );
    sensitive << ( or_cond1_18_fu_294_p2 );

    SC_METHOD(thread_sel_tmp9_fu_365_p2);
    sensitive << ( or_cond18_fu_353_p2 );
    sensitive << ( or_cond19_fu_359_p2 );

    SC_METHOD(thread_sel_tmp_fu_179_p2);
    sensitive << ( or_cond_11_fu_157_p2 );
    sensitive << ( or_cond2_12_fu_173_p2 );

    SC_METHOD(thread_tmp_85_fu_163_p2);
    sensitive << ( sEC_V );
    sensitive << ( cubieColor_V_load_reg_502 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tmp_86_fu_168_p2);
    sensitive << ( fEC_V );
    sensitive << ( cubieColor_V_load_85_reg_508 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tmp_fu_147_p2);
    sensitive << ( fEC_V );
    sensitive << ( cubieColor_V_load_reg_502 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tmp_s_fu_152_p2);
    sensitive << ( sEC_V );
    sensitive << ( cubieColor_V_load_85_reg_508 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    ap_CS_fsm = "0000000000001";
    ap_return_preg = "0000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "findEdge_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, fEC_V, "(port)fEC_V");
    sc_trace(mVcdFile, sEC_V, "(port)sEC_V");
    sc_trace(mVcdFile, cubieColor_V_address0, "(port)cubieColor_V_address0");
    sc_trace(mVcdFile, cubieColor_V_ce0, "(port)cubieColor_V_ce0");
    sc_trace(mVcdFile, cubieColor_V_q0, "(port)cubieColor_V_q0");
    sc_trace(mVcdFile, cubieColor_V_address1, "(port)cubieColor_V_address1");
    sc_trace(mVcdFile, cubieColor_V_ce1, "(port)cubieColor_V_ce1");
    sc_trace(mVcdFile, cubieColor_V_q1, "(port)cubieColor_V_q1");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, cubieColor_V_load_reg_502, "cubieColor_V_load_reg_502");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, cubieColor_V_load_85_reg_508, "cubieColor_V_load_85_reg_508");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, newSel4_fu_207_p3, "newSel4_fu_207_p3");
    sc_trace(mVcdFile, newSel4_reg_526, "newSel4_reg_526");
    sc_trace(mVcdFile, grp_fu_123_p2, "grp_fu_123_p2");
    sc_trace(mVcdFile, tmp_91_reg_531, "tmp_91_reg_531");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_fu_129_p2, "grp_fu_129_p2");
    sc_trace(mVcdFile, tmp_92_reg_536, "tmp_92_reg_536");
    sc_trace(mVcdFile, grp_fu_135_p2, "grp_fu_135_p2");
    sc_trace(mVcdFile, tmp_93_reg_541, "tmp_93_reg_541");
    sc_trace(mVcdFile, grp_fu_141_p2, "grp_fu_141_p2");
    sc_trace(mVcdFile, tmp_94_reg_546, "tmp_94_reg_546");
    sc_trace(mVcdFile, newSel7_fu_264_p3, "newSel7_fu_264_p3");
    sc_trace(mVcdFile, newSel7_reg_551, "newSel7_reg_551");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_99_reg_556, "tmp_99_reg_556");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, tmp_100_reg_561, "tmp_100_reg_561");
    sc_trace(mVcdFile, tmp_101_reg_566, "tmp_101_reg_566");
    sc_trace(mVcdFile, tmp_102_reg_571, "tmp_102_reg_571");
    sc_trace(mVcdFile, sel_tmp1_fu_284_p2, "sel_tmp1_fu_284_p2");
    sc_trace(mVcdFile, sel_tmp1_reg_576, "sel_tmp1_reg_576");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, tmp_107_reg_582, "tmp_107_reg_582");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, tmp_108_reg_587, "tmp_108_reg_587");
    sc_trace(mVcdFile, tmp_109_reg_592, "tmp_109_reg_592");
    sc_trace(mVcdFile, tmp_110_reg_597, "tmp_110_reg_597");
    sc_trace(mVcdFile, sel_tmp5_fu_330_p2, "sel_tmp5_fu_330_p2");
    sc_trace(mVcdFile, sel_tmp5_reg_602, "sel_tmp5_reg_602");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, or_cond2_fu_336_p2, "or_cond2_fu_336_p2");
    sc_trace(mVcdFile, or_cond2_reg_607, "or_cond2_reg_607");
    sc_trace(mVcdFile, or_cond6_fu_347_p2, "or_cond6_fu_347_p2");
    sc_trace(mVcdFile, or_cond6_reg_612, "or_cond6_reg_612");
    sc_trace(mVcdFile, tmp_115_reg_617, "tmp_115_reg_617");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, tmp_116_reg_622, "tmp_116_reg_622");
    sc_trace(mVcdFile, tmp_117_reg_627, "tmp_117_reg_627");
    sc_trace(mVcdFile, tmp_118_reg_632, "tmp_118_reg_632");
    sc_trace(mVcdFile, sel_tmp9_fu_365_p2, "sel_tmp9_fu_365_p2");
    sc_trace(mVcdFile, sel_tmp9_reg_637, "sel_tmp9_reg_637");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, tmp_123_reg_643, "tmp_123_reg_643");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, tmp_124_reg_648, "tmp_124_reg_648");
    sc_trace(mVcdFile, tmp_125_reg_653, "tmp_125_reg_653");
    sc_trace(mVcdFile, tmp_126_reg_658, "tmp_126_reg_658");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, tmp_fu_147_p2, "tmp_fu_147_p2");
    sc_trace(mVcdFile, tmp_s_fu_152_p2, "tmp_s_fu_152_p2");
    sc_trace(mVcdFile, tmp_85_fu_163_p2, "tmp_85_fu_163_p2");
    sc_trace(mVcdFile, tmp_86_fu_168_p2, "tmp_86_fu_168_p2");
    sc_trace(mVcdFile, or_cond_11_fu_157_p2, "or_cond_11_fu_157_p2");
    sc_trace(mVcdFile, or_cond2_12_fu_173_p2, "or_cond2_12_fu_173_p2");
    sc_trace(mVcdFile, sel_tmp_fu_179_p2, "sel_tmp_fu_179_p2");
    sc_trace(mVcdFile, or_cond3_13_fu_189_p2, "or_cond3_13_fu_189_p2");
    sc_trace(mVcdFile, or_cond4_14_fu_195_p2, "or_cond4_14_fu_195_p2");
    sc_trace(mVcdFile, sel_tmp2_fu_201_p2, "sel_tmp2_fu_201_p2");
    sc_trace(mVcdFile, agg_result_V_cast_fu_185_p1, "agg_result_V_cast_fu_185_p1");
    sc_trace(mVcdFile, or_cond5_15_fu_215_p2, "or_cond5_15_fu_215_p2");
    sc_trace(mVcdFile, or_cond6_16_fu_219_p2, "or_cond6_16_fu_219_p2");
    sc_trace(mVcdFile, or_cond7_17_fu_229_p2, "or_cond7_17_fu_229_p2");
    sc_trace(mVcdFile, or_cond8_fu_235_p2, "or_cond8_fu_235_p2");
    sc_trace(mVcdFile, sel_tmp6_fu_241_p2, "sel_tmp6_fu_241_p2");
    sc_trace(mVcdFile, sel_tmp4_fu_223_p2, "sel_tmp4_fu_223_p2");
    sc_trace(mVcdFile, or_cond4_fu_255_p2, "or_cond4_fu_255_p2");
    sc_trace(mVcdFile, newSel3_fu_247_p3, "newSel3_fu_247_p3");
    sc_trace(mVcdFile, newSel32_cast_fu_261_p1, "newSel32_cast_fu_261_p1");
    sc_trace(mVcdFile, or_cond10_fu_272_p2, "or_cond10_fu_272_p2");
    sc_trace(mVcdFile, or_cond11_fu_278_p2, "or_cond11_fu_278_p2");
    sc_trace(mVcdFile, or_cond9_fu_290_p2, "or_cond9_fu_290_p2");
    sc_trace(mVcdFile, or_cond1_18_fu_294_p2, "or_cond1_18_fu_294_p2");
    sc_trace(mVcdFile, or_cond12_fu_304_p2, "or_cond12_fu_304_p2");
    sc_trace(mVcdFile, or_cond13_fu_308_p2, "or_cond13_fu_308_p2");
    sc_trace(mVcdFile, or_cond14_fu_318_p2, "or_cond14_fu_318_p2");
    sc_trace(mVcdFile, or_cond15_fu_324_p2, "or_cond15_fu_324_p2");
    sc_trace(mVcdFile, sel_tmp3_fu_312_p2, "sel_tmp3_fu_312_p2");
    sc_trace(mVcdFile, sel_tmp8_fu_298_p2, "sel_tmp8_fu_298_p2");
    sc_trace(mVcdFile, or_cond3_fu_342_p2, "or_cond3_fu_342_p2");
    sc_trace(mVcdFile, or_cond18_fu_353_p2, "or_cond18_fu_353_p2");
    sc_trace(mVcdFile, or_cond19_fu_359_p2, "or_cond19_fu_359_p2");
    sc_trace(mVcdFile, or_cond16_fu_371_p2, "or_cond16_fu_371_p2");
    sc_trace(mVcdFile, or_cond17_fu_375_p2, "or_cond17_fu_375_p2");
    sc_trace(mVcdFile, or_cond20_fu_385_p2, "or_cond20_fu_385_p2");
    sc_trace(mVcdFile, or_cond21_fu_389_p2, "or_cond21_fu_389_p2");
    sc_trace(mVcdFile, or_cond22_fu_399_p2, "or_cond22_fu_399_p2");
    sc_trace(mVcdFile, or_cond23_fu_405_p2, "or_cond23_fu_405_p2");
    sc_trace(mVcdFile, sel_tmp11_fu_411_p2, "sel_tmp11_fu_411_p2");
    sc_trace(mVcdFile, sel_tmp10_fu_393_p2, "sel_tmp10_fu_393_p2");
    sc_trace(mVcdFile, sel_tmp7_fu_379_p2, "sel_tmp7_fu_379_p2");
    sc_trace(mVcdFile, or_cond_fu_425_p2, "or_cond_fu_425_p2");
    sc_trace(mVcdFile, newSel_fu_417_p3, "newSel_fu_417_p3");
    sc_trace(mVcdFile, newSel1_fu_431_p3, "newSel1_fu_431_p3");
    sc_trace(mVcdFile, or_cond1_fu_438_p2, "or_cond1_fu_438_p2");
    sc_trace(mVcdFile, newSel2_fu_443_p3, "newSel2_fu_443_p3");
    sc_trace(mVcdFile, newSel28_cast_cast_fu_450_p3, "newSel28_cast_cast_fu_450_p3");
    sc_trace(mVcdFile, or_cond5_fu_465_p2, "or_cond5_fu_465_p2");
    sc_trace(mVcdFile, newSel5_fu_457_p3, "newSel5_fu_457_p3");
    sc_trace(mVcdFile, newSel6_fu_471_p3, "newSel6_fu_471_p3");
    sc_trace(mVcdFile, or_cond7_fu_489_p2, "or_cond7_fu_489_p2");
    sc_trace(mVcdFile, newSel8_fu_481_p3, "newSel8_fu_481_p3");
    sc_trace(mVcdFile, newSel38_cast_fu_478_p1, "newSel38_cast_fu_478_p1");
    sc_trace(mVcdFile, newSel9_fu_494_p3, "newSel9_fu_494_p3");
    sc_trace(mVcdFile, ap_return_preg, "ap_return_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

findEdge::~findEdge() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void findEdge::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_preg = ap_const_lv4_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
            ap_return_preg = newSel9_fu_494_p3.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        cubieColor_V_load_85_reg_508 = cubieColor_V_q1.read();
        cubieColor_V_load_reg_502 = cubieColor_V_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        newSel4_reg_526 = newSel4_fu_207_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        newSel7_reg_551 = newSel7_fu_264_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        or_cond2_reg_607 = or_cond2_fu_336_p2.read();
        or_cond6_reg_612 = or_cond6_fu_347_p2.read();
        sel_tmp5_reg_602 = sel_tmp5_fu_330_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        sel_tmp1_reg_576 = sel_tmp1_fu_284_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        sel_tmp9_reg_637 = sel_tmp9_fu_365_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        tmp_100_reg_561 = grp_fu_129_p2.read();
        tmp_101_reg_566 = grp_fu_135_p2.read();
        tmp_102_reg_571 = grp_fu_141_p2.read();
        tmp_99_reg_556 = grp_fu_123_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        tmp_107_reg_582 = grp_fu_123_p2.read();
        tmp_108_reg_587 = grp_fu_129_p2.read();
        tmp_109_reg_592 = grp_fu_135_p2.read();
        tmp_110_reg_597 = grp_fu_141_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        tmp_115_reg_617 = grp_fu_123_p2.read();
        tmp_116_reg_622 = grp_fu_129_p2.read();
        tmp_117_reg_627 = grp_fu_135_p2.read();
        tmp_118_reg_632 = grp_fu_141_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        tmp_123_reg_643 = grp_fu_123_p2.read();
        tmp_124_reg_648 = grp_fu_129_p2.read();
        tmp_125_reg_653 = grp_fu_135_p2.read();
        tmp_126_reg_658 = grp_fu_141_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        tmp_91_reg_531 = grp_fu_123_p2.read();
        tmp_92_reg_536 = grp_fu_129_p2.read();
        tmp_93_reg_541 = grp_fu_135_p2.read();
        tmp_94_reg_546 = grp_fu_141_p2.read();
    }
}

void findEdge::thread_agg_result_V_cast_fu_185_p1() {
    agg_result_V_cast_fu_185_p1 = esl_zext<2,1>(sel_tmp_fu_179_p2.read());
}

void findEdge::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void findEdge::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void findEdge::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void findEdge::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void findEdge::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void findEdge::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void findEdge::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void findEdge::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void findEdge::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void findEdge::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void findEdge::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void findEdge::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void findEdge::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void findEdge::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void findEdge::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void findEdge::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void findEdge::thread_ap_return() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        ap_return = newSel9_fu_494_p3.read();
    } else {
        ap_return = ap_return_preg.read();
    }
}

void findEdge::thread_cubieColor_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        cubieColor_V_address0 = ap_const_lv6_E;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        cubieColor_V_address0 = ap_const_lv6_10;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        cubieColor_V_address0 = ap_const_lv6_C;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        cubieColor_V_address0 = ap_const_lv6_A;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        cubieColor_V_address0 = ap_const_lv6_20;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        cubieColor_V_address0 = ap_const_lv6_32;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        cubieColor_V_address0 = ap_const_lv6_27;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        cubieColor_V_address0 = ap_const_lv6_1E;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        cubieColor_V_address0 = ap_const_lv6_5;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        cubieColor_V_address0 = ap_const_lv6_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        cubieColor_V_address0 = ap_const_lv6_3;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        cubieColor_V_address0 = ap_const_lv6_7;
    } else {
        cubieColor_V_address0 = "XXXXXX";
    }
}

void findEdge::thread_cubieColor_V_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        cubieColor_V_address1 = ap_const_lv6_34;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        cubieColor_V_address1 = ap_const_lv6_19;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        cubieColor_V_address1 = ap_const_lv6_2B;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        cubieColor_V_address1 = ap_const_lv6_22;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        cubieColor_V_address1 = ap_const_lv6_30;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        cubieColor_V_address1 = ap_const_lv6_15;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        cubieColor_V_address1 = ap_const_lv6_17;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        cubieColor_V_address1 = ap_const_lv6_29;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        cubieColor_V_address1 = ap_const_lv6_2E;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        cubieColor_V_address1 = ap_const_lv6_13;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        cubieColor_V_address1 = ap_const_lv6_25;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        cubieColor_V_address1 = ap_const_lv6_1C;
    } else {
        cubieColor_V_address1 = "XXXXXX";
    }
}

void findEdge::thread_cubieColor_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)))) {
        cubieColor_V_ce0 = ap_const_logic_1;
    } else {
        cubieColor_V_ce0 = ap_const_logic_0;
    }
}

void findEdge::thread_cubieColor_V_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)))) {
        cubieColor_V_ce1 = ap_const_logic_1;
    } else {
        cubieColor_V_ce1 = ap_const_logic_0;
    }
}

void findEdge::thread_grp_fu_123_p2() {
    grp_fu_123_p2 = (!cubieColor_V_q0.read().is_01() || !fEC_V.read().is_01())? sc_lv<1>(): sc_lv<1>(cubieColor_V_q0.read() == fEC_V.read());
}

void findEdge::thread_grp_fu_129_p2() {
    grp_fu_129_p2 = (!cubieColor_V_q1.read().is_01() || !sEC_V.read().is_01())? sc_lv<1>(): sc_lv<1>(cubieColor_V_q1.read() == sEC_V.read());
}

void findEdge::thread_grp_fu_135_p2() {
    grp_fu_135_p2 = (!cubieColor_V_q0.read().is_01() || !sEC_V.read().is_01())? sc_lv<1>(): sc_lv<1>(cubieColor_V_q0.read() == sEC_V.read());
}

void findEdge::thread_grp_fu_141_p2() {
    grp_fu_141_p2 = (!cubieColor_V_q1.read().is_01() || !fEC_V.read().is_01())? sc_lv<1>(): sc_lv<1>(cubieColor_V_q1.read() == fEC_V.read());
}

void findEdge::thread_newSel1_fu_431_p3() {
    newSel1_fu_431_p3 = (!sel_tmp9_reg_637.read()[0].is_01())? sc_lv<4>(): ((sel_tmp9_reg_637.read()[0].to_bool())? ap_const_lv4_A: ap_const_lv4_9);
}

void findEdge::thread_newSel28_cast_cast_fu_450_p3() {
    newSel28_cast_cast_fu_450_p3 = (!sel_tmp1_reg_576.read()[0].is_01())? sc_lv<4>(): ((sel_tmp1_reg_576.read()[0].to_bool())? ap_const_lv4_6: ap_const_lv4_5);
}

void findEdge::thread_newSel2_fu_443_p3() {
    newSel2_fu_443_p3 = (!sel_tmp5_reg_602.read()[0].is_01())? sc_lv<4>(): ((sel_tmp5_reg_602.read()[0].to_bool())? ap_const_lv4_8: ap_const_lv4_7);
}

void findEdge::thread_newSel32_cast_fu_261_p1() {
    newSel32_cast_fu_261_p1 = esl_zext<3,2>(newSel4_reg_526.read());
}

void findEdge::thread_newSel38_cast_fu_478_p1() {
    newSel38_cast_fu_478_p1 = esl_zext<4,3>(newSel7_reg_551.read());
}

void findEdge::thread_newSel3_fu_247_p3() {
    newSel3_fu_247_p3 = (!sel_tmp6_fu_241_p2.read()[0].is_01())? sc_lv<3>(): ((sel_tmp6_fu_241_p2.read()[0].to_bool())? ap_const_lv3_4: ap_const_lv3_3);
}

void findEdge::thread_newSel4_fu_207_p3() {
    newSel4_fu_207_p3 = (!sel_tmp2_fu_201_p2.read()[0].is_01())? sc_lv<2>(): ((sel_tmp2_fu_201_p2.read()[0].to_bool())? ap_const_lv2_2: agg_result_V_cast_fu_185_p1.read());
}

void findEdge::thread_newSel5_fu_457_p3() {
    newSel5_fu_457_p3 = (!or_cond_fu_425_p2.read()[0].is_01())? sc_lv<4>(): ((or_cond_fu_425_p2.read()[0].to_bool())? newSel_fu_417_p3.read(): newSel1_fu_431_p3.read());
}

void findEdge::thread_newSel6_fu_471_p3() {
    newSel6_fu_471_p3 = (!or_cond2_reg_607.read()[0].is_01())? sc_lv<4>(): ((or_cond2_reg_607.read()[0].to_bool())? newSel2_fu_443_p3.read(): newSel28_cast_cast_fu_450_p3.read());
}

void findEdge::thread_newSel7_fu_264_p3() {
    newSel7_fu_264_p3 = (!or_cond4_fu_255_p2.read()[0].is_01())? sc_lv<3>(): ((or_cond4_fu_255_p2.read()[0].to_bool())? newSel3_fu_247_p3.read(): newSel32_cast_fu_261_p1.read());
}

void findEdge::thread_newSel8_fu_481_p3() {
    newSel8_fu_481_p3 = (!or_cond5_fu_465_p2.read()[0].is_01())? sc_lv<4>(): ((or_cond5_fu_465_p2.read()[0].to_bool())? newSel5_fu_457_p3.read(): newSel6_fu_471_p3.read());
}

void findEdge::thread_newSel9_fu_494_p3() {
    newSel9_fu_494_p3 = (!or_cond7_fu_489_p2.read()[0].is_01())? sc_lv<4>(): ((or_cond7_fu_489_p2.read()[0].to_bool())? newSel8_fu_481_p3.read(): newSel38_cast_fu_478_p1.read());
}

void findEdge::thread_newSel_fu_417_p3() {
    newSel_fu_417_p3 = (!sel_tmp11_fu_411_p2.read()[0].is_01())? sc_lv<4>(): ((sel_tmp11_fu_411_p2.read()[0].to_bool())? ap_const_lv4_C: ap_const_lv4_B);
}

void findEdge::thread_or_cond10_fu_272_p2() {
    or_cond10_fu_272_p2 = (grp_fu_123_p2.read() & grp_fu_129_p2.read());
}

void findEdge::thread_or_cond11_fu_278_p2() {
    or_cond11_fu_278_p2 = (grp_fu_135_p2.read() & grp_fu_141_p2.read());
}

void findEdge::thread_or_cond12_fu_304_p2() {
    or_cond12_fu_304_p2 = (tmp_107_reg_582.read() & tmp_108_reg_587.read());
}

void findEdge::thread_or_cond13_fu_308_p2() {
    or_cond13_fu_308_p2 = (tmp_109_reg_592.read() & tmp_110_reg_597.read());
}

void findEdge::thread_or_cond14_fu_318_p2() {
    or_cond14_fu_318_p2 = (grp_fu_123_p2.read() & grp_fu_129_p2.read());
}

void findEdge::thread_or_cond15_fu_324_p2() {
    or_cond15_fu_324_p2 = (grp_fu_135_p2.read() & grp_fu_141_p2.read());
}

void findEdge::thread_or_cond16_fu_371_p2() {
    or_cond16_fu_371_p2 = (tmp_115_reg_617.read() & tmp_116_reg_622.read());
}

void findEdge::thread_or_cond17_fu_375_p2() {
    or_cond17_fu_375_p2 = (tmp_117_reg_627.read() & tmp_118_reg_632.read());
}

void findEdge::thread_or_cond18_fu_353_p2() {
    or_cond18_fu_353_p2 = (grp_fu_123_p2.read() & grp_fu_129_p2.read());
}

void findEdge::thread_or_cond19_fu_359_p2() {
    or_cond19_fu_359_p2 = (grp_fu_135_p2.read() & grp_fu_141_p2.read());
}

void findEdge::thread_or_cond1_18_fu_294_p2() {
    or_cond1_18_fu_294_p2 = (tmp_101_reg_566.read() & tmp_102_reg_571.read());
}

void findEdge::thread_or_cond1_fu_438_p2() {
    or_cond1_fu_438_p2 = (sel_tmp9_reg_637.read() | sel_tmp7_fu_379_p2.read());
}

void findEdge::thread_or_cond20_fu_385_p2() {
    or_cond20_fu_385_p2 = (tmp_123_reg_643.read() & tmp_124_reg_648.read());
}

void findEdge::thread_or_cond21_fu_389_p2() {
    or_cond21_fu_389_p2 = (tmp_125_reg_653.read() & tmp_126_reg_658.read());
}

void findEdge::thread_or_cond22_fu_399_p2() {
    or_cond22_fu_399_p2 = (grp_fu_123_p2.read() & grp_fu_129_p2.read());
}

void findEdge::thread_or_cond23_fu_405_p2() {
    or_cond23_fu_405_p2 = (grp_fu_135_p2.read() & grp_fu_141_p2.read());
}

void findEdge::thread_or_cond2_12_fu_173_p2() {
    or_cond2_12_fu_173_p2 = (tmp_85_fu_163_p2.read() & tmp_86_fu_168_p2.read());
}

void findEdge::thread_or_cond2_fu_336_p2() {
    or_cond2_fu_336_p2 = (sel_tmp5_fu_330_p2.read() | sel_tmp3_fu_312_p2.read());
}

void findEdge::thread_or_cond3_13_fu_189_p2() {
    or_cond3_13_fu_189_p2 = (grp_fu_123_p2.read() & grp_fu_129_p2.read());
}

void findEdge::thread_or_cond3_fu_342_p2() {
    or_cond3_fu_342_p2 = (sel_tmp1_reg_576.read() | sel_tmp8_fu_298_p2.read());
}

void findEdge::thread_or_cond4_14_fu_195_p2() {
    or_cond4_14_fu_195_p2 = (grp_fu_135_p2.read() & grp_fu_141_p2.read());
}

void findEdge::thread_or_cond4_fu_255_p2() {
    or_cond4_fu_255_p2 = (sel_tmp6_fu_241_p2.read() | sel_tmp4_fu_223_p2.read());
}

void findEdge::thread_or_cond5_15_fu_215_p2() {
    or_cond5_15_fu_215_p2 = (tmp_91_reg_531.read() & tmp_92_reg_536.read());
}

void findEdge::thread_or_cond5_fu_465_p2() {
    or_cond5_fu_465_p2 = (or_cond_fu_425_p2.read() | or_cond1_fu_438_p2.read());
}

void findEdge::thread_or_cond6_16_fu_219_p2() {
    or_cond6_16_fu_219_p2 = (tmp_93_reg_541.read() & tmp_94_reg_546.read());
}

void findEdge::thread_or_cond6_fu_347_p2() {
    or_cond6_fu_347_p2 = (or_cond2_fu_336_p2.read() | or_cond3_fu_342_p2.read());
}

void findEdge::thread_or_cond7_17_fu_229_p2() {
    or_cond7_17_fu_229_p2 = (grp_fu_123_p2.read() & grp_fu_129_p2.read());
}

void findEdge::thread_or_cond7_fu_489_p2() {
    or_cond7_fu_489_p2 = (or_cond5_fu_465_p2.read() | or_cond6_reg_612.read());
}

void findEdge::thread_or_cond8_fu_235_p2() {
    or_cond8_fu_235_p2 = (grp_fu_135_p2.read() & grp_fu_141_p2.read());
}

void findEdge::thread_or_cond9_fu_290_p2() {
    or_cond9_fu_290_p2 = (tmp_99_reg_556.read() & tmp_100_reg_561.read());
}

void findEdge::thread_or_cond_11_fu_157_p2() {
    or_cond_11_fu_157_p2 = (tmp_fu_147_p2.read() & tmp_s_fu_152_p2.read());
}

void findEdge::thread_or_cond_fu_425_p2() {
    or_cond_fu_425_p2 = (sel_tmp11_fu_411_p2.read() | sel_tmp10_fu_393_p2.read());
}

void findEdge::thread_sel_tmp10_fu_393_p2() {
    sel_tmp10_fu_393_p2 = (or_cond20_fu_385_p2.read() | or_cond21_fu_389_p2.read());
}

void findEdge::thread_sel_tmp11_fu_411_p2() {
    sel_tmp11_fu_411_p2 = (or_cond22_fu_399_p2.read() | or_cond23_fu_405_p2.read());
}

void findEdge::thread_sel_tmp1_fu_284_p2() {
    sel_tmp1_fu_284_p2 = (or_cond10_fu_272_p2.read() | or_cond11_fu_278_p2.read());
}

void findEdge::thread_sel_tmp2_fu_201_p2() {
    sel_tmp2_fu_201_p2 = (or_cond3_13_fu_189_p2.read() | or_cond4_14_fu_195_p2.read());
}

void findEdge::thread_sel_tmp3_fu_312_p2() {
    sel_tmp3_fu_312_p2 = (or_cond12_fu_304_p2.read() | or_cond13_fu_308_p2.read());
}

void findEdge::thread_sel_tmp4_fu_223_p2() {
    sel_tmp4_fu_223_p2 = (or_cond5_15_fu_215_p2.read() | or_cond6_16_fu_219_p2.read());
}

void findEdge::thread_sel_tmp5_fu_330_p2() {
    sel_tmp5_fu_330_p2 = (or_cond14_fu_318_p2.read() | or_cond15_fu_324_p2.read());
}

void findEdge::thread_sel_tmp6_fu_241_p2() {
    sel_tmp6_fu_241_p2 = (or_cond7_17_fu_229_p2.read() | or_cond8_fu_235_p2.read());
}

void findEdge::thread_sel_tmp7_fu_379_p2() {
    sel_tmp7_fu_379_p2 = (or_cond16_fu_371_p2.read() | or_cond17_fu_375_p2.read());
}

void findEdge::thread_sel_tmp8_fu_298_p2() {
    sel_tmp8_fu_298_p2 = (or_cond9_fu_290_p2.read() | or_cond1_18_fu_294_p2.read());
}

void findEdge::thread_sel_tmp9_fu_365_p2() {
    sel_tmp9_fu_365_p2 = (or_cond18_fu_353_p2.read() | or_cond19_fu_359_p2.read());
}

void findEdge::thread_sel_tmp_fu_179_p2() {
    sel_tmp_fu_179_p2 = (or_cond_11_fu_157_p2.read() | or_cond2_12_fu_173_p2.read());
}

void findEdge::thread_tmp_85_fu_163_p2() {
    tmp_85_fu_163_p2 = (!cubieColor_V_load_reg_502.read().is_01() || !sEC_V.read().is_01())? sc_lv<1>(): sc_lv<1>(cubieColor_V_load_reg_502.read() == sEC_V.read());
}

void findEdge::thread_tmp_86_fu_168_p2() {
    tmp_86_fu_168_p2 = (!cubieColor_V_load_85_reg_508.read().is_01() || !fEC_V.read().is_01())? sc_lv<1>(): sc_lv<1>(cubieColor_V_load_85_reg_508.read() == fEC_V.read());
}

void findEdge::thread_tmp_fu_147_p2() {
    tmp_fu_147_p2 = (!cubieColor_V_load_reg_502.read().is_01() || !fEC_V.read().is_01())? sc_lv<1>(): sc_lv<1>(cubieColor_V_load_reg_502.read() == fEC_V.read());
}

void findEdge::thread_tmp_s_fu_152_p2() {
    tmp_s_fu_152_p2 = (!cubieColor_V_load_85_reg_508.read().is_01() || !sEC_V.read().is_01())? sc_lv<1>(): sc_lv<1>(cubieColor_V_load_85_reg_508.read() == sEC_V.read());
}

void findEdge::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<13>) ("XXXXXXXXXXXXX");
            break;
    }
}

}

