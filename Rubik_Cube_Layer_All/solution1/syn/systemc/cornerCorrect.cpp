// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "cornerCorrect.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic cornerCorrect::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic cornerCorrect::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<9> cornerCorrect::ap_ST_fsm_state1 = "1";
const sc_lv<9> cornerCorrect::ap_ST_fsm_state2 = "10";
const sc_lv<9> cornerCorrect::ap_ST_fsm_state3 = "100";
const sc_lv<9> cornerCorrect::ap_ST_fsm_state4 = "1000";
const sc_lv<9> cornerCorrect::ap_ST_fsm_state5 = "10000";
const sc_lv<9> cornerCorrect::ap_ST_fsm_state6 = "100000";
const sc_lv<9> cornerCorrect::ap_ST_fsm_state7 = "1000000";
const sc_lv<9> cornerCorrect::ap_ST_fsm_state8 = "10000000";
const sc_lv<9> cornerCorrect::ap_ST_fsm_state9 = "100000000";
const sc_lv<32> cornerCorrect::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> cornerCorrect::ap_const_lv32_1 = "1";
const sc_lv<32> cornerCorrect::ap_const_lv32_3 = "11";
const sc_lv<32> cornerCorrect::ap_const_lv32_6 = "110";
const sc_lv<32> cornerCorrect::ap_const_lv32_7 = "111";
const sc_lv<32> cornerCorrect::ap_const_lv32_2 = "10";
const sc_lv<32> cornerCorrect::ap_const_lv32_4 = "100";
const sc_lv<32> cornerCorrect::ap_const_lv32_5 = "101";
const sc_lv<6> cornerCorrect::ap_const_lv6_4 = "100";
const sc_lv<6> cornerCorrect::ap_const_lv6_6 = "110";
const sc_lv<6> cornerCorrect::ap_const_lv6_0 = "000000";
const sc_lv<6> cornerCorrect::ap_const_lv6_2 = "10";
const sc_lv<6> cornerCorrect::ap_const_lv6_8 = "1000";
const sc_lv<6> cornerCorrect::ap_const_lv6_1F = "11111";
const sc_lv<6> cornerCorrect::ap_const_lv6_1B = "11011";
const sc_lv<6> cornerCorrect::ap_const_lv6_16 = "10110";
const sc_lv<6> cornerCorrect::ap_const_lv6_14 = "10100";
const sc_lv<6> cornerCorrect::ap_const_lv6_12 = "10010";
const sc_lv<6> cornerCorrect::ap_const_lv6_1D = "11101";
const sc_lv<6> cornerCorrect::ap_const_lv6_28 = "101000";
const sc_lv<6> cornerCorrect::ap_const_lv6_26 = "100110";
const sc_lv<6> cornerCorrect::ap_const_lv6_31 = "110001";
const sc_lv<6> cornerCorrect::ap_const_lv6_2F = "101111";
const sc_lv<6> cornerCorrect::ap_const_lv6_2D = "101101";
const sc_lv<32> cornerCorrect::ap_const_lv32_8 = "1000";
const sc_lv<3> cornerCorrect::ap_const_lv3_1 = "1";
const sc_lv<3> cornerCorrect::ap_const_lv3_3 = "11";
const sc_lv<3> cornerCorrect::ap_const_lv3_4 = "100";
const sc_lv<3> cornerCorrect::ap_const_lv3_2 = "10";
const sc_lv<1> cornerCorrect::ap_const_lv1_0 = "0";
const bool cornerCorrect::ap_const_boolean_1 = true;

cornerCorrect::cornerCorrect(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_agg_result_V_fu_213_p2);
    sensitive << ( tmp26_fu_208_p2 );
    sensitive << ( tmp25_fu_203_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( agg_result_V_fu_213_p2 );
    sensitive << ( ap_return_preg );

    SC_METHOD(thread_cubieColor_V_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_cubieColor_V_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_cubieColor_V_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_cubieColor_V_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_grp_fu_101_p2);
    sensitive << ( cubieColor_V_q0 );
    sensitive << ( reg_93 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_grp_fu_77_p0);
    sensitive << ( cubieColor_V_q0 );
    sensitive << ( reg_93 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_grp_fu_77_p2);
    sensitive << ( cubieColor_V_q1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grp_fu_77_p0 );

    SC_METHOD(thread_grp_fu_83_p2);
    sensitive << ( cubieColor_V_q0 );
    sensitive << ( reg_93 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_grp_fu_88_p2);
    sensitive << ( cubieColor_V_q0 );
    sensitive << ( reg_93 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sel_tmp10_fu_145_p2);
    sensitive << ( corner_V );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_sel_tmp13_fu_197_p2);
    sensitive << ( tmp23_fu_192_p2 );
    sensitive << ( tmp22_fu_188_p2 );

    SC_METHOD(thread_sel_tmp15_fu_151_p2);
    sensitive << ( corner_V );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_sel_tmp17_fu_161_p2);
    sensitive << ( tmp24_fu_157_p2 );
    sensitive << ( sel_tmp15_fu_151_p2 );

    SC_METHOD(thread_sel_tmp3_fu_133_p2);
    sensitive << ( tmp19_fu_128_p2 );
    sensitive << ( tmp_fu_123_p2 );

    SC_METHOD(thread_sel_tmp5_fu_139_p2);
    sensitive << ( corner_V );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_sel_tmp8_fu_182_p2);
    sensitive << ( tmp21_fu_177_p2 );
    sensitive << ( tmp20_fu_173_p2 );

    SC_METHOD(thread_sel_tmp_fu_117_p2);
    sensitive << ( corner_V );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_tmp19_fu_128_p2);
    sensitive << ( tmp_219_reg_239 );
    sensitive << ( grp_fu_101_p2 );

    SC_METHOD(thread_tmp20_fu_173_p2);
    sensitive << ( tmp_217_reg_229 );
    sensitive << ( sel_tmp5_reg_270 );

    SC_METHOD(thread_tmp21_fu_177_p2);
    sensitive << ( tmp_221_reg_255 );
    sensitive << ( grp_fu_101_p2 );

    SC_METHOD(thread_tmp22_fu_188_p2);
    sensitive << ( tmp_218_reg_234 );
    sensitive << ( sel_tmp10_reg_275 );

    SC_METHOD(thread_tmp23_fu_192_p2);
    sensitive << ( tmp_222_reg_260 );
    sensitive << ( tmp_225_fu_167_p2 );

    SC_METHOD(thread_tmp24_fu_157_p2);
    sensitive << ( tmp_216_reg_224 );
    sensitive << ( tmp_220_reg_250 );

    SC_METHOD(thread_tmp25_fu_203_p2);
    sensitive << ( sel_tmp3_reg_265 );
    sensitive << ( sel_tmp8_fu_182_p2 );

    SC_METHOD(thread_tmp26_fu_208_p2);
    sensitive << ( sel_tmp17_reg_280 );
    sensitive << ( sel_tmp13_fu_197_p2 );

    SC_METHOD(thread_tmp_220_fu_107_p2);
    sensitive << ( cubieColor_V_q0 );
    sensitive << ( cubieColor_V_load_157_reg_244 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_tmp_221_fu_112_p2);
    sensitive << ( cubieColor_V_q1 );
    sensitive << ( cubieColor_V_load_157_reg_244 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_tmp_225_fu_167_p2);
    sensitive << ( cubieColor_V_q1 );
    sensitive << ( reg_93 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_tmp_fu_123_p2);
    sensitive << ( tmp_s_reg_219 );
    sensitive << ( sel_tmp_fu_117_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    ap_CS_fsm = "000000001";
    ap_return_preg = "0";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "cornerCorrect_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, corner_V, "(port)corner_V");
    sc_trace(mVcdFile, cubieColor_V_address0, "(port)cubieColor_V_address0");
    sc_trace(mVcdFile, cubieColor_V_ce0, "(port)cubieColor_V_ce0");
    sc_trace(mVcdFile, cubieColor_V_q0, "(port)cubieColor_V_q0");
    sc_trace(mVcdFile, cubieColor_V_address1, "(port)cubieColor_V_address1");
    sc_trace(mVcdFile, cubieColor_V_ce1, "(port)cubieColor_V_ce1");
    sc_trace(mVcdFile, cubieColor_V_q1, "(port)cubieColor_V_q1");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, reg_93, "reg_93");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, grp_fu_77_p2, "grp_fu_77_p2");
    sc_trace(mVcdFile, tmp_s_reg_219, "tmp_s_reg_219");
    sc_trace(mVcdFile, grp_fu_83_p2, "grp_fu_83_p2");
    sc_trace(mVcdFile, tmp_216_reg_224, "tmp_216_reg_224");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_217_reg_229, "tmp_217_reg_229");
    sc_trace(mVcdFile, tmp_218_reg_234, "tmp_218_reg_234");
    sc_trace(mVcdFile, grp_fu_88_p2, "grp_fu_88_p2");
    sc_trace(mVcdFile, tmp_219_reg_239, "tmp_219_reg_239");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, cubieColor_V_load_157_reg_244, "cubieColor_V_load_157_reg_244");
    sc_trace(mVcdFile, tmp_220_fu_107_p2, "tmp_220_fu_107_p2");
    sc_trace(mVcdFile, tmp_220_reg_250, "tmp_220_reg_250");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, tmp_221_fu_112_p2, "tmp_221_fu_112_p2");
    sc_trace(mVcdFile, tmp_221_reg_255, "tmp_221_reg_255");
    sc_trace(mVcdFile, tmp_222_reg_260, "tmp_222_reg_260");
    sc_trace(mVcdFile, sel_tmp3_fu_133_p2, "sel_tmp3_fu_133_p2");
    sc_trace(mVcdFile, sel_tmp3_reg_265, "sel_tmp3_reg_265");
    sc_trace(mVcdFile, sel_tmp5_fu_139_p2, "sel_tmp5_fu_139_p2");
    sc_trace(mVcdFile, sel_tmp5_reg_270, "sel_tmp5_reg_270");
    sc_trace(mVcdFile, sel_tmp10_fu_145_p2, "sel_tmp10_fu_145_p2");
    sc_trace(mVcdFile, sel_tmp10_reg_275, "sel_tmp10_reg_275");
    sc_trace(mVcdFile, sel_tmp17_fu_161_p2, "sel_tmp17_fu_161_p2");
    sc_trace(mVcdFile, sel_tmp17_reg_280, "sel_tmp17_reg_280");
    sc_trace(mVcdFile, grp_fu_77_p0, "grp_fu_77_p0");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, sel_tmp_fu_117_p2, "sel_tmp_fu_117_p2");
    sc_trace(mVcdFile, grp_fu_101_p2, "grp_fu_101_p2");
    sc_trace(mVcdFile, tmp19_fu_128_p2, "tmp19_fu_128_p2");
    sc_trace(mVcdFile, tmp_fu_123_p2, "tmp_fu_123_p2");
    sc_trace(mVcdFile, tmp24_fu_157_p2, "tmp24_fu_157_p2");
    sc_trace(mVcdFile, sel_tmp15_fu_151_p2, "sel_tmp15_fu_151_p2");
    sc_trace(mVcdFile, tmp21_fu_177_p2, "tmp21_fu_177_p2");
    sc_trace(mVcdFile, tmp20_fu_173_p2, "tmp20_fu_173_p2");
    sc_trace(mVcdFile, tmp_225_fu_167_p2, "tmp_225_fu_167_p2");
    sc_trace(mVcdFile, tmp23_fu_192_p2, "tmp23_fu_192_p2");
    sc_trace(mVcdFile, tmp22_fu_188_p2, "tmp22_fu_188_p2");
    sc_trace(mVcdFile, sel_tmp8_fu_182_p2, "sel_tmp8_fu_182_p2");
    sc_trace(mVcdFile, sel_tmp13_fu_197_p2, "sel_tmp13_fu_197_p2");
    sc_trace(mVcdFile, tmp26_fu_208_p2, "tmp26_fu_208_p2");
    sc_trace(mVcdFile, tmp25_fu_203_p2, "tmp25_fu_203_p2");
    sc_trace(mVcdFile, agg_result_V_fu_213_p2, "agg_result_V_fu_213_p2");
    sc_trace(mVcdFile, ap_return_preg, "ap_return_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

cornerCorrect::~cornerCorrect() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void cornerCorrect::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_preg = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            ap_return_preg = agg_result_V_fu_213_p2.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        reg_93 = cubieColor_V_q1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        reg_93 = cubieColor_V_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        cubieColor_V_load_157_reg_244 = cubieColor_V_q1.read();
        tmp_219_reg_239 = grp_fu_88_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sel_tmp10_reg_275 = sel_tmp10_fu_145_p2.read();
        sel_tmp17_reg_280 = sel_tmp17_fu_161_p2.read();
        sel_tmp3_reg_265 = sel_tmp3_fu_133_p2.read();
        sel_tmp5_reg_270 = sel_tmp5_fu_139_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        tmp_216_reg_224 = grp_fu_83_p2.read();
        tmp_217_reg_229 = grp_fu_77_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        tmp_218_reg_234 = grp_fu_83_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        tmp_220_reg_250 = tmp_220_fu_107_p2.read();
        tmp_221_reg_255 = tmp_221_fu_112_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        tmp_222_reg_260 = grp_fu_88_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        tmp_s_reg_219 = grp_fu_77_p2.read();
    }
}

void cornerCorrect::thread_agg_result_V_fu_213_p2() {
    agg_result_V_fu_213_p2 = (tmp26_fu_208_p2.read() | tmp25_fu_203_p2.read());
}

void cornerCorrect::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void cornerCorrect::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void cornerCorrect::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void cornerCorrect::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void cornerCorrect::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void cornerCorrect::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void cornerCorrect::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void cornerCorrect::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void cornerCorrect::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void cornerCorrect::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void cornerCorrect::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void cornerCorrect::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void cornerCorrect::thread_ap_return() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ap_return = agg_result_V_fu_213_p2.read();
    } else {
        ap_return = ap_return_preg.read();
    }
}

void cornerCorrect::thread_cubieColor_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        cubieColor_V_address0 = ap_const_lv6_2F;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        cubieColor_V_address0 = ap_const_lv6_26;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        cubieColor_V_address0 = ap_const_lv6_1D;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        cubieColor_V_address0 = ap_const_lv6_14;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        cubieColor_V_address0 = ap_const_lv6_1B;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        cubieColor_V_address0 = ap_const_lv6_8;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        cubieColor_V_address0 = ap_const_lv6_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        cubieColor_V_address0 = ap_const_lv6_4;
    } else {
        cubieColor_V_address0 = "XXXXXX";
    }
}

void cornerCorrect::thread_cubieColor_V_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        cubieColor_V_address1 = ap_const_lv6_2D;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        cubieColor_V_address1 = ap_const_lv6_31;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        cubieColor_V_address1 = ap_const_lv6_28;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        cubieColor_V_address1 = ap_const_lv6_12;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        cubieColor_V_address1 = ap_const_lv6_16;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        cubieColor_V_address1 = ap_const_lv6_1F;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        cubieColor_V_address1 = ap_const_lv6_2;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        cubieColor_V_address1 = ap_const_lv6_6;
    } else {
        cubieColor_V_address1 = "XXXXXX";
    }
}

void cornerCorrect::thread_cubieColor_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)))) {
        cubieColor_V_ce0 = ap_const_logic_1;
    } else {
        cubieColor_V_ce0 = ap_const_logic_0;
    }
}

void cornerCorrect::thread_cubieColor_V_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)))) {
        cubieColor_V_ce1 = ap_const_logic_1;
    } else {
        cubieColor_V_ce1 = ap_const_logic_0;
    }
}

void cornerCorrect::thread_grp_fu_101_p2() {
    grp_fu_101_p2 = (!reg_93.read().is_01() || !cubieColor_V_q0.read().is_01())? sc_lv<1>(): sc_lv<1>(reg_93.read() == cubieColor_V_q0.read());
}

void cornerCorrect::thread_grp_fu_77_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        grp_fu_77_p0 = reg_93.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_fu_77_p0 = cubieColor_V_q0.read();
    } else {
        grp_fu_77_p0 =  (sc_lv<3>) ("XXX");
    }
}

void cornerCorrect::thread_grp_fu_77_p2() {
    grp_fu_77_p2 = (!grp_fu_77_p0.read().is_01() || !cubieColor_V_q1.read().is_01())? sc_lv<1>(): sc_lv<1>(grp_fu_77_p0.read() == cubieColor_V_q1.read());
}

void cornerCorrect::thread_grp_fu_83_p2() {
    grp_fu_83_p2 = (!reg_93.read().is_01() || !cubieColor_V_q0.read().is_01())? sc_lv<1>(): sc_lv<1>(reg_93.read() == cubieColor_V_q0.read());
}

void cornerCorrect::thread_grp_fu_88_p2() {
    grp_fu_88_p2 = (!reg_93.read().is_01() || !cubieColor_V_q0.read().is_01())? sc_lv<1>(): sc_lv<1>(reg_93.read() == cubieColor_V_q0.read());
}

void cornerCorrect::thread_sel_tmp10_fu_145_p2() {
    sel_tmp10_fu_145_p2 = (!corner_V.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(corner_V.read() == ap_const_lv3_4);
}

void cornerCorrect::thread_sel_tmp13_fu_197_p2() {
    sel_tmp13_fu_197_p2 = (tmp23_fu_192_p2.read() & tmp22_fu_188_p2.read());
}

void cornerCorrect::thread_sel_tmp15_fu_151_p2() {
    sel_tmp15_fu_151_p2 = (!corner_V.read().is_01() || !ap_const_lv3_2.is_01())? sc_lv<1>(): sc_lv<1>(corner_V.read() == ap_const_lv3_2);
}

void cornerCorrect::thread_sel_tmp17_fu_161_p2() {
    sel_tmp17_fu_161_p2 = (tmp24_fu_157_p2.read() & sel_tmp15_fu_151_p2.read());
}

void cornerCorrect::thread_sel_tmp3_fu_133_p2() {
    sel_tmp3_fu_133_p2 = (tmp19_fu_128_p2.read() & tmp_fu_123_p2.read());
}

void cornerCorrect::thread_sel_tmp5_fu_139_p2() {
    sel_tmp5_fu_139_p2 = (!corner_V.read().is_01() || !ap_const_lv3_3.is_01())? sc_lv<1>(): sc_lv<1>(corner_V.read() == ap_const_lv3_3);
}

void cornerCorrect::thread_sel_tmp8_fu_182_p2() {
    sel_tmp8_fu_182_p2 = (tmp21_fu_177_p2.read() & tmp20_fu_173_p2.read());
}

void cornerCorrect::thread_sel_tmp_fu_117_p2() {
    sel_tmp_fu_117_p2 = (!corner_V.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<1>(): sc_lv<1>(corner_V.read() == ap_const_lv3_1);
}

void cornerCorrect::thread_tmp19_fu_128_p2() {
    tmp19_fu_128_p2 = (tmp_219_reg_239.read() & grp_fu_101_p2.read());
}

void cornerCorrect::thread_tmp20_fu_173_p2() {
    tmp20_fu_173_p2 = (sel_tmp5_reg_270.read() & tmp_217_reg_229.read());
}

void cornerCorrect::thread_tmp21_fu_177_p2() {
    tmp21_fu_177_p2 = (tmp_221_reg_255.read() & grp_fu_101_p2.read());
}

void cornerCorrect::thread_tmp22_fu_188_p2() {
    tmp22_fu_188_p2 = (sel_tmp10_reg_275.read() & tmp_218_reg_234.read());
}

void cornerCorrect::thread_tmp23_fu_192_p2() {
    tmp23_fu_192_p2 = (tmp_222_reg_260.read() & tmp_225_fu_167_p2.read());
}

void cornerCorrect::thread_tmp24_fu_157_p2() {
    tmp24_fu_157_p2 = (tmp_216_reg_224.read() & tmp_220_reg_250.read());
}

void cornerCorrect::thread_tmp25_fu_203_p2() {
    tmp25_fu_203_p2 = (sel_tmp8_fu_182_p2.read() | sel_tmp3_reg_265.read());
}

void cornerCorrect::thread_tmp26_fu_208_p2() {
    tmp26_fu_208_p2 = (sel_tmp13_fu_197_p2.read() | sel_tmp17_reg_280.read());
}

void cornerCorrect::thread_tmp_220_fu_107_p2() {
    tmp_220_fu_107_p2 = (!cubieColor_V_load_157_reg_244.read().is_01() || !cubieColor_V_q0.read().is_01())? sc_lv<1>(): sc_lv<1>(cubieColor_V_load_157_reg_244.read() == cubieColor_V_q0.read());
}

void cornerCorrect::thread_tmp_221_fu_112_p2() {
    tmp_221_fu_112_p2 = (!cubieColor_V_load_157_reg_244.read().is_01() || !cubieColor_V_q1.read().is_01())? sc_lv<1>(): sc_lv<1>(cubieColor_V_load_157_reg_244.read() == cubieColor_V_q1.read());
}

void cornerCorrect::thread_tmp_225_fu_167_p2() {
    tmp_225_fu_167_p2 = (!reg_93.read().is_01() || !cubieColor_V_q1.read().is_01())? sc_lv<1>(): sc_lv<1>(reg_93.read() == cubieColor_V_q1.read());
}

void cornerCorrect::thread_tmp_fu_123_p2() {
    tmp_fu_123_p2 = (sel_tmp_fu_117_p2.read() & tmp_s_reg_219.read());
}

void cornerCorrect::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<9>) ("XXXXXXXXX");
            break;
    }
}

}

