// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module solveStage4a (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        moveCounter_V_i,
        moveCounter_V_o,
        moveCounter_V_o_ap_vld,
        moves_V_address0,
        moves_V_ce0,
        moves_V_we0,
        moves_V_d0,
        cubieColor_V_address0,
        cubieColor_V_ce0,
        cubieColor_V_we0,
        cubieColor_V_d0,
        cubieColor_V_q0,
        cubieColor_V_address1,
        cubieColor_V_ce1,
        cubieColor_V_we1,
        cubieColor_V_d1,
        cubieColor_V_q1
);

parameter    ap_ST_fsm_state1 = 63'd1;
parameter    ap_ST_fsm_state2 = 63'd2;
parameter    ap_ST_fsm_state3 = 63'd4;
parameter    ap_ST_fsm_state4 = 63'd8;
parameter    ap_ST_fsm_state5 = 63'd16;
parameter    ap_ST_fsm_state6 = 63'd32;
parameter    ap_ST_fsm_state7 = 63'd64;
parameter    ap_ST_fsm_state8 = 63'd128;
parameter    ap_ST_fsm_state9 = 63'd256;
parameter    ap_ST_fsm_state10 = 63'd512;
parameter    ap_ST_fsm_state11 = 63'd1024;
parameter    ap_ST_fsm_state12 = 63'd2048;
parameter    ap_ST_fsm_state13 = 63'd4096;
parameter    ap_ST_fsm_state14 = 63'd8192;
parameter    ap_ST_fsm_state15 = 63'd16384;
parameter    ap_ST_fsm_state16 = 63'd32768;
parameter    ap_ST_fsm_state17 = 63'd65536;
parameter    ap_ST_fsm_state18 = 63'd131072;
parameter    ap_ST_fsm_state19 = 63'd262144;
parameter    ap_ST_fsm_state20 = 63'd524288;
parameter    ap_ST_fsm_state21 = 63'd1048576;
parameter    ap_ST_fsm_state22 = 63'd2097152;
parameter    ap_ST_fsm_state23 = 63'd4194304;
parameter    ap_ST_fsm_state24 = 63'd8388608;
parameter    ap_ST_fsm_state25 = 63'd16777216;
parameter    ap_ST_fsm_state26 = 63'd33554432;
parameter    ap_ST_fsm_state27 = 63'd67108864;
parameter    ap_ST_fsm_state28 = 63'd134217728;
parameter    ap_ST_fsm_state29 = 63'd268435456;
parameter    ap_ST_fsm_state30 = 63'd536870912;
parameter    ap_ST_fsm_state31 = 63'd1073741824;
parameter    ap_ST_fsm_state32 = 63'd2147483648;
parameter    ap_ST_fsm_state33 = 63'd4294967296;
parameter    ap_ST_fsm_state34 = 63'd8589934592;
parameter    ap_ST_fsm_state35 = 63'd17179869184;
parameter    ap_ST_fsm_state36 = 63'd34359738368;
parameter    ap_ST_fsm_state37 = 63'd68719476736;
parameter    ap_ST_fsm_state38 = 63'd137438953472;
parameter    ap_ST_fsm_state39 = 63'd274877906944;
parameter    ap_ST_fsm_state40 = 63'd549755813888;
parameter    ap_ST_fsm_state41 = 63'd1099511627776;
parameter    ap_ST_fsm_state42 = 63'd2199023255552;
parameter    ap_ST_fsm_state43 = 63'd4398046511104;
parameter    ap_ST_fsm_state44 = 63'd8796093022208;
parameter    ap_ST_fsm_state45 = 63'd17592186044416;
parameter    ap_ST_fsm_state46 = 63'd35184372088832;
parameter    ap_ST_fsm_state47 = 63'd70368744177664;
parameter    ap_ST_fsm_state48 = 63'd140737488355328;
parameter    ap_ST_fsm_state49 = 63'd281474976710656;
parameter    ap_ST_fsm_state50 = 63'd562949953421312;
parameter    ap_ST_fsm_state51 = 63'd1125899906842624;
parameter    ap_ST_fsm_state52 = 63'd2251799813685248;
parameter    ap_ST_fsm_state53 = 63'd4503599627370496;
parameter    ap_ST_fsm_state54 = 63'd9007199254740992;
parameter    ap_ST_fsm_state55 = 63'd18014398509481984;
parameter    ap_ST_fsm_state56 = 63'd36028797018963968;
parameter    ap_ST_fsm_state57 = 63'd72057594037927936;
parameter    ap_ST_fsm_state58 = 63'd144115188075855872;
parameter    ap_ST_fsm_state59 = 63'd288230376151711744;
parameter    ap_ST_fsm_state60 = 63'd576460752303423488;
parameter    ap_ST_fsm_state61 = 63'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 63'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 63'd4611686018427387904;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] moveCounter_V_i;
output  [7:0] moveCounter_V_o;
output   moveCounter_V_o_ap_vld;
output  [7:0] moves_V_address0;
output   moves_V_ce0;
output   moves_V_we0;
output  [3:0] moves_V_d0;
output  [5:0] cubieColor_V_address0;
output   cubieColor_V_ce0;
output   cubieColor_V_we0;
output  [2:0] cubieColor_V_d0;
input  [2:0] cubieColor_V_q0;
output  [5:0] cubieColor_V_address1;
output   cubieColor_V_ce1;
output   cubieColor_V_we1;
output  [2:0] cubieColor_V_d1;
input  [2:0] cubieColor_V_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] moveCounter_V_o;
reg moveCounter_V_o_ap_vld;
reg[7:0] moves_V_address0;
reg moves_V_ce0;
reg moves_V_we0;
reg[3:0] moves_V_d0;
reg[5:0] cubieColor_V_address0;
reg cubieColor_V_ce0;
reg cubieColor_V_we0;
reg[2:0] cubieColor_V_d0;
reg[5:0] cubieColor_V_address1;
reg cubieColor_V_ce1;
reg cubieColor_V_we1;
reg[2:0] cubieColor_V_d1;

(* fsm_encoding = "none" *) reg   [62:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] reg_103;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state47;
reg   [2:0] reg_112;
wire    ap_CS_fsm_state48;
wire   [0:0] grp_fu_88_p2;
reg   [0:0] tmp_reg_227;
wire    ap_CS_fsm_state3;
wire   [0:0] grp_fu_93_p2;
reg   [0:0] tmp_s_reg_232;
wire   [0:0] or_cond7_fu_134_p2;
reg   [0:0] or_cond7_reg_237;
wire    ap_CS_fsm_state4;
wire   [0:0] grp_fu_118_p2;
reg   [0:0] tmp_17_reg_241;
wire   [0:0] tmp_18_fu_140_p2;
reg   [0:0] tmp_18_reg_245;
wire   [0:0] tmp_20_fu_146_p2;
reg   [0:0] tmp_20_reg_252;
wire    ap_CS_fsm_state20;
wire   [0:0] tmp_21_fu_152_p2;
reg   [0:0] tmp_21_reg_256;
wire    ap_CS_fsm_state21;
wire   [0:0] grp_fu_98_p2;
reg   [0:0] tmp_22_reg_260;
wire   [0:0] or_cond_fu_181_p2;
reg   [0:0] or_cond_reg_267;
wire    ap_CS_fsm_state49;
wire   [0:0] brmerge1_fu_210_p2;
reg   [0:0] brmerge1_reg_271;
wire    grp_turnCube_fu_61_ap_start;
wire    grp_turnCube_fu_61_ap_done;
wire    grp_turnCube_fu_61_ap_idle;
wire    grp_turnCube_fu_61_ap_ready;
reg   [3:0] grp_turnCube_fu_61_turn_V;
wire   [7:0] grp_turnCube_fu_61_moveCounter_V_o;
wire    grp_turnCube_fu_61_moveCounter_V_o_ap_vld;
wire   [7:0] grp_turnCube_fu_61_moves_V_address0;
wire    grp_turnCube_fu_61_moves_V_ce0;
wire    grp_turnCube_fu_61_moves_V_we0;
wire   [3:0] grp_turnCube_fu_61_moves_V_d0;
wire   [5:0] grp_turnCube_fu_61_cubieColor_V_address0;
wire    grp_turnCube_fu_61_cubieColor_V_ce0;
wire    grp_turnCube_fu_61_cubieColor_V_we0;
wire   [2:0] grp_turnCube_fu_61_cubieColor_V_d0;
wire   [5:0] grp_turnCube_fu_61_cubieColor_V_address1;
wire    grp_turnCube_fu_61_cubieColor_V_ce1;
wire    grp_turnCube_fu_61_cubieColor_V_we1;
wire   [2:0] grp_turnCube_fu_61_cubieColor_V_d1;
wire    grp_rotateCubeHorizontal_fu_78_ap_start;
wire    grp_rotateCubeHorizontal_fu_78_ap_done;
wire    grp_rotateCubeHorizontal_fu_78_ap_idle;
wire    grp_rotateCubeHorizontal_fu_78_ap_ready;
wire   [7:0] grp_rotateCubeHorizontal_fu_78_moveCounter_V_o;
wire    grp_rotateCubeHorizontal_fu_78_moveCounter_V_o_ap_vld;
wire   [7:0] grp_rotateCubeHorizontal_fu_78_moves_V_address0;
wire    grp_rotateCubeHorizontal_fu_78_moves_V_ce0;
wire    grp_rotateCubeHorizontal_fu_78_moves_V_we0;
wire   [3:0] grp_rotateCubeHorizontal_fu_78_moves_V_d0;
wire   [5:0] grp_rotateCubeHorizontal_fu_78_cubieColor_V_address0;
wire    grp_rotateCubeHorizontal_fu_78_cubieColor_V_ce0;
wire    grp_rotateCubeHorizontal_fu_78_cubieColor_V_we0;
wire   [2:0] grp_rotateCubeHorizontal_fu_78_cubieColor_V_d0;
wire   [5:0] grp_rotateCubeHorizontal_fu_78_cubieColor_V_address1;
wire    grp_rotateCubeHorizontal_fu_78_cubieColor_V_ce1;
wire    grp_rotateCubeHorizontal_fu_78_cubieColor_V_we1;
wire   [2:0] grp_rotateCubeHorizontal_fu_78_cubieColor_V_d1;
reg   [2:0] tmp_26_reg_52;
reg    grp_turnCube_fu_61_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state63;
reg    grp_rotateCubeHorizontal_fu_78_ap_start_reg;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state50;
wire   [0:0] or_cond1_fu_222_p2;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state46;
wire   [0:0] tmp3_fu_128_p2;
wire   [0:0] tmp2_fu_124_p2;
wire   [0:0] tmp_23_fu_158_p2;
wire   [0:0] or_cond8_fu_164_p2;
wire   [0:0] or_cond75_not_fu_169_p2;
wire   [0:0] tmp4_fu_175_p2;
wire   [0:0] notrhs_fu_193_p2;
wire   [0:0] notlhs_fu_187_p2;
wire   [0:0] tmp6_fu_205_p2;
wire   [0:0] tmp5_fu_199_p2;
wire   [0:0] tmp_27_fu_216_p2;
reg    ap_predicate_op189_call_state63;
reg    ap_block_state63_on_subcall_done;
reg   [62:0] ap_NS_fsm;
reg    ap_block_state16_on_subcall_done;
reg    ap_block_state23_on_subcall_done;
reg    ap_block_state27_on_subcall_done;
reg    ap_predicate_op144_call_state45;
reg    ap_block_state45_on_subcall_done;

// power-on initialization
initial begin
#0 ap_CS_fsm = 63'd1;
#0 grp_turnCube_fu_61_ap_start_reg = 1'b0;
#0 grp_rotateCubeHorizontal_fu_78_ap_start_reg = 1'b0;
end

turnCube grp_turnCube_fu_61(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_turnCube_fu_61_ap_start),
    .ap_done(grp_turnCube_fu_61_ap_done),
    .ap_idle(grp_turnCube_fu_61_ap_idle),
    .ap_ready(grp_turnCube_fu_61_ap_ready),
    .turn_V(grp_turnCube_fu_61_turn_V),
    .moveCounter_V_i(moveCounter_V_i),
    .moveCounter_V_o(grp_turnCube_fu_61_moveCounter_V_o),
    .moveCounter_V_o_ap_vld(grp_turnCube_fu_61_moveCounter_V_o_ap_vld),
    .moves_V_address0(grp_turnCube_fu_61_moves_V_address0),
    .moves_V_ce0(grp_turnCube_fu_61_moves_V_ce0),
    .moves_V_we0(grp_turnCube_fu_61_moves_V_we0),
    .moves_V_d0(grp_turnCube_fu_61_moves_V_d0),
    .cubieColor_V_address0(grp_turnCube_fu_61_cubieColor_V_address0),
    .cubieColor_V_ce0(grp_turnCube_fu_61_cubieColor_V_ce0),
    .cubieColor_V_we0(grp_turnCube_fu_61_cubieColor_V_we0),
    .cubieColor_V_d0(grp_turnCube_fu_61_cubieColor_V_d0),
    .cubieColor_V_q0(cubieColor_V_q0),
    .cubieColor_V_address1(grp_turnCube_fu_61_cubieColor_V_address1),
    .cubieColor_V_ce1(grp_turnCube_fu_61_cubieColor_V_ce1),
    .cubieColor_V_we1(grp_turnCube_fu_61_cubieColor_V_we1),
    .cubieColor_V_d1(grp_turnCube_fu_61_cubieColor_V_d1)
);

rotateCubeHorizontal grp_rotateCubeHorizontal_fu_78(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_rotateCubeHorizontal_fu_78_ap_start),
    .ap_done(grp_rotateCubeHorizontal_fu_78_ap_done),
    .ap_idle(grp_rotateCubeHorizontal_fu_78_ap_idle),
    .ap_ready(grp_rotateCubeHorizontal_fu_78_ap_ready),
    .moveCounter_V_i(moveCounter_V_i),
    .moveCounter_V_o(grp_rotateCubeHorizontal_fu_78_moveCounter_V_o),
    .moveCounter_V_o_ap_vld(grp_rotateCubeHorizontal_fu_78_moveCounter_V_o_ap_vld),
    .moves_V_address0(grp_rotateCubeHorizontal_fu_78_moves_V_address0),
    .moves_V_ce0(grp_rotateCubeHorizontal_fu_78_moves_V_ce0),
    .moves_V_we0(grp_rotateCubeHorizontal_fu_78_moves_V_we0),
    .moves_V_d0(grp_rotateCubeHorizontal_fu_78_moves_V_d0),
    .cubieColor_V_address0(grp_rotateCubeHorizontal_fu_78_cubieColor_V_address0),
    .cubieColor_V_ce0(grp_rotateCubeHorizontal_fu_78_cubieColor_V_ce0),
    .cubieColor_V_we0(grp_rotateCubeHorizontal_fu_78_cubieColor_V_we0),
    .cubieColor_V_d0(grp_rotateCubeHorizontal_fu_78_cubieColor_V_d0),
    .cubieColor_V_q0(cubieColor_V_q0),
    .cubieColor_V_address1(grp_rotateCubeHorizontal_fu_78_cubieColor_V_address1),
    .cubieColor_V_ce1(grp_rotateCubeHorizontal_fu_78_cubieColor_V_ce1),
    .cubieColor_V_we1(grp_rotateCubeHorizontal_fu_78_cubieColor_V_we1),
    .cubieColor_V_d1(grp_rotateCubeHorizontal_fu_78_cubieColor_V_d1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_rotateCubeHorizontal_fu_78_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | ((1'b1 == ap_CS_fsm_state50) & (or_cond1_fu_222_p2 == 1'd1)))) begin
            grp_rotateCubeHorizontal_fu_78_ap_start_reg <= 1'b1;
        end else if ((grp_rotateCubeHorizontal_fu_78_ap_ready == 1'b1)) begin
            grp_rotateCubeHorizontal_fu_78_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_turnCube_fu_61_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
            grp_turnCube_fu_61_ap_start_reg <= 1'b1;
        end else if ((grp_turnCube_fu_61_ap_ready == 1'b1)) begin
            grp_turnCube_fu_61_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        reg_103 <= cubieColor_V_q1;
    end else if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_103 <= cubieColor_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        reg_112 <= cubieColor_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        reg_112 <= cubieColor_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        if (((or_cond_fu_181_p2 == 1'd1) & (brmerge1_fu_210_p2 == 1'd0))) begin
            tmp_26_reg_52 <= reg_112;
        end else if ((or_cond_fu_181_p2 == 1'd0)) begin
            tmp_26_reg_52 <= reg_103;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state49) & (or_cond_fu_181_p2 == 1'd1))) begin
        brmerge1_reg_271 <= brmerge1_fu_210_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        or_cond7_reg_237 <= or_cond7_fu_134_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        or_cond_reg_267 <= or_cond_fu_181_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        tmp_17_reg_241 <= grp_fu_118_p2;
        tmp_18_reg_245 <= tmp_18_fu_140_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (grp_fu_118_p2 == 1'd0))) begin
        tmp_20_reg_252 <= tmp_20_fu_146_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        tmp_21_reg_256 <= tmp_21_fu_152_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        tmp_22_reg_260 <= grp_fu_98_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_reg_227 <= grp_fu_88_p2;
        tmp_s_reg_232 <= grp_fu_93_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_state63_on_subcall_done) & (1'b1 == ap_CS_fsm_state63)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state63_on_subcall_done) & (1'b1 == ap_CS_fsm_state63))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state19))) begin
        cubieColor_V_address0 = 6'd5;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state47))) begin
        cubieColor_V_address0 = 6'd7;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state2))) begin
        cubieColor_V_address0 = 6'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state46))) begin
        cubieColor_V_address0 = 6'd4;
    end else if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state25) | ((1'b1 == ap_CS_fsm_state27) & (tmp_20_reg_252 == 1'd1)) | ((1'b1 == ap_CS_fsm_state23) & (tmp_21_reg_256 == 1'd1)))) begin
        cubieColor_V_address0 = grp_rotateCubeHorizontal_fu_78_cubieColor_V_address0;
    end else if (((1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state63) & ((brmerge1_reg_271 == 1'd0) | (or_cond_reg_267 == 1'd0))) | ((1'b1 == ap_CS_fsm_state45) & (((tmp_18_reg_245 == 1'd0) & (tmp_17_reg_241 == 1'd1)) | ((tmp_18_reg_245 == 1'd1) & (tmp_17_reg_241 == 1'd0)))) | ((1'b1 == ap_CS_fsm_state16) & (or_cond7_reg_237 == 1'd0)))) begin
        cubieColor_V_address0 = grp_turnCube_fu_61_cubieColor_V_address0;
    end else begin
        cubieColor_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        cubieColor_V_address1 = 6'd1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        cubieColor_V_address1 = 6'd7;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        cubieColor_V_address1 = 6'd4;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cubieColor_V_address1 = 6'd5;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state2))) begin
        cubieColor_V_address1 = 6'd3;
    end else if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state25) | ((1'b1 == ap_CS_fsm_state27) & (tmp_20_reg_252 == 1'd1)) | ((1'b1 == ap_CS_fsm_state23) & (tmp_21_reg_256 == 1'd1)))) begin
        cubieColor_V_address1 = grp_rotateCubeHorizontal_fu_78_cubieColor_V_address1;
    end else if (((1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state63) & ((brmerge1_reg_271 == 1'd0) | (or_cond_reg_267 == 1'd0))) | ((1'b1 == ap_CS_fsm_state45) & (((tmp_18_reg_245 == 1'd0) & (tmp_17_reg_241 == 1'd1)) | ((tmp_18_reg_245 == 1'd1) & (tmp_17_reg_241 == 1'd0)))) | ((1'b1 == ap_CS_fsm_state16) & (or_cond7_reg_237 == 1'd0)))) begin
        cubieColor_V_address1 = grp_turnCube_fu_61_cubieColor_V_address1;
    end else begin
        cubieColor_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        cubieColor_V_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state25) | ((1'b1 == ap_CS_fsm_state27) & (tmp_20_reg_252 == 1'd1)) | ((1'b1 == ap_CS_fsm_state23) & (tmp_21_reg_256 == 1'd1)))) begin
        cubieColor_V_ce0 = grp_rotateCubeHorizontal_fu_78_cubieColor_V_ce0;
    end else if (((1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state63) & ((brmerge1_reg_271 == 1'd0) | (or_cond_reg_267 == 1'd0))) | ((1'b1 == ap_CS_fsm_state45) & (((tmp_18_reg_245 == 1'd0) & (tmp_17_reg_241 == 1'd1)) | ((tmp_18_reg_245 == 1'd1) & (tmp_17_reg_241 == 1'd0)))) | ((1'b1 == ap_CS_fsm_state16) & (or_cond7_reg_237 == 1'd0)))) begin
        cubieColor_V_ce0 = grp_turnCube_fu_61_cubieColor_V_ce0;
    end else begin
        cubieColor_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state2))) begin
        cubieColor_V_ce1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state25) | ((1'b1 == ap_CS_fsm_state27) & (tmp_20_reg_252 == 1'd1)) | ((1'b1 == ap_CS_fsm_state23) & (tmp_21_reg_256 == 1'd1)))) begin
        cubieColor_V_ce1 = grp_rotateCubeHorizontal_fu_78_cubieColor_V_ce1;
    end else if (((1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state63) & ((brmerge1_reg_271 == 1'd0) | (or_cond_reg_267 == 1'd0))) | ((1'b1 == ap_CS_fsm_state45) & (((tmp_18_reg_245 == 1'd0) & (tmp_17_reg_241 == 1'd1)) | ((tmp_18_reg_245 == 1'd1) & (tmp_17_reg_241 == 1'd0)))) | ((1'b1 == ap_CS_fsm_state16) & (or_cond7_reg_237 == 1'd0)))) begin
        cubieColor_V_ce1 = grp_turnCube_fu_61_cubieColor_V_ce1;
    end else begin
        cubieColor_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state25) | ((1'b1 == ap_CS_fsm_state27) & (tmp_20_reg_252 == 1'd1)) | ((1'b1 == ap_CS_fsm_state23) & (tmp_21_reg_256 == 1'd1)))) begin
        cubieColor_V_d0 = grp_rotateCubeHorizontal_fu_78_cubieColor_V_d0;
    end else if (((1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state63) & ((brmerge1_reg_271 == 1'd0) | (or_cond_reg_267 == 1'd0))) | ((1'b1 == ap_CS_fsm_state45) & (((tmp_18_reg_245 == 1'd0) & (tmp_17_reg_241 == 1'd1)) | ((tmp_18_reg_245 == 1'd1) & (tmp_17_reg_241 == 1'd0)))) | ((1'b1 == ap_CS_fsm_state16) & (or_cond7_reg_237 == 1'd0)))) begin
        cubieColor_V_d0 = grp_turnCube_fu_61_cubieColor_V_d0;
    end else begin
        cubieColor_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state25) | ((1'b1 == ap_CS_fsm_state27) & (tmp_20_reg_252 == 1'd1)) | ((1'b1 == ap_CS_fsm_state23) & (tmp_21_reg_256 == 1'd1)))) begin
        cubieColor_V_d1 = grp_rotateCubeHorizontal_fu_78_cubieColor_V_d1;
    end else if (((1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state63) & ((brmerge1_reg_271 == 1'd0) | (or_cond_reg_267 == 1'd0))) | ((1'b1 == ap_CS_fsm_state45) & (((tmp_18_reg_245 == 1'd0) & (tmp_17_reg_241 == 1'd1)) | ((tmp_18_reg_245 == 1'd1) & (tmp_17_reg_241 == 1'd0)))) | ((1'b1 == ap_CS_fsm_state16) & (or_cond7_reg_237 == 1'd0)))) begin
        cubieColor_V_d1 = grp_turnCube_fu_61_cubieColor_V_d1;
    end else begin
        cubieColor_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state25) | ((1'b1 == ap_CS_fsm_state27) & (tmp_20_reg_252 == 1'd1)) | ((1'b1 == ap_CS_fsm_state23) & (tmp_21_reg_256 == 1'd1)))) begin
        cubieColor_V_we0 = grp_rotateCubeHorizontal_fu_78_cubieColor_V_we0;
    end else if (((1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state63) & ((brmerge1_reg_271 == 1'd0) | (or_cond_reg_267 == 1'd0))) | ((1'b1 == ap_CS_fsm_state45) & (((tmp_18_reg_245 == 1'd0) & (tmp_17_reg_241 == 1'd1)) | ((tmp_18_reg_245 == 1'd1) & (tmp_17_reg_241 == 1'd0)))) | ((1'b1 == ap_CS_fsm_state16) & (or_cond7_reg_237 == 1'd0)))) begin
        cubieColor_V_we0 = grp_turnCube_fu_61_cubieColor_V_we0;
    end else begin
        cubieColor_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state25) | ((1'b1 == ap_CS_fsm_state27) & (tmp_20_reg_252 == 1'd1)) | ((1'b1 == ap_CS_fsm_state23) & (tmp_21_reg_256 == 1'd1)))) begin
        cubieColor_V_we1 = grp_rotateCubeHorizontal_fu_78_cubieColor_V_we1;
    end else if (((1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state63) & ((brmerge1_reg_271 == 1'd0) | (or_cond_reg_267 == 1'd0))) | ((1'b1 == ap_CS_fsm_state45) & (((tmp_18_reg_245 == 1'd0) & (tmp_17_reg_241 == 1'd1)) | ((tmp_18_reg_245 == 1'd1) & (tmp_17_reg_241 == 1'd0)))) | ((1'b1 == ap_CS_fsm_state16) & (or_cond7_reg_237 == 1'd0)))) begin
        cubieColor_V_we1 = grp_turnCube_fu_61_cubieColor_V_we1;
    end else begin
        cubieColor_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state63) & ((brmerge1_reg_271 == 1'd0) | (or_cond_reg_267 == 1'd0))) | ((1'b1 == ap_CS_fsm_state45) & (((tmp_18_reg_245 == 1'd0) & (tmp_17_reg_241 == 1'd1)) | ((tmp_18_reg_245 == 1'd1) & (tmp_17_reg_241 == 1'd0)))) | ((1'b1 == ap_CS_fsm_state16) & (or_cond7_reg_237 == 1'd0)))) begin
        grp_turnCube_fu_61_turn_V = 4'd7;
    end else if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state14))) begin
        grp_turnCube_fu_61_turn_V = 4'd11;
    end else if (((1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_turnCube_fu_61_turn_V = 4'd1;
    end else if (((1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_turnCube_fu_61_turn_V = 4'd10;
    end else if (((1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_turnCube_fu_61_turn_V = 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_turnCube_fu_61_turn_V = 4'd6;
    end else begin
        grp_turnCube_fu_61_turn_V = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state51) & (grp_rotateCubeHorizontal_fu_78_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state33) & (grp_rotateCubeHorizontal_fu_78_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state31) & (grp_rotateCubeHorizontal_fu_78_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state29) & (grp_rotateCubeHorizontal_fu_78_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state27) & (grp_rotateCubeHorizontal_fu_78_moveCounter_V_o_ap_vld == 1'b1) & (tmp_20_reg_252 == 1'd1)) | ((1'b1 == ap_CS_fsm_state25) & (grp_rotateCubeHorizontal_fu_78_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state23) & (grp_rotateCubeHorizontal_fu_78_moveCounter_V_o_ap_vld == 1'b1) & (tmp_21_reg_256 == 1'd1)))) begin
        moveCounter_V_o = grp_rotateCubeHorizontal_fu_78_moveCounter_V_o;
    end else if ((((1'b1 == ap_CS_fsm_state63) & (grp_turnCube_fu_61_moveCounter_V_o_ap_vld == 1'b1) & ((brmerge1_reg_271 == 1'd0) | (or_cond_reg_267 == 1'd0))) | ((1'b1 == ap_CS_fsm_state61) & (grp_turnCube_fu_61_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state59) & (grp_turnCube_fu_61_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state57) & (grp_turnCube_fu_61_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state55) & (grp_turnCube_fu_61_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state53) & (grp_turnCube_fu_61_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state45) & (grp_turnCube_fu_61_moveCounter_V_o_ap_vld == 1'b1) & (((tmp_18_reg_245 == 1'd0) & (tmp_17_reg_241 == 1'd1)) | ((tmp_18_reg_245 == 1'd1) & (tmp_17_reg_241 == 1'd0)))) | ((1'b1 == ap_CS_fsm_state43) & (grp_turnCube_fu_61_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state41) & (grp_turnCube_fu_61_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state39) & (grp_turnCube_fu_61_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state37) & (grp_turnCube_fu_61_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state35) & (grp_turnCube_fu_61_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state16) & (grp_turnCube_fu_61_moveCounter_V_o_ap_vld == 1'b1) & (or_cond7_reg_237 == 1'd0)) | ((1'b1 == ap_CS_fsm_state14) & (grp_turnCube_fu_61_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state12) & (grp_turnCube_fu_61_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state10) & (grp_turnCube_fu_61_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state8) & (grp_turnCube_fu_61_moveCounter_V_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state6) & (grp_turnCube_fu_61_moveCounter_V_o_ap_vld == 1'b1)))) begin
        moveCounter_V_o = grp_turnCube_fu_61_moveCounter_V_o;
    end else begin
        moveCounter_V_o = moveCounter_V_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state25) | ((1'b1 == ap_CS_fsm_state27) & (tmp_20_reg_252 == 1'd1)) | ((1'b1 == ap_CS_fsm_state23) & (tmp_21_reg_256 == 1'd1)))) begin
        moveCounter_V_o_ap_vld = grp_rotateCubeHorizontal_fu_78_moveCounter_V_o_ap_vld;
    end else if (((1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state63) & ((brmerge1_reg_271 == 1'd0) | (or_cond_reg_267 == 1'd0))) | ((1'b1 == ap_CS_fsm_state45) & (((tmp_18_reg_245 == 1'd0) & (tmp_17_reg_241 == 1'd1)) | ((tmp_18_reg_245 == 1'd1) & (tmp_17_reg_241 == 1'd0)))) | ((1'b1 == ap_CS_fsm_state16) & (or_cond7_reg_237 == 1'd0)))) begin
        moveCounter_V_o_ap_vld = grp_turnCube_fu_61_moveCounter_V_o_ap_vld;
    end else begin
        moveCounter_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state25) | ((1'b1 == ap_CS_fsm_state27) & (tmp_20_reg_252 == 1'd1)) | ((1'b1 == ap_CS_fsm_state23) & (tmp_21_reg_256 == 1'd1)))) begin
        moves_V_address0 = grp_rotateCubeHorizontal_fu_78_moves_V_address0;
    end else if (((1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state63) & ((brmerge1_reg_271 == 1'd0) | (or_cond_reg_267 == 1'd0))) | ((1'b1 == ap_CS_fsm_state45) & (((tmp_18_reg_245 == 1'd0) & (tmp_17_reg_241 == 1'd1)) | ((tmp_18_reg_245 == 1'd1) & (tmp_17_reg_241 == 1'd0)))) | ((1'b1 == ap_CS_fsm_state16) & (or_cond7_reg_237 == 1'd0)))) begin
        moves_V_address0 = grp_turnCube_fu_61_moves_V_address0;
    end else begin
        moves_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state25) | ((1'b1 == ap_CS_fsm_state27) & (tmp_20_reg_252 == 1'd1)) | ((1'b1 == ap_CS_fsm_state23) & (tmp_21_reg_256 == 1'd1)))) begin
        moves_V_ce0 = grp_rotateCubeHorizontal_fu_78_moves_V_ce0;
    end else if (((1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state63) & ((brmerge1_reg_271 == 1'd0) | (or_cond_reg_267 == 1'd0))) | ((1'b1 == ap_CS_fsm_state45) & (((tmp_18_reg_245 == 1'd0) & (tmp_17_reg_241 == 1'd1)) | ((tmp_18_reg_245 == 1'd1) & (tmp_17_reg_241 == 1'd0)))) | ((1'b1 == ap_CS_fsm_state16) & (or_cond7_reg_237 == 1'd0)))) begin
        moves_V_ce0 = grp_turnCube_fu_61_moves_V_ce0;
    end else begin
        moves_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state25) | ((1'b1 == ap_CS_fsm_state27) & (tmp_20_reg_252 == 1'd1)) | ((1'b1 == ap_CS_fsm_state23) & (tmp_21_reg_256 == 1'd1)))) begin
        moves_V_d0 = grp_rotateCubeHorizontal_fu_78_moves_V_d0;
    end else if (((1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state63) & ((brmerge1_reg_271 == 1'd0) | (or_cond_reg_267 == 1'd0))) | ((1'b1 == ap_CS_fsm_state45) & (((tmp_18_reg_245 == 1'd0) & (tmp_17_reg_241 == 1'd1)) | ((tmp_18_reg_245 == 1'd1) & (tmp_17_reg_241 == 1'd0)))) | ((1'b1 == ap_CS_fsm_state16) & (or_cond7_reg_237 == 1'd0)))) begin
        moves_V_d0 = grp_turnCube_fu_61_moves_V_d0;
    end else begin
        moves_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state25) | ((1'b1 == ap_CS_fsm_state27) & (tmp_20_reg_252 == 1'd1)) | ((1'b1 == ap_CS_fsm_state23) & (tmp_21_reg_256 == 1'd1)))) begin
        moves_V_we0 = grp_rotateCubeHorizontal_fu_78_moves_V_we0;
    end else if (((1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state63) & ((brmerge1_reg_271 == 1'd0) | (or_cond_reg_267 == 1'd0))) | ((1'b1 == ap_CS_fsm_state45) & (((tmp_18_reg_245 == 1'd0) & (tmp_17_reg_241 == 1'd1)) | ((tmp_18_reg_245 == 1'd1) & (tmp_17_reg_241 == 1'd0)))) | ((1'b1 == ap_CS_fsm_state16) & (or_cond7_reg_237 == 1'd0)))) begin
        moves_V_we0 = grp_turnCube_fu_61_moves_V_we0;
    end else begin
        moves_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (or_cond7_fu_134_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (grp_turnCube_fu_61_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (grp_turnCube_fu_61_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (grp_turnCube_fu_61_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (grp_turnCube_fu_61_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (grp_turnCube_fu_61_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b0 == ap_block_state16_on_subcall_done) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & (((tmp_18_fu_140_p2 == 1'd1) & (grp_fu_118_p2 == 1'd1)) | ((tmp_18_fu_140_p2 == 1'd0) & (grp_fu_118_p2 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (tmp_20_fu_146_p2 == 1'd1) & (grp_fu_118_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else if (((1'b1 == ap_CS_fsm_state20) & (tmp_20_fu_146_p2 == 1'd0) & (grp_fu_118_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (tmp_21_fu_152_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((1'b0 == ap_block_state23_on_subcall_done) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((grp_rotateCubeHorizontal_fu_78_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            if (((1'b0 == ap_block_state27_on_subcall_done) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            if (((grp_rotateCubeHorizontal_fu_78_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            if (((grp_rotateCubeHorizontal_fu_78_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            if (((grp_rotateCubeHorizontal_fu_78_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            if (((1'b1 == ap_CS_fsm_state35) & (grp_turnCube_fu_61_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            if (((1'b1 == ap_CS_fsm_state37) & (grp_turnCube_fu_61_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            if (((1'b1 == ap_CS_fsm_state39) & (grp_turnCube_fu_61_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            if (((1'b1 == ap_CS_fsm_state41) & (grp_turnCube_fu_61_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            if (((1'b1 == ap_CS_fsm_state43) & (grp_turnCube_fu_61_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            if (((1'b0 == ap_block_state45_on_subcall_done) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            if (((1'b1 == ap_CS_fsm_state49) & (brmerge1_fu_210_p2 == 1'd1) & (or_cond_fu_181_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state50 : begin
            if (((1'b1 == ap_CS_fsm_state50) & (or_cond1_fu_222_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state51 : begin
            if (((grp_rotateCubeHorizontal_fu_78_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state51))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            if (((1'b1 == ap_CS_fsm_state53) & (grp_turnCube_fu_61_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            if (((1'b1 == ap_CS_fsm_state55) & (grp_turnCube_fu_61_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            if (((1'b1 == ap_CS_fsm_state57) & (grp_turnCube_fu_61_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            if (((1'b1 == ap_CS_fsm_state59) & (grp_turnCube_fu_61_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            if (((1'b1 == ap_CS_fsm_state61) & (grp_turnCube_fu_61_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            if (((1'b0 == ap_block_state63_on_subcall_done) & (1'b1 == ap_CS_fsm_state63))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state16_on_subcall_done = ((grp_turnCube_fu_61_ap_done == 1'b0) & (or_cond7_reg_237 == 1'd0));
end

always @ (*) begin
    ap_block_state23_on_subcall_done = ((grp_rotateCubeHorizontal_fu_78_ap_done == 1'b0) & (tmp_21_reg_256 == 1'd1));
end

always @ (*) begin
    ap_block_state27_on_subcall_done = ((grp_rotateCubeHorizontal_fu_78_ap_done == 1'b0) & (tmp_20_reg_252 == 1'd1));
end

always @ (*) begin
    ap_block_state45_on_subcall_done = ((ap_predicate_op144_call_state45 == 1'b1) & (grp_turnCube_fu_61_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state63_on_subcall_done = ((ap_predicate_op189_call_state63 == 1'b1) & (grp_turnCube_fu_61_ap_done == 1'b0));
end

always @ (*) begin
    ap_predicate_op144_call_state45 = (((tmp_18_reg_245 == 1'd0) & (tmp_17_reg_241 == 1'd1)) | ((tmp_18_reg_245 == 1'd1) & (tmp_17_reg_241 == 1'd0)));
end

always @ (*) begin
    ap_predicate_op189_call_state63 = ((brmerge1_reg_271 == 1'd0) | (or_cond_reg_267 == 1'd0));
end

assign brmerge1_fu_210_p2 = (tmp6_fu_205_p2 | tmp5_fu_199_p2);

assign grp_fu_118_p2 = ((reg_103 == cubieColor_V_q0) ? 1'b1 : 1'b0);

assign grp_fu_88_p2 = ((reg_103 == cubieColor_V_q0) ? 1'b1 : 1'b0);

assign grp_fu_93_p2 = ((reg_103 == cubieColor_V_q1) ? 1'b1 : 1'b0);

assign grp_fu_98_p2 = ((reg_103 == cubieColor_V_q1) ? 1'b1 : 1'b0);

assign grp_rotateCubeHorizontal_fu_78_ap_start = grp_rotateCubeHorizontal_fu_78_ap_start_reg;

assign grp_turnCube_fu_61_ap_start = grp_turnCube_fu_61_ap_start_reg;

assign notlhs_fu_187_p2 = ((reg_103 != cubieColor_V_q1) ? 1'b1 : 1'b0);

assign notrhs_fu_193_p2 = ((reg_103 != cubieColor_V_q0) ? 1'b1 : 1'b0);

assign or_cond1_fu_222_p2 = (tmp_27_fu_216_p2 & tmp_22_reg_260);

assign or_cond75_not_fu_169_p2 = (or_cond8_fu_164_p2 ^ 1'd1);

assign or_cond7_fu_134_p2 = (tmp3_fu_128_p2 | tmp2_fu_124_p2);

assign or_cond8_fu_164_p2 = (tmp_23_fu_158_p2 & tmp_22_reg_260);

assign or_cond_fu_181_p2 = (tmp4_fu_175_p2 | grp_fu_98_p2);

assign tmp2_fu_124_p2 = (tmp_s_reg_232 | tmp_reg_227);

assign tmp3_fu_128_p2 = (grp_fu_93_p2 | grp_fu_88_p2);

assign tmp4_fu_175_p2 = (or_cond75_not_fu_169_p2 | grp_fu_118_p2);

assign tmp5_fu_199_p2 = (notrhs_fu_193_p2 | notlhs_fu_187_p2);

assign tmp6_fu_205_p2 = (tmp_23_fu_158_p2 | tmp_22_reg_260);

assign tmp_18_fu_140_p2 = ((reg_103 == cubieColor_V_q1) ? 1'b1 : 1'b0);

assign tmp_20_fu_146_p2 = ((cubieColor_V_q0 == reg_112) ? 1'b1 : 1'b0);

assign tmp_21_fu_152_p2 = ((cubieColor_V_q1 == reg_112) ? 1'b1 : 1'b0);

assign tmp_23_fu_158_p2 = ((reg_103 == reg_112) ? 1'b1 : 1'b0);

assign tmp_27_fu_216_p2 = ((reg_103 == tmp_26_reg_52) ? 1'b1 : 1'b0);

endmodule //solveStage4a
