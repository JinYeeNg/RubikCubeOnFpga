// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cornerCorrect (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        corner_V,
        cubieColor_V_address0,
        cubieColor_V_ce0,
        cubieColor_V_q0,
        cubieColor_V_address1,
        cubieColor_V_ce1,
        cubieColor_V_q1,
        ap_return
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [2:0] corner_V;
output  [5:0] cubieColor_V_address0;
output   cubieColor_V_ce0;
input  [2:0] cubieColor_V_q0;
output  [5:0] cubieColor_V_address1;
output   cubieColor_V_ce1;
input  [2:0] cubieColor_V_q1;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] cubieColor_V_address0;
reg cubieColor_V_ce0;
reg[5:0] cubieColor_V_address1;
reg cubieColor_V_ce1;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] reg_93;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire   [0:0] grp_fu_77_p2;
reg   [0:0] tmp_s_reg_219;
wire   [0:0] grp_fu_83_p2;
reg   [0:0] tmp_216_reg_224;
wire    ap_CS_fsm_state3;
reg   [0:0] tmp_217_reg_229;
reg   [0:0] tmp_218_reg_234;
wire   [0:0] grp_fu_88_p2;
reg   [0:0] tmp_219_reg_239;
wire    ap_CS_fsm_state5;
reg   [2:0] cubieColor_V_load_157_reg_244;
wire   [0:0] tmp_220_fu_107_p2;
reg   [0:0] tmp_220_reg_250;
wire    ap_CS_fsm_state6;
wire   [0:0] tmp_221_fu_112_p2;
reg   [0:0] tmp_221_reg_255;
reg   [0:0] tmp_222_reg_260;
wire   [0:0] sel_tmp3_fu_133_p2;
reg   [0:0] sel_tmp3_reg_265;
wire   [0:0] sel_tmp5_fu_139_p2;
reg   [0:0] sel_tmp5_reg_270;
wire   [0:0] sel_tmp10_fu_145_p2;
reg   [0:0] sel_tmp10_reg_275;
wire   [0:0] sel_tmp17_fu_161_p2;
reg   [0:0] sel_tmp17_reg_280;
reg   [2:0] grp_fu_77_p0;
wire    ap_CS_fsm_state9;
wire   [0:0] sel_tmp_fu_117_p2;
wire   [0:0] grp_fu_101_p2;
wire   [0:0] tmp19_fu_128_p2;
wire   [0:0] tmp_fu_123_p2;
wire   [0:0] tmp24_fu_157_p2;
wire   [0:0] sel_tmp15_fu_151_p2;
wire   [0:0] tmp21_fu_177_p2;
wire   [0:0] tmp20_fu_173_p2;
wire   [0:0] tmp_225_fu_167_p2;
wire   [0:0] tmp23_fu_192_p2;
wire   [0:0] tmp22_fu_188_p2;
wire   [0:0] sel_tmp8_fu_182_p2;
wire   [0:0] sel_tmp13_fu_197_p2;
wire   [0:0] tmp26_fu_208_p2;
wire   [0:0] tmp25_fu_203_p2;
wire   [0:0] agg_result_V_fu_213_p2;
reg   [0:0] ap_return_preg;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_return_preg = 1'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_return_preg <= agg_result_V_fu_213_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_93 <= cubieColor_V_q1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        reg_93 <= cubieColor_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cubieColor_V_load_157_reg_244 <= cubieColor_V_q1;
        tmp_219_reg_239 <= grp_fu_88_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sel_tmp10_reg_275 <= sel_tmp10_fu_145_p2;
        sel_tmp17_reg_280 <= sel_tmp17_fu_161_p2;
        sel_tmp3_reg_265 <= sel_tmp3_fu_133_p2;
        sel_tmp5_reg_270 <= sel_tmp5_fu_139_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_216_reg_224 <= grp_fu_83_p2;
        tmp_217_reg_229 <= grp_fu_77_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_218_reg_234 <= grp_fu_83_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_220_reg_250 <= tmp_220_fu_107_p2;
        tmp_221_reg_255 <= tmp_221_fu_112_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_222_reg_260 <= grp_fu_88_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_s_reg_219 <= grp_fu_77_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_return = agg_result_V_fu_213_p2;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cubieColor_V_address0 = 6'd47;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        cubieColor_V_address0 = 6'd38;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        cubieColor_V_address0 = 6'd29;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        cubieColor_V_address0 = 6'd20;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        cubieColor_V_address0 = 6'd27;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cubieColor_V_address0 = 6'd8;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        cubieColor_V_address0 = 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        cubieColor_V_address0 = 6'd4;
    end else begin
        cubieColor_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cubieColor_V_address1 = 6'd45;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        cubieColor_V_address1 = 6'd49;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        cubieColor_V_address1 = 6'd40;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        cubieColor_V_address1 = 6'd18;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        cubieColor_V_address1 = 6'd22;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cubieColor_V_address1 = 6'd31;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        cubieColor_V_address1 = 6'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        cubieColor_V_address1 = 6'd6;
    end else begin
        cubieColor_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        cubieColor_V_ce0 = 1'b1;
    end else begin
        cubieColor_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        cubieColor_V_ce1 = 1'b1;
    end else begin
        cubieColor_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_77_p0 = reg_93;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_77_p0 = cubieColor_V_q0;
    end else begin
        grp_fu_77_p0 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_V_fu_213_p2 = (tmp26_fu_208_p2 | tmp25_fu_203_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_fu_101_p2 = ((reg_93 == cubieColor_V_q0) ? 1'b1 : 1'b0);

assign grp_fu_77_p2 = ((grp_fu_77_p0 == cubieColor_V_q1) ? 1'b1 : 1'b0);

assign grp_fu_83_p2 = ((reg_93 == cubieColor_V_q0) ? 1'b1 : 1'b0);

assign grp_fu_88_p2 = ((reg_93 == cubieColor_V_q0) ? 1'b1 : 1'b0);

assign sel_tmp10_fu_145_p2 = ((corner_V == 3'd4) ? 1'b1 : 1'b0);

assign sel_tmp13_fu_197_p2 = (tmp23_fu_192_p2 & tmp22_fu_188_p2);

assign sel_tmp15_fu_151_p2 = ((corner_V == 3'd2) ? 1'b1 : 1'b0);

assign sel_tmp17_fu_161_p2 = (tmp24_fu_157_p2 & sel_tmp15_fu_151_p2);

assign sel_tmp3_fu_133_p2 = (tmp_fu_123_p2 & tmp19_fu_128_p2);

assign sel_tmp5_fu_139_p2 = ((corner_V == 3'd3) ? 1'b1 : 1'b0);

assign sel_tmp8_fu_182_p2 = (tmp21_fu_177_p2 & tmp20_fu_173_p2);

assign sel_tmp_fu_117_p2 = ((corner_V == 3'd1) ? 1'b1 : 1'b0);

assign tmp19_fu_128_p2 = (tmp_219_reg_239 & grp_fu_101_p2);

assign tmp20_fu_173_p2 = (tmp_217_reg_229 & sel_tmp5_reg_270);

assign tmp21_fu_177_p2 = (tmp_221_reg_255 & grp_fu_101_p2);

assign tmp22_fu_188_p2 = (tmp_218_reg_234 & sel_tmp10_reg_275);

assign tmp23_fu_192_p2 = (tmp_225_fu_167_p2 & tmp_222_reg_260);

assign tmp24_fu_157_p2 = (tmp_220_reg_250 & tmp_216_reg_224);

assign tmp25_fu_203_p2 = (sel_tmp8_fu_182_p2 | sel_tmp3_reg_265);

assign tmp26_fu_208_p2 = (sel_tmp17_reg_280 | sel_tmp13_fu_197_p2);

assign tmp_220_fu_107_p2 = ((cubieColor_V_load_157_reg_244 == cubieColor_V_q0) ? 1'b1 : 1'b0);

assign tmp_221_fu_112_p2 = ((cubieColor_V_load_157_reg_244 == cubieColor_V_q1) ? 1'b1 : 1'b0);

assign tmp_225_fu_167_p2 = ((reg_93 == cubieColor_V_q1) ? 1'b1 : 1'b0);

assign tmp_fu_123_p2 = (tmp_s_reg_219 & sel_tmp_fu_117_p2);

endmodule //cornerCorrect
